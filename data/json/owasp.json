[
    {
        "title": "Broken Access Control",
        "link": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "content": "Moving up from the fifth position, 94% of applications were tested for some form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included are CWE-200: Exposure of Sensitive Information to an Unauthorized Actor, CWE-201: Insertion of Sensitive Information Into Sent Data, and CWE-352: Cross-Site Request Forgery.\nDescription\nAccess control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. Common access control vulnerabilities include:\n* Violation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone.\n* Bypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests.\n* Permitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references)\n* Accessing API with missing access controls for POST, PUT and DELETE.\n* Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user.\n* Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation.\n* CORS misconfiguration allows API access from unauthorized/untrusted origins.\n* Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user.\nHow to Prevent\nAccess control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata.\n* Except for public resources, deny by default.\n* Implement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.\n* Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record.\n* Unique application business limit requirements should be enforced by domain models.\n* Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots.\n* Log access control failures, alert admins when appropriate (e.g., repeated failures).\n* Rate limit API and controller access to minimize the harm from automated attack tooling.\n* Stateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to follow the OAuth standards to revoke access.\nDevelopers and QA staff should include functional access control unit and integration tests.\nExample Attack Scenarios\nScenario #1: The application uses unverified data in a SQL call that is accessing account information:\npstmt.setString(1, request.getParameter(\"acct\"));\nResultSet results = pstmt.executeQuery( );\nAn attacker simply modifies the browser's 'acct' parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account.\nhttps://example.com/app/accountInfo?acct=notmyacct\nScenario #2: An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page.\nhttps://example.com/app/getappInfo\nhttps://example.com/app/admin_getappInfo\nIf an unauthenticated user can access either page, it's a flaw. If a non-admin can access the admin page, this is a flaw.",
        "category": "Pentesting Web"
    },
    {
        "title": "Cryptographic Failures",
        "link": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "content": "Shifting up one position to #2, previously known as Sensitive Data Exposure, which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included are CWE-259: Use of Hard-coded Password, CWE-327: Broken or Risky Crypto Algorithm, and CWE-331 Insufficient Entropy.\nDescription\nThe first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data:\n* Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems.\n* Are any old or weak cryptographic algorithms or protocols used either by default or in older code?\n* Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories?\n* Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing?\n* Is the received server certificate and the trust chain properly validated?\n* Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate?\n* Are passwords being used as cryptographic keys in absence of a password base key derivation function?\n* Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability?\n* Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed?\n* Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use?\n* Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks?\nSee ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)\nHow to Prevent\nDo the following, at a minimum, and consult the references:\n* Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.\n* Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.\n* Make sure to encrypt all sensitive data at rest.\n* Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.\n* Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).\n* Disable caching for response that contain sensitive data.\n* Apply required security controls as per the data classification.\n* Do not use legacy protocols such as FTP and SMTP for transporting sensitive data.\n* Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.\n* Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key.\n* Always use authenticated encryption instead of just encryption.\n* Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function.\n* Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security.\n* Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 .\n* Verify independently the effectiveness of configuration and settings.\nExample Attack Scenarios\nScenario #1: An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text.\nScenario #2: A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer.\nScenario #3: The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted.",
        "category": "Pentesting Web"
    },
    {
        "title": "Injection",
        "link": "https://owasp.org/Top10/A03_2021-Injection/",
        "content": "Injection slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurrences. Notable Common Weakness Enumerations (CWEs) included are CWE-79: Cross-site Scripting, CWE-89: SQL Injection, and CWE-73: External Control of File Name or Path.\nDescription\nAn application is vulnerable to attack when:\n* User-supplied data is not validated, filtered, or sanitized by the application.\n* Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter.\n* Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records.\n* Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures.\nSome of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include static (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CD pipeline to identify introduced injection flaws before production deployment.\nHow to Prevent\nPreventing injection requires keeping data separate from commands and queries:\n* The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs).Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec().\n* Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications.\n* For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter.Note: SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software.\n* Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.\nExample Attack Scenarios\nScenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:\nString query = \"SELECT \\* FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\";\nScenario #2: Similarly, an application’s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)):\nQuery HQLQuery = session.createQuery(\"FROM accounts WHERE custID='\" + request.getParameter(\"id\") + \"'\");\nIn both cases, the attacker modifies the ‘id’ parameter value in their browser to send: ' UNION SLEEP(10);--. For example:\nhttp://example.com/app/accountView?id=' UNION SELECT SLEEP(10);--\nThis changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures.",
        "category": "Pentesting Web"
    },
    {
        "title": "Insecure Design",
        "link": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "content": "A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond \"shift-left\" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) include CWE-209: Generation of Error Message Containing Sensitive Information, CWE-256: Unprotected Storage of Credentials, CWE-501: Trust Boundary Violation, and CWE-522: Insufficiently Protected Credentials.\nDescription\nInsecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.” Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.\nRequirements and Resource Management\nCollect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.\nSecure Design\nSecure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.\nSecure Development Lifecycle\nSecure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the OWASP Software Assurance Maturity Model (SAMM) to help structure your secure software development efforts.\nHow to Prevent\n* Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls\n* Establish and use a library of secure design patterns or paved road ready to use components\n* Use threat modeling for critical authentication, access control, business logic, and key flows\n* Integrate security language and controls into user stories\n* Integrate plausibility checks at each tier of your application (from frontend to backend)\n* Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases and misuse-cases for each tier of your application.\n* Segregate tier layers on the system and network layers depending on the exposure and protection needs\n* Segregate tenants robustly by design throughout all tiers\n* Limit resource consumption by user or service\nExample Attack Scenarios\nScenario #1: A credential recovery workflow might include “questions and answers,” which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design.\nScenario #2: A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income.\nScenario #3: A retail chain’s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions.",
        "category": "Pentesting Web"
    },
    {
        "title": "Security Misconfiguration",
        "link": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "content": "Moving up from #6 in the previous edition, 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurrences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. Notable CWEs included are CWE-16 Configuration and CWE-611 Improper Restriction of XML External Entity Reference.\nDescription\nThe application might be vulnerable if the application is:\n* Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services.\n* Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges).\n* Default accounts and their passwords are still enabled and unchanged.\n* Error handling reveals stack traces or other overly informative error messages to users.\n* For upgraded systems, the latest security features are disabled or not configured securely.\n* The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values.\n* The server does not send security headers or directives, or they are not set to secure values.\n* The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components).\nWithout a concerted, repeatable application security configuration process, systems are at a higher risk.\nHow to Prevent\nSecure installation processes should be implemented, including:\n* A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment.\n* A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks.\n* A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see A06:2021-Vulnerable and Outdated Components). Review cloud storage permissions (e.g., S3 bucket permissions).\n* A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs).\n* Sending security directives to clients, e.g., Security Headers.\n* An automated process to verify the effectiveness of the configurations and settings in all environments.\nExample Attack Scenarios\nScenario #1: The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren't changed. In that case, the attacker logs in with default passwords and takes over.\nScenario #2: Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application.\nScenario #3: The application server's configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable.\nScenario #4: A cloud service provider (CSP) has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed.",
        "category": "Pentesting Web"
    },
    {
        "title": "Vulnerable and Outdated Components",
        "link": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
        "content": "It was #2 from the Top 10 community survey but also had enough data to make the Top 10 via data. Vulnerable Components are a known issue that we struggle to test and assess risk and is the only category to not have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploits/impact weight of 5.0 is used. Notable CWEs included are CWE-1104: Use of Unmaintained Third-Party Components and the two CWEs from Top 10 2013 and 2017.\nDescription\nYou are likely vulnerable:\n* If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies.\n* If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries.\n* If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use.\n* If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities.\n* If software developers do not test the compatibility of updated, upgraded, or patched libraries.\n* If you do not secure the components’ configurations (see A05:2021-Security Misconfiguration).\nHow to Prevent\nThere should be a patch management process in place to:\n* Remove unused dependencies, unnecessary features, components, files, and documentation.\n* Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use.\n* Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures).\n* Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue.\nEvery organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio.\nExample Attack Scenarios\nScenario #1: Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are:\n* CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches.\n* While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices).\nThere are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014.",
        "category": "Pentesting Web"
    },
    {
        "title": "Identification and Authentication Failures",
        "link": "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "content": "Previously known as Broken Authentication, this category slid down from the second position and now includes Common Weakness Enumerations (CWEs) related to identification failures. Notable CWEs included are CWE-297: Improper Validation of Certificate with Host Mismatch, CWE-287: Improper Authentication, and CWE-384: Session Fixation.\nDescription\nConfirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:\n* Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.\n* Permits brute force or other automated attacks.\n* Permits default, weak, or well-known passwords, such as \"Password1\" or \"admin/admin\".\n* Uses weak or ineffective credential recovery and forgot-password processes, such as \"knowledge-based answers,\" which cannot be made safe.\n* Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures).\n* Has missing or ineffective multi-factor authentication.\n* Exposes session identifier in the URL.\n* Reuse session identifier after successful login.\n* Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.\nHow to Prevent\n* Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks.\n* Do not ship or deploy with any default credentials, particularly for admin users.\n* Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list.\n* Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b's guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies.\n* Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes.\n* Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected.\n* Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts.\nExample Attack Scenarios\nScenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid.\nScenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication.\nScenario #3: Application session timeouts aren't set correctly. A user uses a public computer to access an application. Instead of selecting \"logout,\" the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated.",
        "category": "Pentesting Web"
    },
    {
        "title": "Software and Data Integrity Failures",
        "link": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "content": "A new category for 2021 focuses on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data. Notable Common Weakness Enumerations (CWEs) include CWE-829: Inclusion of Functionality from Untrusted Control Sphere, CWE-494: Download of Code Without Integrity Check, and CWE-502: Deserialization of Untrusted Data.\nDescription\nSoftware and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization.\nHow to Prevent\n* Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered.\n* Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted.\n* Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities\n* Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline.\n* Ensure that your CI/CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes.\n* Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data\nExample Attack Scenarios\nScenario #1 Update without signing: Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out.\nScenario #2 SolarWinds malicious update: Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history.\nScenario #3 Insecure Deserialization: A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the \"rO0\" Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server.\n* [OWASP Cheat Sheet: Software Supply Chain Security](Coming Soon)\n* [OWASP Cheat Sheet: Secure build and deployment](Coming Soon)",
        "category": "Pentesting Web"
    },
    {
        "title": "Security Logging and Monitoring Failures",
        "link": "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "content": "Security logging and monitoring came from the Top 10 community survey (#3), up slightly from the tenth position in the OWASP Top 10 2017. Logging and monitoring can be challenging to test, often involving interviews or asking if attacks were detected during a penetration test. There isn't much CVE/CVSS data for this category, but detecting and responding to breaches is critical. Still, it can be very impactful for accountability, visibility, incident alerting, and forensics. This category expands beyond CWE-778 Insufficient Logging to include CWE-117 Improper Output Neutralization for Logs, CWE-223 Omission of Security-relevant Information, and CWE-532Insertion of Sensitive Information into Log File.\nDescription\nReturning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time:\n* Auditable events, such as logins, failed logins, and high-value transactions, are not logged.\n* Warnings and errors generate no, inadequate, or unclear log messages.\n* Logs of applications and APIs are not monitored for suspicious activity.\n* Logs are only stored locally.\n* Appropriate alerting thresholds and response escalation processes are not in place or effective.\n* Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts.\n* The application cannot detect, escalate, or alert for active attacks in real-time or near real-time.\nYou are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control).\nHow to Prevent\nDevelopers should implement some or all the following controls, depending on the risk of the application:\n* Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis.\n* Ensure that logs are generated in a format that log management solutions can easily consume.\n* Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems.\n* Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar.\n* DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly.\n* Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later.\nThere are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting.\nExample Attack Scenarios\nScenario #1: A children's health plan provider's website operator couldn't detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years.\nScenario #2: A major Indian airline had a data breach involving more than ten years' worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time.\nScenario #3: A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator.",
        "category": "Pentesting Web"
    },
    {
        "title": "Server Side Request Forgery (SSRF)",
        "link": "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/",
        "content": "This category is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage and above-average Exploit and Impact potential ratings. As new entries are likely to be a single or small cluster of Common Weakness Enumerations (CWEs) for attention and awareness, the hope is that they are subject to focus and can be rolled into a larger category in a future edition.\nDescription\nSSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL).\nAs modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.\nHow to Prevent\nDevelopers can prevent SSRF by implementing some or all the following defense in depth controls:\nFrom Network layer\n* Segment remote resource access functionality in separate networks to reduce the impact of SSRF\n* Enforce “deny by default” firewall policies or network access control rules to block all but essential intranet traffic.Hints: ~ Establish an ownership and a lifecycle for firewall rules based on applications. ~ Log all accepted and blocked network flows on firewalls (see A09:2021-Security Logging and Monitoring Failures).\nFrom Application layer:\n* Sanitize and validate all client-supplied input data\n* Enforce the URL schema, port, and destination with a positive allow list\n* Do not send raw responses to clients\n* Disable HTTP redirections\n* Be aware of the URL consistency to avoid attacks such as DNS rebinding and “time of check, time of use” (TOCTOU) race conditions\nDo not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists.\nAdditional Measures to consider:\n* Don't deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost)\n* For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs\nExample Attack Scenarios\nAttackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as:\nScenario #1: Port scan internal servers – If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections.\nScenario #2: Sensitive data exposure – Attackers can access local files or internal services to gain sensitive information such as file:///etc/passwd and http://localhost:28017/.\nScenario #3: Access metadata storage of cloud services – Most cloud providers have metadata storage such as http://169.254.169.254/. An attacker can read the metadata to gain sensitive information.\nScenario #4: Compromise internal services – The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS).",
        "category": "Pentesting Web"
    }
]